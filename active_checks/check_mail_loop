#!/usr/bin/env python3
# Copyright (C) 2019 Checkmk GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.
"""Email server roundtrip active check
"""
import argparse
import email.utils
import logging
import os
import re
import time
from contextlib import suppress
from email.message import Message as POPIMAPMessage

from exchangelib import Message as EWSMessage  # type: ignore[import]

from cmk.utils.mailbox import (
    active_check_main,
    Args,
    CheckResult,
    FetchMailsError,
    Mailbox,
    MailID,
    MailMessages,
    Message,
)

MailDict = dict[str, MailID]


def create_argument_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(description=__doc__)

    # SEND (both SMTP and EWS)
    parser.add_argument(
        "--send-protocol",
        type=str.upper,
        choices={"SMTP", "EWS"},
        help="Protocol used for sending mails (default=SMTP)",
    )
    parser.add_argument(
        "--send-server",
        type=str,
        required=True,
        metavar="ADDRESS",
        help="Host address of the SMTP/EWS server to send the mail to",
    )
    parser.add_argument("--send-tls", action="store_true", help="Use TLS over SMTP/EWS")
    parser.add_argument(
        "--send-port",
        type=int,
        metavar="PORT",
        help="SMTP/EWS port (defaults to 25 for SMTP and to 80/443 (TLS) for EWS)",
    )
    parser.add_argument(
        "--send-username",
        type=str,
        metavar="USER",
        help="Username to use for SMTP communictation (leave empty for anonymous SMTP) or EWS connection",
    )
    parser.add_argument(
        "--send-password", type=str, metavar="PASSWORD", help="Password to authenticate SMTP/EWS"
    )

    # SEND (EWS only)
    parser.add_argument(
        "--send-no-cert-check",
        "--send-disable-cert-validation",
        action="store_true",
        help="Don't enforce SSL/TLS certificate validation",
    )
    parser.add_argument(
        "--send-client-id",
        metavar="CLIENT_ID",
        help="OAuth2 ClientID for EWS",
    )
    parser.add_argument(
        "--send-client-secret",
        metavar="CLIENT_SECRET",
        help="OAuth2 ClientSecret for EWS",
    )
    parser.add_argument(
        "--send-tenant-id",
        metavar="TENANT_ID",
        help="OAuth2 TenantID for EWS",
    )
    parser.add_argument(
        "--send-email-address",
        required=False,
        metavar="EMAIL-ADDRESS",
        help="Email address (default: same as username, only affects EWS protocol)",
    )

    parser.add_argument(
        "--mail-from", type=str, required=True, help="Use this mail address as sender address"
    )
    parser.add_argument(
        "--mail-to", type=str, required=True, help="Use this mail address as recipient address"
    )

    parser.add_argument(
        "--warning",
        type=int,
        metavar="AGE",
        help="Loop duration of the most recent mail in seconds or the average of "
        "all received mails within a single check to raise a WARNING state",
    )
    parser.add_argument(
        "--critical",
        type=int,
        metavar="AGE",
        default=3600,
        help="Loop duration in seconds of the most recent mail in seconds or the "
        "average of all received mails within a single check to raise a "
        "CRITICAL state",
    )

    default_status_dir = (
        (os.environ["OMD_ROOT"] + "/var/check_mk")
        if "OMD_ROOT" in os.environ
        else "/tmp"  # nosec B108 # BNS:13b2c8
    )
    parser.add_argument(
        "--status-dir",
        type=str,
        metavar="PATH",
        default=default_status_dir,
        help="This plugin needs a file to store information about sent, received "
        "and expected mails. Defaults to either '/tmp/' or "
        "'/omd/sites/<sitename>/var/check_mk' when executed from within an "
        "OMD site",
    )
    parser.add_argument(
        "--status-suffix",
        type=str,
        metavar="SUFFIX",
        help="Concantenated with 'check_mail_loop.SUFFIX.status' to generate "
        "the name of the status file.",
    )

    parser.add_argument(
        "--delete-messages",
        action="store_true",
        help="Delete all messages identified as being related to this check "
        "plugin. This is disabled by default, which might make your mailbox "
        "grow when you not clean it up manually.",
    )

    parser.add_argument(
        "--subject",
        type=str,
        metavar="SUBJECT",
        default="Check_MK-Mail-Loop",
        help="You can specify the subject text.",
    )

    return parser


def load_expected_mails(status_path: str) -> MailDict:
    with suppress(IOError):
        with open(status_path) as file:
            return {
                ts + "-" + key: (int(ts), int(key))  #
                for line in file  #
                for ts, key in (line.rstrip().split(" ", 1),)
            }
    return {}


def save_expected_mails(expected_mails: MailDict, status_path: str) -> None:
    if not expected_mails:
        return
    with open(status_path, "w") as file:
        file.write("\n".join("%d %s" % (ts, key) for ts, key in expected_mails.values()))
        file.write("\n")


def _regex_pattern(subject: str) -> re.Pattern:
    return re.compile(r"(?i)(?:re: |wg: )?%s ([^\s]+) ([^\s]+)" % subject)


def subject_and_received_timestamp_from_msg(
    msg: Message, protocol: str, now: int
) -> tuple[str, int]:
    if protocol in {"POP3", "IMAP"}:
        assert isinstance(msg, POPIMAPMessage)
        subject = msg.get("Subject", "")

        if "Received" in msg:
            parsed = email.utils.parsedate_tz(msg["Received"].split(";")[-1])
            rx_ts = email.utils.mktime_tz(parsed) if parsed else now
        else:
            # use current time as fallback where no Received header could be found
            rx_ts = now
    elif protocol == "EWS":
        assert isinstance(msg, EWSMessage)
        subject = msg.subject

        try:
            rx_ts = int(msg.datetime_received.timestamp())  # cast float to int
        except Exception:
            rx_ts = now
    else:
        raise NotImplementedError(f"Fetching mails is not implemented for {protocol}")

    return subject, rx_ts


def fetch_mail_timestamps(
    args: Args,
    mails: MailMessages,
    expected_mails: MailDict,
    protocol: str,
    now: int = int(time.time()),
) -> tuple[MailDict, MailDict]:
    """Fetch mails and return tuples of dicts containing timestamps of mails which have been
    not expected (anymore) and expected"""
    if not expected_mails:
        return {}, {}

    try:
        obsolete_mails: MailDict = {}
        fetched_mails: MailDict = {}
        # Now filter out the messages for this check
        pattern = _regex_pattern(args.subject)

        for index, msg in mails.items():
            msg_subject, rx_ts = subject_and_received_timestamp_from_msg(msg, protocol, now)

            matches = pattern.match(msg_subject)
            if not matches:
                logging.debug("Skip mail with subject %r", msg_subject)
                continue

            ts = matches.group(1).strip()
            key = matches.group(2).strip()

            ts_key = f"{ts}-{key}"
            if ts_key not in expected_mails:
                # Delete any "Check_MK-Mail-Loop" messages older than 24 hours, even if
                # they are not in our list
                if args.delete_messages and now - rx_ts > 24 * 3600:
                    obsolete_mails[ts_key] = index, rx_ts
                continue

            fetched_mails[ts_key] = index, rx_ts
        return obsolete_mails, fetched_mails
    except Exception as exc:
        raise FetchMailsError("Failed to fetch mails: %r" % exc) from exc


def check_mails(  # pylint: disable=too-many-branches
    warning: int,
    critical: int,
    expected_mails: MailDict,
    fetched_mails: MailDict,
) -> CheckResult:
    state = 0
    perfdata = []
    output = []

    num_pending = 0
    num_lost = 0
    durations = []
    now = int(time.time())

    # Loop all expected mails and check whether or not they have been received
    for ident, (send_ts, _unused_key) in sorted(expected_mails.items()):
        if ident in fetched_mails:
            recv_ts = fetched_mails[ident][1]
            duration = recv_ts - send_ts
            durations.append(duration)

            if critical is not None and duration >= critical:
                state = 2
            elif warning is not None and duration >= warning:
                state = max(state, 1)

            if state:
                output.append(f" (warn/crit at {warning}/{critical})")

            del expected_mails[ident]  # remove message from expect list
            # FIXME: Also remove older mails which have not yet been seen?

        else:
            # drop expecting messages when older than critical threshold,
            # but keep waiting for other mails which have not yet reached it
            if now - send_ts >= critical:
                logging.warning(
                    "Found mail with critical roundtrip time: %r (%dsec)",
                    ident,
                    now - send_ts,
                )
                del expected_mails[ident]
                num_lost += 1
                state = 2
            else:
                num_pending += 1

    if durations:
        average = sum(durations) / len(durations)
        if len(durations) == 1:
            output.insert(0, "Mail received within %d seconds" % durations[0])
        else:
            output.insert(
                0, "Received %d mails within average of %d seconds" % (len(durations), average)
            )
        # TODO: wouldn't max(durations) be useful here?
        perfdata.append(("duration", average, warning or "", critical or ""))
    else:
        output.insert(0, "Did not receive any new mail")

    if num_lost:
        output.append("Lost: %d (Did not arrive within %d seconds)" % (num_lost, critical))

    if num_pending:
        output.append("Currently waiting for %d mails" % num_pending)

    return state, ", ".join(output), perfdata


def _fetch_config_equals_send_config(args: Args) -> bool:
    args_dict = vars(args)  # Namespace to dict
    return all(
        args_dict.get(f"fetch_{param}") == args_dict.get(f"send_{param}")
        for param in [
            "protocol",
            "server",
            "tls",
            "port",
            "no_cert_check",
            "username",
            "password",
            "client_id",
            "client_secret",
            "tenant_id",
            "email_address",
        ]
    )


def check_mail_roundtrip(args: Args) -> CheckResult:
    # TODO: maybe we should use cmk.utils.paths.tmp_dir?
    status_path = "{}/check_mail_loop{}.status".format(
        args.status_dir,
        (".%s" % args.status_suffix) if args.status_suffix else "",
    )
    logging.debug("status_path: %r", status_path)
    expected_mails = load_expected_mails(status_path) or {}
    logging.debug("expected_mails: %r", expected_mails)

    with Mailbox(args) as mailbox:
        mailbox.connect()
        fetched_mail_messages: MailMessages = mailbox.fetch_mails()
        obsolete_mails, fetched_mails = fetch_mail_timestamps(
            args,
            fetched_mail_messages,
            expected_mails,
            mailbox.protocol(),
        )
        logging.debug("obsolete_mails: %r", obsolete_mails)
        logging.debug("fetched_mails: %r", fetched_mails)

        if _fetch_config_equals_send_config(args):
            new_mail = mailbox.send_mail(args)
        else:
            with Mailbox(args, "send") as send_mailbox:
                send_mailbox.connect()
                new_mail = send_mailbox.send_mail(args)
        logging.debug("sent new mail: %r", new_mail)

        expected_mails.update((new_mail,))
        state, output, perfdata = check_mails(
            args.warning,
            args.critical,
            expected_mails,
            fetched_mails,
        )
        save_expected_mails(expected_mails, status_path)
        if args.delete_messages:
            # Do not delete all messages in the inbox. Only the ones which were
            # processed before! In the meantime new ones might have come in.
            mailbox.delete_mails(fetched_mail_messages)

    return state, output, perfdata


if __name__ == "__main__":
    logging.getLogger().name = "check_mail_loop"
    active_check_main(create_argument_parser(), check_mail_roundtrip)
