#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

import ast
import email
import email.mime.text
import email.utils
import getopt
import imaplib
import os
import poplib
import random
import re
import smtplib
import socket
import ssl
import sys
import time
from typing import Union

import cmk.utils.password_store

cmk.utils.password_store.replace_passwords()

# The documentations of imaplib and poplib do not give any information about the encodings of their
# outputs (e.g. of imaplib.IMAP4.search). From the source codes, it seems to be either ASCII or
# UTF-8, so this should work.
ENCODING = 'utf-8'


def parse_exception(exc):
    exc = str(exc)
    if exc[0] == '{':
        exc = "%d - %s" % list(ast.literal_eval(exc).values())[0]
    return str(exc)


def output_check_result(rc, s, perfdata):
    stxt = ['OK', 'WARN', 'CRIT', 'UNKNOWN'][rc]
    output = '%s - %s' % (stxt, s)
    if perfdata:
        perfdata_output_entries = ['%s=%s' % (p[0], ';'.join(map(str, p[1:]))) for p in perfdata]
        output += ' | %s' % " ".join(perfdata_output_entries)
    sys.stdout.write('%s\n' % output)


def usage(msg=None):
    if msg:
        sys.stderr.write('ERROR: %s\n' % msg)
    sys.stderr.write("""
USAGE: check_mail_loop [OPTIONS]

OPTIONS:
  --smtp-server ADDRESS   Host address of the SMTP server to send the mail to
  --smtp-port PORT        Port to use for SMTP (defaults to 25)
  --smtp-username USER    Username to use for SMTP communictation
                          (leave empty for anonymous SMTP)
  --smtp-password PW      Password to authenticate SMTP
  --smtp-tls              Use TLS over SMTP (disabled by default)
  --imap-tls              Use TLS for IMAP authentification (disabled by default)

  --fetch-protocol PROTO  Set to "IMAP" or "POP3", depending on your mailserver
                          (defaults to IMAP)
  --fetch-server ADDRESS  Host address of the IMAP/POP3 server hosting your mailbox
  --fetch-port PORT       IMAP or POP3 port
                          (defaults to 110 for POP3 and 995 for POP3 with SSL and
                           143 for IMAP and 993 for IMAP with SSL)
  --fetch-username USER   Username to use for IMAP/POP3
  --fetch-password PW     Password to use for IMAP/POP3
  --fetch-ssl             Use SSL for feching the mailbox (disabled by default)

  --mail-from MAIL        Use this mail address as sender address
  --mail-to MAIL          Use this mail address as recipient address

  --warning AGE           Loop duration of the most recent mail in seconds or
                          the average of all received mails within a single
                          check to raise a WARNING state
  --critical AGE          Loop duration of the most recent mail in seconds or
                          the average of all received mails within a single
                          check to raise a CRITICAL state

  --connect-timeout       Timeout in seconds for network connects (defaults to 10)
  --status-dir PATH       This plugin needs a file to store information about
                          sent, received and expected mails. Defaults to either
                          /tmp/ or /omd/sites/<sitename>/var/check_mk when executed
                          from within an OMD site
  --status-suffix SUFFIX  Concantenated with "check_mail_loop.SUFFIX.status" to
                          generate the name of the status file. Empty by default
  --delete-messages       Delete all messages identified as being related to this
                          check plugin. This is disabled by default, which
                          might make your mailbox grow when you not clean it up
                          manually.
  --subject SUBJECT       You can specify the subject text. If choosen the subject
                          'Check_MK-Mail-Loop' will be replace by the stated text.

  -d, --debug             Enable debug mode
  -h, --help              Show this help message and exit

""")
    sys.exit(1)


class FetchMailsError(Exception):
    pass


class SendMailError(Exception):
    pass


class CleanupMailboxError(Exception):
    pass


class ForwardToECError(Exception):
    pass


def load_expected_mails(status_path):
    try:
        expected_mails = {}
        for line in open(status_path):
            ts, key = line.rstrip().split(' ', 1)
            expected_mails[ts + '-' + key] = (int(ts), int(key))
        return expected_mails
    except IOError:
        # Skip errors on not existing file
        return {}


def add_expected_msg(ts, key, expected_mails):
    expected_mails[str(ts) + '-' + str(key)] = (int(ts), key)


def save_expected_mails(expected_mails, status_path):
    lines = []
    for ts, key in expected_mails.values():
        lines.append('%d %s' % (ts, key))
    open(status_path, 'w').write('\n'.join(lines) + '\n')


def add_starttls_support(self, conn_timeout):
    name = "STARTTLS"
    typ, dat = self._simple_command(name)
    if typ != 'OK':
        raise self.error(dat[-1])

    socket.setdefaulttimeout(conn_timeout)
    self.sock = ssl.wrap_socket(self.sock)
    self.file = self.sock.makefile()

    cap = 'CAPABILITY'
    self._simple_command(cap)
    if cap not in self.untagged_responses:
        raise self.error('no CAPABILITY response from server')
    self.capabilities = tuple(self.untagged_responses[cap][-1].upper().split())


def fetch_mails(fetch_server, fetch_port, fetch_user, fetch_pass, fetch_ssl, imap_tls, conn_timeout,
                subject, delete_messages, expected_mails):
    global g_M

    if not expected_mails:
        # not expecting any mail, do not check for mails
        return {}, {}

    try:
        mails = {}
        if fetch_proto == 'POP3':
            # Get mails from POP3 mailbox
            g_M = poplib.POP3_SSL(fetch_server, fetch_port) if fetch_ssl else poplib.POP3(
                fetch_server, fetch_port)
            g_M.user(fetch_user)
            g_M.pass_(fetch_pass)

            num_messages = len(g_M.list()[1])

            for i in range(num_messages):
                index = i + 1
                lines = g_M.retr(index)[1]
                mails[i] = email.message_from_bytes(b"\n".join(lines))

        else:
            # Get mails from IMAP mailbox
            g_M = imaplib.IMAP4_SSL(fetch_server, fetch_port) if fetch_ssl else imaplib.IMAP4(
                fetch_server, fetch_port)

            g_M.login(fetch_user, fetch_pass)
            g_M.select('INBOX', readonly=False)  # select INBOX
            retcode, raw_messages = g_M.search(None, 'NOT', 'DELETED')
            messages = raw_messages[0].decode(ENCODING).strip()
            if retcode == 'OK' and messages:
                for num in messages.split():
                    try:
                        _type, data = g_M.fetch(num, '(RFC822)')
                        if isinstance(data[0], tuple):
                            mails[num] = email.message_from_bytes(data[0][1])
                    except Exception as e:
                        raise Exception('Failed to fetch mail %s (%s). Available messages: %r' %
                                        (num, parse_exception(e), messages))

        obsolete_mails = {}
        fetched_mails = {}
        # Now filter out the messages for this check
        pattern = re.compile(r'(?:Re: |WG: )?%s ([^\s]+) ([^\s]+)' % subject)
        for index, msg in mails.items():
            matches = pattern.match(msg.get('Subject', ''))
            if matches:
                ts = matches.group(1).strip()
                key = matches.group(2).strip()

                # extract received time
                rx = msg.get('Received')
                if rx:
                    parsed = email.utils.parsedate_tz(rx.split(';')[-1])
                    rx_ts = int(time.time()) if parsed is None else email.utils.mktime_tz(parsed)
                else:
                    # use current time as fallback where no Received header could be found
                    rx_ts = int(time.time())

                if "%s-%s" % (ts, key) not in expected_mails:
                    # Delete any "Check_MK-Mail-Loop" messages older than 24 hours, even if they are not in our list
                    if delete_messages and int(time.time()) - rx_ts > 24 * 3600:
                        obsolete_mails[ts + '-' + key] = (index, rx_ts)
                    continue

                fetched_mails[ts + '-' + key] = (index, rx_ts)
        return obsolete_mails, fetched_mails

    except Exception as e:
        if opt_debug:
            raise
        raise FetchMailsError('Failed to check for mails: %s' % parse_exception(e))


def send_mail(mail_from, mail_to, subject, smtp_server, smtp_port, smtp_user, smtp_pass, smtp_tls,
              expected_mails):
    now = time.time()
    key = random.randint(1, 1000)

    mail = email.mime.text.MIMEText("")
    mail['From'] = mail_from
    mail['To'] = mail_to
    mail['Subject'] = '%s %d %d' % (subject, now, key)
    mail['Date'] = email.utils.formatdate(localtime=True)

    try:
        S = smtplib.SMTP(smtp_server, smtp_port)
        if smtp_tls:
            S.starttls()
        if smtp_user:
            S.login(smtp_user, smtp_pass)
        S.sendmail(mail_from, mail_to, mail.as_string())
        S.quit()

        add_expected_msg(now, key, expected_mails)

    except Exception as e:
        if opt_debug:
            raise
        raise SendMailError('Failed to send mail: %s' % parse_exception(e))


def check_mails(warning, critical, expected_mails, fetched_mails):
    state = 0
    perfdata = []
    output = []

    num_received = 0
    num_pending = 0
    num_lost = 0
    duration = None
    now = time.time()

    # Loop all expected mails and check whether or not they have been received
    for ident, (send_ts, _unused_key) in sorted(expected_mails.items()):
        if ident in fetched_mails:
            recv_ts = fetched_mails[ident][1]

            if duration is None:
                duration = recv_ts - send_ts
            else:
                duration = (duration + (recv_ts - send_ts)) / 2.0  # average

            if critical is not None and duration >= critical:
                state = 2
            elif warning is not None and duration >= warning:
                state = max(state, 1)

            if state:
                output.append(' (warn/crit at %s/%s)' % (warning, critical))

            del expected_mails[ident]  # remove message from expect list
            num_received += 1
            # FIXME: Also remove older mails which have not yet been seen?

        else:
            # drop expecting messages when older than critical threshold,
            # but keep waiting for other mails which have not yet reached it
            if now - send_ts >= critical:
                del expected_mails[ident]
                num_lost += 1
                state = 2
            else:
                num_pending += 1

    if num_received == 1:
        output.insert(0, 'Mail received within %d seconds' % (0 if duration is None else duration))
        perfdata.append(('duration', duration, warning or '', critical or ''))
    elif num_received > 1:
        output.insert(
            0, 'Received %d mails within average of %d seconds' %
            (num_received, (0 if duration is None else duration)))
        perfdata.append(('duration', duration, warning or '', critical or ''))
    else:
        output.insert(0, 'Did not receive any new mail')

    if num_lost:
        output.append('Lost: %d (Did not arrive within %d seconds)' % (num_lost, critical))

    if num_pending:
        output.append('Currently waiting for %d mails' % num_pending)

    return state, ", ".join(output), perfdata


def cleanup_mailbox(obsolete_mails, fetched_mails):
    if not g_M:
        return  # do not deal with mailbox when none sent yet

    try:
        # Do not delete all messages in the inbox. Only the ones which were
        # processed before! In the meantime there might be occured new ones.
        for mail_index, _unused_recv_ts in list(fetched_mails.values()) + list(
                obsolete_mails.values()):
            if isinstance(g_M, poplib.POP3):
                response = g_M.dele(mail_index + 1).decode(ENCODING)
                if not response.startswith("+OK"):
                    raise Exception("Response from server: [%s]" % response)
            elif isinstance(g_M, imaplib.IMAP4):
                response = g_M.store(mail_index, '+FLAGS', '\\Deleted')[0]
                if response != 'OK':
                    raise Exception("Response from server: [%s]" % response)

        if isinstance(g_M, imaplib.IMAP4):
            g_M.expunge()

    except Exception as e:
        if opt_debug:
            raise
        raise CleanupMailboxError('Failed to delete mail: %s' % parse_exception(e))


def close_mailbox():
    if isinstance(g_M, poplib.POP3):
        g_M.quit()
    elif isinstance(g_M, imaplib.IMAP4):
        g_M.close()
        g_M.logout()


# TODO: Nuke these global variables, just pass them around...
g_M = None  # type: Union[None, poplib.POP3, imaplib.IMAP4]
opt_debug = False
fetch_proto = 'IMAP'


def parse_arguments(sys_args):
    global opt_debug
    global fetch_proto

    if sys_args is None:
        sys_args = sys.argv[1:]

    short_options = 'dh'
    long_options = [
        'smtp-server=',
        'smtp-port=',
        'smtp-username=',
        'smtp-password=',
        'smtp-tls',
        'imap-tls',
        'fetch-protocol=',
        'fetch-server=',
        'fetch-port=',
        'fetch-username=',
        'fetch-password=',
        'fetch-ssl',
        'mail-from=',
        'mail-to=',
        'warning=',
        'critical=',
        'connect-timeout=',
        'delete-messages',
        'help',
        'status-dir=',
        'status-suffix=',
        'subject=',
        "debug",
    ]

    required_params = [
        'smtp-server',
        'fetch-server',
        'fetch-username',
        'fetch-password',
        'mail-from',
        'mail-to',
    ]

    try:
        opts, _args = getopt.getopt(sys_args, short_options, long_options)
    except getopt.GetoptError as err:
        sys.stderr.write("%s\n" % err)
        sys.exit(1)

    smtp_server = None
    smtp_port = None
    smtp_user = None
    smtp_pass = None
    smtp_tls = False
    fetch_server = None
    fetch_port = None
    fetch_user = None
    fetch_pass = None
    fetch_ssl = False
    imap_tls = False
    mail_from = None
    mail_to = None
    warning = None
    critical = 3600
    conn_timeout = 10
    delete_messages = False
    status_dir = None
    status_suffix = None
    subject = 'Check_MK-Mail-Loop'

    for o, a in opts:
        if o in ['-h', '--help']:
            usage()
        elif o in ['-d', '--debug']:
            opt_debug = True
        elif o == '--smtp-server':
            smtp_server = a
        elif o == '--smtp-port':
            smtp_port = int(a)
        elif o == '--smtp-username':
            smtp_user = a
        elif o == '--smtp-password':
            smtp_pass = a
        elif o == '--smtp-tls':
            smtp_tls = True
        elif o == '--fetch-protocol':
            fetch_proto = a
        elif o == '--fetch-server':
            fetch_server = a
        elif o == '--fetch-port':
            fetch_port = int(a)
        elif o == '--fetch-username':
            fetch_user = a
        elif o == '--fetch-password':
            fetch_pass = a
        elif o == '--imap-tls':
            imap_tls = True
        elif o == '--fetch-ssl':
            fetch_ssl = True
        elif o == '--mail-from':
            mail_from = a
        elif o == '--mail-to':
            mail_to = a
        elif o == '--warning':
            warning = int(a)
        elif o == '--critical':
            critical = int(a)
        elif o == '--connect-timeout':
            conn_timeout = int(a)
        elif o == '--delete-messages':
            delete_messages = True
        elif o == '--status-dir':
            status_dir = a
        elif o == '--status-suffix':
            status_suffix = a
        elif o == '--subject':
            subject = a

    d_opts = dict(opts)
    for required_param in required_params:
        required_opt = "--%s" % required_param
        if required_opt not in d_opts:
            usage('The needed parameter %s is missing' % required_opt)

    if fetch_proto not in ['IMAP', 'POP3']:
        usage('The given protocol is not supported.')

    if fetch_port is None:
        if fetch_proto == 'POP3':
            fetch_port = 995 if fetch_ssl else 110
        else:
            fetch_port = 993 if fetch_ssl else 143

    if not status_dir:
        status_dir = os.environ.get('OMD_ROOT')
        if status_dir:
            status_dir += '/var/check_mk'
        else:
            status_dir = '/tmp'

    if status_suffix:
        status_path = '%s/check_mail_loop.%s.status' % (status_dir, status_suffix)
    else:
        status_path = '%s/check_mail_loop.status' % (status_dir)

    return (
        smtp_server,
        smtp_port,
        smtp_user,
        smtp_pass,
        smtp_tls,
        fetch_server,
        fetch_port,
        fetch_user,
        fetch_pass,
        fetch_ssl,
        imap_tls,
        mail_from,
        mail_to,
        warning,
        critical,
        conn_timeout,
        delete_messages,
        status_path,
        subject,
    )


def main(sys_args=None):
    smtp_server, smtp_port, smtp_user, smtp_pass, smtp_tls, fetch_server, fetch_port,\
        fetch_user, fetch_pass, fetch_ssl, imap_tls, mail_from, mail_to, warning,\
        critical, conn_timeout, delete_messages, status_path, subject = parse_arguments(sys_args)

    # Enable showing protocol messages of imap for debugging
    if fetch_proto == 'IMAP' and opt_debug:
        # Bug in mypy's typeshed.
        imaplib.Debug = 4  # type: ignore[attr-defined]

    try:
        expected_mails = load_expected_mails(status_path)

        obsolete_mails, fetched_mails = fetch_mails(fetch_server, fetch_port, fetch_user,
                                                    fetch_pass, fetch_ssl, imap_tls, conn_timeout,
                                                    subject, delete_messages, expected_mails)

        send_mail(mail_from, mail_to, subject, smtp_server, smtp_port, smtp_user, smtp_pass,
                  smtp_tls, expected_mails)

        state, output, perfdata = check_mails(warning, critical, expected_mails, fetched_mails)

        if delete_messages:
            cleanup_mailbox(obsolete_mails, fetched_mails)

        save_expected_mails(expected_mails, status_path)

        return state, output, perfdata

    except FetchMailsError as e:
        return 3, str(e), None

    except SendMailError as e:
        return 3, str(e), None

    except CleanupMailboxError as e:
        return 2, str(e), None

    except Exception as e:
        if opt_debug:
            raise
        return 2, 'Unhandled exception: %s' % parse_exception(e), None

    finally:
        close_mailbox()


if __name__ == "__main__":
    exitcode, info, perf = main()
    output_check_result(exitcode, info, perf)
    sys.exit(exitcode)
