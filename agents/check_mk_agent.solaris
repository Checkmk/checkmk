#!/usr/bin/bash
# Copyright (C) 2019 Checkmk GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

: "${MK_RUN_SYNC_PARTS=true}"

$MK_RUN_SYNC_PARTS || {
    echo "Exclusive cache update and live-update (MK_RUN_SYNC_PARTS=false) is not suported on this system" >&2
    exit 1
}

# Remove locale settings to eliminate localized outputs where possible

export LC_ALL=C
unset LANG

export MK_LIBDIR=${MK_LIBDIR:-/usr/lib/check_mk_agent}
export MK_CONFDIR=${MK_CONFDIR:-/etc/check_mk}
export MK_VARDIR=${MK_VARDIR:-/var/lib/check_mk_agent}

# Optionally set a tempdir for all subsequent calls
#export TMPDIR=

# Provide information about the remote host. That helps when data
# is being sent only once to each remote host.
if [ "$REMOTE_HOST" ] ; then
    export REMOTE=$REMOTE_HOST
elif [ "$SSH_CLIENT" ] ; then
    export REMOTE=${SSH_CLIENT%% *}
fi

# All executables in PLUGINSDIR will simply be executed and their
# ouput appended to the output of the agent. Plugins define their own
# sections and must output headers with '<<<' and '>>>'
PLUGINSDIR=$MK_LIBDIR/plugins

# All executables in LOCALDIR will by executabled and their
# output inserted into the section <<<local>>>. Please refer
# to online documentation for details.
LOCALDIR=$MK_LIBDIR/local

# close standard input (for security reasons) and stderr
if [ "$1" = -d ]
then
    set -xv
else
    exec </dev/null 2>/dev/null
fi

# Function to replace "if type [somecmd]" idiom
# 'command -v' tends to be more robust vs 'which' and 'type' based tests
inpath() {
    command -v "${1:?No command to test}" >/dev/null 2>&1
}

read_python_version() {
    if inpath "$1"; then
        version=$($1 -c 'import sys; print("%s.%s"%(sys.version_info[0], sys.version_info[1]))')

        major=${version%%.*}
        minor=${version##*.}

        if [ "$major" -eq "$2" ] && [ "$minor" -ge "$3" ]; then
            echo "$1"
            return 0
        fi
    fi
    return 1
}

PYTHON3=$(read_python_version python3 3 4 || read_python_version python 3 4)
PYTHON2=$(read_python_version python2 2 6 || read_python_version python 2 6)
if [ -f "$MK_CONFDIR/python_path.cfg" ]; then
    # shellcheck source=/dev/null
    . "$MK_CONFDIR/python_path.cfg"
fi
export PYTHON2 PYTHON3

if [ -z "$PYTHON2" ] && [ -z "$PYTHON3" ]; then
    NO_PYTHON=true
elif [ -n "$PYTHON3" ] && [ "$($PYTHON3 -c 'pass' > /dev/null 2>&1; echo $?)" -eq 127 ]; then
    WRONG_PYTHON_COMMAND=true
elif [ -z "$PYTHON3" ] && [ "$($PYTHON2 -c 'pass' > /dev/null 2>&1; echo $?)" -eq 127 ]; then
    WRONG_PYTHON_COMMAND=true
fi

file_age() {
    /usr/bin/perl -e 'if (! -f $ARGV[0]){die "0000000"};$mtime=(stat($ARGV[0]))[9];print ($^T-$mtime);' "$1"
}

file_mtime () {
    /usr/bin/perl -e 'if (! -f $ARGV[0]){die "0000000"};$mtime=(stat($ARGV[0]))[9];print ($mtime);' "$1"
}


function run_mrpe() {
    local descr=$1
    shift
    local cmdline="$@"

    echo '<<<mrpe>>>'

    OUTPUT=$(eval "$cmdline")

    echo -n "$descr $? $OUTPUT" | tr \\n \\1
    echo
}

export -f run_mrpe


# Runs a command asynchronous by use of a cache file
function run_cached () {
    local mrpe=0
    local append_age=0
    # TODO: this function is unable to handle mulitple args at once
    #       for example: -s -m won't work, it is read as single token "-s -m"

    if [ "$1" = -s ] ; then local section="echo '<<<$2>>>' ; " ; shift ; fi
    if [ "$1" = -m ] ; then local mrpe=1 ; shift ; fi
    if [ "$1" = "-ma" ] ; then local mrpe=1 ; local append_age=1 ; shift ; fi
    local NAME=$1
    local MAXAGE=$2
    shift 2
    local CMDLINE="$section$@"
    local AGE

    if [ ! -d $MK_VARDIR/cache ]; then mkdir -p $MK_VARDIR/cache ; fi
    if [ "$mrpe" = 1 ] ; then
        CACHEFILE="$MK_VARDIR/cache/mrpe_$NAME.cache"
    else
        CACHEFILE="$MK_VARDIR/cache/$NAME.cache"
    fi

    # Check if the creation of the cache takes suspiciously long and return
    # nothing if the age (access time) of $CACHEFILE.new is twice the MAXAGE
    if [ -e "$CACHEFILE.new" ] ; then
        AGE=$(file_age "$CACHEFILE.new")
        if [ $AGE -ge $((MAXAGE * 2)) ] ; then
            fuser -k "$CACHEFILE.new" >/dev/null 2>&1
            rm -f "$CACHEFILE.new"
        fi
    fi

    # Check if cache file exists and is recent enough
    if [ -s "$CACHEFILE" ] ; then
        local MTIME
        MTIME=$(file_mtime "$CACHEFILE")
        AGE=$(file_age "$CACHEFILE")
        if [ $AGE -le $MAXAGE ] ; then local USE_CACHEFILE=1 ; fi
        # Output the file in any case, even if it is
        # outdated. The new file will not yet be available
        if [ $append_age -eq 1 ] ; then
            # insert the cached-string before the pipe (first -e)
            # or, if no pipe found (-e t) append it (third -e),
            # but only once and on the second line (2) (first line is section header,
            # all further lines are long output)
            cat "$CACHEFILE" | sed -e "2s/|/ (Cached: ${AGE}\/${MAXAGE}s)|/" -e t -e "2s/$/ (Cached: ${AGE}\/${MAXAGE}s)/"
        else
            CACHE_INFO="cached($MTIME,$MAXAGE)"
            if [[ $NAME == local_* ]]; then
                # prefix CACHE_INFO, but skip any headers and lines with existing CACHE_INFO
                sed -e "/^<<<.*>>>/{p;d;}; /^cached([0-9]*,[0-9]*)/{p;d;}; s/^/${CACHE_INFO} /" "${CACHEFILE}"
            else
                # insert CACHE_INFO in header, but skip headers with existing CACHE_INFO
                sed -e '/^<<<.*\(:cached(\).*>>>/{p;d;}; s/^<<<\([^>]*\)>>>$/<<<\1:'"${CACHE_INFO}"'>>>/' "${CACHEFILE}"
            fi
        fi
    fi

    # Cache file outdated and new job not yet running? Start it
    if [ -z "$USE_CACHEFILE" ] && [ ! -e "$CACHEFILE.new" ] ; then
        if [ $mrpe -eq 1 ] ; then
            echo "set -o noclobber ; exec > \"$CACHEFILE.new\" || exit 1 ; run_mrpe $NAME \"$CMDLINE\" && mv \"$CACHEFILE.new\" \"$CACHEFILE\" || rm -f \"$CACHEFILE\" \"$CACHEFILE.new\"" | nohup /usr/bin/bash >/dev/null 2>&1 &
        else
            echo "set -o noclobber ; exec > \"$CACHEFILE.new\" || exit 1 ; $CMDLINE && mv \"$CACHEFILE.new\" \"$CACHEFILE\" || rm -f \"$CACHEFILE\" \"$CACHEFILE.new\"" | nohup /usr/bin/bash >/dev/null 2>&1 &
        fi
    fi
}


echo "<<<check_mk>>>"
echo "Version: 2.0.0p39"
echo "AgentOS: solaris"
echo "Hostname: $(hostname)"
echo "AgentDirectory: $MK_CONFDIR"
echo "DataDirectory: $MK_VARDIR"
echo "SpoolDirectory: $SPOOLDIR"
echo "PluginsDirectory: $PLUGINSDIR"
echo "LocalDirectory: $LOCALDIR"


# Find out what zone we are running in
# Treat all pre-Solaris 10 systems as "global"
if type zonename &>/dev/null
then
    zonename=$(zonename)
    pszone="-z $zonename"
else
    zonename="global"
    pszone="-A"
fi


section_job() {
    # Get statistics about monitored jobs.

    _cat_files() {
        # read file names from stdin and write like `head -n -0 -v file`
        while read -r file; do
            printf "==> %s <==\n" "${file##./}"
            cat "${file}"
        done
    }

    (
        cd "${MK_VARDIR}/job" 2>/dev/null || return
        printf "<<<job>>>\n"
        for user in *; do
            (
                cd "${user}" 2>/dev/null || return # return from subshell only
                # This folder is owned (and thus writable) by the user that ran the jobs.
                # The agent (root) must not read files that are not owned by the user.
                # This prevents symlink or hardlink attacks.
                find -L . -type f -user "${user}" | _cat_files
            )
        done
    )
}

section_job


# Filesystem usage for UFS and VXFS
echo '<<<df>>>'
for fs in ufs vxfs samfs lofs tmpfs
do
    df -l -k -F $fs 2>/dev/null | sed 1d | grep -v "^[^ ]*/lib/[^ ]*\.so\.1 " | \
    while read Filesystem kbytes used avail capacity Mountedon
    do
        kbytes=$(($used + $avail))
        echo "$Filesystem $fs $kbytes $used $avail $capacity $Mountedon"
    done
done

# Filesystem usage for ZFS
if type zfs &>/dev/null
then
    echo '<<<zfsget>>>'
    zfs get -t filesystem,volume -Hp name,quota,used,avail,mountpoint,type 2>/dev/null
    if [ $? -ne 0  ] ; then
        zfs get -Hp name,referenced,avail,mountpoint,type | sed 's/referenced/used/g'
    fi
    echo '[df]'
    df -l -k -F zfs 2>/dev/null | sed 1d
fi

# ZFS arc cache
# newer Solaris (>=11.3) do not provide hits and misses via mdb -k
echo '<<<zfs_arc_cache>>>'
if type kstat &>/dev/null
then
    kstat -p zfs:0:arcstats | sed -e 's/.*arcstats://g' | awk '{printf "%s = %s\n", $1, $2;}'

elif type mdb &>/dev/null
then
    echo '::arc' | mdb -k
fi

# Processes
echo '<<<ps>>>'
# The default solaris ps command strips the command lines of the processes. But for good process
# matching on the server we really need to whole command line. On linux there are arguments to
# make ps output the whole command line, but on solaris this seems to be missing. We use the ucb
# ps command to get the full command line instead. What a hack.
if [ -x /usr/ucb/ps ]; then
    UCB_PS=$(/usr/ucb/ps -agwwwx)
    PS=$(ps -o "user=USER............" -o vsz,rss,pcpu,etime,pid,args $pszone | \
         sed -e 1d -e 's/ *\([^ ]*\) *\([^ ]*\) *\([^ ]*\) *\([^ ]*\) *\([^ ]*\) *\([^ ]*\) */(\1,\2,\3,\4\/\5,\6) /')
    while read -r LINE; do
        STATS=${LINE%) *}
        PID=${STATS##*,}

        # Directly use ps output when line is too slow to be stripped
        if [ ${#LINE} -lt 100 ]; then
            echo "$LINE"
            continue
        fi

        CMD=$(echo "$UCB_PS" | grep "^[ ]*$PID " | head -n1 | \
              awk '{ s = ""; for (i = 5; i <= NF; i++) s = s $i " "; print s }')
        # Only use the ucb ps line when it's not empty (process might already been gone)
        if [ -z "$CMD" ]; then
            echo "$LINE"
        else
            echo "${STATS}) ${CMD}"
        fi
    done <<< "$PS"
else
    ps -o "user=USER............" -o vsz,rss,pcpu,etime,pid,args $pszone | \
	sed -e 1d -e 's/ *\([^ ]*\) *\([^ ]*\) *\([^ ]*\) *\([^ ]*\) *\([^ ]*\) *\([^ ]*\) */(\1,\2,\3,\4\/\5,\6) /'
fi

# Statgrab
# source: http://www.i-scream.org/libstatgrab/
# binary: http://www.opencsw.org/
if type statgrab &>/dev/null
then
    statgrab_vars="const. cpu. disk. general. mem. page. swap. user."
    statgrab_sections="cpu disk page"

    # Collect net stats in the global zone and in local zones if dlstat is present.
    if [ "$zonename" == "global" ] || type dlstat &>/dev/null
    then
        statgrab_vars="$statgrab_vars net."
        statgrab_sections="$statgrab_sections net"
    fi

    statgrab $statgrab_vars | grep -v md 1> /tmp/statgrab.$$
    for s in $statgrab_sections
    do
        echo "<<<statgrab_$s>>>"
        grep "^$s\." /tmp/statgrab.$$ | cut -d. -f2-99 | sed 's/ *= */ /'
    done

    # <<<statgrab_mem>>> info is preferred over <<<solaris_mem>>>
    # since solaris_mem is under suspicion to be buggy.
    echo '<<<statgrab_mem>>>'
    egrep "^(swap|mem)\." /tmp/statgrab.$$ | sed 's/ *= */ /'

    [ -f /tmp/statgrab.$$ ] && rm -f /tmp/statgrab.$$

else
    # Memory
    # <<<solaris_mem>>> should be used if statgrab is missing and top is available.
    if [ -x /usr/bin/top ] || [ -x /usr/local/bin/top ]
    then
        echo "<<<solaris_mem>>>"
        if [ -x /usr/bin/top ]; then /usr/bin/top | grep '^Memory:'; fi
        if [ -x /usr/local/bin/top ]; then /usr/local/bin/top | grep '^Memory:'; fi
    fi
fi

# /proc/cpu
# Simulated Output of Linux /proc/cpu
echo '<<<cpu>>>'
load=$(uptime|sed -e 's;.*average: \([0-9]\{1,\}\.[0-9]\{1,\}\), \([0-9]\{1,\}\.[0-9]\{1,\}\), \([0-9]\{1,\}\.[0-9]\{1,\}\).*;\1 \2 \3;')
nthreads=$(($(ps -AL | wc -l)))
procs=$(($(psrinfo | wc -l)))
echo $load 1/$nthreads $$ $procs


# zpool status
if [ -x /sbin/zpool ]; then
    run_cached -s zpool_status 120 "/sbin/zpool status -x"

    echo '<<<zpool>>>'
    zpool list
fi

# Solaris doesn't always give a consisten output on uptime, thus include side information
# Tested in VM for solaris 10/11
echo '<<<uptime>>>'
ctime=`nawk 'BEGIN{print srand()}'`;
btime=`kstat '-p' 'unix:::boot_time' 2>&1|grep 'boot_time'|awk '{print $2}'`;
echo $(($ctime - $btime));
echo '[uptime_solaris_start]'
uname -a
zonename
uptime
kstat -p unix:0:system_misc:snaptime
echo '[uptime_solaris_end]'

# NTP
ps -o comm $pszone | grep -w .*ntpd &>/dev/null
if [ $? -eq 0 ]
then
    echo '<<<ntp>>>'
    ntpq -np | sed -e 1,2d -e 's/^\(.\)/\1 /' -e 's/^ /%/'
fi

if type prtdiag >/dev/null 2>&1
then
    # prtdiag does not work in local zones
    if [ "$zonename" == "global" ]
    then
        run_cached -s solaris_prtdiag_status 300 '/usr/sbin/prtdiag 1>/dev/null 2>&1; echo $?'
    fi
fi

# TCP Connection stats
echo '<<<tcp_conn_stats>>>'
netstat -n -a -f inet -P tcp | tail  +5 | \
nawk '{ c[$7]++; } END { for (x in c) { print x, c[x]; } }'


# Multipathing
if type mpathadm &>/dev/null
then
    if [ "$zonename" == "global" ]
    then
        echo '<<<solaris_multipath>>>'
        mpathadm list LU | nawk '{if(NR%3==1){dev=$1}
                                  if(NR%3==2){tc=$NF}
                                  if(NR%3==0){printf "%s %s %s\n",dev,tc,$NF}}'
    fi
fi


# Fileinfo-Check: put patterns for files into /etc/check_mk/fileinfo.cfg
perl -e '
use File::Glob "bsd_glob";
my @patterns = ();
foreach (bsd_glob("$ARGV[0]/fileinfo.cfg"), bsd_glob("$ARGV[0]/fileinfo.d/*")) {
    open my $handle, "<", $_ or next;
    while (<$handle>) {
        chomp;
        next if /^\s*(#|$)/;
        my $pattern = $_;
        $pattern =~ s/\$DATE:(.*?)\$/substr(`date +"$1"`, 0, -1)/eg;
        push @patterns, $pattern;
    }
    warn "error while reading $_: $!\n" if $!;
    close $handle;
}
exit if ! @patterns;

print "<<<fileinfo:sep(124)>>>\n", time, "\n[[[header]]]\nname|status|size|time\n[[[content]]]\n";

foreach (@patterns) {
    foreach (bsd_glob("$_")) {
        if (! -f) {
            print "$_|missing\n" if ! -d;
        } elsif (my @infos = stat) {
            print "$_|ok|$infos[7]|$infos[9]\n";
        } else {
            print "$_|stat failed: $!\n";
        }
    }
}
' -- "$MK_CONFDIR"


# Libelle Business Shadow
if type trd >/dev/null 2>&1
then
    echo '<<<libelle_business_shadow:sep(58)>>>'
    trd -s
fi

# Displaying Information About Faults or Defects
# If there are no faults the output of this command will be empty.
if type fmadm >/dev/null 2>&1
then
    echo '<<<solaris_fmadm:sep(58)>>>'
    fmadm faulty
fi

# Getting Information About Services Running on Solaris
# We can get a list of all service instances, including disabled
# or incomplete ones by 'svcs -a'
if type svcs > /dev/null 2>&1
then
    echo '<<<solaris_services>>>'
    svcs -a
fi

# MK's Remote Plugin Executor
if test -f "$MK_CONFDIR/mrpe.cfg"
then
    echo '<<<mrpe>>>'
    grep -v '^ *#' "$MK_CONFDIR/mrpe.cfg" | grep -v '^ *$' | \
    while read descr cmdline
    do
        interval=
        args="-m"
        if [[ $cmdline =~ \(([^\)]*)\)[[:space:]](.*) ]]
        then
            parameters=${BASH_REMATCH[1]}
            cmdline=${BASH_REMATCH[2]}

            # split multiple parameter assignments
            for par in $(echo $parameters | tr ":" "\n")
            do
                # split each assignment
                key=$(echo $par | cut -d= -f1)
                value=$(echo $par | cut -d= -f2)

                if [ "$key" = "interval" ] ; then
                    interval=$value
                elif [ "$key" = "appendage" ] ; then
                    args="-ma"
                fi
            done
        fi

        if [ -z "$interval" ]
        then
            run_mrpe $descr "$cmdline"
        else
            run_cached $args $descr $interval "$cmdline"
        fi
    done
fi

# Local checks
if cd $LOCALDIR 2>/dev/null
then
    echo '<<<local:sep(0)>>>'
    for skript in $(ls)
    do
        if [ -x "$skript" ] ; then
            ./$skript
        fi
    done

    # Call some plugins only every X'th second
    for skript in [1-9]*/* ; do
        if [ -x "$skript" ] ; then
            run_cached local_${skript//\//\#} ${skript%/*} "$skript"
        fi
    done

fi

add_failed_python_plugin() {
    if [ -z "$FAILED_PYTHON_PLUGINS" ]; then
        FAILED_PYTHON_PLUGINS=("$1")
    else
        FAILED_PYTHON_PLUGINS=("${FAILED_PYTHON_PLUGINS[@]}" "$1")
    fi
}

run_agent_plugin() {
    if [ "${1:(0):(2)}" == "./" ]; then
        agent_plugin="${1:2}"
    else
        agent_plugin="$1"
    fi
    extension="${agent_plugin##*.}"
    filename="${agent_plugin%.*}"

    # Execute all non python plugins with ./foo
    if [ "$extension" != "py" ]; then
        ./"$agent_plugin"
        return
    fi

    if [ "${filename:(-2):(2)}" != "_2" ]; then
        if [ -n "$NO_PYTHON" ] || [ -n "$WRONG_PYTHON_COMMAND" ]; then
            add_failed_python_plugin "$agent_plugin"
            return
        fi
        if [ -n "$PYTHON3" ]; then
            $PYTHON3 "$agent_plugin"
            return
        fi
        if [ ! -e "${filename}_2.py" ]; then
            add_failed_python_plugin "$agent_plugin (Missing Python 3 installation)"
            return
        fi
        return
    fi

    if [ -x "${filename%??}.py" ] && [ -n "$PYTHON3" ]; then
        return
    fi

    if [ -n "$PYTHON2" ]; then
        $PYTHON2 "$agent_plugin"
        return
    fi

    add_failed_python_plugin "$agent_plugin (missing Python 2 installation)"
}

export -f run_agent_plugin


# Plugins
if cd $PLUGINSDIR 2>/dev/null
then
    for skript in $(ls)
    do
        if [ -x "$skript" ] ; then
            run_agent_plugin $skript
        fi
    done

    # Call some plugins only every X'th second
    for skript in [1-9]*/* ; do
        if [ -x "$skript" ] ; then
            run_cached plugins_${skript//\//\#} ${skript%/*} run_agent_plugin "$skript"
        fi
    done
fi


if [ -n "$FAILED_PYTHON_PLUGINS" ]; then
    echo "<<<check_mk>>>"
    echo "FailedPythonPlugins: ${FAILED_PYTHON_PLUGINS[*]}"
    if [ -n "$NO_PYTHON" ]; then
        echo "FailedPythonReason: No suitable python installation found."
    elif [ -n "$WRONG_PYTHON_COMMAND" ]; then
        echo "FailedPythonReason: Configured python command not found."
    fi
fi
