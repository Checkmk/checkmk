#!/usr/bin/bash
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

#
# BEGIN COMMON AGENT CODE
#

get_file_mtime() {
    stat -c %Y "${1}" 2>/dev/null ||
        stat -f %m "${1}" 2>/dev/null ||
        perl -e 'if (! -f $ARGV[0]){die "0000000"};$mtime=(stat($ARGV[0]))[9];print $mtime."\n";' "${1}"
}

#
# END COMMON AGENT CODE
#

set_variable_defaults() {
    : "${MK_LIBDIR:=/usr/lib/check_mk_agent}"
    : "${MK_CONFDIR:=/etc/check_mk}"
    : "${MK_VARDIR:=/var/lib/check_mk_agent}"
    : "${MK_LOGDIR:=/var/log/check_mk_agent}"

    # some 'booleans'
    [ "${MK_RUN_SYNC_PARTS}" = "false" ] || MK_RUN_SYNC_PARTS=true
    [ "${MK_RUN_ASYNC_PARTS}" = "false" ] || MK_RUN_ASYNC_PARTS=true
}

preamble_1() {
    # Remove locale settings to eliminate localized outputs where possible

    export LC_ALL=C
    unset LANG

    export MK_LIBDIR
    export MK_CONFDIR
    export MK_VARDIR
    export MK_LOGDIR

    # Optionally set a tempdir for all subsequent calls
    #export TMPDIR=

    # Provide information about the remote host. That helps when data
    # is being sent only once to each remote host.
    if [ "$REMOTE_HOST" ]; then
        export REMOTE=$REMOTE_HOST
    elif [ "$SSH_CLIENT" ]; then
        export REMOTE=${SSH_CLIENT%% *}
    fi

    # All executables in PLUGINSDIR will simply be executed and their
    # ouput appended to the output of the agent. Plugins define their own
    # sections and must output headers with '<<<' and '>>>'
    PLUGINSDIR=$MK_LIBDIR/plugins

    # All executables in LOCALDIR will by executabled and their
    # output inserted into the section <<<local>>>. Please refer
    # to online documentation for details.
    LOCALDIR=$MK_LIBDIR/local

    DEBUG=false
    LOG_SECTION_TIME=false
    while test -n "$1"; do
        case "$1" in
            -d)
                DEBUG=true
                shift
                ;;

            -p)
                LOG_SECTION_TIME=true
                shift
                ;;

            *)
                shift
                ;;
        esac
    done

    # close standard input (for security reasons) and stderr
    if $DEBUG; then
        set -xv
    else
        exec </dev/null 2>/dev/null
    fi

    DISABLE_CACHING=false
    PROFILING_CONFIG="$MK_CONFDIR/profiling.cfg"
    if $LOG_SECTION_TIME; then
        # If option '-p' is set disable caching in order to get the whole execution time
        DISABLE_CACHING=true
    elif [ -e "$PROFILING_CONFIG" ]; then
        # Config vars:
        #   LOG_SECTION_TIME=true/false
        #   DISABLE_CACHING=true/false

        # If LOG_SECTION_TIME=true via profiling.cfg do NOT disable caching in order
        # to get the real execution time during operation.
        # shellcheck disable=SC1090
        . "$PROFILING_CONFIG"
    fi

    PROFILING_LOGFILE_DIR="${MK_LOGDIR}/profiling/$(date +%Y%m%d_%H%M%S)"
    if $LOG_SECTION_TIME; then
        mkdir -p "$PROFILING_LOGFILE_DIR"
    fi
}

_log_section_time() {
    local section_func="$*"

    local base_name=${section_func//[^a-zA-Z0-9._-]/_}
    profiling_logfile="${PROFILING_LOGFILE_DIR}/${base_name}.log"

    # TODO In the future
    # echo "<<<check_mk_agent_profiling>>>"
    if $LOG_SECTION_TIME; then
        start="$(perl -MTime::HiRes=time -le 'print time()')"
        { time $section_func; } 2>>"$profiling_logfile"
        end="$(perl -MTime::HiRes=time -le 'print time()')"
        echo -e "runtime $(echo "$end - $start" | bc)\n" >>"$profiling_logfile"
    else
        $section_func
    fi
}

preamble_2() {
    export PROFILING_LOGFILE_DIR
    export LOG_SECTION_TIME
    export -f _log_section_time
}

read_python_version() {
    if which "$1" >/dev/null 2>&1 && [ "$($1 -c 'import sys; print(sys.version_info[1])')" -ge $2 ]; then
        echo "$1"
        return 0
    fi
    return 1
}

preamble_3() {
    PYTHON3=$(read_python_version python3 4)
    PYTHON2=$(read_python_version python2 6 || read_python_version python 6)
    if [ -f "$MK_CONFDIR/python_path.cfg" ]; then
        # shellcheck source=/dev/null
        . "$MK_CONFDIR/python_path.cfg"
    fi
    export PYTHON2 PYTHON3

    if [ -z "$PYTHON2" ] && [ -z "$PYTHON3" ]; then
        NO_PYTHON=true
    elif [ -n "$PYTHON3" ] && [ "$($PYTHON3 -c 'pass' > /dev/null 2>&1; echo $?)" -eq 127 ]; then
        WRONG_PYTHON_COMMAND=true
    elif [ -z "$PYTHON3" ] && [ "$($PYTHON2 -c 'pass' > /dev/null 2>&1; echo $?)" -eq 127 ]; then
        WRONG_PYTHON_COMMAND=true
    fi
}

file_age() {
    /usr/bin/perl -e 'if (! -f $ARGV[0]){die "0000000"};$mtime=(stat($ARGV[0]))[9];print ($^T-$mtime);' "$1"
}

preamble_4() {
    if [ -f "$MK_CONFDIR/exclude_sections.cfg" ]; then
        # shellcheck source=/dev/null
        . "$MK_CONFDIR/exclude_sections.cfg"
    fi
}

preamble_5() {
    # Find out what zone we are running in
    # Treat all pre-Solaris 10 systems as "global"
    if type zonename &>/dev/null; then
        zonename=$(zonename)
        pszone="-z $zonename"
    else
        zonename="global"
        pszone="-A"
    fi
}

section_checkmk() {
    echo "<<<check_mk>>>"
    echo "Version: 2.1.0i1"
    echo "AgentOS: solaris"
    echo "Hostname: $(hostname)"
    echo "AgentDirectory: $MK_CONFDIR"
    echo "DataDirectory: $MK_VARDIR"
    echo "SpoolDirectory: $SPOOLDIR"
    echo "PluginsDirectory: $PLUGINSDIR"
    echo "LocalDirectory: $LOCALDIR"
}

section_job() {
    # Get statistics about monitored jobs. Below the job directory there
    # is a sub directory per user that ran a job. That directory must be
    # owned by the user so that a symlink or hardlink attack for reading
    # arbitrary files can be avoided.
    if pushd "${MK_VARDIR}"/job >/dev/null; then
        echo '<<<job>>>'
        for username in *; do
            if [ -d "$username" ] && cd "$username"; then
                count=$(su "$username" -c "ls -1 * | wc -l")

                if [ "$count" -eq "1" ]; then
                    filename=$(su "$username" -c "ls -1 *")
                    echo "==> $filename <=="
                fi

                su "$username" -c "head -n1000 *"
                cd ..
            fi
        done
        popd > /dev/null
    fi
}

section_df() {
    # Filesystem usage for UFS and VXFS
    echo '<<<df>>>'
    for fs in ufs vxfs samfs lofs tmpfs; do
        df -l -k -F $fs 2>/dev/null | sed 1d | grep -v "^[^ ]*/lib/[^ ]*\.so\.1 " | \
        while read Filesystem kbytes used avail capacity Mountedon; do
            kbytes=$((used + avail))
            echo "$Filesystem $fs $kbytes $used $avail $capacity $Mountedon"
        done
    done
}

section_zfs() {
    # Filesystem usage for ZFS
    if type zfs &>/dev/null; then
        echo '<<<zfsget>>>'
        zfs get -t filesystem,volume -Hp name,quota,used,avail,mountpoint,type 2>/dev/null \
        || zfs get -Hp name,referenced,avail,mountpoint,type | sed 's/referenced/used/g'
        echo '[df]'
        df -l -k -F zfs 2>/dev/null | sed 1d
    fi
}

section_zfs_arc_cache() {
    # ZFS arc cache
    # newer Solaris (>=11.3) do not provide hits and misses via mdb -k
    echo '<<<zfs_arc_cache>>>'
    if type kstat &>/dev/null; then
        kstat -p zfs:0:arcstats | sed -e 's/.*arcstats://g' | awk '{printf "%s = %s\n", $1, $2;}'

    elif type mdb &>/dev/null; then
        echo '::arc' | mdb -k
    fi
}

section_ps() {
    # Processes
    echo '<<<ps>>>'
    # The default solaris ps command strips the command lines of the processes. But for good process
    # matching on the server we really need to whole command line. On linux there are arguments to
    # make ps output the whole command line, but on solaris this seems to be missing. We use the ucb
    # ps command to get the full command line instead. What a hack.
    if [ -x /usr/ucb/ps ]; then
        UCB_PS=$(/usr/ucb/ps -agwwwx)
        PS=$(ps -o "user=USER............" -o vsz,rss,pcpu,etime,pid,args $pszone | \
             sed -e 1d -e 's/ *\([^ ]*\) *\([^ ]*\) *\([^ ]*\) *\([^ ]*\) *\([^ ]*\) *\([^ ]*\) */(\1,\2,\3,\4\/\5,\6) /')
        while read -r LINE; do
            STATS=${LINE%) *}
            PID=${STATS##*,}

            # Directly use ps output when line is too slow to be stripped
            if [ ${#LINE} -lt 100 ]; then
                echo "$LINE"
                continue
            fi

            CMD=$(echo "$UCB_PS" | grep "^[ ]*$PID " | head -n1 | \
                  awk '{ s = ""; for (i = 5; i <= NF; i++) s = s $i " "; print s }')
            # Only use the ucb ps line when it's not empty (process might already been gone)
            if [ -z "$CMD" ]; then
                echo "$LINE"
            else
                echo "${STATS}) ${CMD}"
            fi
        done <<< "$PS"
    else
        ps -o "user=USER............" -o vsz,rss,pcpu,etime,pid,args $pszone | \
            sed -e 1d -e 's/ *\([^ ]*\) *\([^ ]*\) *\([^ ]*\) *\([^ ]*\) *\([^ ]*\) *\([^ ]*\) */(\1,\2,\3,\4\/\5,\6) /'
    fi
}

section_statgrab() {
    # Statgrab
    # source: http://www.i-scream.org/libstatgrab/
    # binary: http://www.opencsw.org/
    if type statgrab &>/dev/null; then
        statgrab_vars="const. cpu. disk. general. mem. page. swap. user."
        statgrab_sections="cpu disk page"

        # Collect net stats in the global zone and in local zones if dlstat is present.
        if [ "$zonename" == "global" ] || type dlstat &>/dev/null; then
            statgrab_vars="$statgrab_vars net."
            statgrab_sections="$statgrab_sections net"
        fi

        # shellcheck disable=SC2086
        statgrab $statgrab_vars | grep -v md 1> /tmp/statgrab.$$
        for s in $statgrab_sections; do
            echo "<<<statgrab_$s>>>"
            grep "^$s\." /tmp/statgrab.$$ | cut -d. -f2-99 | sed 's/ *= */ /'
        done

        # <<<statgrab_mem>>> info is preferred over <<<solaris_mem>>>
        # since solaris_mem is under suspicion to be buggy.
        echo '<<<statgrab_mem>>>'
        egrep "^(swap|mem)\." /tmp/statgrab.$$ | sed 's/ *= */ /'

        [ -f /tmp/statgrab.$$ ] && rm -f /tmp/statgrab.$$

    else
        # Memory
        # <<<solaris_mem>>> should be used if statgrab is missing and top is available.
        if [ -x /usr/bin/top ] || [ -x /usr/local/bin/top ]; then
            echo "<<<solaris_mem>>>"
            if [ -x /usr/bin/top ]; then /usr/bin/top | grep '^Memory:'; fi
            if [ -x /usr/local/bin/top ]; then /usr/local/bin/top | grep '^Memory:'; fi
        fi
    fi
}

section_cpu() {
    # /proc/cpu
    # Simulated Output of Linux /proc/cpu
    echo '<<<cpu>>>'
    load=$(uptime|sed -e 's;.*average: \([0-9]\{1,\}\.[0-9]\{1,\}\), \([0-9]\{1,\}\.[0-9]\{1,\}\), \([0-9]\{1,\}\.[0-9]\{1,\}\).*;\1 \2 \3;')
    nthreads=$(($(ps -AL | wc -l)))
    procs=$(($(psrinfo | wc -l)))
    echo $load 1/$nthreads $$ $procs
}

section_zpool() {
    # zpool status
    if [ -x /sbin/zpool ]; then
        run_cached "zpool_status" 120 "echo <<<zpool_status>>>; /sbin/zpool status -x"

        ${MK_RUN_SYNC_PARTS} || return

        echo '<<<zpool>>>'
        zpool list
    fi
}

section_uptime() {
    # Solaris doesn't always give a consisten output on uptime, thus include side information
    # Tested in VM for solaris 10/11
    echo '<<<uptime>>>'
    ctime=`nawk 'BEGIN{print srand()}'`;
    btime=`kstat '-p' 'unix:::boot_time' 2>&1|grep 'boot_time'|awk '{print $2}'`;
    echo $((ctime - btime));
    echo '[uptime_solaris_start]'
    uname -a
    zonename
    uptime
    kstat -p unix:0:system_misc:snaptime
    echo '[uptime_solaris_end]'
}

section_ntp() {
    ps -o comm $pszone | grep -w .*ntpd &>/dev/null || return

    echo '<<<ntp>>>'
    ntpq -np | sed -e 1,2d -e 's/^\(.\)/\1 /' -e 's/^ /%/'
}

section_solaris_prtg() {
    if type prtdiag >/dev/null 2>&1; then
        # prtdiag does not work in local zones
        if [ "$zonename" == "global" ]; then
            run_cached "solaris_prtdiag_status" 300 \
                'echo <<<solaris_prtdiag_status>>>; /usr/sbin/prtdiag 1>/dev/null 2>&1; echo $?'
        fi
    fi
}

section_tcp() {
    # TCP Connection stats
    echo '<<<tcp_conn_stats>>>'
    netstat -n -a -f inet -P tcp | tail  +5 | \
    nawk '{ c[$7]++; } END { for (x in c) { print x, c[x]; } }'
}

section_multipathing() {
    # Multipathing
    if type mpathadm &>/dev/null; then
        if [ "$zonename" == "global" ]; then
            echo '<<<solaris_multipath>>>'
            mpathadm list LU | nawk '{if(NR%3==1){dev=$1}
                                      if(NR%3==2){tc=$NF}
                                      if(NR%3==0){printf "%s %s %s\n",dev,tc,$NF}}'
        fi
    fi
}

section_fileinfo() {
    # Fileinfo-Check: put patterns for files into /etc/check_mk/fileinfo.cfg
    perl -e '
use File::Glob "bsd_glob";
my @patterns = ();
foreach (bsd_glob("$ARGV[0]/fileinfo.cfg"), bsd_glob("$ARGV[0]/fileinfo.d/*")) {
    open my $handle, "<", $_ or next;
    while (<$handle>) {
        chomp;
        next if /^\s*(#|$)/;
        my $pattern = $_;
        $pattern =~ s/\$DATE:(.*?)\$/substr(`date +"$1"`, 0, -1)/eg;
        push @patterns, $pattern;
    }
    warn "error while reading $_: $!\n" if $!;
    close $handle;
}
exit if ! @patterns;

print "<<<fileinfo:sep(124)>>>\n", time, "\n[[[header]]]\nname|status|size|time\n[[[content]]]\n";

foreach (@patterns) {
    foreach (bsd_glob("$_")) {
        if (! -f) {
            print "$_|missing\n" if ! -d;
        } elsif (my @infos = stat) {
            print "$_|ok|$infos[7]|$infos[9]\n";
        } else {
            print "$_|stat failed: $!\n";
        }
    }
}
' -- "$MK_CONFDIR"
}

section_libelle() {
    # Libelle Business Shadow
    if type trd >/dev/null 2>&1; then
        echo '<<<libelle_business_shadow:sep(58)>>>'
        trd -s
    fi
}

section_solaris_fmadm() {
    # Displaying Information About Faults or Defects
    # If there are no faults the output of this command will be empty.
    if type fmadm >/dev/null 2>&1; then
        echo '<<<solaris_fmadm:sep(58)>>>'
        fmadm faulty
    fi
}

section_solaris_services() {
    # Getting Information About Services Running on Solaris
    # We can get a list of all service instances, including disabled
    # or incomplete ones by 'svcs -a'
    if type svcs > /dev/null 2>&1; then
        echo '<<<solaris_services>>>'
        svcs -a
    fi
}

section_checkmk_failed_plugins() {
    if [ -n "${FAILED_PYTHON_PLUGINS[*]}" ]; then
        echo "<<<check_mk>>>"
        echo "FailedPythonPlugins: ${FAILED_PYTHON_PLUGINS[*]}"
        if [ -n "$NO_PYTHON" ]; then
            echo "FailedPythonReason: No suitable python installation found."
        elif [ -n "$WRONG_PYTHON_COMMAND" ]; then
            echo "FailedPythonReason: Configured python command not found."
        fi
    fi
}

run_remote_plugins() {
    # MK's Remote Plugin Executor
    if test -f "$MK_CONFDIR/mrpe.cfg"; then
        echo '<<<mrpe>>>'
        grep -v '^ *#' "$MK_CONFDIR/mrpe.cfg" | grep -v '^ *$' | \
        while read descr cmdline; do
            interval=
            if [[ $cmdline =~ \(([^\)]*)\)[[:space:]](.*) ]]; then
                parameters=${BASH_REMATCH[1]}
                cmdline=${BASH_REMATCH[2]}

                # split multiple parameter assignments
                for par in $(echo $parameters | tr ":" "\n"); do
                    # split each assignment
                    key=$(echo $par | cut -d= -f1)
                    value=$(echo $par | cut -d= -f2)

                    if [ "$key" = "interval" ]; then
                        interval=$value
                    fi
                done
            fi

            if [ -z "$interval" ]; then
                ${MK_RUN_SYNC_PARTS} && run_mrpe $descr "$cmdline"
            else
                run_cached "mrpe_${descr}" "$interval" "run_mrpe '$descr' '$cmdline'"
            fi
        done
    fi
}

is_valid_plugin() {
    [ -x "$1" ]
}

run_mrpe() {
    local descr=$1
    shift
    local cmdline="$@"

    echo '<<<mrpe>>>'

    OUTPUT=$(eval _log_section_time "$cmdline")

    echo -n "$descr $? $OUTPUT" | tr \\n \\1
    echo
}

export -f run_mrpe

# Runs a command asynchronous by use of a cache file
run_cached() {
    local NAME=$1
    local MAXAGE=$2
    shift 2
    local CMDLINE="$@"
    local AGE

    if $DISABLE_CACHING; then
        # shellcheck disable=SC2090
        $CMDLINE
        return
    fi

    if [ ! -d "${MK_VARDIR}"/cache ]; then mkdir -p "${MK_VARDIR}"/cache; fi
    CACHEFILE="$MK_VARDIR/cache/$NAME.cache"

    # Check if the creation of the cache takes suspiciously long and return
    # nothing if the age (access time) of $CACHEFILE.new is twice the MAXAGE
    if [ -e "$CACHEFILE.new" ]; then
        AGE=$(file_age "$CACHEFILE.new")
        if [ "${AGE}" -ge $((MAXAGE * 2)) ]; then
            fuser -k "$CACHEFILE.new" >/dev/null 2>&1
            rm -f "$CACHEFILE.new"
        fi
    fi

    # Check if cache file exists and is recent enough
    if [ -s "$CACHEFILE" ]; then
        local MTIME
        MTIME=$(get_file_mtime "$CACHEFILE")
        AGE=$(file_age "$CACHEFILE")
        if [ "${AGE}" -le "${MAXAGE}" ]; then local USE_CACHEFILE=1; fi
        if ${MK_RUN_SYNC_PARTS}; then
            # Output the file even if it is outdated.
            # The new file will not yet be available.
            CACHE_INFO="cached($MTIME,$MAXAGE)"
            if [ "${NAME%%_*}" = "local" ] || [ "${NAME%%_*}" = "mrpe" ]; then
                # insert the cache info at the beginning of every non-header line
                sed -e "/^<<</! s/^/$CACHE_INFO /" "$CACHEFILE"
            else
                # insert the cache info in the section header (^= after '!'),
                # if none is present (^= before '!')
                sed -e '/^<<<.*\(:cached(\).*>>>/!s/^<<<\([^>]*\)>>>$/<<<\1:'"${CACHE_INFO}"'>>>/' "$CACHEFILE"
            fi
        fi
    fi

    ${MK_RUN_ASYNC_PARTS} || return

    # Cache file outdated and new job not yet running? Start it
    if [ -z "$USE_CACHEFILE" ] && [ ! -e "$CACHEFILE.new" ]; then
        echo "set -o noclobber; exec > \"$CACHEFILE.new\" || exit 1; $CMDLINE && mv \"$CACHEFILE.new\" \"$CACHEFILE\" || rm -f \"$CACHEFILE\" \"$CACHEFILE.new\"" | nohup /usr/bin/bash >/dev/null 2>&1 &
    fi
}

#
# BEGIN COMMON AGENT CODE
#

run_local_checks() {
    cd "$LOCALDIR" || return

    if ${MK_RUN_SYNC_PARTS}; then
        echo '<<<local:sep(0)>>>'
        for skript in ./*; do
            if is_valid_plugin "$skript"; then
                _log_section_time "./$skript"
            fi
        done
    fi

    # Call some local checks only every X'th second
    for skript in [1-9]*/*; do
        if is_valid_plugin "$skript"; then
            run_cached "local_${skript//\//\_}" "${skript%/*}" "_log_section_time './$skript'"
        fi
    done
}

run_spooler() {
    (
        cd "${SPOOLDIR}" 2>/dev/null || return

        now=$(date +%s)

        for file in *; do
            [ "${file}" != "*" ] || return

            # If prefixed with a number, then that is the maximum age in seconds.
            # If the file is older than that, it is ignored.
            maxage="${file%%[^0-9]*}"
            if [ "${maxage}" ]; then
                mtime=$(get_file_mtime "${file}")
                [ $((now - mtime)) -le "${maxage}" ] || continue
            fi

            cat "${file}"
        done
    )
}

#
# END COMMON AGENT CODE
#

add_failed_python_plugin() {
    if [ -z "$FAILED_PYTHON_PLUGINS" ]; then
        FAILED_PYTHON_PLUGINS=("$1")
    else
        FAILED_PYTHON_PLUGINS=("${FAILED_PYTHON_PLUGINS[@]}" "$1")
    fi
}

run_agent_plugin() {
    agent_plugin="${1#./}"
    extension="${agent_plugin##*.}"
    filename="${agent_plugin%.*}"

    # Execute all non python plugins with ./foo
    if [ "$extension" != "py" ]; then
        _log_section_time "./$agent_plugin"
        return
    fi

    if [ "${filename:(-2):(2)}" != "_2" ]; then
        if [ -n "$NO_PYTHON" ] || [ -n "$WRONG_PYTHON_COMMAND" ]; then
            add_failed_python_plugin "$agent_plugin"
            return
        fi
        if [ -n "$PYTHON3" ]; then
            _log_section_time "$PYTHON3 $agent_plugin"
            return
        fi
        if [ ! -e "${filename}_2.py" ]; then
            add_failed_python_plugin "$agent_plugin (Missing Python 3 installation)"
            return
        fi
        return
    fi

    if [ -x "${filename%??}.py" ] && [ -n "$PYTHON3" ]; then
        return
    fi

    if [ -n "$PYTHON2" ]; then
        _log_section_time "$PYTHON2 $agent_plugin"
        return
    fi

    add_failed_python_plugin "$agent_plugin (missing Python 2 installation)"
}

run_plugins() {
    cd "${PLUGINSDIR}" || return

    # Plugins
    if ${MK_RUN_SYNC_PARTS}; then
        for skript in ./*; do
            if [ ! -d "$skript" ] && [ -x "$skript" ]; then
                run_agent_plugin $skript
            fi
        done
    fi

    # Call some plugins only every X'th second
    for skript in [1-9]*/*; do
        if [ -x "$skript" ]; then
            run_cached plugins_"${skript//\//\#}" "${skript%/*}" "_log_section_time './$skript'"
        fi
    done
}

run_purely_synchronous_sections() {
    _log_section_time section_checkmk

    [ -z "$MK_SKIP_JOB" ] && _log_section_time section_job

    [ -z "$MK_SKIP_DF" ] && _log_section_time section_df

    [ -z "$MK_SKIP_ZFS" ] && _log_section_time section_zfs

    [ -z "$MK_SKIP_ZFS_ARC_CACHE" ] && _log_section_time section_zfs_arc_cache

    [ -z "$MK_SKIP_PS" ] && _log_section_time section_ps

    [ -z "$MK_SKIP_STATGRAB" ] && _log_section_time section_statgrab

    [ -z "$MK_SKIP_CPU" ] && _log_section_time section_cpu

    [ -z "$MK_SKIP_UPTIME" ] && _log_section_time section_uptime

    [ -z "$MK_SKIP_NTP" ] && _log_section_time section_ntp

    [ -z "$MK_SKIP_TCP" ] && _log_section_time section_tcp

    [ -z "$MK_SKIP_MULTIPATHING" ] && _log_section_time section_multipathing

    [ -z "$MK_SKIP_FILEINFO" ] && _log_section_time section_fileinfo

    [ -z "$MK_SKIP_LIBELLE" ] && _log_section_time section_libelle

    [ -z "$MK_SKIP_SOLARIS_FMADM" ] && _log_section_time section_solaris_fmadm

    [ -z "$MK_SKIP_SOLARIS_SERVICES" ] && _log_section_time section_solaris_services
}

run_partially_asynchronous_sections() {
    [ -z "$MK_SKIP_SOLARIS_PRTG" ] && _log_section_time section_solaris_prtg

    [ -z "$MK_SKIP_ZPOOL" ] && _log_section_time section_zpool
}

main_setup(){

    set_variable_defaults

    preamble_1 "$@"

    preamble_2

    preamble_3

    preamble_4

    preamble_5

    if $LOG_SECTION_TIME; then
        agent_start="$(perl -MTime::HiRes=time -le 'print time()')"
    fi

}

main_sync_parts() {

    run_purely_synchronous_sections

    run_spooler

}

main_mixed_parts(){

    run_partially_asynchronous_sections

    # _log_section_time: log single commands not all at once
    # run_remote_plugins -> run_mrpe -> _log_section_time CMD
    #                    -> run_cached _log_section_time CMD
    run_remote_plugins

    # _log_section_time: log single commands not all at once
    # run_local_checks -> _log_section_time CMD
    #                  -> run_cached _log_section_time CMD
    run_local_checks

    # _log_section_time: log single commands not all at once
    # run_plugins -> run_agent_plugin -> _log_section_time CMD
    #             -> run_cached _log_section_time CMD
    run_plugins

}

main_async_parts(){
    # no run_liveupdate available
    :
}

main_finalize_sync() {
    _log_section_time section_checkmk_failed_plugins

    if $LOG_SECTION_TIME; then
        profiling_logfile_check_mk_agent="${PROFILING_LOGFILE_DIR}/profiling_check_mk_agent.log"
        agent_end="$(perl -MTime::HiRes=time -le 'print time()')"
        echo -e "runtime $(echo "$agent_end - $agent_start" | bc)\n" >>"$profiling_logfile_check_mk_agent"
    fi
}

#
# BEGIN COMMON AGENT CODE
#

main() {

    while true; do

        main_setup "$@"

        ${MK_RUN_SYNC_PARTS} && main_sync_parts

        (${MK_RUN_ASYNC_PARTS} || ${MK_RUN_SYNC_PARTS}) && main_mixed_parts

        ${MK_RUN_ASYNC_PARTS} && main_async_parts

        ${MK_RUN_SYNC_PARTS} && main_finalize_sync

        [ "${MK_LOOP_INTERVAL}" -gt 0 ] 2>/dev/null || return

        sleep "${MK_LOOP_INTERVAL}"

    done

}

[ -z "${MK_SOURCE_AGENT}" ] && main "$@"
