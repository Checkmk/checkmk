#!/bin/bash
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# Exempt from indentation rules as it's a heredoc
help() {
cat << EOF >&2
Usage: mk-job ident PROGRAM [ARGS...]

Execute PROGRAM as subprocess while measuring performance information
about the running process and writing it to an output file. This file
can be monitored using checkmk. The checkmk Agent will forward the
information of all job files to the monitoring server.

This file is being distributed with the checkmk Agent.
EOF

exit "${1:-0}"
}

# If args is less than 2, or 0, call `help()` and exit 1
[ "${#}" -lt 2 ] && help 1
[ "${#}" -eq 0 ] && help 1

# If help is requested, deliver it
[ "${1}" = "-h" ] && help 0
[ "${1}" = "--help" ] && help 0

# Source the agent, as it has a bunch of functions and variables for us to use
# shellcheck disable=SC1090
. "$(command -v check_mk_agent)" || exit 1

# Set up the variables that are specific to this script
output_path="${MK_VARDIR}/job/${USER}"
ident="${1:?}"
running_file="${output_path}/${ident}.$$running"

# Shift to the rest of the positional parameters
shift 1

if [ ! -d "${output_path}" ]; then
    if [ "${USER}" = root ]; then
        mkdir -p "${output_path}"
    else
        echo "ERROR: Missing output directory ${output_path} for non-root user '${USER}'." >&2
        exit 1
    fi
fi

if ! inpath "${1}"; then
    echo "ERROR: Cannot run '${1}'. Command not found." >&2
    help 1
fi

# Structure GNU's time format into an NDJSON format
gnu_time_fmt="{\"$(get_epoch)\": {\"exit_code\": %x, \"real_time\": \"%E\", \"user_time\": \"%U\","
gnu_time_fmt="${gnu_time_fmt} \"system_time\": \"%S\", \"reads\": %I, \"writes\": %O,"
gnu_time_fmt="${gnu_time_fmt} \"max_res_kbytes\": %M, \"avg_mem_kbytes\": %K,"
gnu_time_fmt="${gnu_time_fmt} \"invol_context_switches\": %c, \"vol_context_switches\": %w}"

# Structure our dummy data for older systems
dummy_data="\"reads\": 0, \"writes\": 0, \"max_res_kbytes\": 0, \"avg_mem_kbytes\": 0,"
dummy_data="${dummy_data} \"invol_context_switches\": 0, \"vol_context_switches\": 0}}"

if [ ! -w "${running_file}" ] ; then
  # Looks like we are lacking the permissions to create this file...
  # In this scenario no mk-job status file is created. We simply execute the command
  exec "$@"
fi

case "${MK_OSSTR}" in
    (aix)
        # TO-DO: Test if the AIX approach a) works and b) also works for Solaris, if so, merge them
        # We want word splitting here so that our positional params are assigned properly
        # shellcheck disable=SC2046
        set -- $( (/usr/bin/time -p "${@}" 2>&1; echo "${?}") | tail -n 4 | paste -sd ' ' -)
        
        # Start building our output format
        classic_fmt="{\"$(get_epoch)\": {\"exit_code\": ${7}, \"real_time\": \"${2}\","
        classic_fmt="${classic_fmt} \"user_time\": \"${4}\", \"system_time\": \"${6}\","
        classic_fmt="${classic_fmt} ${dummy_data}"
        return_code="${7}"

        echo "${classic_fmt}" >> "${running_file}"
    ;;
    (linux)
        /usr/bin/time -o "${running_file}" --append -f "${gnu_time_fmt}" "${@}"
        return_code="${?}"
    ;;
    (mac)
        # For OSX: requires GNU-time installed (`brew install gnu-time`)
        inpath gtime || return 1
        /usr/local/bin/gtime -o "${running_file}" --append -f "${gnu_time_fmt}" "${@}"
        return_code="${?}"
    ;;
    (solaris)
        # TO-DO: Test if the AIX approach a) works and b) also works for Solaris, if so, merge them
        # We want word splitting here so that our positional params are assigned properly
        # shellcheck disable=SC2046
        set -- $( (/usr/bin/time -p sh -c "$* 2>/dev/null 1>&2" 2>&1; echo $?) | sed -e 's/,/\./g')

        # Start building our output format
        classic_fmt="{\"$(get_epoch)\": {\"exit_code\": ${7}, \"real_time\": \"${2}\","
        classic_fmt="${classic_fmt} \"user_time\": \"${4}\", \"system_time\": \"${6}\","
        classic_fmt="${classic_fmt} ${dummy_data}"
        return_code="${7}"

        echo "${classic_fmt}" >> "${running_file}"
    ;;
esac

mv "${running_file}" "${output_path}/${ident}"
exit "${return_code}"
