#!/bin/bash
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# Reason for this no-op: shellcheck disable=... before the first command disables the error for the
# entire script.
:

# Disable unused variable error (needed to keep track of version)
# shellcheck disable=SC2034
CMK_VERSION="2.1.0p20"

# Informix
# Make ENV-VARs avail for subshells
set -a

#   .--helper--------------------------------------------------------------.
#   |                    _          _                                      |
#   |                   | |__   ___| |_ __   ___ _ __                      |
#   |                   | '_ \ / _ \ | '_ \ / _ \ '__|                     |
#   |                   | | | |  __/ | |_) |  __/ |                        |
#   |                   |_| |_|\___|_| .__/ \___|_|                        |
#   |                                |_|                                   |
#   '----------------------------------------------------------------------'

do_check() {
    # $1:section, $2:excludelist
    if echo "$2" | grep -qe "${1}"; then
        return 1
    else
        return 0
    fi
}

sql() {
    db="sysmaster"
    sqltxt="$1"
    export DBDELIMITER="|"
    echo "$sqltxt" | dbaccess ${db}
}

set_excludes() {
    exclude=""
    if [ "$EXCLUDES" = "ALL" ]; then
        exclude="$all_sections"
        global_exclude=true
    elif [ -n "$EXCLUDES" ]; then
        exclude=$EXCLUDES
        global_exclude=true
    else
        global_exclude=false
    fi

    if [ "$global_exclude" = "false" ]; then
        excludes_i="EXCLUDES_${1}"
        if [ "${!excludes_i}" = "ALL" ]; then
            exclude="$all_sections"
        elif [ -n "${!excludes_i}" ]; then
            exclude=${!excludes_i}
        fi
    fi
}

#.
#   .--sqls----------------------------------------------------------------.
#   |                                     _                                |
#   |                           ___  __ _| |___                            |
#   |                          / __|/ _` | / __|                           |
#   |                          \__ \ (_| | \__ \                           |
#   |                          |___/\__, |_|___/                           |
#   |                                  |_|                                 |
#   '----------------------------------------------------------------------'

all_sections="sessions locks tabextents dbspaces logusage"

informix_status() {
    echo "<<<informix_status:sep(58)>>>"
    echo "[[[$INFORMIXSERVER/$SERVERNUM]]]"
    "$INFORMIXDIR/bin/onstat" - >/dev/null 2>&1
    state=$?
    echo "Status:"$state
    "$INFORMIXDIR/bin/onstat" -g dis
    port=$(grep "$INFORMIXSERVER" /etc/services)
    echo "PORT:$port"
}

informix_sessions() {
    echo "<<<informix_sessions>>>"
    echo "[[[$INFORMIXSERVER/$SERVERNUM]]]"
    # don't count our own session
    sql "select 'SESSIONS', (count(*)-1)::int from syssessions"
}

informix_locks() {
    echo "<<<informix_locks>>>"
    echo "[[[$INFORMIXSERVER/$SERVERNUM]]]"
    # don't count our own session
    sql "select 'LOCKS', (count(*)-1)::int, type from syslocks group by type"
}

informix_tabextents() {
    echo "<<<informix_tabextents>>>"
    echo "[[[$INFORMIXSERVER/$SERVERNUM]]]"
    sql "select first 10
            'TABEXTENTS',
            trim(n.dbsname) db,
            trim(n.tabname) tab,
            h.nextns extents,
            nrows
        from sysptnhdr h, systabnames n
        where h.partnum = n.partnum
        and nrows > 0
        and n.dbsname not in ( 'sysadmin', 'sysuser', 'sysutils', 'sysmaster' )
        and n.tabname not like 'sys%'
        order by extents desc"
}

informix_dbspaces() {
    echo "<<<informix_dbspaces>>>"
    echo "[[[$INFORMIXSERVER/$SERVERNUM]]]"
    sql "select
            trim(sd.name) || ' DBSPACE',
            sd.dbsnum,
            sd.is_temp,
            sd.flags,
            'CHUNK',
            sc.fname,
            sc.pagesize,
            sc.chksize,
            sc.nfree,
            sc.flags,
            trim(sc.mfname),
            sc.mflags
        from sysdbspaces sd, syschunks sc
        where sd.dbsnum = sc.dbsnum
        -- NO SBSPACE CURRENTLY
        and sd.is_sbspace = 0
        order by sd.name"
}

informix_logusage() {
    echo "<<<informix_logusage>>>"
    echo "[[[$INFORMIXSERVER/$SERVERNUM]]]"
    sql "select 'LOGUSAGE',
            number,
            sh_pagesize,
            size,
            used,
            flags,
            'is_used:'||is_used,
            'is_current:'||is_current,
            'is_backed_up:'||is_backed_up,
            'is_new:'||is_new,
            'is_archived:'||is_archived,
            'is_temp:'||is_temp,
            'is_pre_dropped:'||is_pre_dropped
        from syslogs, sysshmvals
        order by number"
}

#.
#   .--config--------------------------------------------------------------.
#   |                                      __ _                            |
#   |                      ___ ___  _ __  / _(_) __ _                      |
#   |                     / __/ _ \| '_ \| |_| |/ _` |                     |
#   |                    | (_| (_) | | | |  _| | (_| |                     |
#   |                     \___\___/|_| |_|_| |_|\__, |                     |
#   |                                           |___/                      |
#   '----------------------------------------------------------------------'

# Config opts:
# - oninit-path; Default is empty, which means autodetection:
#       ONINIT_PATH=<path to oninit-binary>
# - Excluding sections ("status sessions locks tabextents dbspaces logusage"):
#       EXCLUDES_INFORMIX_INSTANCE="SECTION SECTION ..."
#       EXCLUDES_INFORMIX_INSTANCE=ALL
#       EXCLUDES="SECTION SECTION ..."
#       EXCLUDES=ALL

# shellcheck source=agents/cfg_examples/informix.cfg
. "$MK_CONFDIR/informix.cfg" 2>/dev/null

if [ -z "$ONINIT_PATH" ] || [ ! -x "$ONINIT_PATH" ]; then
    ONINIT=$(UNIX95=true ps ax | grep oninit | grep -v grep | head -1 | awk '{print $1 " " $5}')
    if [ -z "$ONINIT" ]; then
        exit 0
    fi

    ONINIT_PATH=${ONINIT#* }
    ONINIT_PID=${ONINIT% *}
    case "$ONINIT_PATH" in
        /*) ;;

        *) # BUG not platform independent!
            ONINIT_PATH=$(readlink "/proc/$ONINIT_PID/exe")
            ;;
    esac

    # If not set in config or not found we end up here
    if [ -z "$ONINIT_PATH" ] || [ ! -f "$ONINIT_PATH" ]; then
        exit 1
    fi
fi

#.
#   .--main----------------------------------------------------------------.
#   |                                       _                              |
#   |                       _ __ ___   __ _(_)_ __                         |
#   |                      | '_ ` _ \ / _` | | '_ \                        |
#   |                      | | | | | | (_| | | | | |                       |
#   |                      |_| |_| |_|\__,_|_|_| |_|                       |
#   |                                                                      |
#   '----------------------------------------------------------------------'

for IDSENV in $(
    # FIXME: This is supressed, so we can enable the shellcheck.
    # I think the shellchecker is right here: INFORMIXDIR will not
    # be available in the for-loops body.
    # shellcheck disable=SC2030
    export INFORMIXDIR=${ONINIT_PATH%/bin*}
    "$INFORMIXDIR/bin/onstat" -g dis |
        grep -E '^Server[         ]*:|^Server Number[     ]*:|^INFORMIX|^SQLHOSTS|^ONCONFIG' |
        sed -e 's/Server Number/SERVERNUM/' \
            -e 's/Server/INFORMIXSERVER/' \
            -e 's/SQLHOSTS/INFORMIXSQLHOSTS/' \
            -e 's/[     ]*:[    ]*/=/' |
        tr '\n' ';' |
        sed -e 's/;$/\n/' -e 's/;\(INFORMIXSERVER=[^;]*;\)/\n\1/g'

); do
    (
        # Set environment
        eval "$IDSENV"
        # FIXME: This is supressed, so we can enable the shellcheck.
        # I think the shellchecker is right here: INFORMIXDIR will not
        # be available in the for-loops body.
        # shellcheck disable=SC2031
        PATH="$INFORMIXDIR/bin:$PATH"

        # try to set them via 'onstat -g env' otherwise
        # DB HAS TO BE RUNNING
        if [ -z "$INFORMIXSQLHOSTS" ] || [ -z "$ONCONFIG" ]; then
            onstat -g env | grep -E -e '^INFORMIXSQLHOSTS' \
                -e '^ONCONFIG' |
                sed -e 's/[         ][      ]*/=/'
        fi

        informix_status

        set_excludes "$INFORMIXSERVER"

        if do_check "sessions" "$exclude"; then
            informix_sessions
        fi

        if do_check "locks" "$exclude"; then
            informix_locks
        fi

        if do_check "tabextents" "$exclude"; then
            informix_tabextents
        fi

        if do_check "dbspaces" "$exclude"; then
            informix_dbspaces
        fi

        if do_check "logusage" "$exclude"; then
            informix_logusage
        fi
    )
done
