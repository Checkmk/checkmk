#!/bin/bash
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# Disable unused variable error (needed to keep track of version)
# shellcheck disable=SC2034
VERSION="2.0.0i2"

# Run and *send* only once every __ seconds
. $MK_CONFDIR/mk_inventory.cfg 2>/dev/null || true

# Default to four hours
INTERVAL=${INVENTORY_INTERVAL:-14400}

FLAGFILE=$MK_VARDIR/mk_inventory.last.$REMOTE
LAST_RUN=$(stat -c %Y $FLAGFILE)
NOW=$(date +%s)
UNTIL=$((NOW + INTERVAL + 600))

if [ $(( NOW - LAST_RUN )) -ge $INTERVAL ]
then
    touch $FLAGFILE

    # List of DEB packages
    if type dpkg-query >/dev/null; then
        echo "<<<lnx_packages:sep(124):persist($UNTIL)>>>"
        dpkg-query --show --showformat='${Package}|${Version}|${Architecture}|deb|-|${Summary}|${Status}\n'
    fi

    # List of RPM packages in same format
    if type rpm >/dev/null; then
        echo "<<<lnx_packages:sep(9):persist($UNTIL)>>>"
        rpm -qa --qf '%{NAME}\t%{VERSION}\t%{ARCH}\trpm\t%{RELEASE}\t%{SUMMARY}\t-\n'
    fi

    # List Gentoo packages
    if type equery >/dev/null; then
        echo "<<<lnx_packages:sep(124):persist($UNTIL)>>>"
        equery -C list --format '$category/$name|$fullversion|$mask2|ebuild|Repository $repo|installed' \* | head -n -1
    fi

    # Information about distribution
    echo "<<<lnx_distro:sep(124):persist($UNTIL)>>>"
    for f in {/etc/{oracle-release,debian_version,gentoo-release,lsb-release,redhat-release,SuSE-release,os-release},/usr/share/cma/version} ; do
        if [ -e $f ] ; then
            echo "[[[$f]]]"
            tr \\n \| < $f | sed 's/|$//' ; echo
        fi
    done

    # CPU Information. We need just the first one
    if [ -e /proc/cpuinfo ] ; then
        echo "<<<lnx_cpuinfo:sep(58):persist($UNTIL)>>>"
        sed 's/[[:space:]]*:[[:space:]]*/:/' < /proc/cpuinfo
    fi

    # Information about main board, memory, etc.
    if type dmidecode >/dev/null ; then
        echo "<<<dmidecode:sep(58):persist($UNTIL)>>>"
        dmidecode -q | sed 's/\t/:/g'
    fi

    # Information about kernel architecture
    if type uname >/dev/null ; then
        echo "<<<lnx_uname:persist($UNTIL)>>>"
        uname -m
        uname -r
    fi
    if type lspci > /dev/null ; then
        echo "<<<lnx_video:sep(58):persist($UNTIL)>>>"
        lspci  -v -s  $(lspci | grep VGA | cut -d" " -f 1)
    fi

    # Some networking information
    if type ip > /dev/null ; then
        echo "<<<lnx_ip_r:persist($UNTIL)>>>"
        ip r
        ip -6 r
    fi

    # Kernel configuration
    if type sysctl > /dev/null ; then
        echo "<<<lnx_sysctl:persist($UNTIL)>>>"
        sysctl -ae
    fi

    # Block devices
    (
        # use sep=0 rather than 124 in order to be more flexible in the parse function
        echo "<<<lnx_block_devices:sep(0):persist($UNTIL)>>>"
        DEVTYPE_CHECK="DEVTYPE=disk"
        DATA_ITEMS=(
            size                # must be multiplied with block size (512byte)
            uuid                #
            # dev                 #
            # wwid                # world wide ID
            # nguid
            device/address      # can be bus address, e.g. 0000:21:00.0
            device/firmware_rev #
            device/model        # can be "SAMSUNG MZVLB512HAJQ-00000", "LOGICAL VOLUME"
            device/serial       #
            device/type         # can be "0", "MMC", "SD"
            device/vendor       # can be "ATA  ", "HP  ", "QEMU "
            # device/dev          # what is second `dev` for?
            # device/name         # found at some mmc devices
            # device/wwid         # world wide ID?
        )
        find "/sys/block/" -maxdepth 1 -type f -o -type l -print0 | while IFS= read -r -d '' DEVICE; do
            UEVENT_FILE="$(realpath "${DEVICE}")/uevent"
            DEVICE_DIR="$(dirname "${UEVENT_FILE}")"

            # busybox compatible way to say
            #   if DEVTYPE_CHECK not in <device>/uevent or "devices/virtual/" in DEVICE_DIR: continue`
            case "$(cat "${UEVENT_FILE}")" in *"${DEVTYPE_CHECK}"*) ;; *) continue; esac
            case "${UEVENT_FILE}" in *"devices/virtual/"*) continue;; esac

            # use pipe as delimiter - also to mark begin of lines for consitency check
            echo "|device|${DEVICE_DIR}|"

            for item in "${DATA_ITEMS[@]}"; do
                item_file="$DEVICE_DIR/${item}"
                if [ ! -f "${item_file}" ]; then
                    continue
                fi
                echo "|${item}|$(cat "${item_file}")|"
            done
        done 2>/dev/null
    )
fi

