# Example configuration for Windows agent
[global]
    # Restrict access to certain IP addresses
    # If ipv6 is enabled, all listed ipv4 adresses are also accepted as
    # source adresses in their ipv6-mapped form. I.e. if
    # 192.168.56.0/24 is listed, connections from ::ffff:c0a8:3800/120
    # are also possible
    only_from = 127.0.0.1 192.168.56.0/24 ::1

    # Change port where the agent is listening ( default 6556 )
    port = 6556

    # Disable ipv6 support. By default, ipv4 is always supported
    # and ipv6 is enabled additionally if supported by the system.
    ipv6 = no

    # Do only execute programs and scripts with
    # the following suffixes (in local and plugins).
    # Per default all extensions except txt and dir
    # are being executed.
    execute = exe bat vbs

    # Run async scripts in parallel (to each other). Default is "sequential",
    # which means the scripts are run asynchronously to the agent itself but
    # one after the other. Setting this to parallel may improve the delay before
    # new data is reported but may also lead to the agent having more noticable
    # impact on the system performance
    async_script_execution = parallel

    # Restrict the following configuration variables
    # in [global] to the following hosts
    host = winsrv* zab???ad

    # Just output certain sections (e.g. for upper hosts)
    sections = check_mk winperf

    # Disable specific sections (overrules sections parameter)
    disabled_sections = logfiles

    # output sections in realtime updates. Please note that not all
    # sections can be used in realtime updates, the following is the
    # complete list
    realtime_sections = mem df winperf_processor

    # specifies how long (in seconds) realtime updates are sent to
    # the last monitoring system that requested an update.
    # this should be longer than the request frequency (usually
    # one minute).
    # Please note that any new request cancels previous realtime
    # update schedules, so no more than one update is sent per second,
    # no matter if this timeout is "too high" or how many monitoring
    # systems are querying the agent.
    realtime_timeout = 90

    # enable/disable encryption of regular agent output (default: disabled)
    encrypted = no

    # enable/disable encryption of realtime updates (default: enabled)
    encrypted_rt = yes

    # passphrase for encrypted communication.
    passphrase = secret

    # Write a logfile for tackling down crashes of the agent
    crash_debug = yes

    # by default the agent flushes the socket for each agent section.
    # this is mostly for debugging purposes in case the agent is slow
    # to respond.
    # Disabling this may (very) slightly reduce network traffic.
    section_flush = no

[winperf]
    # Select counters to extract. The following counters
    # are needed by checks shipped with check_mk.
    counters = 10332:msx_queues
    counters = 638:tcp_conn

    # Instead of specifying the counter start index, the name of the performance
    # counter can be used. CANNOT TEST THIS ini -> yaml counters aredifferent
    # counters = Terminal Services:ts_sessions

[logfiles]
    # # Define textfiles to be monitored, separated by |
    textfile = C:\tmp logfiles\message_*.log|D:\log\sample.txt
    # # Set patterns for defined textfiles
    ok = Successfully logged in*
    crit = Error in*
    warn = Unable to contact*
    ignore = Backup * saved

    # # Define additional textfiles with different patterns
    textfile = C:\tmp\memo.udf
    # # Set patterns for defined textfile
    warn = *overdue*
    ok = *mail sent*

    # # handling of the log can be customized through tags prepended to the name
    # #
    # # don't send context lines around relevant lines
    textfile = nocontext d:\log\sample.txt
    # # read new files from the first line. Otherwise the agent will start at the
    # # last line at the time the agent first sees the file 
    textfile = from_start d:\log\sample*.txt
    # # treat the file as a rotated log (one where in certain intervals a new file is
    # # created and the previous file is at some point moved away).
    # # In this case all files matching this pattern are treated as one service
    # # and the agent will try to read each file to the end and then continue to the
    # # next newer one.
    textfile = rotated d:\log\sample_*.txt
    # # Of course these tags can be combined
    textfile = nocontext rotated d:\log\sample_*.txt

[logwatch]
    # activate modern eventlog api introduced in vista
    # pro: supports new logs introduced with vista
    # contra: only on vista (server 2008) and newer, less well tested, maybe slower
    # Note: setting this does not change the default set of monitored logs that
    # are found in Windows registry.
    vista_api = yes

    # Testing: output *all* messages from the eventlogs
    sendall = yes

    # From application log send only critical messages
    logfile application = crit

    # From system log send only warning/critical messages,
    # but suppress any context messages
    logfile system = nocontext warn

    # Switch all other logfiles off. Default is warn:
    # send messages of type warn or crit
    logfile * = off

    # Activate a specific log. Requires vista_api = yes. This can be used to
    # activate the monitoring of a log not found in Windows registry. Note:
    # wildcards only work with standard logs that are found in Windows registry.
    # To find the correct name for a log, right-click on the log in
    # event-viewer -> Properties and use the name from "Full Name"
    logfile Microsoft-Windows-GroupPolicy/Operational = warn

[mrpe]
    # Run classical monitoring plugins. The word before the command
    # line is the service description for the monitoring. Use backslashes
    # in Windows-paths.
    # Note: The windows agent will prefix all commands without an absolute
    #       path with the agents executable dir. So if you want to use
    #       system wide commands like cscript or ping, you need to specify
    #       them with an absolute path
    check = Dummy mrpe\check_crit
    check = IP_Configuration mrpe\check_ipconfig 1.2.3.4
    check = Whatever c:\myplugins\check_whatever -w 10 -c 20
    #
    # The option include allows you to define additional include files and the
    # user domain in which include files should be executed.
    #
    include \\exampleuser = C:\includes\exampleuser_mrpe.cfg
    #
    # If you omit the user the file is executed with the current user
    #
    include = C:\includes\default.cfg
    #
    # The syntax in the mrpe include file is the same as in the mrpe section,
    # with the exception that you cannot add further includes in a include file.
    # There is also no need to define a [mrpe] section in an included file. You
    # just need to define the <tt>check</tt> lines here.
    #
    # exampleuser_mrpe.cfg
    #     check = Dummy mrpe\check_crit
    #     check = IP_Configuration mrpe\check_ipconfig 1.2.3.4
    #
    #     # Paths or plugin parameters containing spaces must be quoted:
    #     check = Dummy "C:\Program Files (x86)\check_mk\mrpe\check_crit.bat"
    #     some param "with space"
    #
    # Important: Keep in mind that the agent needs the permission to run
    # scripts as other user. Internally it uses the windows command runas /User:
    # which prompts for a password if agent has no permission to change to this user.
    # In this case the check_mk agent will get stuck!

[fileinfo]
    path = C:\Programs\Foo\*.log
    path = M:\Bar Test\*.*
    # Recursive wildcards can also be used:
    path = C:\MyDocuments\Foo\**

[local]
    # define timeouts for local scripts matching
    # specific patterns - first match wins
    timeout *.vbs = 20
    timeout *.bat = 10
    timeout * = 30

[plugins]
    # example: the windows_updates.vbs
    # plugin is executed asynchronous
    # and is only updated every 3600 seconds
    # it may fail (timeout / error) up to 3 times before the last known data is discarded
    execution windows_updates.vbs = async
    timeout windows_updates.vbs = 120
    cache_age windows_updates.vbs = 3600
    retry_count windows_updates.vbs = 3

    # define timeouts for plugin scripts matching
    # specific patterns - first match wins
    timeout ps_perf.ps1 = 20
    timeout *.ps1 = 10
    timeout * = 30

    # When using the Check_MK Inventory plugin, it is a good idea to make the
    # plugin being executed asynchronous to prevent it from hooking up the
    # whole agent processing. Additionally it should have a execution timeout.
    execution mk_inventory.ps1 = async
    timeout mk_inventory.ps1 = 240

[ps]
    # Experimental: Set to yes to use wmi for retrieving process information.
    # This is required for the additional ps feature below.
    use_wmi = no
    # Include the whole path of a process and its arguments in the process list.
    full_path = no
