[global]
    # Restrict access to certain IP addresses
    # only_from = 127.0.0.1 192.168.56.0/24
    # Firewall natting FW IP:195.95.137.6
    only_from   = 127.0.0.1 172.22.237.25 172.22.237.24 195.95.137.6
	
    # Do only execute programs and scripts with
    # the following suffixes (in local and plugins).
    # Per default all extensions except txt and dir
    # are being executed.
    # execute = exe bat vbs
    execute = bat ps1 vbs exe

    # Restrict the following configuration variables
    # in [global] to the following hosts
    # host = winsrv* zab???ad

    # Just output certain sections (e.g. for upper hosts)
    # sections = check_mk plugins df
    # sections = check_mk uptime df mem fileinfo services plugins
	
    # https://mathias-kettner.de/checkmk_windows.html
    crash_debug = yes
    
    # DISABLE SECTIONS
    # -------------------
    # disabled_sections = ps mem df ..
    
    # sections: for testing and deactivation
    # --------------------------------------------------------------------------
    # sections = check_mk
    # sections = ps
    # sections = mem
    # sections = fileinfo
    # sections = services
    # sections = winperf_if
    # sections = winperf_phydisk
    # sections = winperf_processor
    # sections = dotnet_clrmemory
    # sections = wmi_cpuload
    # sections = msexch
    # sections = skype
    # sections = wmi_webservices
    # sections = openhardwaremonitor
    # sections = local
    # sections = plugins
    # sections = spool
    # sections = mrpe
    # sections = systemtime
    # sections = logwatch
    # sections = check_mk
    # sections = uptime
    # sections = df
    
    # sections = win_netstat
    # sections = winperf   
    # sections = winperf_tcp_conn
    # sections = winperf_ts_sessions
    # --------------------------------------------------------------------------
    
[ps]
    # Experimental: Set to yes to use wmi for retrieving process information.
    # This is required for the additional ps feature below.
    # use_wmi = no
    # #########################  use_wmi = yes
    #
    # Include the whole path of a process and its arguments in the process list.
    # full_path = no
    # full_path = yes
 
   
[winperf]
    # getting counters at Windows via CMD:
    # lodctr /s:c:\temp\counters.ini
    #
    # Example for different hosts
    # --------------------------------
    # Counters for some selected hosts
    # host = zmsex0? zexchange*
    # counters = 10332:msx_queues
    # Counters for some other hosts
    # host = zmsex1?
    # counters = 10320:msx_queues


    # Select counters to extract. The following counters
    # are needed by checks shipped with check_mk.
    # ------------------------------------------------------
    # counters = 10332:msx_queues
    # counters = 510:interfaces
    # counters = 644:tcp-active-sessions
    # counters = 1922:Active Sessions
    # counters = 1924:Inactive Sessions
    # counters = 1926:Total Sessions
    # >Terminalsessions currently remotely logged on users
    # ts_sessions for Windows 2008
    # counters = Terminal Services:ts_sessions
    # ts_sessions for Windows 2012
    # counters = 1920:ts_sessions
    # ts_sessions for Windows 2016
    #counters = 4332:ts_sessions 
    # or
    #counters = Terminal Services:ts_sessions    
    # 4330=Terminaldienstesitzungen
    # 4330=Terminal Services Session
    #
    # >TCP Connections
    counters = 638:tcp_conn
	counters = Terminal Services:ts_sessions  

[logwatch]
    # Testing: output *all* messages from the eventlogs
    # sendall = yes

    # From application logfile send only critical messages
    # logfile application = crit 

    # From the security logfile send all messages
    # logfile security = all

    # Switch all other logfiles off. Default is warn:
    # send messages of type warn or crit
    # logfile * = off
    
    # NO Windows log infos from:
    # -------------------------------
    logfile security  = off
    logfile internet explorer = off
	
    # possible Windows logs	
    # --------------------------------
    logfile active directory web services = crit nocontext
    logfile adam (vmwarevcmsds) = crit nocontext
    logfile adam (vmwarevdmds) = crit nocontext
    logfile adam vmwarevdmds = crit nocontext
    logfile application = crit nocontext
    logfile check_mk agent = crit nocontext
    logfile citrix delivery services = crit nocontext
    logfile cdb services = crit nocontext
    logfile datev.rz-kommunikation = crit nocontext
    logfile dell license manager = crit nocontext
    logfile dell openmanage = crit nocontext
    logfile dfs replication = crit nocontext
    logfile directory service = crit nocontext
    logfile exchange monitoring events = crit nocontext
    logfile file replication service = crit nocontext
    logfile hardwareevents = crit nocontext
    logfile idrarchiveeventlog = crit nocontext
    logfile key management service = crit nocontext
    logfile idrarchiveeventlog = crit nocontext
    logfile lync server = crit nocontext
    logfile maxxexport = crit nocontext
    logfile maxximport = crit nocontext
    logfile maxxsalesreader = crit nocontext
    logfile microsoft-exchange-troubleshooters/operational = crit nocontext
    logfile microsoft web deploy = crit nocontext
    logfile mvit population = crit nocontext
    logfile mvit services = crit nocontext
    logfile msexchange management = crit nocontext
    logfile nicebridge = crit nocontext
    logfile oalerts = crit nocontext
    logfile odiag = crit nocontext
    logfile operations manager = crit nocontext
    logfile osession = crit nocontext
    logfile promodag = crit nocontext
    logfile remote lab exchange service = crit nocontext
    logfile setup = crit nocontext
    logfile simcorp = crit nocontext
    logfile sindb = crit nocontext
    logfile smartnotes = crit nocontext
    logfile storagestreamingfolder = crit nocontext
    logfile symantec endpoint protection client = crit nocontext
    logfile symantec endpoint protection manager = crit nocontext
    logfile system = crit nocontext
    logfile syno-maintenance = crit nocontext
    logfile veeam backup = crit nocontext
    logfile visualsvnserver = crit nocontext
    logfile windows assessment services client = crit nocontext
    logfile windows powershell = crit nocontext
    logfile wuestenrot = crit nocontext
   

    # logfile * = off
[logfiles]	
    #textfile = nocontext C:\temp backup\Testdatei*.txt | D:\tmp\info.log
    #warn = hostA? WARN*
    #crit = *invalid line*
    #ignore = User * logged in
    #ok = *Backup created*
    #crit = *emergency*
 
    #textfile = nocontext C:\Windows\logins.txt
    #warn = *Access error*
    #crit = *Password error*
    #ignore = *successfully logged in
    
    #textfile = nocontext D:\IMPORT\_Verarbeitung\Log-Nagios\Import_WW-Identitaeten_anlegen.log
    #ignore = *0 errors*
    #ignore = *Info - 0 errors*
    #ignore = *Serious - 0 errors*
    #ignore = *- Info -*
    #crit = *Serious*Error*
    #crit = *Serious*Fehler*	
    #crit = *errors*
    #crit = *error*
    #crit = serious
    #crit = *serious*
    #crit = *Serious*	

[mrpe]
    # Run classical Nagios plugins. The word before the command
    # line is the service description for Nagios. Use backslashes
    # in Windows-paths.
    #check = Dummy_MRPE mrpe\check_crit
    #check = IP_Configuration_MRPE mrpe\check_ipconfig 1.2.3.4
    #check = Whatever_MRPE c:\myplugins\check_whatever -w 10 -c 20
    #check = ADDM_Discovery_MRPE  c:\myplugins\check_whatever -w 10 -c 20

    # Additional mrpe configs
    # The syntax in the mrpe include file is the same as in the mrpe section,
    # with the exception that you cannot add further includes in a include file. 
    # There is also no need to define a [mrpe] section in an included file. 
    # You just need to define the check lines here. 
    # The include files can be changed during the runtime
    #include \\ab = C:\includes\ab_mrpe.cfg
    #include \\NT-AUTORITÃ„T\SYSTEM = C:\includes\system_mrpe.cfg

    # If you omit the user the file is executed with the current user
    #include = C:\includes\default.cfg

[fileinfo]
    # path = C:\Programs\Foo\*.log
    # path = M:\Bar Test\*.*
    
[local]
    # define timeouts for local scripts matching
    # specific patterns - first match wins
    # timeout *.vbs = 50
    # timeout *.bat = 50
    timeout * = 50

	
[plugins]
    # https://mathias-kettner.de/checkmk_windows.html
    #
    # execution
    # This parameter specifies when a script should be executed. Whether during the agents runtime (sync) 
    # or later on (async) after the agent data has been sent. Any data from scripts with async mode will be available on the next agent call.
    # The default setting is sync.
    #
    # timeout
    # This parameter specifies how long a script is allowed to run until the process gets terminated. 
    # In this case the script delivers no output at all, thus leading to a missing section in the agent output. The default value is 60.
    #
    # retry_count
    # This parameter allows a script to fail multiple times (e.g. due to a timeout) 
    # before its cached data is discarded and no script output is returned. The default value is 0.
    # Generally a local or plugin script should be able to finish in a reasonable amount of time. 
    # If it occasionally hangs for some unknown reason it might be a good idea to increase the retry_count for this script.
    #
    # cache_age
    # This parameter signalizes that the cached data can be reused for the specified time.
    # As long as the script output is new enough, there is no need to start the script again. The default value is 0.
    # This is especially useful for scripts which cause high cpu load on execution or simply do not provide meaningful new information
    # within those short query timeframes. For those scripts you could set the cache_age to 3600, 
    # so that the script's cached data is only updated once an hour. 
    #
    #
    # define timeouts for plugin scripts matching
    # specific patterns - first match wins
    # timeout windows_updates.ps1 = 50
    # timeout *.vbs = 50
    # timeout * = 50
    # Default timeout is 60 seconds
    # Default cache age is 0 seconds (no caching)
    # timeout wmic_if.bat = 50

    # the windows updates plugin is executed in async,
    # has a timeout of 120 seconds
    # and is only updated every 3600 seconds
    #execution windows_updates.ps1 = async
    #timeout windows_updates.ps1 = 50
    #cache_age windows_updates.ps1 = 50

    # All other scripts have a cache age of 120 seconds,
    # their data is discarded if the script fails 3 times
    # and have a timeout of 10 seconds
    #cache_age * = 60
    #retry_count *.bat = 50
    #timeout * = 50
   
    # mssql.vbs
    execution mssql.vbs = async
    timeout mssql.vbs = 50
    cache_age mssql.vbs = 50
    retry_count mssql.bat = 50

    # mk_oracle.ps1
    execution mk_oracle.ps1 = async
    timeout mk_oracle.ps1 = 50
    cache_age mk_oracle.ps1 = 50
    retry_count mk_oracle.ps1 = 50
   
    # netstat_an.bat
    execution netstat_an.bat = async
    timeout netstat_an.bat = 50
    cache_age netstat_an.bat = 50
    retry_count netstat_an.bat = 50
    

    # mk_inventory.ps1
    execution mk_inventory.ps1 = async
    retry_count mk_inventory.ps1 = 50
    # 3600 = 1h;  3600x24h = 86400
    cache_age mk_inventory.ps1 = 50
    timeout mk_inventory.ps1 = 50
    
    timeout *.bat = 50
    timeout *.ps1 = 50
    timeout *.vbs = 50
    timeout *.exe = 50
    retry_count *.bat = 3
    retry_count *.ps1 = 3
    retry_count *.vbs = 3
    retry_count *.exe = 3
