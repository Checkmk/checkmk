# See https://github.com/bazelbuild/rules_cc/tree/main/examples/rule_based_toolchain

load("@bazel_skylib//rules/directory:directory.bzl", "directory")
load("@bazel_skylib//rules/directory:subdirectory.bzl", "subdirectory")

package(default_visibility = ["//visibility:public"])

exports_files(glob(["bin/**"]))

directory(
    # Our hermetic clang-tidy uses this target to find the C++ headers.
    name = "x86_64-buildroot-linux-gnu",
    srcs = ["lib/gcc/x86_64-buildroot-linux-gnu/14.3.0"],
)

directory(
    name = "toolchain_root",
    srcs = glob([
        "lib/**",
        "x86_64-buildroot-linux-gnu/include/**",
    ]),
)

subdirectory(
    name = "lib-gcc-include",
    parent = ":toolchain_root",
    path = "x86_64-buildroot-linux-gnu/include",
)

subdirectory(
    name = "include-x86_64-buildroot-linux-gnu",
    parent = ":toolchain_root",
    path = "lib/gcc/x86_64-buildroot-linux-gnu/14.3.0/include",
)

filegroup(
    name = "builtin_headers",
    srcs = [
        ":include-x86_64-buildroot-linux-gnu",
        ":lib-gcc-include",
    ],
)

filegroup(
    name = "linker_builtins",
    data = glob([
        "bin/*ld*",
        "lib/**/*.a",
        "lib/**/*.so*",
        "lib/**/*.o",
    ]),
)

filegroup(
    name = "linker_buildroot",
    srcs = glob([
        "x86_64-buildroot-linux-gnu/bin/ld*",
    ]),
)

filegroup(
    name = "multicall_support_files",
    srcs = glob([
        "libexec/**/*",
    ]),
)

directory(
    name = "root",
    srcs = glob(["x86_64-buildroot-linux-gnu/sysroot/**/*"]),
)

subdirectory(
    name = "sysroot",
    parent = ":root",
    path = "x86_64-buildroot-linux-gnu/sysroot",
)

alias(
    name = "dynamic_runtime_lib",
    actual = "x86_64-buildroot-linux-gnu/sysroot/usr/lib/libstdc++.so",
)

alias(
    name = "static_runtime_lib",
    actual = "x86_64-buildroot-linux-gnu/sysroot/usr/lib/libstdc++.a",
)
