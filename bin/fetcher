#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

import os
import argparse
import logging
import sys
from contextlib import suppress
from typing import NoReturn

from cmk.utils.exceptions import MKTerminate
from cmk.utils.fetcher_crash_reporting import create_fetcher_crash_dump
from cmk.utils.type_defs import HostName

import cmk.base.utils  # pylint: disable=cmk-module-layer-violation
import cmk.fetchers.controller as controller  # pylint: disable=cmk-module-layer-violation

opt_debug = False

logger = logging.getLogger("cmk.base")
cmk.base.utils.register_sigint_handler()


class ArgumentParser(argparse.ArgumentParser):
    def error(self, message: str) -> NoReturn:
        """fetcher output is always protocol compatible, even when arguments are bad"""

        sys.stdout.write(
            controller.make_failure_answer("\n" + message + '\n' + self.format_help(),
                                           severity="critical"))
        self.exit(21)


def parse_arguments() -> argparse.Namespace:
    parser = ArgumentParser()

    parser.add_argument(
        "--debug",
        action="store_true",
        help="Enable debug mode",
    )

    return parser.parse_args()


# TODO (sk): replace with normal reader after consulting with SP
# we are using temporary this method as proven(_base._read_line)
# slow, but for one command 10-20 bytes length  is ok.
def _read_line() -> str:
    line = b''
    while True:
        byte = os.read(0, 1)
        if not byte:  # EOF - should not be hit
            return ''

        if byte == b'\n':
            return line.decode("utf-8")
        line += byte

    return ''


def main() -> int:
    cmk.base.utils.register_sigint_handler()  # as in cmk: do_keepalive
    serial = ""
    host_name: HostName = ""
    try:
        args = parse_arguments()
        if args.debug:
            sys.stdout.write(
                "Debug mode is enabled")  # reserved for the future testing(out of Core)

        while True:
            command = _read_line()
            if command == "*":
                break
            with suppress(ValueError):  # ignores invalid commands - useful for testing in terminal
                serial, host_name, timeout = command.split(sep=";", maxsplit=2)

                controller.load_global_config(int(serial))
                controller.run_fetchers(serial=serial, host_name=host_name, timeout=int(timeout))

        return 0

    # NOTE: Yes, this is too common. But at this moment we have no chance to provide better method.
    except MKTerminate:
        return 0

    except Exception as e:
        # reporting to site
        result = create_fetcher_crash_dump(serial=serial, host=host_name)

        # reporting to microcore
        controller.write_data(
            controller.make_failure_answer("Exception is '" + str(e) + "'" + result,
                                           severity="critical"))
        return 15


if __name__ == "__main__":
    sys.exit(main())
