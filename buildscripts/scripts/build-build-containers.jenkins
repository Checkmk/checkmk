def DISTRO_LIST_DEFAULT
def NODE = ''
withFolderProperties{
    DISTRO_LIST_DEFAULT = env.DISTRO_LIST
    NODE = env.BUILD_NODE
}

properties([
  buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '7', numToKeepStr: '14')),
  parameters([
    string(name: 'DISTROS', defaultValue: DISTRO_LIST_DEFAULT, description: 'List of targeted distros' )
   ])
])
def DISTRO_LIST = DISTROS.split(' ')
def DOCKER_BUILDS = [:]

currentBuild.description = 'Building for the following Distros:\n' + DISTRO_LIST
node (NODE) {
    // Since this is the job that builds our build containers, we can not
    // use the build containers :-). Create some throw away container with
    // a minimal set of things tools to bootstrap our build containers.
    def BASE_IMAGE = docker.image("ubuntu:20.04")
    BASE_IMAGE.pull()

    BASE_IMAGE.inside('-u 0:0 --ulimit nofile=1024:1024 -v /var/run/docker.sock:/var/run/docker.sock --cap-add=SYS_ADMIN') {
        // git: needed for fetching our repository and working with it
        // curl: needed for fetching the docker public key below
        // gnupg2: needed for importing the docker public key below
        // lsb-release: needed for adding the correct docker mirror info
        sh('apt-get update')
        sh('apt-get install -y git curl gnupg2 lsb-release')

        // docker: needed for creating the containers
        sh('curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -')
        sh('echo "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" >/etc/apt/sources.list.d/docker.list')
        sh('apt-get update')
        sh('DEBIAN_FRONTEND=noninteractive apt-get install -y docker-ce')

        def VERS_TAG
        def BRANCH
        def BRANCH_VERSION
        stage('checkout sources') {
            checkout(scm)
            // Load libraries
            notify = load 'buildscripts/scripts/lib/notify.groovy'
            str_mod = load 'buildscripts/scripts/lib/str_mod.groovy'
            versioning = load 'buildscripts/scripts/lib/versioning.groovy'

            // Image Version Tag
            VERS_TAG = versioning.get_docker_tag(scm)
            BRANCH = versioning.get_branch(scm)
            BRANCH_VERSION = versioning.get_branch_version()
        }

        try {
            DISTRO_LIST.each { DISTRO ->
                DOCKER_BUILDS[DISTRO] = {
                    def IMAGE
                    stage('build ' + DISTRO) {
                        dir('buildscripts/infrastructure/build-nodes') {
                            def DOCKER_REGISTRY_NOHTTP = str_mod.strip_protocol_from_url(DOCKER_REGISTRY)
                            withCredentials([usernamePassword(credentialsId: 'nexus', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                                docker.withRegistry(DOCKER_REGISTRY, 'nexus') {
                                    IMAGE = docker.build(DISTRO + ':' + VERS_TAG, "--build-arg DOCKER_REGISTRY='$DOCKER_REGISTRY_NOHTTP' --build-arg NEXUS_ARCHIVES_URL='$NEXUS_ARCHIVES_URL' --build-arg DISTRO='$DISTRO' --build-arg NEXUS_USERNAME='$USERNAME' --build-arg NEXUS_PASSWORD='$PASSWORD' --build-arg ARTIFACT_STORAGE='$ARTIFACT_STORAGE' --build-arg VERS_TAG='$VERS_TAG' --build-arg BRANCH_VERSION='$BRANCH_VERSION' -f $DISTRO/Dockerfile .")
                                }
                            }
                        }
                    }

                    stage('upload ' + DISTRO) {
                        docker.withRegistry(DOCKER_REGISTRY, 'nexus') {
                            IMAGE.push()
                            IMAGE.push(BRANCH + '-latest')
                        }
                    }
                }
            }
            parallel DOCKER_BUILDS
        }catch(Exception e) {
            notify.notify_error(e)
        }
    }
}
