properties([
  buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '7', numToKeepStr: '14')),
  parameters([
    string(name: 'DISTROS', defaultValue: DISTRO_LIST_MASTER, description: 'List of targeted distros' )
  ])
])
def DISTRO_LIST = DISTROS.split(' ')
def DOCKER_BUILDS = [:]

currentBuild.description = 'Building for the following Distros:\n' + DISTRO_LIST
node {
    docker.withRegistry(DOCKER_REGISTRY, 'nexus') {
        def COMMON_IMAGE = docker.image('ubuntu-18.04-common')
        COMMON_IMAGE.pull()
        COMMON_IMAGE.inside('-u 0:0 --ulimit nofile=1024:1024  --cap-add=SYS_ADMIN') {
            stage('checkout sources') {
                checkout(scm)
                // Load libraries
                str_mod = load 'buildscripts/scripts/lib/str_mod.groovy'
                versioning = load 'buildscripts/scripts/lib/versioning.groovy'

                // Image Version Tag
                VERS_TAG = versioning.get_docker_tag(scm)
                BRANCH = versioning.get_branch(scm)

                //Stash Files for later
                dir('buildscripts/infrastructure/build-nodes/gnu-toolchain/') {
                    stash name: 'bw-build-gnu-toolchain', includes: 'bw-build-gnu-toolchain.sh'
                    withCredentials([usernamePassword(credentialsId: 'nexus', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        sh "./bw-build-gnu-toolchain.sh -r $ARTIFACT_STORAGE -d"
                    }
                }
               stash name: 'dockerfiles', includes: 'buildscripts/infrastructure/build-nodes/*/Dockerfile'
            }
        }
    }
}

DISTRO_LIST.each { DISTRO ->
    DOCKER_BUILDS[DISTRO] = {
        node {
            docker.withRegistry(DOCKER_REGISTRY, 'nexus') {
                def COMMON_IMAGE = docker.image('ubuntu-18.04-common')
                COMMON_IMAGE.pull()
                COMMON_IMAGE.inside('-u 0:0 --ulimit nofile=1024:1024  -v /var/run/docker.sock:/var/run/docker.sock --cap-add=SYS_ADMIN') {
                    stage('build ' + DISTRO + ' image') {
                        unstash name: 'dockerfiles'
                        dir('buildscripts/infrastructure/build-nodes/' + DISTRO) {
                            unstash name: 'bw-build-gnu-toolchain'
                            def DOCKER_REGISTRY_NOHTTP = str_mod.strip_protocol_from_url(DOCKER_REGISTRY)
                            def Image = docker.build(DISTRO + ':' + VERS_TAG, "--build-arg DOCKER_REGISTRY='$DOCKER_REGISTRY_NOHTTP' --build-arg ARTIFACT_STORAGE='$ARTIFACT_STORAGE' --build-arg VERS_TAG='$VERS_TAG' .")
                            Image.push()
                            Image.push(BRANCH + '-latest')
                        }
                    }
                }
            }
        }
    }
}
parallel DOCKER_BUILDS
