def DISTRO_LIST_DEFAULT
def NODE = ''
withFolderProperties{
    DISTRO_LIST_DEFAULT = env.DISTRO_LIST
    NODE = env.BUILD_NODE
}

properties([
  buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '7', numToKeepStr: '14')),
  parameters([
    string(name: 'DISTROS', defaultValue: DISTRO_LIST_DEFAULT, description: 'List of targeted distros' )
   ])
])
def DISTRO_LIST = DISTROS.split(' ')
def DOCKER_BUILDS = [:]

currentBuild.description = 'Building for the following Distros:\n' + DISTRO_LIST

timeout(time: 12, unit: 'HOURS') {
    node (NODE) {
        def VERS_TAG
        def BRANCH
        def BRANCH_VERSION
        stage('checkout sources') {
            checkout(scm)
            // Load libraries
            notify = load 'buildscripts/scripts/lib/notify.groovy'
            str_mod = load 'buildscripts/scripts/lib/str_mod.groovy'
            versioning = load 'buildscripts/scripts/lib/versioning.groovy'

            // Image Version Tag
            VERS_TAG = versioning.get_docker_tag(scm)
            BRANCH = versioning.get_branch(scm)
            BRANCH_VERSION = versioning.get_branch_version()
        }


        try {
            DISTRO_LIST.each { DISTRO ->
                DOCKER_BUILDS[DISTRO] = {
                    def IMAGE
                    stage('build ' + DISTRO) {
                        dir('buildscripts/infrastructure/build-nodes') {
                            sh('cp ../../../{defines.make,omd/strip_binaries} scripts')  // we need it *within* the context :-P
                            def DOCKER_REGISTRY_NOHTTP = str_mod.strip_protocol_from_url(DOCKER_REGISTRY)
                            withCredentials([usernamePassword(credentialsId: 'nexus', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                                docker.withRegistry(DOCKER_REGISTRY, 'nexus') {
                                    def DOCKERFILE = "$DISTRO/Dockerfile";
                                    def IMAGE_ALIAS_NAME = sh(script: "grep 'ARG IMAGE_' ${DOCKERFILE} | awk '{print \$2}'", returnStdout: true).replaceAll("[\r\n]+", "");
                                    def RESOLVED_IMAGE_ID = sh(script: "../../docker_image_aliases/resolve.py ${IMAGE_ALIAS_NAME}", returnStdout: true).replaceAll("[\r\n]+", "");
                                    println("Using IMAGE_ALIAS_NAME: ${IMAGE_ALIAS_NAME}=${RESOLVED_IMAGE_ID}");
                                    def DOCKER_ARGS = (
                                        " --build-arg $IMAGE_ALIAS_NAME=$RESOLVED_IMAGE_ID" +
                                            " --build-arg DOCKER_REGISTRY='$DOCKER_REGISTRY_NOHTTP'" +
                                            " --build-arg NEXUS_ARCHIVES_URL='$NEXUS_ARCHIVES_URL'" +
                                            " --build-arg DISTRO='$DISTRO'" +
                                            " --build-arg NEXUS_USERNAME='$USERNAME'" +
                                            " --build-arg NEXUS_PASSWORD='$PASSWORD'" +
                                            " --build-arg ARTIFACT_STORAGE='$ARTIFACT_STORAGE'" +
                                            " --build-arg VERS_TAG='$VERS_TAG'" +
                                            " --build-arg BRANCH_VERSION='$BRANCH_VERSION'" +
                                            " -f $DOCKERFILE .");
                                    println("Using DOCKER_ARGS: ${DOCKER_ARGS}");
                                    IMAGE = docker.build(DISTRO + ':' + VERS_TAG, DOCKER_ARGS);
                                }
                            }
                        }
                    }

                    stage('upload ' + DISTRO) {
                        docker.withRegistry(DOCKER_REGISTRY, 'nexus') {
                            IMAGE.push()
                            IMAGE.push(BRANCH + '-latest')
                        }
                    }
                }
            }
            parallel DOCKER_BUILDS
        } catch(Exception e) {
            notify.notify_error(e)
        }
    }
}
