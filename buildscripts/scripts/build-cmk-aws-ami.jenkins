import java.text.SimpleDateFormat

currentBuild.description = '\nBuilding the Amazon Machine Image (AMI)\n'

def NODE = ''
withFolderProperties{
    NODE = env.BUILD_NODE
}

properties([
  buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '7', numToKeepStr: '14')),
  parameters([
    string(name: 'EDITION', defaultValue: 'free', description: 'We currently build AMI only with the free edition.' ),
    string(name: 'VERSION', defaultValue: 'daily', description: 'Version: daily builds current git state of the branch. You also can specify a git tag here.' ),
    string(name: 'SET_LATEST_TAG', defaultValue: 'no', description: 'SET_LATEST_TAG: setting yes will push this docker container to the latest tag on docker hub.' )
  ])
])

if (EDITION != 'free')  {error "The AMI build is currently only using the free edition."}

// TODO: Change to versioning.get_branch and versioning.get_cmk_version! Then
// the copy&paste below can be removed. First we'll have to clean up the
def BRANCH = scm.branches[0].name.replaceAll("/","-")
def CMK_VERS = get_cmk_version(BRANCH, VERSION)

// Duplicate code with nightly-build.jenkins
def get_cmk_version(BRANCH, VERSION){
    def DATE_FORMAT = new SimpleDateFormat("yyyy.MM.dd")
    def DATE = new Date()

    if (BRANCH == 'master' && VERSION == 'daily') {
        return DATE_FORMAT.format(DATE) // Regular daily build of master branch
    } else if (BRANCH.startsWith('sandbox') && VERSION == 'daily') {
        return DATE_FORMAT.format(DATE) //TODO + '-' + BRANCH // Experimental builds
    } else if (VERSION == 'daily') {
        return BRANCH + '-' + DATE_FORMAT.format(DATE) // version branch dailies (e.g. 1.6.0)
    } else {
        return VERSION
    }
}

node (NODE) {
    def PACKAGE_DIR = WORKSPACE_TMP + '/download'
    stage('cleanup old package dir') {
        sh "rm -rf $PACKAGE_DIR"
    }
    stage('checkout sources') {
        checkout(scm)
        // Load libraries
        notify = load 'buildscripts/scripts/lib/notify.groovy'
        str_mod = load 'buildscripts/scripts/lib/str_mod.groovy'
        versioning = load 'buildscripts/scripts/lib/versioning.groovy'
        upload = load 'buildscripts/scripts/lib/upload_artifacts.groovy'
    }
    stage('git clean')
    {
        sh("git clean -xdf")
    }

    try {
        dir('buildscripts/infrastructure/build-nodes') {
            sh('cp ../../../defines.make scripts')  // we need it *within* the context :-P
            def DOCKER_REGISTRY_NOHTTP = str_mod.strip_protocol_from_url(DOCKER_REGISTRY)
            withCredentials([usernamePassword(credentialsId: 'nexus', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                docker.withRegistry(DOCKER_REGISTRY, 'nexus') {
                    def IMAGE_ALIAS_NAME = "IMAGE_UBUNTU_21_04"
                    def RESOLVED_IMAGE_ID = sh(script: "../../docker_image_aliases/resolve.sh ${IMAGE_ALIAS_NAME}", returnStdout: true).replaceAll("[\r\n]+", "");
                    println("Using IMAGE_ALIAS_NAME: ${IMAGE_ALIAS_NAME}=${RESOLVED_IMAGE_ID}");

                    sh("rm -rf \"${PACKAGE_DIR}\"")
                    upload.download_deb(INTERNAL_DEPLOY_DEST, INTERNAL_DEPLOY_PORT, CMK_VERS, PACKAGE_DIR, EDITION, "focal")

                    stage('Build AMI')  {
                        sh("pwd")
                        sh("ls -l ${WORKSPACE}/buildscripts/infrastructure/build-nodes/aws")
                        sh("set")
                        def DOCKER_ARGS = (
                            " --build-arg $IMAGE_ALIAS_NAME=$RESOLVED_IMAGE_ID" +
                            " --build-arg DOCKER_REGISTRY='$DOCKER_REGISTRY_NOHTTP'" +
                            " --build-arg NEXUS_ARCHIVES_URL='$NEXUS_ARCHIVES_URL'" +
                            " --build-arg NEXUS_USERNAME='$NEXUS_USERNAME'" +
                            " --build-arg NEXUS_PASSWORD='$NEXUS_PASSWORD'" +
                            " --build-arg ARTIFACT_STORAGE='$ARTIFACT_STORAGE'" +
                            "  ${WORKSPACE}/buildscripts/infrastructure/build-nodes/aws/");
                        def BUILD_IMAGE = docker.build("build-image:ami_toolchain", DOCKER_ARGS);
                        BUILD_IMAGE.inside("-u 0:0 --ulimit nofile=1024:1024  -v ${PACKAGE_DIR}:/download -v /var/run/docker.sock:/var/run/docker.sock") {
                            withCredentials([
                                usernamePassword(credentialsId: 'aws', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID'),
                                string(credentialsId: 'ec2_key', variable: 'EC2_KEY'),
                                sshUserPrivateKey(credentialsId: 'ansible_ssh_private_key_file', keyFileVariable: 'ANSIBLE_SSH_PRIVATE_KEY_FILE'),
                                string(credentialsId: 'cmkadmin_pass', variable: 'CMKADMIN_PASS'),
                                ]) {
                                    // HINT workaround 1): "export DEFAULT_LOCAL_TMP is required because ansible creates temporary data in this directory"
                                    // if the variable DEFAULT_LOCAL_TMP is not specified the temporary directory would be the root folder of the environment

                                    // HINT workaround 2): HOME=$WORKSPACE_TMP must be set before running the ansible playbook otherwise the following error occurs, because ansible scripts
                                    // access the environment variable HOME directly:
                                    // Unable to create local directories /home/$HOME/.ansible/cp
                                    sh """
                                        set &&
                                        cd ./aws/ &&
                                        export DEFAULT_LOCAL_TMP=$WORKSPACE_TMP &&
                                        export ANSIBLE_HOST_KEY_CHECKING=False &&
                                        HOME=$WORKSPACE_TMP AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY EC2_KEY=$EC2_KEY ANSIBLE_SSH_PRIVATE_KEY_FILE=$ANSIBLE_SSH_PRIVATE_KEY_FILE CMKADMIN_PASS=$CMKADMIN_PASS PACKAGE_DIR=/download EDITION=$EDITION CMK_VERS=$CMK_VERS ./build_ami.yml -vv
                                    """
                            }
                        }
                    }
                }
            }
        }
    } catch(Exception e) {
        notify.notify_error(e)
    }
}
