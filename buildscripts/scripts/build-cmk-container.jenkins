import java.text.SimpleDateFormat

currentBuild.description = '\nBuilding the CMK docker container\n'

def NODE = ''
withFolderProperties{
    NODE = env.BUILD_NODE
}

properties([
  buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '7', numToKeepStr: '14')),
  parameters([
    string(name: 'EDITION', defaultValue: 'enterprise', description: 'Edition: raw, free, enterprise or managed' ),
    string(name: 'VERSION', defaultValue: 'daily', description: 'Version: daily builds current git state of the branch. You also can specify a git tag here.' ),
    string(name: 'SET_LATEST_TAG', defaultValue: 'no', description: 'SET_LATEST_TAG: setting yes will push this docker container to the latest tag on docker hub.' )
  ])
])

// TODO: Change to versioning.get_branch and versioning.get_cmk_version! Then
// the copy&paste below can be removed. First we'll have to clean up the
def BRANCH = scm.branches[0].name.replaceAll("/","-")
def CMK_VERS = get_cmk_version(BRANCH, VERSION)

// Duplicate code with nightly-build.jenkins
def get_cmk_version(BRANCH, VERSION){
    def DATE_FORMAT = new SimpleDateFormat("yyyy.MM.dd")
    def DATE = new Date()

    if (BRANCH == 'master' && VERSION == 'daily') {
        return DATE_FORMAT.format(DATE) // Regular daily build of master branch
    } else if (BRANCH.startsWith('sandbox') && VERSION == 'daily') {
        return DATE_FORMAT.format(DATE) + '-' + BRANCH // Experimental builds
    } else if (VERSION == 'daily') {
        return BRANCH + '-' + DATE_FORMAT.format(DATE) // version branch dailies (e.g. 1.6.0)
    } else {
        return VERSION
    }
}

// Cancel job when there is nothing logged to the console for 15 minutes
timeout(activity: true, time: 15, unit: 'MINUTES') {
    node (NODE) {
        def PACKAGE_DIR = WORKSPACE + '/download'
    
        stage('checkout sources') {
            checkout(scm)
        }
        notify = load 'buildscripts/scripts/lib/notify.groovy'
        versioning = load 'buildscripts/scripts/lib/versioning.groovy'
        upload = load 'buildscripts/scripts/lib/upload_artifacts.groovy'
        try {
            docker.withRegistry(DOCKER_REGISTRY, 'nexus') {
                def BUILD_IMAGE = docker.build("build-image:${env.BUILD_ID}", "--pull buildscripts/docker_image_aliases/IMAGE_TESTING")
                BUILD_IMAGE.inside("-u 0:0 --ulimit nofile=1024:1024  -v ${PACKAGE_DIR}/${CMK_VERS}:${PACKAGE_DIR}/${CMK_VERS} -v /var/run/docker.sock:/var/run/docker.sock") {
                    stage('Build Container') {
                        def CREDENTIALS_ID
                        if (EDITION == "raw") {
                            CREDENTIALS_ID = '11fb3d5f-e44e-4f33-a651-274227cc48ab'
                        } else {
                            CREDENTIALS_ID = "registry.checkmk.com"
                        }
    
                        upload.download_version_dir(INTERNAL_DEPLOY_DEST, INTERNAL_DEPLOY_PORT, CMK_VERS, PACKAGE_DIR + "/" + CMK_VERS)
    
                        withCredentials([
                            usernamePassword(credentialsId: CREDENTIALS_ID, passwordVariable: 'DOCKER_PASSPHRASE', usernameVariable: 'DOCKER_USERNAME'),
                            usernamePassword(credentialsId: 'nexus', passwordVariable: 'NEXUS_PASSWORD', usernameVariable: 'NEXUS_USERNAME')]) {
                            sh """
                                ./buildscripts/scripts/build-cmk-container.sh ${BRANCH} ${EDITION} ${CMK_VERS} ${SET_LATEST_TAG}
                            """
                        }
                        withCredentials([file(credentialsId: 'Release_Key', variable: 'RELEASE_KEY')]) {
                            sh """
                                cd ${PACKAGE_DIR}/${CMK_VERS}
                                rsync -av --relative \
                                    --exclude '*dbgsym*.deb' \
                                    -e "ssh -o StrictHostKeyChecking=no -i ${RELEASE_KEY} -p 52022" \
                                    ${PACKAGE_DIR}/./${CMK_VERS}/check-mk-*-docker-*.tar.gz \
                                    ${WEB_DEPLOY_DEST}
                            """
                        }
                    }
                }
            }
        } catch(Exception e) {
            notify.notify_error(e)
        }
    }
}
