#!groovy

/// file: build-cmk-source_tgz.groovy

// todo:
// - check different editions (agents for raw?)
// - compare with source package generated by build-cmk-packages
// - check why providing agent binaries takes longer as expected

/// Creates the Checkmk source package
def main() {
    check_job_parameters([
        ["EDITION", true],
        ["VERSION", true],
        ["DISABLE_CACHE", true],
        ["FAKE_WINDOWS_ARTIFACTS", false],
    ]);

    def versioning = load("${checkout_dir}/buildscripts/scripts/utils/versioning.groovy");
    def package_helper = load("${checkout_dir}/buildscripts/scripts/utils/package_helper.groovy");

    def edition = EDITION;
    def version = VERSION;
    def disable_cache = DISABLE_CACHE;
    def safe_branch_name = versioning.safe_branch_name(scm);
    def branch_version = versioning.get_branch_version(checkout_dir);
    def cmk_version_rc_aware = versioning.get_cmk_version(safe_branch_name, branch_version, version);
    def cmk_version = versioning.strip_rc_number_from_version(cmk_version_rc_aware);

    print(
        """
        |===== CONFIGURATION ===============================
        |checkout_dir:............. │${checkout_dir}│
        |safe_branch_name:......... │${safe_branch_name}│
        |branch_version:........... │${branch_version}│
        |cmk_version:.............. │${cmk_version}│
        |edition:.................. │${edition}│
        |cmk_version_rc_aware:..... │${cmk_version_rc_aware}│
        |===================================================
        """.stripMargin());

    currentBuild.description += (
        """
        |Edition: ${edition}<br>
        |""".stripMargin());

    inside_container(ulimit_nofile: 2048) {
        smart_stage(name: "Prepare workspace") {
            dir("${checkout_dir}") {
                sh("make buildclean");
                versioning.configure_checkout_folder(edition, cmk_version);
            }
        }
    }

    inside_container_minimal(safe_branch_name: safe_branch_name) {
        stage("Build BOM") {
            upstream_build(
                relative_job_name: "${package_helper.branch_base_folder(with_testing_prefix=false)}/builders/build-cmk-bom",
                build_params: [
                    /// currently CUSTOM_GIT_REF must match, but in the future
                    /// we should define dependency paths for build-cmk-distro-package
                    CUSTOM_GIT_REF: effective_git_ref,
                    VERSION: version,
                    DISABLE_CACHE: disable_cache,
                ],
                build_params_no_check: [
                    CIPARAM_OVERRIDE_BUILD_NODE: params.CIPARAM_OVERRIDE_BUILD_NODE,
                    CIPARAM_CLEANUP_WORKSPACE: params.CIPARAM_CLEANUP_WORKSPACE,
                    CIPARAM_BISECT_COMMENT: params.CIPARAM_BISECT_COMMENT,
                ],
                no_remove_others: true, // do not delete other files in the dest dir
                no_venv: true,          // run ci-artifacts call without venv
                omit_build_venv: true,  // do not check or build a venv first
                dest: "/checkmk/",
            );
        }

        smart_stage(name: 'Fetch agent binaries', condition: !params.FAKE_WINDOWS_ARTIFACTS) {
            package_helper.provide_agent_binaries(version, edition, disable_cache, params.CIPARAM_BISECT_COMMENT);
        }

        smart_stage(name: 'Fake agent binaries', condition: params.FAKE_WINDOWS_ARTIFACTS) {
            dir("${checkout_dir}") {
                sh("scripts/fake-artifacts");
            }
        }
    }

    inside_container(ulimit_nofile: 2048) {
        def source_package_name = {
            dir("${checkout_dir}") {
                stage("Create source package") {
                    withCredentials([
                        usernamePassword(
                            credentialsId: 'nexus',
                            passwordVariable: 'NEXUS_PASSWORD',
                            usernameVariable: 'NEXUS_USERNAME')
                    ]) {
                        sh("make dist");
                    }
                }
                cmd_output("ls check-mk-${edition}-${cmk_version}.c?e*.tar.gz")
                ?:
                error("Found no source package path matching ${checkout_dir}/check-mk-${edition}-${cmk_version}.c?e*.tar.gz")
            }
        }();

        print("source_package_name: ${source_package_name}");

        stage("Test source package") {
            sh("""
                ${checkout_dir}/buildscripts/scripts/cleanup-source-archives.sh \
                    "${checkout_dir}/${source_package_name}"
            """);
            package_helper.test_package(
                "${checkout_dir}/${source_package_name}",
                "source",
                WORKSPACE,
                checkout_dir,
                cmk_version);
        }

        stage("Archive stuff") {
            dir("${checkout_dir}") {
                show_duration("archiveArtifacts") {
                    archiveArtifacts(
                        artifacts: source_package_name,
                        fingerprint: true,
                    );
                }
            }
        }
    }
}

return this;
