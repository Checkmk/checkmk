properties([
  parameters([
    string(name: 'DISTROS', defaultValue: DISTRO_LIST_MASTER, description: 'List of targeted distros' )
  ])
])
def DISTRO_LIST = DISTROS.split(' ')
def DOCKER_BUILDS = [:]

currentBuild.description = 'Building for the following Distros:\n' + DISTRO_LIST
node {
    docker.withRegistry(DOCKER_REGISTRY, 'nexus') {
        docker.image('ubuntu-18.04-common').pull()
        docker.image('ubuntu-18.04-common').inside('-u 0:0 --ulimit nofile=1024:1024  --cap-add=SYS_ADMIN --network ci_local-infra') {
            stage('checkout sources') {
                checkout(scm)
                dir('buildscripts/infrastructure/build-nodes/gnu-toolchain/') {
                    stash name: 'bw-build-gnu-toolchain', includes: 'bw-build-gnu-toolchain.sh'
                    withCredentials([usernamePassword(credentialsId: 'nexus', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        sh './bw-build-gnu-toolchain.sh -d'
                    }
                }
               stash name: 'dockerfiles', includes: 'buildscripts/infrastructure/build-nodes/*/Dockerfile'
            }
        }
    }
}

DISTRO_LIST.each { DISTRO ->
    DOCKER_BUILDS[DISTRO] = {
        node {
            docker.withRegistry(DOCKER_REGISTRY, 'nexus') {
                docker.image('ubuntu-18.04-common').pull()
                docker.image('ubuntu-18.04-common').inside('-u 0:0 --ulimit nofile=1024:1024  -v /var/run/docker.sock:/var/run/docker.sock --cap-add=SYS_ADMIN --network ci_local-infra') {
                    stage('build' + DISTRO + ' image') {
                        unstash name: 'dockerfiles'
                        dir('buildscripts/infrastructure/build-nodes/' + DISTRO) {
                            unstash name: 'bw-build-gnu-toolchain'
                            def Image = docker.build(DISTRO, "--network ci_local-infra .")
                            Image.push()
                        }
                    }
                }
            }
        }
    }
}
parallel DOCKER_BUILDS
