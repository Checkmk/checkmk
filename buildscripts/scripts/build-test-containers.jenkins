properties([
  buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '7', numToKeepStr: '14')),
  parameters([
    string(name: 'DISTROS', defaultValue: DISTRO_LIST_MASTER, description: 'List of targeted distros' )
   ])
])


// TODO: Duplicate code (sync buildscripts/scripts/os-nodes.jenkins, buildscripts/scripts/integration-daily-master.jenkins)
DISTRO_LIST = DISTROS.split(' ');
// CMK-1705: SLES-15 is missing xinitd and should therefore not be tested
DISTRO_LIST = DISTRO_LIST - ['sles-15']
// Testing CMA is not needed
DISTRO_LIST = DISTRO_LIST - ['cma']

println("Building for the following Distros:")
println(DISTRO_LIST)
currentBuild.description = currentBuild.description + '\nBuilding for the following Distros:\n' + DISTRO_LIST

def DOCKER_BUILDS = [:]

node {
    docker.withRegistry(DOCKER_REGISTRY, 'nexus') {
        def COMMON_IMAGE = docker.image('ubuntu-18.04-common')
        COMMON_IMAGE.pull()
        COMMON_IMAGE.inside('-u 0:0 --ulimit nofile=1024:1024  --cap-add=SYS_ADMIN') {
            stage('checkout sources') {
                checkout(scm)
                str_mod = load 'buildscripts/scripts/lib/str_mod.groovy'
                versioning = load 'buildscripts/scripts/lib/versioning.groovy'

                // Image Version Tag
                VERS_TAG = versioning.get_docker_tag(scm)
                BRANCH = versioning.get_branch(scm)

                stash name: 'distroinfos', includes: 'omd/distros/*.mk'
                stash name: 'dockerfiles', includes: 'buildscripts/infrastructure/os-nodes/*/Dockerfile'
            }
        }
    }
}

DISTRO_LIST.each { DISTRO ->
    DOCKER_BUILDS[DISTRO] = {
        node {
            docker.withRegistry(DOCKER_REGISTRY, 'nexus') {
                def COMMON_IMAGE = docker.image('ubuntu-18.04-common')
                COMMON_IMAGE.pull()
                COMMON_IMAGE.inside('-u 0:0 --ulimit nofile=1024:1024  -v /var/run/docker.sock:/var/run/docker.sock --cap-add=SYS_ADMIN') {
                    stage('build ' + DISTRO + ' os-image') {
                        unstash name: 'dockerfiles'
                        unstash name: 'distroinfos'
                        def DISTRO_INFO = 'omd/distros/' + sh(script: "echo \'$DISTRO\' | tr 'a-z' 'A-Z' | tr '-' '_'", returnStdout: true).trim() + '.mk'
                        def OS_PACKAGES = sh(script: """
                            cat \'$DISTRO_INFO\'  | sed 's/OS_PACKAGES\\s\\++=\\s\\+\\(.*\\)/\\1/;t;d' | sed 's/#.*\$//' | tr '\\n' ' '
                            """,
                            returnStdout: true).trim()
                        dir('buildscripts/infrastructure/os-nodes/' + DISTRO) {
                            def DOCKER_REGISTRY_NOHTTP = str_mod.strip_protocol_from_url(DOCKER_REGISTRY)
                            sh """
                                docker build \
                                -t $DOCKER_REGISTRY_NOHTTP/$DISTRO-os-image:$BRANCH-latest \
                                -t $DOCKER_REGISTRY_NOHTTP/$DISTRO-os-image:$VERS_TAG \
                                --build-arg VERS_TAG='$VERS_TAG' \
                                --build-arg DOCKER_REGISTRY='$DOCKER_REGISTRY_NOHTTP' \
                                --build-arg ARTIFACT_STORAGE='$ARTIFACT_STORAGE' \
                                --build-arg PACKAGES='$OS_PACKAGES' \
                                .
                            """
                            sh "docker push $DOCKER_REGISTRY_NOHTTP/$DISTRO-os-image:$VERS_TAG"
                            sh "docker push $DOCKER_REGISTRY_NOHTTP/$DISTRO-os-image:$BRANCH-latest"
                        }
                    }
                }
            }
        }
    }
}
parallel DOCKER_BUILDS
