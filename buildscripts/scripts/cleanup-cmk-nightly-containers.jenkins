// library for calculation of version numbers
import java.text.SimpleDateFormat
import groovy.transform.Field

currentBuild.description = '\nCleaning up Nightly Docker images in Nexus Regisrty\n'

def BRANCH = ''
def BUILD_NODE = ''
withFolderProperties{
    BRANCH = env.BRANCH
    BUILD_NODE = env.BUILD_NODE
}

properties([
  buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '7', numToKeepStr: '14')),
])

// Pattern for the daily version to be deleted
def PATTERN = get_pattern(BRANCH)
def BUILDS = [:]
def hostNames(label) {
  def nodes = []
  jenkins.model.Jenkins.instance.computers.each { c ->
    if (c.node.labelString.contains(label)) {
      nodes.add(c.node.selfLabel.name)
    }
  }
  return nodes
}

def NODE_LIST = hostNames(BUILD_NODE)

// Cancel job when there is nothing logged to the console for 15 minutes
timeout(activity: true, time: 15, unit: 'MINUTES') {
    node ('both') {
        docker.withRegistry(DOCKER_REGISTRY, 'nexus') {
            def COMMON_IMAGE = docker.image('nexus3-cli')
            COMMON_IMAGE.pull()
            COMMON_IMAGE.inside() {
                stage('Cleanup images ' + PATTERN) {
                    def NEXUS_CLEAN_CMD = 'nexus3-del-artifacts.py'
                    withCredentials([usernamePassword(credentialsId: 'nexus', passwordVariable: 'NEXUS_PWD', usernameVariable: 'NEXUS_USER')]) {
                        NEXUS_CLEAN_CMD += " $ARTIFACT_STORAGE $NEXUS_USER $NEXUS_PWD"
                    }
                    if (PATTERN != '') {
                        NEXUS_CLEAN_CMD += ' --pattern ' + PATTERN
                    }
                    sh(NEXUS_CLEAN_CMD)
                }
            }
        }
    }
}

NODE_LIST.each { NODE ->
    BUILDS['Delete images on Node ' + NODE] = {
        node(NODE) {
            sh"""
                for IMG in \$(docker image ls --format '{{.Repository}}:{{.Tag}}' | grep $PATTERN:$BRANCH-latest);
                    do docker image rm -f \$IMG;
                done
            """
        }
    }
}
parallel BUILDS


def get_pattern(BRANCH) {
    def VERSION_BRANCH
    def DATE_FORMAT = new SimpleDateFormat("yyyy.MM.dd")
    def DATE = new Date()

    if (BRANCH == "master") {
        VERSION_BRANCH=''
    } else {
        VERSION_BRANCH="${BRANCH}-"
    }
    
    return "cee-${VERSION_BRANCH}${DATE_FORMAT.format(DATE)}"
}

