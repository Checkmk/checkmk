BRANCH_NAME = scm.branches[0].name
FOLDER_ID = BRANCH_NAME.replaceAll('\\.','')

properties([
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '7', numToKeepStr: '14')),
    parameters([
        string(name: 'DISTROS', defaultValue: DISTRO_LIST_MASTER, description: 'List of targeted distros' ),
        string(name: 'EDITION', defaultValue: 'enterprise', description: 'Edition: raw, enterprise or managed' )
    ]),
    pipelineTriggers([
        cron('H 0 * * *')
    ])
])

node: {
    stage('Build Packages') {
        build(job: "cmk_${FOLDER_ID}/nightly_build_containerized",
              parameters: [
                [$class: 'StringParameterValue', name: 'DISTROS', value: DISTROS],
                [$class: 'StringParameterValue', name: 'EDITION', value: EDITION]
            ]
        )
    }
    stage('Build CMK Container') {
        build(job: "cmk_${FOLDER_ID}/nightly_cmk_container")
    }
    parallel([
        'Integration Test for Packages': {
            stage('Integration Test for Packages') {
                build(job: "cmk_${FOLDER_ID}/nightly_test_integration-pipeline",
                      parameters: [
                        [$class: 'StringParameterValue', name: 'DISTROS', value: DISTROS],
                        [$class: 'StringParameterValue', name: 'EDITION', value: EDITION]
                    ]
                )
            }
        },
        'Composition Test for Packages': {
            stage('Composition Test for Packages') {
                build(job: "cmk_${FOLDER_ID}/test-composition",
                      parameters: [
                        [$class: 'StringParameterValue', name: 'DISTROS', value: DISTROS],
                        [$class: 'StringParameterValue', name: 'EDITION', value: EDITION]
                    ]
                )
            }
        },
        'Integration Test for Docker Container': {
            stage('Integration Test for Docker Container') {
                build(job: "cmk_${FOLDER_ID}/docker_integration")
            }
        }
    ])
}
