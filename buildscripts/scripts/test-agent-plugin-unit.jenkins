properties([
  buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '7', numToKeepStr: '14')),
])

def NODE = ''
def DOCKER_TAG_DEFAULT
withFolderProperties{
    NODE = env.BUILD_NODE
    DOCKER_TAG_DEFAULT = env.DOCKER_TAG_FOLDER
}

def PYTHON_VERSIONS = [ "2.6", "2.7", "3.3", "3.4", "3.5", "3.6", "3.7", "3.8" ]

node(NODE) {
    docker.withRegistry(DOCKER_REGISTRY, 'nexus') {
        // We don't have the "versioning" library here. For this reason we can not use versioning.select_docker_tag.
        // Always use the default docker tag we got from the environment.
        def CHECKOUT_IMAGE = docker.image('ubuntu-20.04:' + DOCKER_TAG_DEFAULT)
        CHECKOUT_IMAGE.pull()
        // The commands are executed with the 1001:1000 UID:GID (non-root).
        // This is the UID of the jenkins user on the node which does not exist
        // in the container. For the moment this does not look like a problem.
        // But it may be that we get to the point where we need an existing
        // user in the container.
        CHECKOUT_IMAGE.inside('--ulimit nofile=1024:1024') {
            stage('checkout sources') {
                checkout(scm)
            }
            notify = load('buildscripts/scripts/lib/notify.groovy')
            versioning = load('buildscripts/scripts/lib/versioning.groovy')
        }
    }
}

def DOCKER_BUILDS = [:]

try {
    node(NODE) {
        docker.withRegistry(DOCKER_REGISTRY, 'nexus') {
            def TEST_IMAGE = docker.image('ubuntu-20.04:' + versioning.select_docker_tag(versioning.get_branch(scm), "", DOCKER_TAG_DEFAULT))
            TEST_IMAGE.pull()
            // The commands are executed with the 1001:1000 UID:GID (non-root).
            // This is the UID of the jenkins user on the node.
            TEST_IMAGE.inside("--ulimit nofile=1024:1024 --group-add=docker -v /var/run/docker.sock:/var/run/docker.sock") {
                // pre-create virtual environments before parallel execution
                stage("prepare virtual environment") {
                    sh("make .venv")
                }

                PYTHON_VERSIONS.each { PYTHON_VERSION ->
                    DOCKER_BUILDS[PYTHON_VERSION] = {
                        stage('test agent plugin unit ' + PYTHON_VERSION) {
                            dir('tests') {
                                sh("bash -c \"make test-agent-plugin-unit-py" + PYTHON_VERSION + "-docker\"")
                            }
                        }
                    }
                }
                parallel DOCKER_BUILDS
            }
        }
    }
} catch(Exception e) {
    notify.notify_error(e)
}

