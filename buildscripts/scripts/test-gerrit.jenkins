throttle(['Gerrit']){
properties([
  buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '7', numToKeepStr: '200')),
])

def NODE = ''
withFolderProperties{
    NODE = env.BUILD_NODE
    // There is no way to determine the Docker Tag by branch or build in Gerrit jobs
    // Therefor the Folder Tag is selected directly
    TEST_CONTAINER = DOCKER_REGISTRY + '/ubuntu-20.04:' + env.DOCKER_TAG_FOLDER
}

def PYTHON_VERSIONS = [ "2.6", "2.7", "3.3", "3.4", "3.5", "3.6", "3.7", "3.8" ]

node (NODE) {
    def WORKSPACE = pwd()
    def RESULTS = WORKSPACE + "/results"

    try {
        stage("Auschecken: Checkmk") {
            print("Git Status before checkout")
            sh("git status || exit 0")
            print("Git log before checkout")
            sh("git log --oneline -n10 || exit 0")
            checkout(scm)
            sh "rm -rf ${RESULTS}; mkdir ${RESULTS}"
            gerrit_stages = load 'buildscripts/scripts/lib/gerrit_stages.groovy'

            str_mod = load 'buildscripts/scripts/lib/str_mod.groovy'
            withFolderProperties{
                TEST_CONTAINER = str_mod.strip_protocol_from_url(DOCKER_REGISTRY) + '/ubuntu-20.04:' + env.DOCKER_TAG_FOLDER
            }
         }

        // Creates a \n separated list of changed files
        // We get realpaths here. However, the scripts/find-python-files calls
        // later work with logical paths which would not match the realpaths
        // produced here. We try to make both match here... hope it is enough.
        // In case things get complicated here we should try to move the logic
        // to some kind of helper script/function to improve maintainability
        def CHANGED_FILES_REL = sh(script: "git diff-tree --no-commit-id --name-only -r ${GERRIT_PATCHSET_REVISION} | sed -E 's#(enterprise|managed)/cmk/#cmk/#g'", returnStdout: true).toString().trim()
        def CHANGED_FILES_ABS = sh(script: "echo '${CHANGED_FILES_REL}' | sed 's|^|${WORKSPACE}/|g'", returnStdout: true).toString().trim()

        // Gather the list of changed python files
        def GREP_PATTERNS = sh(script: "echo '${CHANGED_FILES_ABS}' | sed 's/^/-e /g'", returnStdout: true).toString().trim().replaceAll("[\\n]+"," ");
        def CHANGED_PYTHON_FILES = sh(script: "scripts/find-python-files | grep -h ${GREP_PATTERNS} - || true", returnStdout: true).toString().trim()
        def CHANGED_PYLINT_RC_FILE = sh(script: "echo '$CHANGED_FILES_ABS' | grep -h '${WORKSPACE}/.pylintrc' - || true", returnStdout: true).toString().trim()

        // Gather the list of changed agent plugins
        def CHANGED_AGENT_PLUGINS = sh(script: "echo '${CHANGED_FILES_REL}' | grep '^agents/plugins/' || true", returnStdout: true).toString().trim().replaceAll("[\\n]+"," ");

        // Gather the list of changed livestatus / core files
        def CHANGED_CORE_FILES = sh(script: "echo '${CHANGED_FILES_REL}' | grep -e '^livestatus' -e '^enterprise/core' || true", returnStdout: true).toString().trim().replaceAll("[\\n]+"," ");

        // Gather the list of changed JavaScript and CSS files in raw and enterprise edition
        def CHANGED_JS_FILES = sh(script: "echo '${CHANGED_FILES_REL}' | grep '^web/htdocs/js/' || true", returnStdout: true).toString().trim().replaceAll("[\\n]+"," ");
        def CHANGED_CSS_FILES = sh(script: "echo '${CHANGED_FILES_REL}' | grep '^web/htdocs/themes/' | sed '/\\.scss\$/!d' || true", returnStdout: true).toString().trim().replaceAll("[\\n]+"," ");

        // this variable is needed as long as we have base plugins that are
        // concantenated for pylint (See tests/pylint/test_pylint.py)
        def WORKDIR="${WORKSPACE}/tmp"

        print "Changed Python files: ${CHANGED_PYTHON_FILES}"
        print "Changed agent plugins: ${CHANGED_AGENT_PLUGINS}"
        print "Changed core files: ${CHANGED_CORE_FILES}"
        print "Changed JS files: ${CHANGED_JS_FILES}"
        print "Changed CSS files: ${CHANGED_CSS_FILES}"

        //Add description to the build
        gerrit_stages.desc_init()
        gerrit_stages.desc_add_line(GERRIT_CHANGE_SUBJECT)
        gerrit_stages.desc_add_table()
        gerrit_stages.desc_add_row('Stage', 'Status')

        gerrit_stages.run(
            NAME: 'Python Typing',
            CONDITION: CHANGED_PYTHON_FILES != "",
            DIR: 'tests',
            ENV_VARS: ["JUNIT_XML=--junit-xml ${RESULTS}/mypy.xml"],
            COMMAND: 'make --quiet test-mypy-docker',
            TEXT_ON_SKIP: 'No Python files changed. Skipping.'
        )

        gerrit_stages.run(
            NAME: 'Python Format',
            CONDITION: CHANGED_PYTHON_FILES != "",
            DIR: 'tests',
            ENV_VARS: ["PYTHON_FILES=${CHANGED_PYTHON_FILES}"],
            COMMAND: "make --quiet test-format-python-docker &> ${RESULTS}/python-yapf.txt",
            TEXT_ON_SKIP: 'No Python files changed. Skipping.'
         )

        gerrit_stages.run(
            NAME: 'Python Unit Test',
            CONDITION: CHANGED_PYTHON_FILES != "",
            DIR: 'tests',
            ENV_VARS: ["PYTEST_ADDOPTS=--junitxml=$RESULTS/python3-unit-junit.xml"],
            COMMAND: "make test-unit-docker",
            TEXT_ON_SKIP: 'No Python files changed. Skipping.'
        )

        gerrit_stages.run(
            NAME: 'Python Linting',
            CONDITION: CHANGED_PYLINT_RC_FILE != "" || CHANGED_PYTHON_FILES != "",
            DIR: 'tests',
            ENV_VARS: ["WORKDIR=${WORKDIR}",'PYLINT_ARGS=--output-format=cmk_parseable'],
            COMMAND: "make test-pylint-docker &> ${RESULTS}/pylint.txt",
            TEXT_ON_SKIP: 'Neither .pylintrc nor Python files changed. Skipping.'
        )

         gerrit_stages.run(
            NAME: 'Shell Format',
            CONDITION: true,
            DIR: 'tests',
            ENV_VARS: [],
            COMMAND: "make --quiet test-format-shell &> ${RESULTS}/shell-format.txt",
            TEXT_ON_SKIP: ''
         )

         gerrit_stages.run(
            NAME: 'Shell Unit',
            CONDITION: true,
            DIR: 'tests',
            ENV_VARS: [],
            COMMAND: "make test-unit-sh-docker &> ${RESULTS}/shell-unit.txt",
            TEXT_ON_SKIP: ''
         )

        gerrit_stages.run(
            NAME: 'JavaScript Format',
            CONDITION: CHANGED_JS_FILES != "",
            DIR: 'tests',
            ENV_VARS: [],
            COMMAND: "make --quiet test-format-js-docker &> ${RESULTS}/js-prettier.txt",
            TEXT_ON_SKIP: 'No JavaScript files changed. Skipping.'
         )

        gerrit_stages.run(
            NAME: 'CSS Format',
            CONDITION: CHANGED_CSS_FILES != "",
            DIR: 'tests',
            ENV_VARS: [],
            COMMAND: "make --quiet test-format-css-docker &> ${RESULTS}/css-prettier.txt",
            TEXT_ON_SKIP: 'No CSS files changed. Skipping.'
         )

         PYTHON_VERSIONS.each { PYTHON_VERSION ->
            gerrit_stages.run(
               NAME: 'Agent Plugin Unit Tests ' + PYTHON_VERSION,
               CONDITION: CHANGED_AGENT_PLUGINS != "",
               DIR: 'tests',
               ENV_VARS: [
                   "PYTEST_ADDOPTS=--junitxml=$RESULTS/agent-plugin-unit-" + PYTHON_VERSION + "-junit.xml",
                   "DOCKER_ADDOPTS=-v $RESULTS:$RESULTS"
               ],
               COMMAND: "make test-agent-plugin-unit-py" + PYTHON_VERSION + "-docker",
               TEXT_ON_SKIP: 'No agent files changed. Skipping.'
            )
         }

         gerrit_stages.run(
            NAME: 'NEB/CMC Compile',
            CONDITION: true,
            DIR: '',
            ENV_VARS: [],
            COMMAND: "make compile-neb-cmc-docker &> ${RESULTS}/neb-cmc-compile.txt",
            TEXT_ON_SKIP: ''
         )

         gerrit_stages.run(
            NAME: 'Cppcheck Livestatus',
            CONDITION: CHANGED_CORE_FILES != "",
            DIR: 'tests',
            ENV_VARS: ["RESULTS=${RESULTS}"],
            COMMAND: "make test-cppcheck-livestatus-docker",
            TEXT_ON_SKIP: 'No core files changed. Skipping.'
         )

         gerrit_stages.run(
            NAME: 'Cppcheck core',
            CONDITION: CHANGED_CORE_FILES != "",
            DIR: 'tests',
            ENV_VARS: ["RESULTS=${RESULTS}"],
            COMMAND: "make test-cppcheck-core-docker",
            TEXT_ON_SKIP: 'No core files changed. Skipping.'
         )

         gerrit_stages.run(
            NAME: 'Clang Tidy Livestatus',
            CONDITION: CHANGED_CORE_FILES != "",
            DIR: 'tests',
            ENV_VARS: ["GERRIT_PATCHSET_REVISION=${GERRIT_PATCHSET_REVISION}", "RESULTS=${RESULTS}"],
            COMMAND: "make test-tidy-livestatus-docker",
            TEXT_ON_SKIP: 'No core files changed. Skipping.'
         )

         gerrit_stages.run(
            NAME: 'Clang Tidy core',
            CONDITION: CHANGED_CORE_FILES != "",
            DIR: 'tests',
            ENV_VARS: ["GERRIT_PATCHSET_REVISION=${GERRIT_PATCHSET_REVISION}", "RESULTS=${RESULTS}"],
            COMMAND: "make test-tidy-core-docker",
            TEXT_ON_SKIP: 'No core files changed. Skipping.'
         )

         gerrit_stages.run(
            NAME: 'IWYU Livestatus',
            CONDITION: CHANGED_CORE_FILES != "",
            DIR: 'tests',
            ENV_VARS: ["GERRIT_PATCHSET_REVISION=${GERRIT_PATCHSET_REVISION}", "RESULTS=${RESULTS}"],
            COMMAND: "make test-iwyu-livestatus-docker",
            TEXT_ON_SKIP: 'No core files changed. Skipping.'
         )

         gerrit_stages.run(
            NAME: 'IWYU core',
            CONDITION: CHANGED_CORE_FILES != "",
            DIR: 'tests',
            ENV_VARS: ["GERRIT_PATCHSET_REVISION=${GERRIT_PATCHSET_REVISION}", "RESULTS=${RESULTS}"],
            COMMAND: "make test-iwyu-core-docker",
            TEXT_ON_SKIP: 'No core files changed. Skipping.'
         )

         gerrit_stages.run(
            NAME: 'Unit Test Livestatus',
            CONDITION: CHANGED_CORE_FILES != "",
            DIR: 'livestatus/src/test',
            ENV_VARS: ["RESULTS=${RESULTS}"],
            COMMAND: "./.f12 &> ${RESULTS}/livestatus-neb-cmc.txt",
            TEXT_ON_SKIP: 'No core files changed. Skipping.'
         )

         gerrit_stages.run(
            NAME: 'Unit Test core',
            CONDITION: CHANGED_CORE_FILES != "",
            DIR: 'enterprise/core/src/test',
            ENV_VARS: ["RESULTS=${RESULTS}"],
            COMMAND: "./.f12 &> ${RESULTS}/core-neb-cmc.txt",
            TEXT_ON_SKIP: 'No core files changed. Skipping.'
         )
    } catch (e) {
        currentBuild.result = "FAILED"
        throw e
    } finally {
        stage("Analyse Issues") {
            def CLANG = scanForIssues tool: clang(pattern: "results/*-tidy.txt")
            def GCC = scanForIssues tool: gcc(pattern: "results/*.iwyu.txt,results/neb-cmc-compile.txt,results/*neb-cmc.txt,results/python-yapf.txt")
            def PYLINT = scanForIssues tool: pyLint(pattern: "results/pylint.txt")
            def MYPY = scanForIssues tool: myPy(pattern: "results/mypy.xml")
            def CPPCHECK = scanForIssues tool: cppCheck(pattern: 'results/cppcheck-*.xml')

            publishIssues issues:[CLANG,GCC,PYLINT,MYPY,CPPCHECK], trendChartType: 'TOOLS_ONLY', qualityGates: [[threshold: 1, type: 'TOTAL', unstable: false]]
            xunit([Custom(customXSL: "$JENKINS_HOME/userContent/xunit/JUnit/0.1/pytest-xunit.xsl", deleteOutputFiles: false, failIfNotNew: true, pattern: "results/*junit.xml", skipNoTestFiles: true, stopProcessingIfError: true)])

            archiveArtifacts allowEmptyArchive: true, artifacts: 'results/*'
        }
    }
}
}
