throttle(['Gerrit']) {
properties([
  buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '7', numToKeepStr: '200')),
])

def NODE = ''

withFolderProperties {
    NODE = env.BUILD_NODE
}

timeout(activity: false, time: 45, unit: 'MINUTES') {
    node (NODE) {
        def WORKSPACE = pwd()
        def RESULTS = WORKSPACE + "/results"
        def issues = [];
    
        try {
            stage("Auschecken: Checkmk") {
                checkout(scm)
                sh("rm -rf ${RESULTS}; mkdir ${RESULTS}")
                test_gerrit_helper = load 'buildscripts/scripts/lib/gerrit_stages.groovy'
                withCredentials([usernamePassword(credentialsId: 'nexus', passwordVariable: 'DOCKER_PASSPHRASE', usernameVariable: 'DOCKER_USERNAME')]) {
                    sh('echo  "${DOCKER_PASSPHRASE}" | docker login "${DOCKER_REGISTRY}" -u "${DOCKER_USERNAME}" --password-stdin')
                }
            }
    
            /// Add description to the build
            test_gerrit_helper.desc_init()
            test_gerrit_helper.desc_add_line(GERRIT_CHANGE_SUBJECT)
            test_gerrit_helper.desc_add_table()
            test_gerrit_helper.desc_add_row('Stage', 'Status', 'Result Files')
    
            /* Reason for the following try/catch block:
            * Jenkins will abort jobs (e.g. in case of a new patch set) with SIGKILL (at least this is what we think)
            * in case a job is aborted during a rebuild of the .venv, the .venv will be left broken
            * the next run in this workspace will use the .venv as-is but fail to import modules
            * attempts to use a trap in the .venv Makefile-target were also not succesful - SIGKILL is not trap-able...
            * So at the end, we need to use a groovy try/catch to ensure a rebuild in the next job in case something failed
            */
            try {
                sh("scripts/run-in-docker.sh make .venv")
            }
            catch (e)
            {
                sh("rm -r .venv")
                throw e
            }
    
            /// Generate list of stages to be added - save them locally for reference
            sh("""scripts/run-in-docker.sh \
                    scripts/run-pipenv run \
                      buildscripts/scripts/validate_changes.py \
                      --env "RESULTS=${RESULTS}" \
                      --env "WORKSPACE=${WORKSPACE}" \
                      --env "PATCHSET_REVISION=${GERRIT_PATCHSET_REVISION}" \
                      --write-file=${RESULTS}/stages.json \
                      buildscripts/scripts/stages.yml
               """);
            def stage_info = test_gerrit_helper.load_json("${RESULTS}/stages.json");
            def allStagesPassed = true;
            stage_info.STAGES.each { item ->
                allStagesPassed = test_gerrit_helper.create_stage(item, issues) and allStagesPassed;
                sh("ls -alF ${RESULTS}");
            }
            currentBuild.result = allStagesPassed ? "SUCCESS" : "FAILED";
        } catch (e) {
            currentBuild.result = "FAILED"
            throw e
        } finally {
            stage("Analyse Issues") {
                if (issues) {
                    publishIssues(
                        issues: issues,
                        trendChartType: 'TOOLS_ONLY',
                        qualityGates: [[threshold: 1, type: 'TOTAL', unstable: false]]);
                }
    
                xunit([Custom(
                    customXSL: "$JENKINS_HOME/userContent/xunit/JUnit/0.1/pytest-xunit.xsl",
                    deleteOutputFiles: false,
                    failIfNotNew: true,
                    pattern: "results/*junit.xml",
                    skipNoTestFiles: true,
                    stopProcessingIfError: true)])
    
                archiveArtifacts(allowEmptyArchive: true, artifacts: 'results/*')
            }
        }
    }
}
}
