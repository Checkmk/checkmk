// The following code adds libraries to the Pipeline script
// Functions from libraries can be run by calling file-basename.functionaname()
// If you need to adjust the loading of the library, please code your changes in
// buildscripts/scripts/ on file jenkins-lib-loader/jenkins-template.groovy and run
// jenkins-lib-loader/update-jenkins-lib-loading.sh
// check the results and commit
node {
   stage('Load Jenkins Libs') {
       def LIB = [
           $class: 'GitSCM',
           branches: scm.branches,
           doGenerateSubmoduleConfigurations: scm.doGenerateSubmoduleConfigurations,
           extensions: [[$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: 'vars'],
                       [path: 'buildscripts/scripts/vars']]],
                       [$class: 'CloneOption', depth: 0, noTags: true, reference: '', shallow: true]],
           userRemoteConfigs: scm.userRemoteConfigs
       ]
       library identifier: 'jenkins-libs@version', retriever: legacySCM(LIB)
    }
}
// jenkins-libs loaded
import java.text.SimpleDateFormat

properties([
  buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '7', numToKeepStr: '14')),
  parameters([
    string(name: 'DISTROS', defaultValue: DISTRO_LIST_MASTER, description: 'List of targeted distros' ),
    string(name: 'EDITION', defaultValue: 'enterprise', description: 'Edition: raw, enterprise or managed' ),
    string(name: 'VERSION', defaultValue: 'daily', description: 'Version: daily builds current git state of the branch. You also can specify a git tag here.' ),
    string(name: 'DOCKER_TAG_BUILD', defaultValue: '', description: 'DOCKER_TAG_BUILD: Custom Docker Tag to use for this build. Leave empty for default' )
  ])
])

// TODO: Duplicate code (sync buildscripts/scripts/os-nodes.jenkins, buildscripts/scripts/integration-daily-master.jenkins)
DISTRO_LIST = DISTROS.split(' ');
// CMK-1705: SLES-15 is missing xinitd and should therefore not be tested
DISTRO_LIST = DISTRO_LIST - ['sles-15']
// Testing CMA is not needed
DISTRO_LIST = DISTRO_LIST - ['cma']

println("Building for the following Distros: " + DISTRO_LIST)
currentBuild.description = '\nBuilding for the following Distros:\n' + DISTRO_LIST

def DOCKER_BUILDS = [:]
def dateFormat = new SimpleDateFormat("yyyy.MM.dd")
def date = new Date()

def BRANCH = scm.branches[0].name.replaceAll("/","-")
def CMK_VERSION
if(BRANCH == 'master') {
    CMK_VERSION = dateFormat.format(date)
} else if (VERSION == 'daily') {
    CMK_VERSION = BRANCH + '-' + dateFormat.format(date)
} else {
    CMK_VERSION = VERSION
}

def TEST_DATA = '/var/jenkins_home/test-data/' + CMK_VERSION
OMD_SITE = 'int_' + BRANCH.replaceAll("\\.","")

node {
    docker.withRegistry(DOCKER_REGISTRY, 'nexus') {
        def COMMON_IMAGE = docker.image('ubuntu-18.04-common')
        COMMON_IMAGE.pull()
        COMMON_IMAGE.inside('-u 0:0 --ulimit nofile=1024:1024  --cap-add=SYS_ADMIN') {
            stage('checkout sources') {
                dir(TEST_DATA + '/git') {
                    checkout(scm)
                    // Load libraries
                    versioning = load 'buildscripts/scripts/lib/versioning.groovy'
                    withFolderProperties{
                        DOCKER_TAG = versioning.select_docker_tag(BRANCH, DOCKER_TAG_BUILD, env.DOCKER_OS_IMAGE_TAG_FOLDER)
                    }
                }
            }
        }
    }
}

try {
    DISTRO_LIST.each { DISTRO ->
        DOCKER_BUILDS[DISTRO] = {
            node {
                def JENKINS_USER = id.getUser('jenkins')
                def JENKINS_GROUP = id.getGroup('jenkins')
                docker.withRegistry(DOCKER_REGISTRY, 'nexus') {
                    def TEST_IMAGE = docker.image(DISTRO + '-os-image:' + DOCKER_TAG);
                    TEST_IMAGE.pull()
                    TEST_IMAGE.inside("-u 0:0 --ulimit nofile=1024:1024  -v /bauwelt/download/$CMK_VERSION:/bauwelt/download/$CMK_VERSION:ro -v $TEST_DATA:$TEST_DATA --init --privileged --hostname ${DISTRO}") {
                        versioning.print_image_tag()
                        stage('install ' + DISTRO + ' omd') {
                            DISTRO_CODE = sh ( script: """
                                case $DISTRO in
                                    'debian-7')
                                        DISTRO_CODE='_0.wheezy_amd64.deb'
                                        ;;
                                    'debian-8')
                                        DISTRO_CODE='_0.jessie_amd64.deb'
                                        ;;
                                    'debian-9')
                                        DISTRO_CODE='_0.stretch_amd64.deb'
                                        ;;
                                    'debian-10')
                                        DISTRO_CODE='_0.buster_amd64.deb'
                                        ;;
                                    'ubuntu-14.04')
                                        DISTRO_CODE='_0.trusty_amd64.deb'
                                        ;;
                                    'ubuntu-16.04')
                                        DISTRO_CODE='_0.xenial_amd64.deb'
                                        ;;
                                    'ubuntu-17.10')
                                        DISTRO_CODE='_0.artful_amd64.deb'
                                        ;;
                                    'ubuntu-18.04')
                                        DISTRO_CODE='_0.bionic_amd64.deb'
                                        ;;
                                    'ubuntu-18.10')
                                        DISTRO_CODE='_0.cosmic_amd64.deb'
                                        ;;
                                    'ubuntu-19.04')
                                        DISTRO_CODE='_0.disco_amd64.deb'
                                        ;;
                                    'ubuntu-19.10')
                                        DISTRO_CODE='_0.eoan_amd64.deb'
                                        ;;
                                    'centos-6')
                                        DISTRO_CODE='-el6-38.x86_64.rpm'
                                        ;;
                                    'centos-7')
                                        DISTRO_CODE='-el7-38.x86_64.rpm'
                                        ;;
                                    'centos-8')
                                        DISTRO_CODE='-el8-38.x86_64.rpm'
                                        ;;
                                    *)
                                        DISTRO_CODE_TMP=\$(echo $DISTRO | tr -d '-')
                                        DISTRO_CODE="-\${DISTRO_CODE_TMP}-38.x86_64.rpm"
                                        ;;
                                esac
                                echo \$DISTRO_CODE
                            """,
                            returnStdout: true
                            ).trim()
                            def PACKAGE = '/bauwelt/download/' + CMK_VERSION + '/check-mk-enterprise-' + CMK_VERSION + DISTRO_CODE
                            sh """
                                # Workaround: systemctl in docker leads to: Failed to connect to bus: No such file or directory
                                if SYSCTL=\$(which systemctl); then
                                    rm -rf \$SYSCTL
                                    ln -s \$(which true) \$SYSCTL
                                fi

                                case $DISTRO in
                                    centos-6)
                                        rm -f /etc/mtab
                                        cp /proc/mounts /etc/mtab
                                        ;&
                                    centos*|rh*)
                                        yum -y install $PACKAGE
                                        ;;
                                    sles*|opensuse*)
                                        zypper --no-gpg-checks in -y $PACKAGE
                                        ;;
                                    *)
                                        apt-get update
                                        gdebi -n $PACKAGE
                                        ;;
                                esac
                            """
                        }
                        try {
                            stage('integration test ' + DISTRO + ' omd') {
                                sh "mkdir -p $DISTRO-work $DISTRO-dest"
                                sh "mount -t overlay overlay -o lowerdir=${TEST_DATA}/git,upperdir=${WORKSPACE}/$DISTRO-dest,workdir=${WORKSPACE}/$DISTRO-work ${WORKSPACE}/$DISTRO-dest"
                                sh 'ls -lah'
                                dir (DISTRO + '-dest') {
                                    sh "PYTEST_ADDOPTS='--junitxml=/omd/sites/${OMD_SITE}/junit.xml -o junit_suite_name=$DISTRO' make -C tests EDITION=${EDITION} VERSION=${CMK_VERSION} OMD_SITE=${OMD_SITE} test-integration"
                                }
                            }
                        }
                        finally {
                            sh """
                                rm -rf $DISTRO
                                mkdir -p $DISTRO
                                cp /omd/sites/${OMD_SITE}/junit.xml $DISTRO/
                                cp -r /omd/sites/${OMD_SITE}/var/log $DISTRO/
                            """
                            id.setOwner(JENKINS_USER, JENKINS_GROUP, DISTRO)
                            stash name: "$DISTRO-results", includes: "$DISTRO/**/*"
                            // Unmount is clean solution, unfortunately it often fails
                            // The mount dies when the container is stopped anyway
                            // sh "until umount $DISTRO-dest; do sleep 1; done"
                        }
                    }
                }
            }
        }
    }
    throttle(['IntegrationTest']) {
        parallel DOCKER_BUILDS
    }
} finally {
    node {
        docker.withRegistry(DOCKER_REGISTRY, 'nexus') {
            def COMMON_IMAGE = docker.image('ubuntu-18.04-common')
            COMMON_IMAGE.pull()
            COMMON_IMAGE.inside('-u 0:0 --ulimit nofile=1024:1024  --cap-add=SYS_ADMIN') {
                stage('archive artifacts') {
                    sh 'rm -rf results'
                    dir('results') {
                        for (String DISTRO : DISTRO_LIST) {
                            unstash name: "$DISTRO-results"
                        }
                        archiveArtifacts "**/*"
                        xunit([Custom(customXSL: "$JENKINS_HOME/userContent/xunit/JUnit/0.1/pytest-xunit.xsl", deleteOutputFiles: true, failIfNotNew: true, pattern: "**/junit.xml", skipNoTestFiles: false, stopProcessingIfError: true)])
                    }
                }
            }
        }
    }
}
