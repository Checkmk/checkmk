properties([
  buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '7', numToKeepStr: '14')),
])

def NODE = ''
withFolderProperties{
    NODE = env.BUILD_NODE
}

// Cancel job when there is nothing logged to the console for 15 minutes
timeout(activity: true, time: 15, unit: 'MINUTES') {
    node (NODE) {
        stage('checkout sources') {
            checkout(scm)
            notify = load 'buildscripts/scripts/lib/notify.groovy'
        }
    
        docker.withRegistry(DOCKER_REGISTRY, 'nexus') {
            def TEST_IMAGE = docker.build("test-image:${env.BUILD_ID}", "--pull buildscripts/docker_image_aliases/IMAGE_TESTING")
            // The commands are executed with the 1001:1000 UID:GID (non-root).
            // This is the UID of the jenkins user on the node which does not exist
            // in the container. For the moment this does not look like a problem.
            // But it may be that we get to the point where we need an existing
            // user in the container.
            TEST_IMAGE.inside('--ulimit nofile=1024:1024 --init') {
                try {
                    stage('execute test') {
                        dir ('tests') {
                            def EXIT_CODE = sh(
                                script: "BANDIT_OUTPUT_ARGS=\"-f xml -o '$WORKSPACE/bandit_results.xml'\" make test-bandit",
                                returnStatus: true
                            )
                            println("Exit code was: " + EXIT_CODE)
                        }
                    }
    
                    stage('process results') {
                        archiveArtifacts("bandit_results.xml")
                        xunit([Custom(
                            customXSL: "$JENKINS_HOME/userContent/xunit/JUnit/0.1/bandit-xunit.xsl",
                            deleteOutputFiles: true,
                            failIfNotNew: true,
                            pattern: "bandit_results.xml",
                            skipNoTestFiles: false,
                            stopProcessingIfError: true
                        )])
                    }
                } catch(Exception e) {
                    notify.notify_error(e)
                }
            }
        }
    }
}
