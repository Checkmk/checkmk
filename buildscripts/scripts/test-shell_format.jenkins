def NODE = "both"

properties([
  buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '7', numToKeepStr: '14')),
  pipelineTriggers([pollSCM('H/3 * * * *')]),
])

node (NODE) {
    stage('checkout sources') {
        checkout(scm)
        notify = load 'buildscripts/scripts/lib/notify.groovy'
        str_mod = load 'buildscripts/scripts/lib/str_mod.groovy'
        withFolderProperties{
            TEST_CONTAINER = str_mod.strip_protocol_from_url(DOCKER_REGISTRY) + '/ubuntu-20.04:' + env.DOCKER_TAG_FOLDER
        }
    }
    try {
        stage("Execute Test") {
            docker.withRegistry(DOCKER_REGISTRY, 'nexus') {
                def TEST_IMAGE = docker.image(TEST_CONTAINER)
                TEST_IMAGE.pull()
            }
            ENV_VARS = ["TEST_CONTAINER=${TEST_CONTAINER}"]
            withEnv(ENV_VARS) {
                sh("make -C $WORKSPACE/tests TEST_CONTAINER=${TEST_CONTAINER} test-format-shell")
            }
        }
        stage("Analyse Issues") {
            def CLANG = scanForIssues tool: clang()
            publishIssues issues:[CLANG], trendChartType: 'TOOLS_ONLY', qualityGates: [[threshold: 1, type: 'TOTAL', unstable: false]]
        }
    }catch(Exception e) {
        notify.notify_error(e)
    }
}
