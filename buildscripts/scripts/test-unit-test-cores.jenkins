def NODE = "both"

properties([
  buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '7', numToKeepStr: '14')),
  pipelineTriggers([pollSCM('H/2 * * * *')]),
])

node (NODE) {
    stage('checkout sources') {
        checkout(scm)
        notify = load 'buildscripts/scripts/lib/notify.groovy'
        str_mod = load 'buildscripts/scripts/lib/str_mod.groovy'
        withFolderProperties{
            TEST_CONTAINER = str_mod.strip_protocol_from_url(DOCKER_REGISTRY) + '/ubuntu-20.04:' + env.DOCKER_TAG_FOLDER
        }
    }
    try {
        stage("Execute NEB Test") {
            docker.withRegistry(DOCKER_REGISTRY, 'nexus') {
                def TEST_IMAGE = docker.image(TEST_CONTAINER)
                TEST_IMAGE.pull()
            }
            ENV_VARS = ["TEST_CONTAINER=${TEST_CONTAINER}"]
            withEnv(ENV_VARS) {
                sh("( cd livestatus/src/test && ./.f12 )")
            }
        }

        stage("Execute NEB Test") {
            ENV_VARS = ["TEST_CONTAINER=${TEST_CONTAINER}"]
            withEnv(ENV_VARS) {
                sh("( cd enterprise/core/src/test && ./.f12 )")
            }
        }


        stage("Analyse Issues") {
            xunit([GoogleTest(
                deleteOutputFiles: true,
                failIfNotNew: true,
                pattern: 'livestatus/src/test_detail.xml, enterprise/core/src/test_detail.xml',
                skipNoTestFiles: false, stopProcessingIfError: true
            )])
            def GCC = scanForIssues tool: gcc()
            publishIssues issues:[GCC], trendChartType: 'TOOLS_ONLY', qualityGates: [[threshold: 1, type: 'TOTAL', unstable: false]]
        }
    }catch(Exception e) {
        notify.notify_error(e)
    }
}
