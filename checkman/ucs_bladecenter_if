title: UCS Bladecenter Fibrechannel, Ethernet and Interconnect Interfaces
agents: agent_ucs_bladecenter
catalog: hw/server/cisco
license: GPL
distribution: check_mk
description:
 This check monitors the operational status, link speed, traffic, packet
 counts, discards and errors of network interfaces

 Depending on the check parameters this check can go WARN or CRIT when the
 port status changes (i.e. is down), when the link speed changes (e.g. a
 port expected to be set to 1GBit/s operates only at 100MBit/s), when the
 absolute or procentual traffic of a port exceeds certain levels or if the
 rate of errors or discards exceeds configurable limits.

 This check supports averaging the in- and  outgoing traffic over
 a configurable range of time by using an exponentially weighted moving
 average - just as Linux does for the CPU load averages.
 The averaging can be configured on a per host and per port base. This is
 done by adding a key {"average"} to the parameter dictionary with the number
 of minutes that the average should cover as its key. Port with averaging
 turned on output two additional performance values: the averaged traffic
 in bytes. If you have configured traffic levels, then those levels are
 applied to the averaged values.

 This check monitores three types of interfaces. Ethernet, fibrechannel and
 interconnects. Each of this interfaces can be grouped in portchannels.
 If an interface is grouped in a portchannel a grouped interface service
 will be automatically created and the single interface is not displayed.

 It is highly recommended to set the option if_inventory_uses_description
 because the interface index is quite useless for identifying the correct port.

item:
 The interface description, e.g. Interconnect-Group 1025

inventory:
 Per default the check autodetects portchannels and group the interfaces
 accordingly. Automatically grouped interfaces don't show up as single interface.

 Furthermore you can manually configure additional groups with the following options

 {Grouping:} In some situations you do not want to monitor a single
 interface but a group of interfaces that together form a pool.
 You can specifiy the members of a group by their port type and the item name(s) of
 the single interfaces. The data of all members is accumulated and put together
 in a single grouped interface service.

 You can specify the groups with the ruleset {if_groups}.
 Groups are defined as list of dictionaries.

 The keys are:

  {"name"}:   String. Name of the group within the service description

  {"iftype"}: Integer. Interface port type as integer

  {"include_items"}: List of Strings. Interface item name. This name depends
  on further settings like if_inventory_uses_alias or if_inventory_uses_description

  {"single"}(optional): Bool. Interfaces in this group do not show up
  as single service if "single" is set to True (Default: False)

  For example: if_groups = ([{"name" : "Group WLAN", "iftype" : 6, "single" : True}], ["lan"], ALL_HOSTS )

