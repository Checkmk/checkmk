#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2017             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def inventory_3par_capacity(parsed):
    for key, value in parsed.items():
        if value['totalMiB'] == 0:
            continue
        yield (key.replace("Capacity", ""), {})


def check_3par_capacity(item, params, parsed):
    for key, value in parsed.items():
        if key.replace("Capacity", "") == item:
            total = value['totalMiB']
            free = value['freeMiB']
            failed = value['failedCapacityMiB']

            yield df_check_filesystem_list(item, params, [(item, total, free, failed)])

            if failed == 0:
                return

            failed_percent = float(failed) / float(total) * 100.0
            warn, crit = params.get("failed_capacity_levels", (0.0, 0.0))
            msg = "%s MB / %.1f%% failed (warn/crit at %.1f%%/%.1f%%)" \
                  % (failed, failed_percent, warn, crit)
            if failed_percent >= crit:
                yield 2, msg
            elif failed_percent >= warn:
                yield 1, msg


check_info['3par_capacity'] = {
    'parse_function': parse_3par,
    'inventory_function': inventory_3par_capacity,
    'check_function': check_3par_capacity,
    'service_description': "Capacity %s",
    'has_perfdata': True,
    'includes': ["3par.include", "size_trend.include", "df.include"],
    'group': "threepar_capacity",
    'default_levels_variable': "filesystem_default_levels",
}
