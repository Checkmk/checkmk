#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def agent_ipmi_sensors_arguments(params, hostname, ipaddress):
    if isinstance(params, dict):
        params = 'freeipmi', params

    ipmi_command, options = params
    args = [
        "-u",
        options["username"],
        "-p",
        options["password"],
        "-l",
        options["privilege_lvl"],
        "--ipmi-command",
        ipmi_command,
    ]

    for opt, what in [
        ("-D", "ipmi_driver"),
        ("-k", "BMC_key"),
        ("--driver-type", "driver_type"),
        ('--quiet-cache', "quiet_cache"),
        ("--sdr-cache-recreate", "sdr_cache_recreate"),
        ('--interpret-oem-data', "interpret_oem_data"),
        ('--output-sensor-state', "output_sensor_state"),
        ('--ignore-not-available-sensors', "output_sensor_thresholds"),
        ('--output-sensor-thresholds', "ignore_not_available_sensors"),
    ]:
        this_opt = options.get(what)
        if this_opt is None:
            continue
        args.append(opt)
        if not isinstance(this_opt, bool):
            args.append(this_opt)

    args.append(ipaddress)
    return args


special_agent_info['ipmi_sensors'] = agent_ipmi_sensors_arguments
