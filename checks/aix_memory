#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# Example output from agent:
# <<<aix_memory>>>
# 32702464 memory pages
# 31736528 lruable pages
# 858141 free pages
# 4 memory pools
# 6821312 pinned pages
# 80.0 maxpin percentage
# 3.0 minperm percentage
# 90.0 maxperm percentage
# 8.8 numperm percentage
# 2808524 file pages
# 0.0 compressed percentage
# 0 compressed pages
# 8.8 numclient percentage
# 90.0 maxclient percentage
# 2808524 client pages
# 0 remote pageouts scheduled
# 354 pending disk I/Os blocked with no pbuf
# 860832 paging space I/Os blocked with no psbuf
# 2228 filesystem I/Os blocked with no fsbuf
# 508 client filesystem I/Os blocked with no fsbuf
# 1372 external pager filesystem I/Os blocked with no fsbuf
# 88.8 percentage of memory used for computational pages
# allocated = 8257536 blocks used = 1820821 blocks free = 6436715 blocks
#
# The first part is the output of vmstat -v, the last line is the output
# of swap -s and show the swap space usage


# Parse AIX vmstat output into something compatible with the Linux
# output from /proc/meminfo. AIX speaks of 4k pages while Linux of kilobytes.
def parse_aix_memory(info):
    parsed = {}
    for line in info:
        if line[0] == "allocated":  # Swap space
            parsed["SwapTotal"] = int(line[2]) * 4
            parsed["SwapFree"] = int(line[10]) * 4
        else:
            varname = " ".join(line[1:])
            if varname == "memory pages":
                parsed["MemTotal"] = int(line[0]) * 4
            elif varname == "free pages":
                parsed["MemFree"] = int(line[0]) * 4
            elif varname == "file pages":
                parsed["Cached"] = int(line[0]) * 4
    return parsed


def inventory_aix_memory(parsed):
    if "MemFree" in parsed:
        yield None, {}


def check_aix_memory(_no_item, params, parsed):
    for subresult in check_memory(params, parsed):
        yield subresult


check_info['aix_memory'] = {
    "parse_function": parse_aix_memory,
    "inventory_function": inventory_aix_memory,
    "check_function": check_aix_memory,
    "service_description": "Memory",
    "has_perfdata": True,
    "group": "memory",
    "default_levels_variable": "memory_default_levels",
    "includes": ["mem.include"],
}
