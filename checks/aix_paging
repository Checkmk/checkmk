#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# example output
# <<<aix_paging>>>
# Page Space      Physical Volume   Volume Group    Size %Used   Active    Auto    Type   Chksum
# hd6                   hdisk11                rootvg       10240MB    23        yes        yes       lv       0

AIXPaging = collections.namedtuple("AIXPaging",
                                   ["group", "size_mb", "usage_perc", "active", "auto", "type"])


def parse_aix_paging(info):
    map_type = {
        "lv": "logical volume",
        "nfs": "NFS",
    }

    parsed = {}
    if len(info) <= 1:
        return parsed

    # First line is the header
    for line in info[1:]:
        try:
            # Always given in MB, eg. 1234MB
            size = int(line[3][:-2])
        except ValueError:
            continue
        try:
            usage = int(line[4])
        except ValueError:
            continue
        paging_type = map_type.get(line[7], "unknown[%s]" % line[7])
        parsed.setdefault("%s/%s" % (line[0], line[1]),
                          AIXPaging(line[2], size, usage, line[5], line[6], paging_type))
    return parsed


@get_parsed_item_data
def check_aix_paging(item, params, data):
    avail_mb = data.size_mb * (1 - data.usage_perc / 100.0)
    yield df_check_filesystem_single(item, data.size_mb, avail_mb, 0, None, None, params)
    yield 0, 'Active: %s, Auto: %s, Type: %s' % (data.active, data.auto, data.type)


check_info['aix_paging'] = {
    'parse_function': parse_aix_paging,
    'inventory_function': discover(),
    'check_function': check_aix_paging,
    'service_description': 'Page Space %s',
    'has_perfdata': True,
    'group': "filesystem",
    'default_levels_variable': 'filesystem_default_levels',
    'includes': ['size_trend.include', 'df.include'],
}
