#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from cmk.base.check_legacy_includes.temperature import *  # pylint: disable=wildcard-import,unused-wildcard-import
# .1.3.6.1.4.1.318.1.1.13.3.2.2.2.7.0 197 --> PowerNet-MIB::airIRRCUnitStatusRackInletTempMetric.0
# .1.3.6.1.4.1.318.1.1.13.3.2.2.2.9.0 202 --> PowerNet-MIB::airIRRCUnitStatusSupplyAirTempMetric.0
# .1.3.6.1.4.1.318.1.1.13.3.2.2.2.11.0 219 --> PowerNet-MIB::airIRRCUnitStatusReturnAirTempMetric.0
# .1.3.6.1.4.1.318.1.1.13.3.2.2.2.24.0 131 --> PowerNet-MIB::airIRRCUnitStatusEnteringFluidTemperatureMetric.0
# .1.3.6.1.4.1.318.1.1.13.3.2.2.2.26.0 154 --> PowerNet-MIB::airIRRCUnitStatusLeavingFluidTemperatureMetric.0

factory_settings["apc_inrow_temp_default_levels"] = {"levels": (30, 35)}


def parse_apc_inrow_temp(info):
    parsed = {}
    if info:
        for what, what_item in zip(
                info[0],
            ["Rack Inlet", "Supply Air", "Return Air", "Entering Fluid", "Leaving Fluid"]):
            if what not in ["", "-1"]:
                parsed.setdefault(what_item, float(what) / 10)

    return parsed


def inventory_apc_inrow_temp(parsed):
    for key in parsed:
        yield key, {}


def check_apc_inrow_temp(item, params, parsed):
    if item in parsed:
        return check_temperature(parsed[item], params, "apc_inrow_temp_%s" % item)


check_info["apc_inrow_temp"] = {
    "parse_function": parse_apc_inrow_temp,
    "inventory_function": inventory_apc_inrow_temp,
    "check_function": check_apc_inrow_temp,
    "service_description": "Temperature %s",
    "has_perfdata": True,
    "snmp_info": (
        ".1.3.6.1.4.1.318.1.1.13.3.2.2.2",
        [
            "7",  # airIRRCUnitStatusRackInletTempMetric
            "9",  # airIRRCUnitStatusSupplyAirTempMetric
            "11",  # airIRRCUnitStatusReturnAirTempMetric
            "24",  # airIRRCUnitStatusEnteringFluidTemperatureMetric
            "26",  # airIRRCUnitStatusLeavingFluidTemperatureMetric
        ]),
    "snmp_scan_function": lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.318.1.3"),
    "group": "temperature",
    "default_levels_variable": "apc_inrow_temp_default_levels"
}
