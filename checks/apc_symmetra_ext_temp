#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

factory_settings["apc_symmetra_ext_temp_default_levels"] = {"levels": (30, 35)}


def inventory_apc_symmetra_ext_temp(info):
    for index, status, _temp, _temp_unit in info:
        if status == "2":
            yield index, {}


def check_apc_symmetra_ext_temp(item, params, info):
    for index, _status, temp, temp_unit in info:
        if item == index:
            unit = "f" if temp_unit == "2" else "c"
            return check_temperature(int(temp),
                                     params,
                                     "apc_symmetra_ext_temp_%s" % item,
                                     dev_unit=unit)

    return 3, "Sensor not found in SNMP data"


check_info["apc_symmetra_ext_temp"] = {
    'check_function': check_apc_symmetra_ext_temp,
    'inventory_function': inventory_apc_symmetra_ext_temp,
    'service_description': 'Temperature External %s',
    'has_perfdata': True,
    'snmp_info': ('.1.3.6.1.4.1.318.1.1.10.2.3.2.1', [1, 3, 4, 5]),
    'snmp_scan_function': lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.318.1.3"),
    'group': 'temperature',
    'includes': ['temperature.include'],
    'default_levels_variable': 'apc_symmetra_ext_temp_default_levels'
}
