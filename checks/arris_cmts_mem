#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

factory_settings["arris_cmts_mem"] = {
    "levels": (80.0, 90.0),
}


def parse_arris_cmts_mem(info):
    parsed = {}
    for cid, heap, heap_free in info:
        # The Module numbers are starting with 0, not with 1 like the OIDs
        heap, heap_free = float(heap), float(heap_free)
        parsed.setdefault(int(cid) - 1, {
            'mem_used': heap - heap_free,
            'mem_total': heap,
        })
    return parsed


def inventory_arris_cmts_mem(parsed):
    for k in parsed:
        yield k, {}


@get_parsed_item_data
def check_arris_cmts_mem(item, params, data):
    warn, crit = params.get("levels", (None, None))
    mode = "abs_used" if isinstance(warn, int) else "perc_used"
    return check_memory_element(
        "Usage",
        data["mem_used"],
        data["mem_total"],
        (mode, (warn, crit)),
        metric_name="memused",
    )


check_info["arris_cmts_mem"] = {
    "parse_function": parse_arris_cmts_mem,
    "inventory_function": inventory_arris_cmts_mem,
    "check_function": check_arris_cmts_mem,
    "service_description": "Memory Module %s",
    "has_perfdata": True,
    "snmp_scan_function": arris_cmts_scan_function,
    "snmp_info": (
        ".1.3.6.1.4.1.4998.1.1.5.3.2.1.1",
        [
            OID_END,
            2,  # cadMeHeapSize
            3,  # cadMeHeapRemaining
        ]),
    "group": "memory_multiitem",
    "includes": ["arris_cmts.include", "mem.include"],
    "default_levels_variable": "arris_cmts_mem",
}
