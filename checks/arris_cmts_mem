#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from cmk.base.check_legacy_includes.arris_cmts import *  # pylint: disable=wildcard-import,unused-wildcard-import
from cmk.base.check_legacy_includes.mem import *  # pylint: disable=wildcard-import,unused-wildcard-import
factory_settings["arris_cmts_mem"] = {
    "levels": (80.0, 90.0),
}


def parse_arris_cmts_mem(info):
    parsed = {}
    for cid, heap, heap_free in info:
        # The Module numbers are starting with 0, not with 1 like the OIDs
        heap, heap_free = float(heap), float(heap_free)
        parsed.setdefault(int(cid) - 1, {
            'mem_used': heap - heap_free,
            'mem_total': heap,
        })
    return parsed


def inventory_arris_cmts_mem(parsed):
    for k in parsed:
        yield k, {}


@get_parsed_item_data
def check_arris_cmts_mem(item, params, data):
    warn, crit = params.get("levels", (None, None))
    mode = "abs_used" if isinstance(warn, int) else "perc_used"
    return check_memory_element(
        "Usage",
        data["mem_used"],
        data["mem_total"],
        (mode, (warn, crit)),
        metric_name="memused",
    )


check_info["arris_cmts_mem"] = {
    "parse_function": parse_arris_cmts_mem,
    "inventory_function": inventory_arris_cmts_mem,
    "check_function": check_arris_cmts_mem,
    "service_description": "Memory Module %s",
    "has_perfdata": True,
    "snmp_scan_function": arris_cmts_scan_function,
    "snmp_info": (
        ".1.3.6.1.4.1.4998.1.1.5.3.2.1.1",
        [
            OID_END,
            2,  # cadMeHeapSize
            3,  # cadMeHeapRemaining
        ]),
    "group": "memory_multiitem",
    "default_levels_variable": "arris_cmts_mem",
}
