#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables from the check-context which are necessary for
# resolving legacy discovery results such as [("SUMMARY", "diskstat_default_levels")]. Furthermore,
# it might also remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.cpu_util import *  # pylint: disable=wildcard-import,unused-wildcard-import
factory_settings['aruba_cpu_util_default_levels'] = {
    'levels': (80.0, 90.0),
}


def parse_aruba_cpu_util(info):
    parsed = {}
    for description, raw_cpu_util in info:
        try:
            parsed.setdefault(description, float(raw_cpu_util))
        except ValueError:
            pass
    return parsed


# no get_parsed_item_data because the cpu utilization can be exactly 0 for some devices, which would
# result in "UNKN - Item not found in monitoring data", because parsed[item] evaluates to False
def check_aruba_cpu_util(item, params, parsed):
    cpu_util = parsed.get(item)
    if cpu_util is None:
        return
    return check_cpu_util(cpu_util, params)


check_info["aruba_cpu_util"] = {
    'parse_function': parse_aruba_cpu_util,
    'check_function': check_aruba_cpu_util,
    'inventory_function': discover(),
    'service_description': 'CPU utilization %s',
    'has_perfdata': True,
    'snmp_info': (
        '.1.3.6.1.4.1.14823.2.2.1.1.1.9.1',
        [
            '2',  # sysExtProcessorDescr
            '3',  # sysExtProcessorLoad; Unfortunately aruba calls their utilization "load"
        ]),
    'snmp_scan_function': lambda oid: oid('.1.3.6.1.2.1.1.2.0').startswith('.1.3.6.1.4.1.14823'),
    'group': 'cpu_utilization_multiitem',
}
