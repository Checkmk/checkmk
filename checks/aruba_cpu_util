#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

factory_settings['aruba_cpu_util_default_levels'] = {
    'levels': (80.0, 90.0),
}


def parse_aruba_cpu_util(info):
    parsed = {}
    for description, raw_cpu_util in info:
        try:
            parsed.setdefault(description, float(raw_cpu_util))
        except ValueError:
            pass
    return parsed


@get_parsed_item_data
def check_aruba_cpu_util(item, params, cpu_util):
    return check_cpu_util(cpu_util, params)


check_info["aruba_cpu_util"] = {
    'parse_function': parse_aruba_cpu_util,
    'check_function': check_aruba_cpu_util,
    'inventory_function': discover(),
    'service_description': 'CPU utilization %s',
    'has_perfdata': True,
    'snmp_info': (
        '.1.3.6.1.4.1.14823.2.2.1.1.1.9.1',
        [
            '2',  # sysExtProcessorDescr
            '3',  # sysExtProcessorLoad; Unfortunately aruba calls their utilization "load"
        ]),
    'snmp_scan_function': lambda oid: oid('.1.3.6.1.2.1.1.2.0').startswith('.1.3.6.1.4.1.14823'),
    'group': 'cpu_utilization_multiitem',
    'includes': ['cpu_util.include'],
}
