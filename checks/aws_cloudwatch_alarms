#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from cmk.base.check_legacy_includes.aws import *  # pylint: disable=wildcard-import,unused-wildcard-import
aws_cloudwatch_alarm_map = {
    'no_alarms': (0, 'no alarms'),
    'ok': (0, 'OK'),
    'alarm': (2, 'alarm'),
    'insufficient_data': (1, 'insufficient data'),
}


def check_aws_cloudwatch_alarms(item, params, parsed):
    ok_alarms = []
    not_ok_alarms = []
    for alarm in parsed:
        alarm_state_value = alarm['StateValue'].lower()
        alarm_name = alarm['AlarmName']
        if alarm_state_value == 'ok':
            ok_alarms.append(alarm_name)
            continue

        alarm_state, alarm_state_readable = aws_cloudwatch_alarm_map.get(
            alarm_state_value.lower(), (3, 'unknown[%s]' % alarm_state_value))
        not_ok_alarms.append((alarm_name, alarm_state, alarm_state_readable))

    for alarm_name, alarm_state, alarm_state_readable in not_ok_alarms:
        yield alarm_state, '%s: %s' % (alarm_name, alarm_state_readable)

    if ok_alarms:
        yield 0, '\n%s' % ", ".join(ok_alarms)


check_info['aws_cloudwatch_alarms'] = {
    'parse_function': parse_aws,
    'inventory_function': discover_single,
    'check_function': check_aws_cloudwatch_alarms,
    'service_description': 'AWS/CloudWatch Alarms',
}
