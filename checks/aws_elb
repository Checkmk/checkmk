#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.


def parse_aws_elb(info):
    metrics = _extract_aws_metrics_by_labels([
        "RequestCount",
        "SurgeQueueLength",
        "SpilloverCount",
        "Latency",
        "HTTPCode_ELB_4XX",
        "HTTPCode_ELB_5XX",
        "HTTPCode_Backend_2XX",
        "HTTPCode_Backend_3XX",
        "HTTPCode_Backend_4XX",
        "HTTPCode_Backend_5XX",
        "HealthyHostCount",
        "UnHealthyHostCount",
        "BackendConnectionErrors",
    ], parse_aws(info))
    # We get exactly one entry: {INST-ID: METRICS}
    # INST-ID is the piggyback host name
    try:
        return list(metrics.values())[-1]
    except IndexError:
        return {}


#   .--statistics----------------------------------------------------------.
#   |                    _        _   _     _   _                          |
#   |                ___| |_ __ _| |_(_)___| |_(_) ___ ___                 |
#   |               / __| __/ _` | __| / __| __| |/ __/ __|                |
#   |               \__ \ || (_| | |_| \__ \ |_| | (__\__ \                |
#   |               |___/\__\__,_|\__|_|___/\__|_|\___|___/                |
#   |                                                                      |
#   '----------------------------------------------------------------------'

# SpilloverCount: When the SurgeQueueLength reaches the maximum of 1,024 queued
# Requests, new requests are dropped, the user receives a 503 error, and the
# Spillover count metric is incremented. In a healthy system, this metric is
# Always equal to zero.

factory_settings['aws_elb_statistics'] = {
    'levels_surge_queue_length': (1024, 1024),
    'levels_spillover': (1, 1),
}


def check_aws_elb_statistics(item, params, parsed):
    queue_length = parsed.get('SurgeQueueLength')
    if queue_length is not None:
        yield check_levels(queue_length,
                           'aws_surge_queue_length',
                           params['levels_surge_queue_length'],
                           infoname='Surge queue length')

    spillover = parsed.get('SpilloverCount')
    if spillover is not None:
        yield check_levels(spillover,
                           'aws_spillover',
                           params['levels_spillover'],
                           infoname='Spillover')


check_info['aws_elb'] = {
    'parse_function': parse_aws_elb,
    'inventory_function': lambda p: inventory_aws_generic_single(
        p, ['SurgeQueueLength', 'SpilloverCount']),
    'check_function': check_aws_elb_statistics,
    'service_description': 'AWS/ELB Statistics',
    'includes': ['aws.include'],
    'has_perfdata': True,
    'default_levels_variable': 'aws_elb_statistics',
    'group': 'aws_elb_statistics',
}

#.
#   .--latency-------------------------------------------------------------.
#   |                  _       _                                           |
#   |                 | | __ _| |_ ___ _ __   ___ _   _                    |
#   |                 | |/ _` | __/ _ \ '_ \ / __| | | |                   |
#   |                 | | (_| | ||  __/ | | | (__| |_| |                   |
#   |                 |_|\__,_|\__\___|_| |_|\___|\__, |                   |
#   |                                             |___/                    |
#   '----------------------------------------------------------------------'


def check_aws_elb_latency(item, params, parsed):
    latency = parsed.get("Latency")
    if latency is not None:
        yield check_levels(latency,
                           'aws_load_balancer_latency',
                           params.get('levels_latency'),
                           human_readable_func=get_age_human_readable)


check_info['aws_elb.latency'] = {
    'inventory_function': lambda p: inventory_aws_generic_single(p, ['Latency']),
    'check_function': check_aws_elb_latency,
    'service_description': 'AWS/ELB Latency',
    'includes': ['aws.include'],
    'has_perfdata': True,
    'group': 'aws_elb_latency',
}

#.
#   .--HTTP ELB------------------------------------------------------------.
#   |             _   _ _____ _____ ____    _____ _     ____               |
#   |            | | | |_   _|_   _|  _ \  | ____| |   | __ )              |
#   |            | |_| | | |   | | | |_) | |  _| | |   |  _ \              |
#   |            |  _  | | |   | | |  __/  | |___| |___| |_) |             |
#   |            |_| |_| |_|   |_| |_|     |_____|_____|____/              |
#   |                                                                      |
#   '----------------------------------------------------------------------'


def check_aws_elb_http_elb(item, params, parsed):
    return check_aws_http_elb(item, params.get("levels_load_balancers", params), parsed,
                              ['4xx', '5xx'], 'HTTPCode_ELB_%s', 'aws_elb_http_elb')


check_info['aws_elb.http_elb'] = {
    'inventory_function': lambda p: inventory_aws_generic_single(p, ['RequestCount']),
    'check_function': check_aws_elb_http_elb,
    'service_description': 'AWS/ELB HTTP ELB',
    'includes': ['aws.include'],
    'has_perfdata': True,
    'group': 'aws_elb_http',
}

#.
#   .--HTTP Backend--------------------------------------------------------.
#   |   _   _ _____ _____ ____    ____             _                  _    |
#   |  | | | |_   _|_   _|  _ \  | __ )  __ _  ___| | _____ _ __   __| |   |
#   |  | |_| | | |   | | | |_) | |  _ \ / _` |/ __| |/ / _ \ '_ \ / _` |   |
#   |  |  _  | | |   | | |  __/  | |_) | (_| | (__|   <  __/ | | | (_| |   |
#   |  |_| |_| |_|   |_| |_|     |____/ \__,_|\___|_|\_\___|_| |_|\__,_|   |
#   |                                                                      |
#   '----------------------------------------------------------------------'


def check_aws_elb_http_backend(item, params, parsed):
    return check_aws_http_elb(item, params.get("levels_backend_targets",
                                               params), parsed, ['2xx', '3xx', '4xx', '5xx'],
                              'HTTPCode_Backend_%s', 'aws_elb_http_backend')


check_info['aws_elb.http_backend'] = {
    'inventory_function': lambda p: inventory_aws_generic_single(p, ['RequestCount']),
    'check_function': check_aws_elb_http_backend,
    'service_description': 'AWS/ELB HTTP Backend',
    'includes': ['aws.include'],
    'has_perfdata': True,
    'group': 'aws_elb_http',
}

#.
#   .--Healthy hosts-------------------------------------------------------.
#   |    _   _            _ _   _             _               _            |
#   |   | | | | ___  __ _| | |_| |__  _   _  | |__   ___  ___| |_ ___      |
#   |   | |_| |/ _ \/ _` | | __| '_ \| | | | | '_ \ / _ \/ __| __/ __|     |
#   |   |  _  |  __/ (_| | | |_| | | | |_| | | | | | (_) \__ \ |_\__ \     |
#   |   |_| |_|\___|\__,_|_|\__|_| |_|\__, | |_| |_|\___/|___/\__|___/     |
#   |                                 |___/                                |
#   '----------------------------------------------------------------------'


def check_aws_elb_healthy_hosts(item, params, parsed):
    try:
        healthy_hosts = int(parsed["HealthyHostCount"])
    except (KeyError, ValueError):
        healthy_hosts = None

    try:
        unhealthy_hosts = int(parsed["UnHealthyHostCount"])
    except (KeyError, ValueError):
        unhealthy_hosts = None

    if healthy_hosts is not None:
        yield 0, 'Healthy hosts: %s' % healthy_hosts

    if unhealthy_hosts is not None:
        yield 0, 'Unhealthy hosts: %s' % unhealthy_hosts

    if healthy_hosts is not None and unhealthy_hosts is not None:
        total_hosts = unhealthy_hosts + healthy_hosts
        yield 0, 'Total: %s' % total_hosts

        try:
            perc = 100.0 * healthy_hosts / total_hosts
        except ZeroDivisionError:
            perc = None

        if perc is not None:
            yield check_levels(perc,
                               'aws_overall_hosts_health_perc',
                               params.get('levels_overall_hosts_health_perc'),
                               human_readable_func=get_percent_human_readable,
                               infoname="Proportion of healthy hosts")


check_info['aws_elb.healthy_hosts'] = {
    'inventory_function': lambda p: inventory_aws_generic_single(
        p, ['HealthyHostCount', 'UnHealthyHostCount']),
    'check_function': check_aws_elb_healthy_hosts,
    'service_description': 'AWS/ELB Healthy Hosts',
    'includes': ['aws.include'],
    'group': 'aws_elb_healthy_hosts',
}

#.
#   .--Backend errors------------------------------------------------------.
#   |                ____             _                  _                 |
#   |               | __ )  __ _  ___| | _____ _ __   __| |                |
#   |               |  _ \ / _` |/ __| |/ / _ \ '_ \ / _` |                |
#   |               | |_) | (_| | (__|   <  __/ | | | (_| |                |
#   |               |____/ \__,_|\___|_|\_\___|_| |_|\__,_|                |
#   |                                                                      |
#   |                                                                      |
#   |                     ___ _ __ _ __ ___  _ __ ___                      |
#   |                    / _ \ '__| '__/ _ \| '__/ __|                     |
#   |                   |  __/ |  | | | (_) | |  \__ \                     |
#   |                    \___|_|  |_|  \___/|_|  |___/                     |
#   |                                                                      |
#   '----------------------------------------------------------------------'


def check_aws_elb_backend_connection_errors(item, params, parsed):
    now = time.time()
    backend_connection_errors = parsed.get("BackendConnectionErrors")
    if backend_connection_errors is not None:
        yield check_levels(
            get_rate('aws_elb_backend_connection_errors', now, backend_connection_errors),
            'backend_connection_errors_rate', params.get('levels_backend_connection_errors_rate'))


check_info['aws_elb.backend_connection_errors'] = {
    'inventory_function': lambda p: inventory_aws_generic_single(p, ['BackendConnectionErrors']),
    'check_function': check_aws_elb_backend_connection_errors,
    'service_description': 'AWS/ELB Backend Connection Errors',
    'includes': ['aws.include'],
    'has_perfdata': True,
    'group': 'aws_elb_backend_connection_errors',
}
