#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2019             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

factory_settings['levels_azure_usagedetails'] = {}


def parse_azure_usagedetails(info):
    parsed = {}
    for detail in parse_azure(info).values():
        props = detail['properties']
        service_name = props['consumedService']
        data = parsed.setdefault(
            service_name, {
                'costs': collections.Counter(),
                'usage': 0.0,
                'subscription_name': props["subscriptionName"],
            })
        data['costs'].update({props['currency']: props['pretaxCost']})
        data['usage'] += props['usageQuantity']

    parsed[u"Summary"] = {
        'costs': sum((d['costs'] for d in parsed.values()), collections.Counter()),
        'usage': sum(d['usage'] for d in parsed.values()),
        # use any subscription_name, they're all the same
        'subscription_name': parsed.values()[0]["subscription_name"],
    }

    return parsed


@get_parsed_item_data
def check_azure_usagedetails(_no_item, params, data):

    for currency, amount in data.get('costs', {}).items():
        levels = params.get('levels')
        yield check_levels(amount, 'service_costs_%s' % currency.lower(), levels, currency)

    yield 0, "Subscription: %s" % data["subscription_name"]


check_info['azure_usagedetails'] = {
    'parse_function': parse_azure_usagedetails,
    'inventory_function': discover(),
    'check_function': check_azure_usagedetails,
    'service_description': "Costs %s",
    'includes': ['azure.include'],
    'default_levels_variable': 'levels_azure_usagedetails',
    'group': 'azure_usagedetails',
    'has_perfdata': True,
}
