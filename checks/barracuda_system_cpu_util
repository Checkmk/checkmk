#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from cmk.base.check_legacy_includes.cpu_util import *  # pylint: disable=wildcard-import,unused-wildcard-import
# .1.3.6.1.4.1.20632.2.13 3

# Suggested by customer
barracuda_system_cpu_util_default_levels = (80.0, 90.0)


def inventory_barracuda_system_cpu_util(info):
    return [(None, "barracuda_system_cpu_util_default_levels")]


def check_barracuda_system_cpu_util(_no_item, params, info):
    return check_cpu_util(int(info[0][0]), params)


check_info['barracuda_system_cpu_util'] = {
    'inventory_function'        : inventory_barracuda_system_cpu_util,
    'check_function'            : check_barracuda_system_cpu_util,
    'service_description'       : 'CPU utilization',
    'has_perfdata'              : True,
    # The barracuda spam firewall does not response or returns a timeout error
    # executing 'snmpwalk' on whole tables. But we can workaround here specifying
    # all needed OIDs. Then we can use 'snmpget' and 'snmpwalk' on these single OIDs.
    'snmp_info'                 : (".1.3.6.1.4.1.20632.2", [ "13" ]),
    'snmp_scan_function'        : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.8072.3.2.10") and \
                                              "barracuda" in oid(".1.3.6.1.2.1.1.1.0").lower(),
    'group'                     : "cpu_utilization",
}
