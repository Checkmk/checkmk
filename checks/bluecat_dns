#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

factory_settings["bluecat_dns"] = {
    "oper_states": {
        "warning": [2, 3, 4],
        "critical": [5],
    },
}


def inventory_bluecat_dns(info):
    return [(None, None)]


def check_bluecat_dns(item, params, info):
    oper_states = {
        1: "running normally",
        2: "not running",
        3: "currently starting",
        4: "currently stopping",
        5: "fault",
        None: "unknown",
    }

    if not info:
        return

    ok_on_node = False
    states = {}
    state = 0
    oper_state = None

    for node, oper_state in info:
        oper_state = int(oper_state)
        temp_state = 0
        if oper_state in params['oper_states']['warning']:
            state = max(1, state)
            temp_state = 1
        elif oper_state in params['oper_states']['critical']:
            state = 2
            temp_state = 2
        else:
            # If node one ok, the total check is ok
            ok_on_node = node
        # Only needed in cluster:
        states[node] = {'oper_state': oper_states[oper_state], 'state': temp_state}

    # Are we in a Cluster?
    if len(info) > 1:
        if ok_on_node:
            node = ok_on_node
            # One Node is OK:
            yield 0, "DNS is %s on %s" % (states[node]['oper_state'], node)
        else:
            # None of the nodes is ok:
            for node, data in states.items():
                yield data['state'], "%s on %s" % (data['oper_state'], node)
        return

    # Default behavior without Cluster
    yield state, "DNS is %s" % oper_states[oper_state]


check_info["bluecat_dns"] = {
    "check_function": check_bluecat_dns,
    "inventory_function": inventory_bluecat_dns,
    "node_info": True,
    "service_description": "DNS",
    "default_levels_variable": "bluecat_dns",
    "group": "bluecat_dns",
    "snmp_scan_function": lambda oid: oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.13315.2.1",
    "snmp_info": (
        ".1.3.6.1.4.1.13315.3.1.2.2.1",
        [
            1,  # DnsSerOperState
        ])
}
