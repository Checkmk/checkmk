#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from cmk.base.check_legacy_includes.temperature import *  # pylint: disable=wildcard-import,unused-wildcard-import
# OID branch 3 means the sensor unit type (from SENSOR-MIB):
# other(1)
# truthvalue(2)
# specialEnum(3)
# volts(4)
# celsius(5)
# rpm(6)


def inventory_bluecoat_sensors(info, temp):
    for name, _reading, _status, _scale, unit in info:
        # temperature sensor is unit 5.
        if temp == (unit == '5'):
            yield name.replace(" temperature", ""), {}


def check_bluecoat_sensors(item, params, info, temp):
    for name, reading, status, scale, unit in info:
        # if the service was discovered before the update,
        # the temp-subcheck will not have discovered anything as it didn't
        # exist before 1.2.8. Otoh the non-temperature check will include
        # temperature sensors. For those, the item name will is not manipulated
        if temp:
            name = name.replace(" temperature", "")
        if name == item:
            value = float(reading) * 10**float(scale)
            if temp and unit == '5':
                return check_temperature(value, params, "bluecoat_sensors_%s" % item,
                                         status != '1' and 2 or 0)
            elif unit == '4':
                unitname = " V"
                perfdata = [("voltage", value)]
            else:
                perfdata = None
                unitname = ""

            if status == '1':
                state = 0
            else:
                state = 2

            return state, "%.1f%s" % (value, unitname), perfdata


check_info["bluecoat_sensors"] = {
    'check_function': lambda item, params, info: check_bluecoat_sensors(item, params, info, False),
    'inventory_function': lambda info: inventory_bluecoat_sensors(info, False),
    'service_description': '%s',
    'has_perfdata': True,
    'snmp_info': ('.1.3.6.1.4.1.3417.2.1.1.1.1.1', [9, 5, 7, 4, 3]),
    'snmp_scan_function': lambda oid: '1.3.6.1.4.1.3417.1.1' in oid(".1.3.6.1.2.1.1.2.0"),
}

check_info["bluecoat_sensors.temp"] = {
    'check_function': lambda item, params, info: check_bluecoat_sensors(item, params, info, True),
    'inventory_function': lambda info: inventory_bluecoat_sensors(info, True),
    'service_description': 'Temperature %s',
    'has_perfdata': True,
    'group': "temperature",
}
