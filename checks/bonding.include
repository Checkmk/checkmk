#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

factory_settings['bonding_default_levels'] = {
    'ieee_302_3ad_agg_id_missmatch_state': 1,
    'expect_active': 'ignore',
}


def inventory_bonding(parsed):
    return [
        (bond, params)  #
        for bond, props in parsed.items() if props["status"] in {"up", "degraded"}
        for primary, active in ((props.get("primary", "None"), props.get("active", "None")),)
        for params in ({} if primary != "None" or active == "None" else {
            "primary": active
        },)
    ]


def _check_ieee_302_3ad_specific(params, status):
    master_id = status.get('aggregator_id')
    missmatch_state = params['ieee_302_3ad_agg_id_missmatch_state']

    for eth, slave in status["interfaces"].items():
        slave_id = slave['aggregator_id']
        if master_id is None:
            master_id = slave_id
        if slave_id != master_id:
            yield missmatch_state, "Missmatching aggregator ID of %s: %s" % (eth, slave_id)


def check_bonding(item, params, parsed):
    properties = parsed.get(item)
    if not properties:
        return  # => status: UNKN

    if properties["status"] not in {"up", "degraded"}:
        yield 2, "Interface is " + properties["status"]
        return

    mode = properties["mode"]
    yield 0, "Mode: %s" % mode
    if "IEEE 802.3ad" in mode:
        for result in _check_ieee_302_3ad_specific(params, properties):
            yield result

    speed = properties.get('speed')
    if speed:
        yield 0, "Speed: %s" % speed

    current_primary = properties.get("primary", "None")
    primary = current_primary if current_primary != "None" else params.get("primary", "None")
    if primary != "None":
        yield 0, "Primary: %s" % primary

    expected_active = {
        "primary": primary,
        "lowest": min(properties["interfaces"]),
        "ignore": None,
    }.get(params["expect_active"])

    active_if = properties.get("active", "None")
    if expected_active is None:
        # we don't expect an interface to be up and others to be down so check whether all
        # interfaces are up
        for eth, slave in properties["interfaces"].items():
            state = 0 if slave["status"] == 'up' else 1
            if "hwaddr" in slave:
                yield state, "%s/%s %s" % (eth, slave["hwaddr"], slave["status"])
            else:
                yield state, "%s %s" % (eth, slave["status"])
    elif expected_active == active_if:
        yield 0, "Active: %s" % active_if
    else:
        yield 1, "Active: %s (expected is %s)" % (active_if, expected_active)

    yield 0 if properties["status"] == "up" else 1, "Bond status: %s" % properties["status"]
