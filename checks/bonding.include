#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

factory_settings['bonding_default_levels'] = {
    'ieee_302_3ad_agg_id_missmatch_state': 1,
    'expect_active': 'ignore',
}


def inventory_bonding(parsed):
    inventory = []
    for bond, status in parsed.items():
        if status["status"] in ("up", "degraded"):
            # If no information about primary interface is available
            # then assume currently active one as primary
            if "primary" not in status and "active" in status:
                params = {"primary": status["active"]}
            else:
                params = {}
            inventory.append((bond, params))
    return inventory


def _check_ieee_302_3ad_specific(params, status):
    master_id = status['aggregator_id']
    missmatch_state = params['ieee_302_3ad_agg_id_missmatch_state']
    msg = "Missmatching aggregator ID of %s: %s"
    for eth, slave in status["interfaces"].items():
        slave_id = slave['aggregator_id']
        if slave_id != master_id:
            yield missmatch_state, msg % (eth, slave_id)


def check_bonding(item, params, parsed):
    status = parsed.get(item)
    if not status:
        return

    if status["status"] not in ("up", "degraded"):
        yield 2, "Interface is " + status["status"]
        return

    mode = status["mode"]
    yield 0, "Mode: %s" % mode
    if "IEEE 802.3ad" in mode:
        for result in _check_ieee_302_3ad_specific(params, status):
            yield result

    speed = status.get('speed')
    if speed:
        yield 0, "Speed: %s" % speed

    for eth, slave in status["interfaces"].items():
        state = int(slave["status"] != 'up')
        if "hwaddr" in slave:
            yield state, "%s/%s %s" % (eth, slave["hwaddr"], slave["status"])
        else:
            yield state, "%s %s" % (eth, slave["status"])

    primary = status.get("primary", params.get("primary"))
    if primary:
        yield 0, "Primary: %s" % primary

    active = status.get("active")
    if active:
        state = 0
        info = "Active: %s" % active

        expected_active = None
        expect = params["expect_active"]

        if expect == "primary":
            expected_active = primary
        elif expect == "lowest":
            expected_active = min(status["interfaces"])

        if expected_active is not None and expected_active != active:
            state = 1
            info += " (expected is %s)" % expected_active

        yield state, info

    yield 0 if status["status"] == "up" else 1, "Bond status: %s" % status["status"]
