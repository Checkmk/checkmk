#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2019             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.
import json


def parse_cadvisor_cpu(info):
    cpu_info = json.loads(info[0][0])
    parsed = {}
    for cpu_name, cpu_entries in cpu_info.iteritems():
        if len(cpu_entries) != 1:
            continue
        try:
            parsed[cpu_name] = float(cpu_entries[0]["value"])
        except KeyError:
            continue
    return parsed


def check_cadvisor_cpu(_item, params, parsed):
    # No suitable function in cpu_util.include
    cpu_user = parsed["cpu_user"]
    cpu_system = parsed["cpu_system"]
    cpu_total = cpu_user + cpu_system

    yield check_levels(cpu_user,
                       'user',
                       None,
                       human_readable_func=get_percent_human_readable,
                       infoname="User")
    yield check_levels(cpu_system,
                       'system',
                       None,
                       human_readable_func=get_percent_human_readable,
                       infoname="System")
    yield check_levels(cpu_total,
                       "util",
                       params.get("util"),
                       human_readable_func=get_percent_human_readable,
                       infoname="Total CPU")


check_info["cadvisor_cpu"] = {
    'parse_function': parse_cadvisor_cpu,
    'inventory_function': discover_single,
    'check_function': check_cadvisor_cpu,
    'service_description': 'CPU utilization',
    'has_perfdata': True,
    'group': 'cpu_utilization',
}
