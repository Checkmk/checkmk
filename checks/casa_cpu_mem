#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def parse_casa_cpu_mem(info):
    entity_names = {int(k): v for k, v in (x for x in info[0])}
    data = {}
    for idx, entry in enumerate(info[1]):
        entry_nr = int(entry[0])
        data[entity_names[entry_nr]] = {
            "mem_total": int(info[1][idx][1]),
            "mem_used": int(info[2][idx][1]),
        }
    return data


def inventory_casa_cpu_mem(parsed):
    inventory = []
    for k, v in parsed.iteritems():
        if v.get("mem_total"):
            inventory.append((k, {}))
    return inventory


@get_parsed_item_data
def check_casa_cpu_mem(item, params, data):
    warn, crit = params.get("levels", (None, None))
    mode = "abs_used" if isinstance(warn, int) else "perc_used"
    return check_memory_element(
        "Usage",
        data["mem_used"],
        data["mem_total"],
        (mode, (warn, crit)),
        metric_name="memused",
        render_base=1000,
    )


check_info["casa_cpu_mem"] = {
    "parse_function": parse_casa_cpu_mem,
    "inventory_function": inventory_casa_cpu_mem,
    "check_function": check_casa_cpu_mem,
    "service_description": "Memory %s",
    "has_perfdata": True,
    "group": "memory_multiitem",
    "snmp_scan_function": lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.20858.2."),
    "snmp_info": [
        (".1.3.6.1.2.1.47.1.1.1.1.2", [OID_END, '']),  # Entity descriptions, quite long...
        (".1.3.6.1.4.1.20858.10.13.1.1.1.1", [OID_END, '']),  # Total mem
        (".1.3.6.1.4.1.20858.10.13.1.1.1.2", [OID_END, '']),  # Total allocated mem
        (".1.3.6.1.4.1.20858.10.36.1.1.1.1", [OID_END, '']),  # Installed slot
    ],
    "includes": ["mem.include"],
}
