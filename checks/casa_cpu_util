#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.


def parse_casa_info_util(info):
    entity_names = {int(k): v for k, v in (x for x in info[0])}
    data = {}
    for entry in info[1]:
        entry_nr = int(entry[0])
        name = entity_names[entry_nr]  # e.g. "Module 1 QEM".
        # Drop "QEM" in order to be consistent with other DTCS checks...
        if name.startswith("Module "):
            name = name.rsplit(None, 1)[0]
        data[name] = {
            "cpu_util": entry[1],
        }
    return data


def inventory_casa_cpu_util(info):
    data = parse_casa_info_util(info)
    inventory = []
    for key, value in data.items():
        if value.get("cpu_util"):
            inventory.append((key, {}))
    return inventory


def check_casa_cpu_util(item, params, info):
    data = parse_casa_info_util(info)
    if item in data:
        state = 0
        value = int(data[item]["cpu_util"])
        levels_text = ""
        error_text = ""
        warn, crit = None, None
        if "levels" in params:
            warn, crit = params["levels"]
            levels_text = "(warn/crit at %s%%/%s%%)" % (warn, crit)
            if value > crit:
                state = 2
            elif value > warn:
                state = 1
            else:
                levels_text = ""
        infotext = "%d%% %s%s" % (value, error_text, levels_text)
        perfdata = [("util", value, warn, crit, 0, 100)]
        return (state, infotext, perfdata)
    else:
        return 3, "%s not found in SNMP output" % item


check_info["casa_cpu_util"] = {
    "check_function": check_casa_cpu_util,
    "inventory_function": inventory_casa_cpu_util,
    "service_description": "CPU utilization %s",
    "has_perfdata": True,
    "group": "cpu_utilization_multiitem",
    "snmp_scan_function": lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.20858.2."),
    "snmp_info": [
        (".1.3.6.1.2.1.47.1.1.1.1.2", [OID_END, '']),  # Entity descriptions, quite long...
        (".1.3.6.1.4.1.20858.10.13.1.1.1.4", [OID_END, '']),  # CPU utilization
    ]
}
