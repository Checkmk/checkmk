#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def check_bi_aggr_arguments(params):
    # Convert legacy format
    if isinstance(params, tuple):
        converted_params = {}
        converted_params["base_url"] = params[0]
        converted_params["aggregation_name"] = params[1]
        converted_params["credentials"] = ("configured", (params[2], params[3]))
        converted_params["optional"] = params[4]
        params = converted_params

    args = ["-b", params["base_url"], "-a", params["aggregation_name"]]

    if params["credentials"] == "automation":
        args.append("--use-automation-user")
    else:
        # configured
        args += [
            "-u", params["credentials"][1][0], "-s",
            passwordstore_get_cmdline("%s", params["credentials"][1][1])
        ]

    opt_params = params["optional"]
    if "auth_mode" in opt_params:
        args += ["-m", opt_params["auth_mode"]]

    if "timeout" in opt_params:
        args += ["-t", opt_params["timeout"]]

    if opt_params.get("in_downtime"):
        args += ["--in-downtime", opt_params["in_downtime"]]

    if opt_params.get("acknowledged"):
        args += ["--acknowledged", opt_params["acknowledged"]]

    if opt_params.get("track_downtimes"):
        args += ["-r", "-n", "$HOSTNAME$"]

    return args


active_check_info["bi_aggr"] = {
    "command_line": "check_bi_aggr $ARG1$",
    "argument_function": check_bi_aggr_arguments,
    "service_description": lambda params: "Aggr %s" % params[1]
                           if isinstance(params, tuple) else params["aggregation_name"],
}
