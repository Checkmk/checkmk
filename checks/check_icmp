#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def check_icmp_arguments(params):
    args = []

    min_successful_pings = params.get("min_pings", 0)
    if min_successful_pings:
        args += ["-m", "%d" % min_successful_pings]

    rta = 200, 500
    loss = 80, 100
    for key, value in params.items():
        if key == "timeout":
            args += ["-t", value]
        elif key == "packets":
            args += ["-n", value]
        elif key == "rta":
            rta = value
        elif key == "loss":
            loss = value
    args += ["-w", "%.2f,%d%%" % (rta[0], loss[0])]
    args += ["-c", "%.2f,%d%%" % (rta[1], loss[1])]

    target = params.get("address", "address")

    if target == "address":
        if is_ipv6_primary(host_name()):
            args.append('-6')
        args.append("$HOSTADDRESS$")

    elif target == "alias":
        if is_ipv6_primary(host_name()):
            args.append('-6')
        args.append("$HOSTALIAS$")

    elif target == "all_ipv4addresses":
        args += ["$HOST_ADDRESSES_4$", "$HOST_ADDRESS_4$"]

    elif target == "all_ipv6addresses":
        args += ["-6", "$HOST_ADDRESSES_6$", "$HOST_ADDRESS_6$"]

    elif target == "additional_ipv4addresses":
        args.append("$HOST_ADDRESSES_4$")

    elif target == "additional_ipv6addresses":
        args += ["-6", "$HOST_ADDRESSES_6$"]

    elif target[0] == "indexed_ipv4address":
        args.append("$HOST_ADDRESS_4_%s$" % target[1])

    elif target[0] == "indexed_ipv6address":
        args.append("$HOST_ADDRESS_6_%s$" % target[1])

    else:  # custom
        args.append(target[1])

    return args


def check_icmp_description(params):
    if "description" in params:
        return params["description"]

    description = "PING"
    target = params.get("address", "address")
    if target[0] == "indexed_ipv4address":
        description += " IPv4/%s" % target[1]
    elif target[0] == "indexed_ipv6address":
        description += " IPv6/%s" % target[1]
    return description


active_check_info['icmp'] = {
    "command_line": 'check_icmp $ARG1$',
    "argument_function": check_icmp_arguments,
    "service_description": check_icmp_description,
    "has_perfdata": True,
}
