#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.


def check_mail_loop_arguments(params):
    args = []

    if "smtp_server" in params:
        args.append("--smtp-server=%s" % params["smtp_server"])
    else:
        args.append("--smtp-server=$HOSTADDRESS$")

    # note: 'imap_tls' is also used for POP3, so it should be called "fetch_tls"
    if "imap_tls" in params:
        args.append("--fetch-tls")

    if "smtp_tls" in params:
        args.append("--smtp-tls")

    if "smtp_port" in params:
        args.append("--smtp-port=%d" % params["smtp_port"])

    if "smtp_auth" in params:
        username, password = params["smtp_auth"]
        args.append("--smtp-username=%s" % username)
        args.append(passwordstore_get_cmdline("--smtp-password=%s", password))

    fetch_proto, fetch_params = params["fetch"]
    args.append("--fetch-protocol=%s" % fetch_proto)

    if "server" in fetch_params:
        args.append("--fetch-server=%s" % fetch_params["server"])
    else:
        args.append("--fetch-server=$HOSTADDRESS$")

    fetch_use_ssl, fetch_port = fetch_params["ssl"]
    if fetch_use_ssl:
        args.append("--fetch-tls")
    if fetch_port is not None:
        args.append("--fetch-port=%d" % fetch_port)

    username, password = fetch_params["auth"]
    args.append("--fetch-username=%s" % username)
    args.append(passwordstore_get_cmdline("--fetch-password=%s", password))

    args.append("--mail-from=%s" % params["mail_from"])
    args.append("--mail-to=%s" % params["mail_to"])

    if "connect_timeout" in params:
        args.append("--connect-timeout=%d" % params["connect_timeout"])

    if "delete_messages" in params:
        args.append("--delete-messages")

    args.append("--status-suffix=%s" % (host_name() + "-" + params["item"]))

    if "duration" in params:
        warning, critical = params["duration"]
        args.append("--warning=%d" % warning)
        args.append("--critical=%d" % critical)

    if "subject" in params:
        args.append("--subject=%s" % params["subject"])

    return args


active_check_info["mail_loop"] = {
    "command_line": "check_mail_loop $ARG1$",
    "argument_function": check_mail_loop_arguments,
    "service_description": lambda params: "Mail Loop %s" % params["item"],
    "has_perfdata": True,
}
