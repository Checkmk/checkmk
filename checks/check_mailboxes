#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2016             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def check_mailboxes_arguments(params):
    args = []

    fetch_params = params["imap_parameters"]

    if "server" in fetch_params:
        args.append("--server=%s" % fetch_params["server"])
    else:
        args.append("--server=$HOSTADDRESS$")

    fetch_use_ssl, fetch_port = fetch_params["ssl"]
    if fetch_use_ssl:
        args.append("--ssl")

    if fetch_port is not None:
        args.append("--port=%d" % fetch_port)

    username, password = fetch_params["auth"]
    args.append("--username=%s" % username)
    args.append(passwordstore_get_cmdline("--password=%s", password))

    if "connect_timeout" in params:
        args.append("--timeout=%d" % params["connect_timeout"])

    if "retrieve_max" in params:
        args.append("--retrieve-max=%d" % params["retrieve_max"])

    if "age" in params:
        warn, crit = params["age"]
        args.append("--warn-age=%d" % warn)
        args.append("--crit-age=%d" % crit)

    if "new" in params:
        warn, crit = params["new"]
        args.append("--warn-new=%d" % warn)
        args.append("--crit-new=%d" % crit)

    if "count" in params:
        warn, crit = params["count"]
        args.append("--warn-count=%d" % warn)
        args.append("--crit-count=%d" % crit)

    if "mailboxes" in params:
        for mb in params["mailboxes"]:
            args.append("--mailbox=%s" % mb)

    return args


active_check_info["mailboxes"] = {
    "command_line": "check_mailboxes $ARG1$",
    "argument_function": check_mailboxes_arguments,
    "service_description": lambda params: params["service_description"],
    "has_perfdata": True,
}
