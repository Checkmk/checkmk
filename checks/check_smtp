#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def check_smtp_arguments(params):
    _description, settings = params
    args = []

    if "expect" in settings:
        args += ["-e", settings["expect"]]

    if "port" in settings:
        port = int(settings["port"])  # ValueSpec was broken, convert to int
        args += ["-p", port]

    # Be compatible to legacy option
    if "ip_version" in settings:
        settings["address_family"] = settings.pop("ip_version")

    # Use the address family of the monitored host by default
    address_family = settings.get("address_family")
    if address_family is None:
        address_family = "ipv6" if is_ipv6_primary(host_name()) else "ipv4"

    if address_family == "ipv6":
        args.append("-6")
        address = "$_HOSTADDRESS_6$"
    else:
        args.append("-4")
        address = "$_HOSTADDRESS_4$"

    for s in settings.get("commands", []):
        args += ["-C", s]

    for s in settings.get("command_responses", []):
        args += ["-R", s]

    if settings.get("from"):
        args += ["-f", settings["from"]]

    if "response_time" in settings:
        warn, crit = settings["response_time"]
        args += ["-w", "%0.4f" % warn]
        args += ["-c", "%0.4f" % crit]

    if "timeout" in settings:
        args += ["-t", settings["timeout"]]

    if "auth" in settings:
        username, password = settings["auth"]
        args += ["-A", "LOGIN", "-U", username, "-P", password]

    if settings.get("starttls", False):
        args.append("-S")

    if "fqdn" in settings:
        args += ["-F", settings["fqdn"]]

    if "cert_days" in settings:
        # legacy behavior
        if isinstance(settings["cert_days"], int):
            args += ["-D", settings["cert_days"]]
        else:
            warn, crit = settings["cert_days"]
            args += ["-D", "%d,%d" % (warn, crit)]

    if "hostname" in settings:
        args += ["-H", settings["hostname"]]
    else:
        args += ["-H", address]

    return args


def check_smtp_desc(params):
    if params[0].startswith("^"):
        return params[0][1:]
    return "SMTP %s" % params[0]


active_check_info["smtp"] = {
    "command_line": "$USER1$/check_smtp $ARG1$",
    "argument_function": check_smtp_arguments,
    "service_description": check_smtp_desc,
    "has_perfdata": True,
}
