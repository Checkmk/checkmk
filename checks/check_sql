#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def check_sql_arguments(params):
    args = []

    if "host" in params:
        args += ["--hostname=%s" % params["host"]]
    else:
        args += ["--hostname=$HOSTADDRESS$"]

    args.append("--dbms=%s" % params["dbms"])
    args.append("--name=%s" % params["name"])
    args.append("--user=%s" % params["user"])
    args.append(passwordstore_get_cmdline("--password=%s", params["password"]))

    if "port" in params:
        args.append("--port=%s" % params["port"])

    if "procedure" in params:
        if "procedure" in params and "useprocs" in params["procedure"]:
            args.append("--procedure")
            if "input" in params["procedure"]:
                args.append("--inputvars=%s" % params["procedure"]["input"])

    if "levels" in params:
        upper = params["levels"]
    else:
        upper = "", ""

    if "levels_low" in params:
        lower = params["levels_low"]
    else:
        lower = "", ""

    if "perfdata" in params:
        args.append("--metrics")

    if "levels" in params or "levels_low" in params:
        warn_low, crit_low = lower
        warn_high, crit_high = upper
        args.append("-w%s:%s" % (warn_low, warn_high))
        args.append("-c%s:%s" % (crit_low, crit_high))

    if isinstance(params["sql"], tuple):
        sql_tmp = params["sql"][-1]
    else:
        sql_tmp = params["sql"]

    args.append("%s" % sql_tmp.replace("\n", r"\n").replace(";", r"\;"))

    return args


active_check_info["sql"] = {
    "command_line": "$USER1$/check_sql $ARG1$",
    "argument_function": check_sql_arguments,
    "service_description": lambda args: args["description"],
    "has_perfdata": True,
}
