#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2016             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

factory_settings['checkpoint_temp_default_levels'] = {"levels": (50, 60)}


def format_item_checkpoint_temp(name):
    return name.upper().replace(" TEMP", "")


def inventory_checkpoint_temp(info):
    for name, _value, _unit, _dev_status in info:
        yield format_item_checkpoint_temp(name), {}


def check_checkpoint_temp(item, params, info):
    for name, value, unit, dev_status in info:
        if format_item_checkpoint_temp(name) == item:
            unit = unit.replace("degree", "").strip().lower()
            state, state_readable = checkpoint_sensorstatus_to_nagios[dev_status]

            if value == "":
                return state, "Status: %s" % state_readable

            return check_temperature(float(value),
                                     params,
                                     "checkpoint_temp_%s" % item,
                                     dev_unit=unit,
                                     dev_status=state,
                                     dev_status_name=state_readable)


check_info['checkpoint_temp'] = {
    'check_function': check_checkpoint_temp,
    'inventory_function': inventory_checkpoint_temp,
    'service_description': "Temperature %s",
    'has_perfdata': True,
    'group': 'temperature',
    'snmp_scan_function': scan_checkpoint,
    'snmp_info': (
        '.1.3.6.1.4.1.2620.1.6.7.8.1.1',
        [
            2,  # tempertureSensorName
            3,  # tempertureSensorValue
            4,  # tempertureSensorUnit
            6  # tempertureSensorStatus
        ]),
    'includes': ['checkpoint.include', 'temperature.include'],
    'default_levels_variable': 'checkpoint_temp_default_levels'
}
