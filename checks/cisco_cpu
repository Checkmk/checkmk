#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# oid(".1.3.6.1.4.1.9.9.109.1.1.1.1.5.1") is depreceated by
# oid(".1.3.6.1.4.1.9.9.109.1.1.1.1.8.1"), we recognize both for now

cisco_cpu_default_levels = (80.0, 90.0)


def inventory_cisco_cpu(info):
    if info and \
    (info[0][0].isdigit() or \
    info[0][1].isdigit()):
        return [(None, 'cisco_cpu_default_levels')]


def check_cisco_cpu(item, params, info):
    # Value of info could be (None, None) or ("", "").
    if not info[0][0].isdigit() and \
       not info[0][1].isdigit():
        return 3, 'No information about the CPU utilization available'

    if info[0][1]:
        util = float(info[0][1])
    else:
        util = float(info[0][0])

    state = 0
    infotext = "%.1f%% utilization in the last 5 minutes" % util

    warn, crit = params
    if util >= crit:
        state = 2
    elif util >= warn:
        state = 1
    if state > 0:
        infotext += " (warn/crit at %.1f%%/%.1f%%)" % (warn, crit)

    return state, infotext, [("util", util, warn, crit, 0, 100)]


check_info["cisco_cpu"] = {
    "check_function": check_cisco_cpu,
    "inventory_function": inventory_cisco_cpu,
    "service_description": "CPU utilization",
    "has_perfdata": True,
    "group": "cpu_utilization",
    "snmp_info": (".1.3.6.1.4.1.9.9.109.1.1.1.1", [5, 8]),
    "snmp_scan_function": snmp_scan_cisco_cpu,
    "includes": ["cisco_cpu_scan_functions.include"],
}
