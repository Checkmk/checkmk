#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

factory_settings["cisco_mem_default_levels"] = {
    "levels": (80.0, 90.0),
}


def scan_cisco_mem_asa64(oid):
    version = int((oid(".1.3.6.1.2.1.1.1.0").split("Version")[-1]).split(".")[0])
    return version >= 9


def inventory_cisco_mem(info):
    return [(line[0], {}) for line in info if line[0] != "Driver text"]


def check_cisco_mem(item, params, info):
    for line in info:

        if line[0] != item:
            continue

        if isinstance(params, tuple):
            params = {"levels": params}

        # We saw SNMP outputs which may contain empty entries for free or used memory.
        # Assumption: In this case these values are zero.
        try:
            mem_free = int(line[2])
        except ValueError:
            mem_free = 0
        try:
            mem_used = int(line[1])
        except ValueError:
            mem_used = 0
        mem_total = mem_free + mem_used
        return check_cisco_mem_sub(item, params, mem_used, mem_total)


def check_cisco_mem_sub(item, params, mem_used, mem_total):
    if not mem_total:
        return 3, "Cannot calculate memory usage: Device reports total memory 0"

    perc_used = 100.0 * (float(mem_used) / float(mem_total))
    warn, crit = params["levels"]
    perfdata = [("mem_used", perc_used, warn, crit, 0, 100)]

    status = 0
    if isinstance(warn, float):
        infotext = "%2.1f%% (%s) of %s used" % (perc_used, get_bytes_human_readable(mem_used),
                                                get_bytes_human_readable(mem_total))
        if perc_used >= crit:
            status = 2
            infotext += " (critical at %d%%)" % crit
        elif perc_used >= warn:
            status = 1
            infotext += " (warning at %d%%)" % warn
    else:
        infotext = "%s (%2.1f%%) of %s used" % (get_bytes_human_readable(mem_used), perc_used,
                                                get_bytes_human_readable(mem_total))
        if mem_used >= crit:
            status = 2
            infotext += " (critical at %s MB)" % crit
        elif mem_used >= warn:
            status = 1
            infotext += " (warning at %s MB)" % warn

    if params.get("trend_range"):
        mem_used_mb, mem_total_mb = mem_used / 1048576.0, mem_total / 1048576.0
        trend_status, trend_infotext, trend_perfdata = size_trend('cisco_mem', item, "memory",
                                                                  params, mem_used_mb, mem_total_mb)
        status = max(status, trend_status)
        infotext += trend_infotext
        perfdata.extend(trend_perfdata)

    return status, infotext, perfdata
