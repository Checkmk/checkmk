#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.
"""Cisco prime connection count check
This check will compare the sum of all 'count' entries against lower levels and additionally
output the sums of all individual connection types
"""


def check_cisco_prime_wifi_connections(item, params, parsed):
    """Sum up all individual counts for each connection type (as well as their sums
    indicated by 'count')"""
    keys = {
        "count": "Total connections",
        "dot11aCount": "802.11a",
        "dot11bCount": "802.11b",
        "dot11gCount": "802.11g",
        "dot11acCount": "802.11ac",
        "dot11n2_4Count": "802.11n24",
        "dot11n5Count": "802.11n5",
    }
    total_counts = {
        key: sum(counts[key] for counts in parsed.values())  #
        for key in keys
    }
    for element, count in total_counts.items():
        yield check_levels(
            count,
            "connections",
            (None, None) + params.get("levels_lower", (None, None)),
            human_readable_func=int,
            infoname=keys[element],
        ) if element == "count" else (0, "%s: %d" % (keys[element], count))


check_info["cisco_prime_wifi_connections"] = {
    "parse_function": lambda info: parse_cisco_prime("clientCountsDTO", info),
    "inventory_function": discover_single,
    "check_function": check_cisco_prime_wifi_connections,
    "service_description": "Cisco Prime WiFi Connections",
    "group": "cisco_prime_wifi_connections",
    "includes": ["cisco_prime.include"],
}
