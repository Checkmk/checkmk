#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def cisco_sensor_item(trial_string, fall_back):
    trial_string = trial_string.lstrip()  # remove leading spaces which might be provided via SNMP

    # trial_string can be:
    # Empty
    # A single string
    # A string seperated by commas with status information
    # -> Depends on the device model
    try:
        # Try to handle all cases found in mkzeug/walks
        splitted = [x.strip() for x in trial_string.split(',')]
        if len(splitted) == 1:
            item = trial_string
        # If the last part contains # or Power, take the complete string
        elif '#' in splitted[-1] or 'Power' in splitted[-1]:
            item = " ".join(splitted)
        # If second last part start with Status, remove that part
        elif splitted[-2].startswith("PS"):
            item = " ".join(splitted[:-2] + splitted[-2].split(" ")[:-1])
        elif splitted[-2].startswith("Status"):
            item = " ".join(splitted[:-2])
        # Take anything, but without last part
        else:
            item = " ".join(splitted[:-1])
        # Maye there a multiple Items, but always the same string.
        # Try to prevent that by adding the fall_back number to the end
        if not item[-1].isdigit():
            item += " " + fall_back
        # Replace unwanted chars and return
        return item.replace('#', ' ')
    except Exception:
        return fall_back
