#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def inventory_cisco_temp(info):
    for name, state in info:
        if state != '5':
            yield name, None


def check_cisco_temp(item, _no_params, info):
    map_states = {
        "1": (0, "OK"),
        "2": (1, "warning"),
        "3": (2, "critical"),
        "4": (2, "shutdown"),
        "5": (3, "not present"),
        "6": (3, "value out of range"),
    }

    for name, dev_state in info:
        if name == item:
            state, state_readable = map_states.get(dev_state, (3, "unknown[%s]" % dev_state))
            return state, "Status: %s" % state_readable

    return 3, "sensor not found in SNMP output"


check_info["cisco_temp"] = {
    'check_function':          check_cisco_temp,
    'inventory_function':      inventory_cisco_temp,
    'service_description':     'Temperature %s',
    'snmp_info':               ('.1.3.6.1.4.1.9.9.13.1.3.1', ['2', '6']),
    'snmp_scan_function':
     lambda oid: "cisco" in oid(".1.3.6.1.2.1.1.1.0").lower() and \
            not oid(".1.3.6.1.4.1.9.9.13.1.3.1.3.*"),
}
