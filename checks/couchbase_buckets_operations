#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def parse_couchbase_buckets_operations(info):
    parsed = parse_couchbase_lines(info)
    counters = (collections.Counter(data) for data in parsed.itervalues())
    try:
        parsed[None] = sum(counters, collections.Counter())
    except TypeError:
        pass
    return parsed


@get_parsed_item_data
def check_couchbase_buckets_operations(_item, params, data):

    ops = data.get('ops')
    if ops is not None:
        yield check_levels(
            ops,
            'op_s',
            params.get('ops'),
            unit="/s",
            infoname='Total (per server)',
        )

    cmd_get = data.get('cmd_get')
    if cmd_get is not None:
        yield check_levels(
            cmd_get,
            None,
            None,
            unit="/s",
            infoname='Gets',
        )

    cmd_set = data.get('cmd_set')
    if cmd_set is not None:
        yield check_levels(
            cmd_set,
            None,
            None,
            unit="/s",
            infoname='Sets',
        )

    deletes = data.get('ep_num_ops_del_meta')
    if deletes is not None:
        yield check_levels(
            deletes,
            None,
            None,
            unit="/s",
            infoname='Deletes',
        )


check_info['couchbase_buckets_operations'] = {
    'parse_function': parse_couchbase_buckets_operations,
    'inventory_function': discover(lambda k, v: k is not None and 'ops' in v),
    'check_function': check_couchbase_buckets_operations,
    'service_description': 'Couchbase Bucket %s Operations',
    'includes': ['couchbase.include'],
    'group': 'couchbase_ops',
    'has_perfdata': True
}

check_info['couchbase_buckets_operations.total'] = {
    'parse_function': parse_couchbase_buckets_operations,
    'inventory_function': discover(lambda k, v: k is None and 'ops' in v),
    'check_function': check_couchbase_buckets_operations,
    'service_description': 'Couchbase Bucket Operations',
    'includes': ['couchbase.include'],
    'group': 'couchbase_ops_buckets',
    'has_perfdata': True
}
