#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from cmk.base.check_legacy_includes.couchbase import *  # pylint: disable=wildcard-import,unused-wildcard-import


@get_parsed_item_data
def check_couchbase_buckets_vbuckets(_item, params, data):

    resident_items_ratio = data.get("vb_active_resident_items_ratio")
    if resident_items_ratio is not None:
        yield check_levels(
            resident_items_ratio,
            "resident_items_ratio",
            (None, None) + params.get("resident_items_ratio", (None, None)),
            infoname="Resident items ratio",
            human_readable_func=get_percent_human_readable,
        )

    item_memory = data.get("vb_active_itm_memory")
    if item_memory is not None:
        yield check_levels(
            item_memory,
            "item_memory",
            params.get("item_memory"),
            infoname="Item memory",
            human_readable_func=get_bytes_human_readable,
        )

    pending_vbuckets = data.get("vb_pending_num")
    if pending_vbuckets is not None:
        yield check_levels(
            int(pending_vbuckets),
            "pending_vbuckets",
            params.get("vb_pending_num"),
            infoname="Pending vBuckets",
            human_readable_func=str,
        )


@get_parsed_item_data
def check_couchbase_buckets_vbuckets_replica(_item, params, data):

    replica_num = data.get("vb_replica_num")
    if replica_num is not None:
        yield check_levels(
            int(replica_num),
            "vbuckets",
            params.get("vb_replica_num"),
            infoname="Total number",
            human_readable_func=str,
        )

    item_memory = data.get("vb_replica_itm_memory")
    if item_memory is not None:
        yield check_levels(
            item_memory,
            "item_memory",
            params.get("item_memory"),
            infoname="Item memory",
            human_readable_func=get_bytes_human_readable,
        )


check_info['couchbase_buckets_vbuckets'] = {
    'parse_function': parse_couchbase_lines,
    'inventory_function': discover(lambda _k, v: 'vb_active_resident_items_ratio' in v),
    'check_function': check_couchbase_buckets_vbuckets,
    'service_description': 'Couchbase Bucket %s active vBuckets',
    'group': 'couchbase_vbuckets',
    'has_perfdata': True
}

check_info['couchbase_buckets_vbuckets.replica'] = {
    'parse_function': parse_couchbase_lines,
    'inventory_function': discover(lambda _k, v: 'vb_active_resident_items_ratio' in v),
    'check_function': check_couchbase_buckets_vbuckets_replica,
    'service_description': 'Couchbase Bucket %s replica vBuckets',
    'group': 'couchbase_vbuckets',
    'has_perfdata': True
}
