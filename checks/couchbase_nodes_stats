#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

check_info['couchbase_nodes_stats'] = {
    'parse_function': parse_couchbase_lines,
    'includes': ['couchbase.include', 'cpu_util.include', 'memory.include'],
}


@get_parsed_item_data
def check_couchbase_nodes_cpu_util(_item, params, data):
    try:
        return check_cpu_util(float(data['cpu_utilization_rate']), params)
    except (ValueError, KeyError):
        pass


check_info['couchbase_nodes_stats.cpu_util'] = {
    'inventory_function': discover(),
    'check_function': check_couchbase_nodes_cpu_util,
    'service_description': 'Couchbase %s CPU utilization',
    'group': "cpu_utilization_multiitem",
    'has_perfdata': True,
}

factory_settings["memory_default_levels"] = {"levels": (150.0, 200.0)}


@get_parsed_item_data
def check_couchbase_nodes_mem(_item, params, data):
    try:
        mem_total = data['mem_total'] / 1024.
        mem_free = data['mem_free'] / 1024.
        swap_total = data['swap_total'] / 1024.
        swap_used = data['swap_used'] / 1024.
    except KeyError:
        return None

    # TODO: I (mo) f***ed this up. We need to call check_memory,
    # but the WATO rule needs an item
    return check_memory_multiitem(
        params, {
            'MemTotal': mem_total,
            'MemFree': mem_free,
            'SwapTotal': swap_total,
            'SwapFree': swap_total - swap_used,
        })


check_info['couchbase_nodes_stats.mem'] = {
    'inventory_function': discover(),
    'check_function': check_couchbase_nodes_mem,
    'service_description': 'Couchbase %s Memory',
    'group': 'memory_multiitem',
    'has_perfdata': True,
    'default_levels_variable': 'memory_default_levels',
}
