#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Common file for all (modern) checks that check CPU utilization (not load!)

# Example for check parameters:
# 1. Variant: Tuple (warn, crit). This is legacy style
# 2. Variant: dictionary:
#
#  param = {
#     "util" : .... --> compatible with check_levels(), optional
#     "average" : 15 # -> compute average for 15 minutes, optional
#   }


# This one can handle user, system and wait. values is a list of:
# - 0 - name: name of core
# - 1 - user: normal processes executing in user mode
# - 2 - nice: niced processes executing in user mode
# - 3 - system: processes executing in kernel mode
# - 4 - idle: twiddling thumbs
# - 5 - iowait: waiting for I/O to complete
# - 6 - irq: servicing interrupts
# - 7 - softirq: servicing softirqs
# - 8 - steal: involuntary wait
# - 9 - guest: time spent in guest OK, also counted in 0 (user)
# -10 - guest_nice: time spent in niced guest OK, also counted in 1 (nice)
class CpuInfo(
        collections.namedtuple("CPU_utilization",
                               ('name', 'user', 'nice', 'system', 'idle', 'iowait', 'irq',
                                'softirq', 'steal', 'guest', 'guest_nice'))):
    __slots__ = ()

    @property
    def util_total(self):
        return self.user + self.nice + self.system + self.iowait + self.irq + self.softirq + self.steal

    @property
    def total_sum(self):
        return self.util_total + self.idle

    @property
    def utils_perc(self):
        # https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/kernel/sched/cputime.c
        # see 'account_guest_time'
        # if task_nice(p) <= 0:
        #     cpustat[CPUTIME_USER] += cputime;
        #     cpustat[CPUTIME_GUEST] += cputime;
        guest = self.guest + self.guest_nice
        user = self.user + self.nice - guest

        system = self.system + self.irq + self.softirq
        wait = self.iowait
        steal = self.steal
        total_sum = self.total_sum

        perc = [
            100.0 * float(x) / float(total_sum)
            for x in [user, system, wait, steal, guest, self.util_total]
        ]
        return perc


def cpu_info(elements, caster=int):
    entries = [elements[0]] + map(caster, elements[1:])
    entries.extend([0] * (11 - len(entries)))
    return CpuInfo(*entries)


def util_counter(stats, this_time):
    # Compute jiffi-differences of all relevant counters
    diff_values = []
    for n, v in enumerate(stats[1:], start=1):
        countername = "cpu.util.%d" % n
        last_val = get_item_state(countername, (0, 0))[1]
        diff_values.append(v - last_val)
        set_item_state(countername, (this_time, v))

    return cpu_info([stats.name] + diff_values)


# normalize name of a cpu core so that the perfdata-template
# recognizes it. If the input name doesn't end on a number, this
# returns consecutive numbers per call so this function has to be
# called exactly once per core
def cpu_util_core_name(orig, core_index):
    expr = regex(r"\d+$")
    match = expr.search(orig)
    if match is not None:
        num = match.group(0)
    else:
        # fallback: if the cores have odd names, use
        # consecutive numbers for each call
        num = core_index
    return "cpu_core_util_%s" % num


def check_cpu_util(util, params, this_time=None, cores=None, perf_max=100):
    # Convert legacy param style to new dict style
    if params is None:
        params = {}
    elif isinstance(params, tuple):
        params = {"util": params}

    if this_time is None:
        this_time = time.time()

    levels = params.get("util")
    if levels is None:  # legacy rules before 1.6
        levels = params.get("levels")

    warn, crit = levels if isinstance(levels, tuple) else (None, None)  # only for perfdata
    perfdata = [("util", util, warn, crit, 0, perf_max)]

    # Averaging
    if "average" in params:
        util_avg = get_average("cpu_utilization.avg", this_time, util, params["average"])
        perfdata.append(("util_average", util_avg, warn, crit, 0, perf_max))
        state, infotext, extraperf = check_levels(util_avg,
                                                  "util_average",
                                                  levels,
                                                  human_readable_func=get_percent_human_readable,
                                                  infoname="%dmin average" % params["average"])
    else:
        state, infotext, extraperf = check_levels(util,
                                                  "util",
                                                  levels,
                                                  human_readable_func=get_percent_human_readable,
                                                  infoname="Total CPU")

    perfdata += extraperf[1:]  # reference curve for predictive levels
    yield state, infotext, perfdata

    if "core_util_time_total" in params:
        threshold, warn, crit = params["core_util_time_total"]
        yield cpu_util_time(this_time, "total", util, threshold, warn, crit)

    if cores and any([x in params for x in ["core_util_graph", "core_util_time", "levels_single"]]):
        for core_index, (core, total_perc) in enumerate(cores):
            for sub_result in _util_perfdata(core, total_perc, core_index, this_time, params):
                yield sub_result


def check_cpu_util_unix(values, params, cores=None, values_counter=True):
    this_time = time.time()
    if values_counter:
        diff_values = util_counter(values, this_time)
        sum_jiffies = diff_values.total_sum
        if sum_jiffies == 0:
            raise MKCounterWrapped("Too short time difference since last check")
        user_perc, system_perc, wait_perc, steal_perc, guest_perc, util_total_perc = diff_values.utils_perc
    else:
        user_perc = values.user
        system_perc = values.system
        wait_perc = values.iowait
        util_total_perc = values.util_total

    yield check_levels(user_perc,
                       'user',
                       None,
                       human_readable_func=get_percent_human_readable,
                       infoname="User")
    yield check_levels(system_perc,
                       'system',
                       None,
                       human_readable_func=get_percent_human_readable,
                       infoname="System")
    yield check_levels(wait_perc,
                       'wait',
                       params.get('iowait'),
                       human_readable_func=get_percent_human_readable,
                       infoname="Wait")

    # Compute values used in virtualized environments (Xen, etc.)
    # Only do this for counters that have counted at least one tick
    # since the system boot. This avoids silly output in systems
    # where these counters are not being used
    if values.steal:
        yield check_levels(steal_perc,
                           "steal",
                           params.get('steal'),
                           human_readable_func=get_percent_human_readable,
                           infoname="Steal")

    if values.guest:
        yield check_levels(guest_perc,
                           'guest',
                           None,
                           human_readable_func=get_percent_human_readable,
                           infoname="Guest")

    summary_cores = []
    if cores:
        for core in cores:
            prev_total = get_item_state("cpu.util.%s.total" % core.name, 0)
            util_total = core.util_total
            total_diff = util_total - prev_total
            set_item_state("cpu.util.%s.total" % core.name, util_total)
            total_perc = (100.0 * total_diff / sum_jiffies) * len(cores)
            summary_cores.append((core.name, total_perc))

    for check_result in check_cpu_util(util_total_perc,
                                       params,
                                       this_time,
                                       summary_cores,
                                       perf_max=None):
        yield check_result


def _util_perfdata(core, total_perc, core_index, this_time, params):
    if params.get("core_util_graph"):
        yield 0, "", [(cpu_util_core_name(core, core_index), total_perc)]

    if "core_util_time" in params:
        threshold, warn, crit = params["core_util_time"]
        yield cpu_util_time(this_time, core, total_perc, threshold, warn, crit)

    state, infotext, _ = check_levels(
        total_perc,
        "core_%s" % core,  # Not used in perfdata
        params.get('levels_single'),
        human_readable_func=get_percent_human_readable,
        infoname="Core %s" % core)
    if state:
        yield state, infotext, []


def check_cpu_util_linux_container(_no_item, params, parsed):
    con_ticks = parsed.get("container_ticks")
    sys_ticks = parsed.get("system_ticks")
    num_cpus = parsed.get("num_cpus")
    if None in (con_ticks, sys_ticks, num_cpus):
        return

    cpu_tick_rate = get_rate("container_ticks", sys_ticks, con_ticks)

    cpu_usage = cpu_tick_rate * num_cpus * 100.0

    return check_cpu_util(cpu_usage, params)


#   .--helper--------------------------------------------------------------.
#   |                    _          _                                      |
#   |                   | |__   ___| |_ __   ___ _ __                      |
#   |                   | '_ \ / _ \ | '_ \ / _ \ '__|                     |
#   |                   | | | |  __/ | |_) |  __/ |                        |
#   |                   |_| |_|\___|_| .__/ \___|_|                        |
#   |                                |_|                                   |
#   '----------------------------------------------------------------------'


def cpu_util_time(this_time, core, perc, threshold, warn_core, crit_core):
    core_state_name = "cpu.util.core.high.%s" % core
    if perc > threshold:
        timestamp = get_item_state(core_state_name, 0)
        high_load_duration = (this_time - timestamp)
        state, infotext, _ = check_levels(
            high_load_duration,
            "%s_is_under_high_load_for" % core,  # Not used
            (warn_core, crit_core),
            human_readable_func=get_age_human_readable,
            infoname="%s is under high load for" % core)
        if timestamp == 0:
            set_item_state(core_state_name, this_time)
        elif state:
            return state, infotext
        return 0, "", []

    clear_item_state(core_state_name)
    return 0, "", []
