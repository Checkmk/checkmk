#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.
#

factory_settings["datapower_temp_default_levels"] = {
    "levels": (65, 70),  # 70C recommended alarm level by IBM
}


def inventory_datapower_temp(info):
    for name, _temp, _upper_warn, _status, _upper_crit in info:
        yield name.strip("Temperature "), {}


def check_datapower_temp(item, params, info):
    datapower_temp_status = {
        "8": (2, "failure"),
        "9": (3, "noReading"),
        "10": (2, "invalid"),
    }
    for name, temp, upper_warn, status, upper_crit in info:
        if item == name.strip("Temperature "):
            if int(status) >= 8:
                dev_state, dev_state_txt = datapower_temp_status[status]
                return dev_state, "device status: %s" % dev_state_txt

            state, infotext, perfdata = check_temperature(float(temp),
                                                          params,
                                                          "datapower_temp_%s" % item,
                                                          dev_levels=(float(upper_warn),
                                                                      float(upper_crit)))

            return state, infotext, perfdata


check_info["datapower_temp"] = {
    "inventory_function": inventory_datapower_temp,
    "check_function": check_datapower_temp,
    "service_description": "Temperature %s",
    "group": "temperature",
    "has_perfdata": True,
    "snmp_info": (
        ".1.3.6.1.4.1.14685.3.1.141.1",
        [
            1,  # dpStatusEnvironmentalSensorsName
            2,  # dpStatusEnvironmentalSensorsValue
            3,  # dpStatusEnvironmentalSensorsUpperNonCriticalThreshold
            5,  # dpStatusEnvironmentalSensorsReadingStatus
            6,  # dpStatusEnvironmentalSensorsUpperCriticalThreshold
        ]),
    "snmp_scan_function": lambda oid: oid(".1.3.6.1.2.1.1.2.0") in
                          [".1.3.6.1.4.1.14685.1.7", ".1.3.6.1.4.1.14685.1.3"],
    "includes": ["temperature.include"],
    "default_levels_variable": "datapower_temp_default_levels",
}
