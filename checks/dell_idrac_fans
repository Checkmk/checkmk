#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.


def inventory_dell_idrac_fans(info):
    for line in info:
        yield line[0], {}


def check_dell_idrac_fans(item, params, info):
    translate_status = {
        "1": (3, "OTHER"),
        "2": (3, "UNKNOWN"),
        "3": (0, "OK"),
        "4": (1, "NON CRITICAL UPPER"),
        "5": (2, "CRITICAL UPPER"),
        "6": (2, "NON RECOVERABLE UPPER"),
        "7": (1, "NON CRITICAL LOWER"),
        "8": (2, "CRITICAL LOWER"),
        "9": (2, "NON RECOVERABLE LOWER"),
        "10": (2, "FAILED"),
    }

    for index, status, value, name, warn_upper, crit_upper, \
            warn_lower, crit_lower in info:
        if index == item:
            state, state_readable = translate_status[status]
            yield state, "Status: %s, Name: %s" % \
                            (state_readable, name)

            value = int(value)
            if not params:
                params = {'lower': (int(warn_lower), int(crit_lower))}
                if not warn_upper == "" and \
                       crit_upper == "":
                    params["upper"] = (int(warn_upper), int(crit_upper))

            yield check_fan(value, params)


check_info["dell_idrac_fans"] = {
    "inventory_function": inventory_dell_idrac_fans,
    "check_function": check_dell_idrac_fans,
    "service_description": "Fan %s",
    "snmp_scan_function": lambda oid: oid('.1.3.6.1.2.1.1.2.0').startswith(
        ".1.3.6.1.4.1.674.10892.5"),
    "snmp_info": (
        ".1.3.6.1.4.1.674.10892.5.4.700.12.1",
        [
            "2",  # IDRAC-MIB::coolingDeviceIndex
            "5",  # IDRAC-MIB::coolingDeviceStatus
            "6",  # IDRAC-MIB::coolingDeviceReading
            "8",  # IDRAC-MIB::coolingDeviceLocationName
            "10",  # IDRAC-MIB::coolingDeviceUpperNonCriticalThreshold
            "11",  # IDRAC-MIB::coolingDeviceUpperCriticalThreshold
            "12",  # IDRAC-MIB::coolingDeviceLowerNonCriticalThreshold
            "13",  # IDRAC-MIB::coolingDeviceLowerCriticalThreshold
        ]),
    "includes": ["fan.include"],
    "has_perfdata": True,
    "group": "hw_fans",
}
