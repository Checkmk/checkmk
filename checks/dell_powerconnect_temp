#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Example:
# .1.3.6.1.4.1.89.53.15.1.9.1 = INTEGER: 42
# .1.3.6.1.4.1.89.53.15.1.10.1 = INTEGER: ok(1)

# Temperature is in Celcius by default.
# Tested with Dell PowerConnect 5448 and 5424 models.

factory_settings["dell_powerconnect_temp_default_values"] = {
    "levels": (35, 40),
}


def parse_dell_powerconnect_temp(info):
    try:
        temp_str, dev_status = info[0]
    except (IndexError, ValueError):
        return None
    try:
        temp = float(temp_str)
    except ValueError:
        temp = None
    return temp, {
        '1': 'OK',
        '2': 'unavailable',
        '3': 'non operational',
    }.get(dev_status, "unknown[%s]" % dev_status)


def inventory_dell_powerconnect_temp(parsed):
    if parsed:
        return [("Ambient", {})]


def check_dell_powerconnect_temp(_no_item, params, parsed):
    if parsed is None:
        return

    temp, dev_state_readable = parsed
    if dev_state_readable == "OK":
        state = 0
    elif dev_state_readable == "unavailable":
        state = 1
    elif dev_state_readable == "non operational":
        state = 2
    else:
        state = 3

    if temp is None:
        return state, "Status: %s" % dev_state_readable
    return check_temperature(temp,
                             params,
                             "dell_powerconnect",
                             dev_status=state,
                             dev_status_name=dev_state_readable)


check_info["dell_powerconnect_temp"] = {
    "parse_function": parse_dell_powerconnect_temp,
    "check_function": check_dell_powerconnect_temp,
    "inventory_function": inventory_dell_powerconnect_temp,
    "service_description": "Temperature %s",
    "default_levels_variable": "dell_powerconnect_temp_default_values",
    "has_perfdata": True,
    "snmp_info": (
        ".1.3.6.1.4.1.89.53.15.1",
        [
            "9",  # RADLAN-Physicaldescription-MIB::rlPhdUnitEnvParamTempSensorValue
            "10"  # RADLAN-Physicaldescription-MIB::rlPhdUnitEnvParamTempSensorStatus
        ]),
    "snmp_scan_function": lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.674.10895"
                                                                          ),
    "group": "temperature",
    "includes": ["temperature.include"]
}
