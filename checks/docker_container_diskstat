#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from cmk.base.check_legacy_includes.diskstat import *  # pylint: disable=wildcard-import,unused-wildcard-import
import cmk.base.plugins.agent_based.utils.docker as docker


def parse_docker_container_diskstat(info):
    version = docker.get_version(info)
    if version is None:
        pre_parsed = _parse_docker_container_diskstat_agent(info)
    else:
        pre_parsed = _parse_docker_container_diskstat_plugin(info)

    disks = {}
    timestamp = pre_parsed["time"]

    for _device_id, device in pre_parsed["devices"].items():
        # Filter out unwanted things
        if device["name"].startswith("loop"):
            continue

        # Skip devices without counts
        if "ios" not in device or "bytes" not in device:
            continue

        disks[device["name"]] = timestamp, device

    return disks


def _parse_docker_container_diskstat_plugin(info):
    raw = docker.json_get_obj(info[1])

    devices = {}
    for major_minor, name in raw["names"].items():
        major, minor = map(int, major_minor.split(':', 1))
        devices[(major, minor)] = {
            "name": name,
            "bytes": {},
            "ios": {},
        }

    for entry in raw["io_service_bytes_recursive"]:
        device = devices.get((entry["major"], entry["minor"]))
        if device:
            device["bytes"][entry["op"]] = entry["value"]

    for entry in raw["io_serviced_recursive"]:
        device = devices.get((entry["major"], entry["minor"]))
        if device:
            device["ios"][entry["op"]] = entry["value"]

    return {"time": raw["time"], "devices": devices}


def _parse_docker_container_diskstat_agent(info):
    sections = {}

    for line in info:

        if line[0] == "[io_service_bytes]":
            phase = "bytes"
        elif line[0] == "[io_serviced]":
            phase = "ios"
        elif line[0] == '[names]':
            phase = "names"
        elif line[0] == '[time]':
            phase = "time"
        else:
            if line[0] == "Total":
                continue

            if phase == "time":
                sections["time"] = int(line[0])
                continue

            devices = sections.setdefault("devices", {})

            if phase == "names":
                major, minor = map(int, line[1].split(":"))
            else:
                major, minor = map(int, line[0].split(":"))

            device_id = major, minor
            device = devices.setdefault(device_id, {})

            if phase == "names":
                device["name"] = line[0]
            else:
                device_phase = device.setdefault(phase, {})
                device_phase[line[1]] = int(line[2])

    return sections


def _prepare_diskdata(device_name: str, timestamp: int, device: dict) -> Tuple[bool, dict]:
    uninitialized = False

    diskdata = {}
    counter_template = "diskstat.%s.%%s" % device_name

    for io_op in ('read', 'write'):
        for unit in ('ios', 'bytes'):
            key = "%s_%s" % (io_op, 'ios' if unit == 'ios' else 'throughput')
            try:
                diskdata[key] = get_rate(counter_template % key,
                                         timestamp,
                                         device[unit][io_op.title()],
                                         onwrap=RAISE)
            except KeyError:
                # KeyError: Containers counters are not initialized
                #           (may be because disk is not *ever* used by container)
                pass
            except MKCounterWrapped:
                # MKCounterWrapped: Checkmk counter is not initialized
                uninitialized = True

    return uninitialized, diskdata


def check_docker_container_diskstat(item, params, parsed):
    disks = {}
    uninitialized = False
    for device_name, (timestamp, device) in parsed.items():

        this_uninitialized, diskdata = _prepare_diskdata(device_name, timestamp, device)
        uninitialized = uninitialized or this_uninitialized

        # omit empty disks
        if diskdata:
            disks[device_name] = diskdata

    if uninitialized or not disks:
        raise MKCounterWrapped("")

    return check_diskstat_dict(item, params, disks)


check_info["docker_container_diskstat"] = {
    "parse_function": parse_docker_container_diskstat,
    "inventory_function": lambda parsed: inventory_diskstat_generic([(None, key)
                                                                     for key in parsed]),
    "check_function": check_docker_container_diskstat,
    "service_description": "Disk IO %s",
    "has_perfdata": True,
    "group": "diskstat",
}
