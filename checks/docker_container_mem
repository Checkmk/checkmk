#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.


def _parse_docker_container_mem_plugin(info):
    parsed = docker_json_get_obj(info[1])
    # flatten nested stats
    parsed.update(parsed.pop('stats'))
    # rename for compatibility with section produced by linux agent
    for added_key, present_key in (
        ("limit_in_bytes", "hierarchical_memory_limit"),
        ("MemTotal", "limit"),
        ("usage_in_bytes", "usage"),
    ):
        parsed[added_key] = parsed.get(present_key)

    return parsed


def parse_docker_container_mem(info):
    version = docker_get_version(info)  # pylint: disable=undefined-variable

    if version is None:
        # parsed contains memory usages in bytes
        parsed = {}
        for line in info:
            if line[0] == "MemTotal:" and line[2] == "kB":
                parsed["MemTotal"] = int(line[1]) * 1024
            else:
                parsed[line[0]] = int(line[1])
    else:
        parsed = _parse_docker_container_mem_plugin(info)

    # Calculate used memory like docker does (https://github.com/moby/moby/issues/10824)
    usage_kb = (parsed["usage_in_bytes"] - parsed["cache"]) / 1024.0

    # Populate a dictionary in the format check_memory() form mem.include expects.
    # The values are scaled to kB
    mem = {}
    # Extract the real memory limit for the container. There is either the
    # maximum amount of memory available or a configured limit for the
    # container (cgroup).
    mem["MemTotal"] = min(parsed["MemTotal"], parsed["limit_in_bytes"]) / 1024.0
    mem["MemFree"] = mem["MemTotal"] - usage_kb
    mem["Cached"] = parsed["cache"] / 1024.0

    return mem


def check_docker_container_mem(_no_item, params, parsed):
    for subresult in check_memory(params, parsed):
        yield subresult


check_info["docker_container_mem"] = {
    "parse_function": parse_docker_container_mem,
    "inventory_function": discover_single,
    "check_function": check_docker_container_mem,
    "service_description": "Memory",
    "has_perfdata": True,
    "group": "memory",
    "default_levels_variable": "memory_default_levels",
    "includes": ["docker.include", "mem.include"],
}
