#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def parse_docker_node_disk_usage(info):
    version = docker_get_version(info)  # pylint: disable=undefined-variable

    if version is None:
        return parse_legacy_docker_system_df(info)  # pylint: disable=undefined-variable

    return {r.get('type'): r for r in map(docker_json_get_obj, info[1:]) if r is not None}  # pylint: disable=undefined-variable


@append_deprecation_warning  # pylint: disable=undefined-variable
@get_parsed_item_data
def check_docker_node_disk_usage(_no_item, params, data):

    for key, human_readable_func in (
        ('size', get_bytes_human_readable),
        ('reclaimable', get_bytes_human_readable),
        ('count', lambda x: x),
        ('active', lambda x: x),
    ):
        value = data[key]

        yield check_levels(value,
                           key,
                           params.get(key),
                           human_readable_func=human_readable_func,
                           infoname=key.title())


check_info["docker_node_disk_usage"] = {
    "parse_function": parse_docker_node_disk_usage,
    "inventory_function": discover(),
    "check_function": check_docker_node_disk_usage,
    "service_description": "Docker disk usage - %s",
    "includes": ['docker.include', 'legacy_docker.include'],
    "has_perfdata": True,
    "group": "docker_node_disk_usage",
}
