#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

factory_settings["domino_mailqueues_defaults"] = {"queue_length": (300, 350)}

domino_mailqueues = {
    1: ("lnDeadMail", "Dead Mails"),  # lnDeadMail
    6: ("lnWaitingMail", "Waiting Mails"),  # lnWaitingMail
    21: ("lnMailHold", "Mails on Hold"),  # lnMailHold
    31: ("lnMailTotalPending", "Total Pending Mails"),  # lnMailTotalPending
    34: ("InMailWaitingforDNS", "Mails waiting for DNS"),  # InMailWaitingforDNS
}


def inventory_domino_mailqueues(info):
    for line in info:
        if line:
            val = int(line[0][0].split(".")[12])
            if val in domino_mailqueues.keys():
                yield domino_mailqueues[val][0], {}


def check_domino_mailqueues(item, params, info):
    for line in info:
        if not line:
            continue

        val = int(line[0][0].split(".")[12])
        if item == domino_mailqueues[val][0]:
            reading = int(line[0][1])
            warn, crit = params.get("queue_length")
            infotext = "%d %s" % (reading, domino_mailqueues[val][1])
            levels = " (Warn/Crit at %s/%s)" % (warn, crit)
            perfdata = [("mails", reading, warn, crit)]
            state = 0
            if reading >= crit:
                state = 2
                infotext += levels
            elif reading >= warn:
                state = 1
                infotext += levels
            yield state, infotext, perfdata


check_info["domino_mailqueues"] = {
    "check_function": check_domino_mailqueues,
    "inventory_function": inventory_domino_mailqueues,
    "service_description": "Domino Queue %s",
    "has_perfdata": True,
    "default_levels_variable": "domino_mailqueues_defaults",
    "snmp_scan_function": lambda oid: oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.311.1.1.3.1.2",
    "snmp_info": [
        (".1.3.6.1.4.1.334.72.1.1.4", [OID_STRING, x]) for x in sorted(domino_mailqueues.keys())
    ],
    "group": "domino_mailqueues"
}
