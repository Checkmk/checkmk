#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def format_emc_datadomain_temp(descr, encid, index, new_format):
    if new_format:
        return descr + " Enclosure " + encid
    return encid + "-" + index


def inventory_emc_datadomain_temps(info):
    for encid, index, descr, _reading, _status in info:
        yield format_emc_datadomain_temp(descr, encid, index, True), {}


def check_emc_datadomain_temps(item, params, info):
    state_table = {
        "0": (2, "Failed"),
        "1": (0, "OK"),
        "2": (2, "Not found"),
        "3": (1, "Overheat Warning"),
        "4": (2, "Overheat Critical"),
    }
    for encid, index, descr, reading, status in info:
        name = format_emc_datadomain_temp(descr, encid, index, "Enclosure" in item)
        if item == name:
            dev_status, state_name = state_table[status]
            return check_temperature(float(reading),
                                     params,
                                     "emc_datadomain_temps_%s" % item,
                                     dev_status=int(dev_status),
                                     dev_status_name=state_name)


check_info["emc_datadomain_temps"] = {
    "check_function": check_emc_datadomain_temps,
    "inventory_function": inventory_emc_datadomain_temps,
    "service_description": "Temperature %s",
    "has_perfdata": True,
    "group": "temperature",
    "snmp_info": (
        ".1.3.6.1.4.1.19746.1.1.2.1.1.1",
        [
            1,  # tempEnclosureID
            2,  # tempSensorIndex
            4,  # tempSensorDescription
            5,  # tempSensorCurrentValue
            6,  # tempSensorStatus
        ]),
    "snmp_scan_function": lambda oid: oid(".1.3.6.1.2.1.1.1.0").startswith("Data Domain OS"),
    "includes": ["temperature.include"]
}
