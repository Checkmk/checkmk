#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2019             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def parse_emc_ecs_diskio(info):
    if not info:
        return {}

    parsed = {}
    for line in info:
        if len(line) != 6:
            continue

        index, name, read_size, write_size, read, write = line
        try:
            parsed[name] = {
                'index': index,
                'read_throughput': int(read_size),
                'write_throughput': int(write_size),
                'read_ios': int(read),
                'write_ios': int(write)
            }
        except ValueError:
            pass
    return parsed


@get_parsed_item_data
def check_emc_ecs_diskio(item, params, entry):
    now = time.time()
    disk_data = {}
    for key in ["read_ios", "write_ios", "read_throughput", "write_throughput"]:
        value = entry.get(key)
        if value is None:
            continue
        disk_data[key] = get_rate("emc_ecs_disk_io_%s.%s" % (key, item), now, value)

    yield 0, '[%s]' % entry['index']

    for state, infotext, perfdata in check_diskstat_dict(item, params, {item: disk_data}):
        yield state, infotext, perfdata


check_info["emc_ecs_diskio"] = {
    "inventory_function": discover(),
    "parse_function": parse_emc_ecs_diskio,
    "check_function": check_emc_ecs_diskio,
    "service_description": "Disk IO %s",
    "snmp_info": (
        ".1.3.6.1.4.1.2021.13.15.1.1",
        [
            "1",  # diskIOIndex
            "2",  # diskIODevice
            "3",  # diskIONRead
            "4",  # diskIONWritten
            "5",  # diskIOReads
            "6",  # diskIOWrites
        ]),
    "has_perfdata": True,
    "group": "diskstat",
    "includes": ["diskstat.include"],
}
