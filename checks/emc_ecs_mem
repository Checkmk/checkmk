#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.


def parse_emc_ecs_mem(info):
    if not info:
        return {}

    parsed = {}
    error, swap_total, swap_avail, mem_total, mem_avail, mem_free, swap_min, \
    mem_shared, mem_buffer, mem_cached, error_swap, error_swap_msg = info[0]
    try:
        parsed = {
            # error messages
            'error': error,
            'error_swap': int(error_swap),
            'error_swap_msg': error_swap_msg,
            # memory
            'MemTotal': int(mem_total),
            'MemAvail': int(mem_avail),
            'MemFree': int(mem_free),
            'Shared': int(mem_shared),
            'Buffered': int(mem_buffer),
            'Cached': int(mem_cached),
            # swap
            'SwapTotal': int(swap_total),
            'SwapFree': int(swap_avail),
            'SwapMinimum': int(swap_min),
        }
    except ValueError:
        pass
    return parsed


def check_emc_ecs_mem(items, params, entry):
    error = entry['error']
    if error != 'swap':
        yield 1, 'Error: %s' % error

    if entry['error_swap'] != 0:
        yield 1, entry['error_swap_msg']

    # memory + swap
    for subresult in check_memory(params, entry):
        yield subresult

    # swap
    # SwapMinimum is the minimum amount of free swap space
    level_upper = entry['SwapTotal'] - entry['SwapMinimum']
    state, _, perfdata = check_levels(entry['SwapTotal'] - entry['SwapFree'],
                                      "swap_used", (level_upper, level_upper),
                                      human_readable_func=get_bytes_human_readable,
                                      infoname="Swap used")
    yield state, '', perfdata

    perfdata = []

    for perf_key, key in [
        ('mem_lnx_cached', 'Cached'),
        ('mem_lnx_buffers', 'Buffered'),
        ('mem_lnx_shmem', 'Shared'),
    ]:
        value = entry.get(key)
        if value is not None:
            perfdata.append((perf_key, value, None, None))
    yield 0, '', perfdata


check_info["emc_ecs_mem"] = {
    "parse_function": parse_emc_ecs_mem,
    "inventory_function": discover_single,
    "check_function": check_emc_ecs_mem,
    "service_description": "EMC ECS Memory",
    "snmp_info": (
        ".1.3.6.1.4.1.2021.4",
        [
            "2",  # memErrorName
            "3",  # memTotalSwap
            "4",  # memAvailSwap
            "5",  # memTotalReal
            "6",  # memAvailReal
            "11",  # memTotalFree
            "12",  # memMinimumSwap
            "13",  # memShared
            "14",  # memBuffer
            "15",  # memCached
            "100",  # memSwapError
            "101",  # smemSwapErrorMsg
        ]),
    "default_levels_variable": "memory_default_levels",
    "has_perfdata": True,
    "group": "memory",
    'includes': ["mem.include"],
}
