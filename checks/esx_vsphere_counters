#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# Example output:
# <<<esx_vsphere_counters:sep(124)>>>
# net.broadcastRx|vmnic0|11|number
# net.broadcastRx||11|number
# net.broadcastTx|vmnic0|0|number
# net.broadcastTx||0|number
# net.bytesRx|vmnic0|3820|kiloBytesPerSecond
# net.bytesRx|vmnic1|0|kiloBytesPerSecond
# net.bytesRx|vmnic2|0|kiloBytesPerSecond
# net.bytesRx|vmnic3|0|kiloBytesPerSecond
# net.bytesRx||3820|kiloBytesPerSecond
# net.bytesTx|vmnic0|97|kiloBytesPerSecond
# net.bytesTx|vmnic1|0|kiloBytesPerSecond
# net.bytesTx|vmnic2|0|kiloBytesPerSecond
# net.bytesTx|vmnic3|0|kiloBytesPerSecond
# net.bytesTx||97|kiloBytesPerSecond
# net.droppedRx|vmnic0|0|number
# net.droppedRx|vmnic1|0|number
# net.droppedRx|vmnic2|0|number
# net.droppedRx|vmnic3|0|number
# net.droppedRx||0|number
# net.droppedTx|vmnic0|0|number
# net.droppedTx|vmnic1|0|number
# ...
# sys.uptime||630664|second

#.
#   .--cpu-----------------------------------------------------------------.
#   |                                                                      |
#   |                           ___ _ __  _   _                            |
#   |                          / __| '_ \| | | |                           |
#   |                         | (__| |_) | |_| |                           |
#   |                          \___| .__/ \__,_|                           |
#   |                              |_|                                     |
#   +----------------------------------------------------------------------+

factory_settings['if_default_levels'] = IF_CHECK_DEFAULT_PARAMETERS

factory_settings['esx_vsphere_counters_cpu_default_levels'] = {
    'cpu_costop': (5.0, 10.0),
    'cpu_ready': (5.0, 10.0)
}


def _parse_esx_vsphere_counters_cpu(parsed):
    CPU = collections.namedtuple('CPU', ['ready', 'costop'])
    cpu_values = []
    for key in ('cpu.ready', 'cpu.costop'):
        try:
            cpu_values.append(float(parsed[key][''][0][0][0]))
        except (KeyError, IndexError, TypeError, ValueError):
            cpu_values.append(None)
    return CPU(*cpu_values)


def inventory_esx_vsphere_counters_cpu(parsed):
    CPU = _parse_esx_vsphere_counters_cpu(parsed)
    if CPU.ready is not None or CPU.costop is not None:
        return [(None, {})]


def check_esx_vsphere_counters_cpu(item, params, parsed):
    # Official formula from vmware for calculating the CPU ready/Co-Stop percentage
    # https://kb.vmware.com/s/article/2002181
    # by default the 20sec interval (so called 'realtime') is used
    # CPU summation value in milliseconds / 200
    CPU = _parse_esx_vsphere_counters_cpu(parsed)

    if CPU.ready is not None:
        yield check_levels(
            CPU.ready / 200,
            'cpu_ready_percent',
            params.get('cpu_ready', None),
            human_readable_func=get_percent_human_readable,
            infoname='CPU ready',
        )

    if CPU.costop is not None:
        yield check_levels(
            CPU.costop / 200,
            'cpu_costop_percent',
            params.get('cpu_costop', None),
            human_readable_func=get_percent_human_readable,
            infoname='Co-Stop',
        )


check_info['esx_vsphere_counters.cpu'] = {
    'inventory_function': inventory_esx_vsphere_counters_cpu,
    'check_function': check_esx_vsphere_counters_cpu,
    'service_description': 'CPU usage',
    'has_perfdata': True,
    'default_levels_variable': 'esx_vsphere_counters_cpu_default_levels',
    'group': 'esx_host_cpu',
}

#   .--Disk IO-------------------------------------------------------------.
#   |                     ____  _     _      ___ ___                       |
#   |                    |  _ \(_)___| | __ |_ _/ _ \                      |
#   |                    | | | | / __| |/ /  | | | | |                     |
#   |                    | |_| | \__ \   <   | | |_| |                     |
#   |                    |____/|_|___/_|\_\ |___\___/                      |
#   |                                                                      |
#   '----------------------------------------------------------------------'
# Example output:
# disk.deviceLatency|naa.600605b002db9f7018d0a40c2a1444b0|0|millisecond
# disk.numberRead|naa.600605b002db9f7018d0a40c2a1444b0|8|number
# disk.numberWrite|naa.600605b002db9f7018d0a40c2a1444b0|47|number
# disk.read|naa.600605b002db9f7018d0a40c2a1444b0|12|kiloBytesPerSecond
# disk.read||12|kiloBytesPerSecond
# disk.write|naa.600605b002db9f7018d0a40c2a1444b0|51|kiloBytesPerSecond
# disk.write||51|kiloBytesPerSecond


def inventory_esx_vsphere_counters_diskio(parsed):
    if "" in parsed.get("disk.read", {}):
        yield "SUMMARY", {}


def _concat_instance_multivalues(parsed, key):
    all_multivalues = []
    for data in parsed.get(key, {}).values():
        multivalues, _unit = data[0]
        all_multivalues.extend(multivalues)
    return all_multivalues


def check_esx_vsphere_counters_diskio(item, params, parsed):
    summary = {}

    for op_type in ("read", "write"):
        # summed up in key ""
        data = parsed.get("disk.%s" % op_type, {}).get("")
        multivalues, _unit = data[0] if data else (None, None)
        if multivalues is not None:
            summary['%s_throughput' % op_type] = esx_vsphere_get_average(multivalues) * 1024

        # sum up all instances
        op_counts = _concat_instance_multivalues(parsed, "disk.number%s" % op_type.title())
        if op_counts:
            # these are absolute counts, every 20 seconds.
            summary["%s_ios" % op_type] = esx_vsphere_get_average(op_counts) / 20.0

    latencies = _concat_instance_multivalues(parsed, "disk.deviceLatency")
    if latencies:
        summary['latency'] = max(int(l) for l in latencies) / 1000.0

    return check_diskstat_dict(item, params, {"SUMMARY": summary})


check_info['esx_vsphere_counters.diskio'] = {
    'inventory_function': inventory_esx_vsphere_counters_diskio,
    'check_function': check_esx_vsphere_counters_diskio,
    'service_description': 'Disk IO %s',
    'has_perfdata': True,
    'group': 'diskstat',
    'includes': ["diskstat.include"],
}

#.
#   .--Datastore IO--------------------------------------------------------.
#   |        ____        _            _                   ___ ___          |
#   |       |  _ \  __ _| |_ __ _ ___| |_ ___  _ __ ___  |_ _/ _ \         |
#   |       | | | |/ _` | __/ _` / __| __/ _ \| '__/ _ \  | | | | |        |
#   |       | |_| | (_| | || (_| \__ \ || (_) | | |  __/  | | |_| |        |
#   |       |____/ \__,_|\__\__,_|___/\__\___/|_|  \___| |___\___/         |
#   |                                                                      |
#   +----------------------------------------------------------------------+

# Example output:
# datastore.read|4c4ece34-3d60f64f-1584-0022194fe902|0#1#2|kiloBytesPerSecond
# datastore.read|4c4ece5b-f1461510-2932-0022194fe902|0#4#5|kiloBytesPerSecond
# datastore.numberReadAveraged|511e4e86-1c009d48-19d2-bc305bf54b07|0#0#0|number
# datastore.numberWriteAveraged|4c4ece34-3d60f64f-1584-0022194fe902|0#0#1|number
# datastore.totalReadLatency|511e4e86-1c009d48-19d2-bc305bf54b07|0#5#5|millisecond
# datastore.totalWriteLatency|4c4ece34-3d60f64f-1584-0022194fe902|0#2#7|millisecond


def parse_esx_vsphere_counters(info):
    parsed = {}
    # The data reported by the ESX system is split into multiple real time samples with
    # a fixed duration of 20 seconds. A check interval of one minute reports 3 samples
    # The esx_vsphere_counters checks need to figure out by themselves how to handle this data
    for counter, instance, multivalues, unit in info:
        values = multivalues.split("#")
        parsed.setdefault(counter, {})
        parsed[counter].setdefault(instance, [])
        parsed[counter][instance].append((values, unit))
    return parsed


def esx_vsphere_get_average(values):
    if not values:
        return 0
    int_values = list(map(int, values))
    return sum(int_values) / float(len(int_values))


# esx datastores are either shown by human readable name (if available) or by the uid
def esx_vsphere_counters_get_item_mapping(parsed):
    map_instance_to_item = {}
    for counter in [
            "read", "write", "datastoreReadIops", "datastoreWriteIops", "totalReadLatency",
            "totalWriteLatency", "sizeNormalizedDatastoreLatency"
    ]:
        for instance in parsed.get("datastore." + counter, {}):
            map_instance_to_item[instance] = instance

    for instance, values in parsed.get("datastore.name", {}).items():
        if instance in map_instance_to_item and values[0][0] != "":
            map_instance_to_item[instance] = values[0][0][-1].replace(" ", "_")
    return map_instance_to_item


def inventory_esx_vsphere_counters_datastoreio(parsed):
    return inventory_diskstat_generic(
        [[None, x] for x in esx_vsphere_counters_get_item_mapping(parsed).values()])


def check_esx_vsphere_counters_datastoreio(item, params, parsed):
    if "datastore.read" not in parsed:
        raise MKCounterWrapped("Counter data is missing")

    datastores = {}
    item_mapping = esx_vsphere_counters_get_item_mapping(parsed)

    for new_name, eval_function, name, scaling in [
        ("read_throughput", lambda x: int(esx_vsphere_get_average(x)), "datastore.read", 1024),
        ("write_throughput", lambda x: int(esx_vsphere_get_average(x)), "datastore.write", 1024),
        ("read_ios", lambda x: int(esx_vsphere_get_average(x)), "datastore.datastoreReadIops", 1),
        ("write_ios", lambda x: int(esx_vsphere_get_average(x)), "datastore.datastoreWriteIops", 1),
        ("read_latency", lambda x: max(map(int, x)), "datastore.totalReadLatency", 1e-3),
        ("write_latency", lambda x: max(map(int, x)), "datastore.totalWriteLatency", 1e-3),
        ("latency", lambda x: max(map(int, x)), "datastore.sizeNormalizedDatastoreLatency", 1e-6),
    ]:
        field_data = parsed.get(name, {})

        for instance, values in field_data.items():
            item_name = item_mapping[instance]
            datastores.setdefault(item_name, {})
            value = eval_function(values[0][0])
            datastores[item_name][new_name] = value * scaling

    return check_diskstat_dict(item, params, datastores)


check_info['esx_vsphere_counters'] = {
    'parse_function': parse_esx_vsphere_counters,
    'inventory_function': inventory_esx_vsphere_counters_datastoreio,
    'check_function': check_esx_vsphere_counters_datastoreio,
    'service_description': 'Datastore IO %s',
    'has_perfdata': True,
    'includes': ['diskstat.include'],
    'group': 'diskstat'
}

#.
#   .--Interfaces----------------------------------------------------------.
#   |           ___       _             __                                 |
#   |          |_ _|_ __ | |_ ___ _ __ / _| __ _  ___ ___  ___             |
#   |           | || '_ \| __/ _ \ '__| |_ / _` |/ __/ _ \/ __|            |
#   |           | || | | | ||  __/ |  |  _| (_| | (_|  __/\__ \            |
#   |          |___|_| |_|\__\___|_|  |_|  \__,_|\___\___||___/            |
#   |                                                                      |
#   '----------------------------------------------------------------------'

# The bad thing here: ESX does not send *counters* but *rates*. This might
# seem user friendly on the first look, but is really bad at the second. The
# sampling rate defaults to 20s and is not aligned with our check rate. Also
# a reschedule of the check does not create new data. And: our if.include really
# requires counters. In order to use if.include we therefore simulate counters.


def convert_esx_counters_if(parsed):
    this_time = time.time()
    by_item = {}

    for name, instances in parsed.items():
        if name.startswith("net."):
            for instance, values in instances.items():
                by_item.setdefault(instance, {})
                if name == "net.macaddress":
                    by_item[instance][name[4:]] = values[0][0][-1]
                else:
                    by_item[instance][name[4:]] = int(esx_vsphere_get_average(values[0][0]))

    # Example of by_item:
    # {
    #   'vmnic0': {
    #         'broadcastRx': 31,
    #         'broadcastTx': 0,
    #         'bytesRx': 3905,  # is in Kilobytes!
    #         'bytesTx': 134,
    #         'droppedRx': 0,
    #         'droppedTx': 0,
    #         'errorsRx': 0,
    #         'errorsTx': 0,
    #         'multicastRx': 5,
    #         'multicastTx': 1,
    #         'packetsRx': 53040,
    #         'packetsTx': 30822,
    #         'received': 3905,
    #         'transmitted': 134,
    #         'unknownProtos': 0,
    #         'usage': 4040,
    #         'macaddress': 'AA:BB:CC:DD:EE:FF",
    #         'state': 2,
    #         'bandwidth': 10000000,
    #     },
    # }
    nics = sorted(by_item)

    # This is for the if Check
    converted = [
        [],  #  0 ifIndex                   0
        [],  #  1 ifDescr                   1
        [],  #  2 ifType                    2
        [],  #  3 ifHighSpeed               .. 1000 means 1Gbit
        [],  #  4 ifOperStatus              4
        [],  #  5 ifHCInOctets              5
        [],  #  6 ifHCInUcastPkts           6
        [],  #  7 ifHCInMulticastPkts       7
        [],  #  8 ifHCInBroadcastPkts       8
        [],  #  9 ifInDiscards              9
        [],  # 10 ifInErrors               10
        [],  # 11 ifHCOutOctets            11
        [],  # 12 ifHCOutUcastPkts         12
        [],  # 13 ifHCOutMulticastPkts     13
        [],  # 14 ifHCOutBroadcastPkts     14
        [],  # 15 ifOutDiscards            15
        [],  # 16 ifOutErrors              16
        [],  # 17 ifOutQLen                17
        [],  # 18 ifAlias                  18
        [],  # 19 ifPhysAddress            19
    ]

    # This is for mapping the incoming ESX counter data to table indeces above
    # These can be passed directly to if
    tableindex = {
        'bytesRx': 5,  # is in Kilobytes!
        'packetsRx': 6,
        'multicastRx': 7,
        'broadcastRx': 8,
        'droppedRx': 9,
        'errorsRx': 10,
        'bytesTx': 11,
        'packetsTx': 12,
        'multicastTx': 13,
        'broadcastTx': 14,
        'droppedTx': 15,
        'errorsTx': 16,
        # 'received': 3905,
        # 'transmitted': 134,
        # 'unknownProtos': 0,
        # 'usage': 4040,
    }

    converted = []
    for index, name in enumerate(nics):
        entry = ['0'] * 20
        converted.append(entry)
        if name:  # Skip summary entry without interface name
            entry[0] = str(index)
            entry[1] = name
            entry[2] = '6'  # Ethernet
            entry[3] = str(by_item[name].get("bandwidth", ""))  # Speed not known
            entry[4] = str(by_item[name].get("state", "1"))
            entry[18] = name  # ifAlias
            if by_item[name].get("macaddress"):
                mac = "".join(chr(int(x, 16)) for x in by_item[name]["macaddress"].split(':'))
                entry[19] = mac
            else:
                entry[19] = ''  # MAC address not known here
            for ctr_name, ti in tableindex.items():
                ctr_value = by_item[name].get(ctr_name, 0)
                if ctr_name.startswith("bytes"):
                    ctr_value *= 1024
                countername = "vmnic." + name + "." + ctr_name
                last_state = get_item_state(countername)
                if last_state:
                    last_time, last_value = last_state
                    new_value = last_value + ((this_time - last_time) * ctr_value)
                else:
                    last_time = this_time - 60
                    last_value = 0
                    new_value = ctr_value * 60
                set_item_state(countername, (this_time, new_value))
                entry[ti] = str(int(new_value))

    return converted


def inventory_esx_vsphere_counters_if(parsed):
    converted = convert_esx_counters_if(parsed)
    return inventory_if_common(converted)


def check_esx_vsphere_counters_if(item, params, parsed):
    if "net.bytesRx" not in parsed:
        raise MKCounterWrapped("Counter data is missing")

    converted = convert_esx_counters_if(parsed)
    return check_if_common(item, params, converted)


check_info['esx_vsphere_counters.if'] = {
    'inventory_function': inventory_esx_vsphere_counters_if,
    'check_function': check_esx_vsphere_counters_if,
    'service_description': 'Interface %s',
    'has_perfdata': True,
    'group': 'if',
    'default_levels_variable': 'if_default_levels',
    'includes': ['if.include'],
}

#.
#   .--Uptime--------------------------------------------------------------.
#   |                  _   _       _   _                                   |
#   |                 | | | |_ __ | |_(_)_ __ ___   ___                    |
#   |                 | | | | '_ \| __| | '_ ` _ \ / _ \                   |
#   |                 | |_| | |_) | |_| | | | | | |  __/                   |
#   |                  \___/| .__/ \__|_|_| |_| |_|\___|                   |
#   |                       |_|                                            |
#   '----------------------------------------------------------------------'


def inventory_esx_vsphere_counters_uptime(parsed):
    if "sys.uptime" in parsed:
        return [(None, {})]


def check_esx_vsphere_counters_uptime(_no_item, params, parsed):
    if "sys.uptime" not in parsed:
        raise MKCounterWrapped("Counter data is missing")
    uptime = int(parsed["sys.uptime"][""][0][0][-1])
    if uptime < 0:
        raise MKCounterWrapped("Counter data is corrupt")
    return check_uptime_seconds(params, uptime)


check_info['esx_vsphere_counters.uptime'] = {
    'inventory_function': inventory_esx_vsphere_counters_uptime,
    'check_function': check_esx_vsphere_counters_uptime,
    'service_description': 'Uptime',
    'has_perfdata': True,
    'includes': ['uptime.include'],
    'group': 'uptime',
}

#.
#   .--Ramdisk-------------------------------------------------------------.
#   |                ____                     _ _     _                    |
#   |               |  _ \ __ _ _ __ ___   __| (_)___| | __                |
#   |               | |_) / _` | '_ ` _ \ / _` | / __| |/ /                |
#   |               |  _ < (_| | | | | | | (_| | \__ \   <                 |
#   |               |_| \_\__,_|_| |_| |_|\__,_|_|___/_|\_\                |
#   |                                                                      |
#   +----------------------------------------------------------------------+

# We assume that all ramdisks have the same size (in mb) on all hosts
# -> To get size infos about unknown ramdisks, connect to the ESX host via
#    SSH and check the size of the disk via "du" command
esx_vsphere_counters_ramdisk_sizes = {
    'root': 32,
    'etc': 28,
    'tmp': 192,
    'hostdstats': 319,
    'snmptraps': 1,
    'upgradescratch': 300,
    'ibmscratch': 300,
    'sfcbtickets': 1,
}


def inventory_esx_vsphere_counters_ramdisk(parsed):
    ramdisks = []

    for instance in parsed.get("sys.resourceMemConsumed", {}):
        if instance.startswith('host/system/kernel/kmanaged/visorfs/'):
            ramdisks.append(instance.split('/')[-1])

    return df_inventory(ramdisks)


def check_esx_vsphere_counters_ramdisk(item, params, parsed):
    if "sys.resourceMemConsumed" not in parsed:
        raise MKCounterWrapped("Counter data is missing")

    ramdisks = []
    for instance in parsed.get("sys.resourceMemConsumed"):
        if instance.startswith('host/system/kernel/kmanaged/visorfs/'):
            name = instance.split('/')[-1]
            try:
                size_mb = esx_vsphere_counters_ramdisk_sizes[name]
            except KeyError:
                if item == name:
                    return 3, 'Unhandled ramdisk found (%s)' % name
                else:
                    continue
            used_mb = float(parsed["sys.resourceMemConsumed"][instance][0][0][-1]) / 1000.0
            avail_mb = size_mb - used_mb
            ramdisks.append((name, size_mb, avail_mb, 0))

    return df_check_filesystem_list(item, params, ramdisks)


check_info['esx_vsphere_counters.ramdisk'] = {
    'inventory_function': inventory_esx_vsphere_counters_ramdisk,
    'check_function': check_esx_vsphere_counters_ramdisk,
    'service_description': 'Ramdisk %s',
    'has_perfdata': True,
    'includes': ['size_trend.include', 'df.include'],
    'group': 'filesystem',
    'default_levels_variable': 'filesystem_default_levels',
}

#   .--swap----------------------------------------------------------------.
#   |                                                                      |
#   |                       _____      ____ _ _ __                         |
#   |                      / __\ \ /\ / / _` | '_ \                        |
#   |                      \__ \\ V  V / (_| | |_) |                       |
#   |                      |___/ \_/\_/ \__,_| .__/                        |
#   |                                        |_|                           |
#   +----------------------------------------------------------------------+


def _parse_esx_vsphere_counters_swap(parsed):

    swap_values = {}

    for agent_key, key in (('mem.swapin', 'in'), ('mem.swapout', 'out'), ('mem.swapused', 'used')):
        try:
            swap_values[key] = parsed[agent_key][''][0][0][0]
        except (KeyError, IndexError, TypeError, ValueError):
            swap_values[key] = "n.a."

    return swap_values


def inventory_esx_vsphere_counters_swap(parsed):
    SWAP = _parse_esx_vsphere_counters_swap(parsed)

    if any([elem for elem in SWAP.values()]):
        return [(None, {})]


def check_esx_vsphere_counters_swap(item, params, parsed):
    SWAP = _parse_esx_vsphere_counters_swap(parsed)

    for key in ('in', 'out', 'used'):
        yield 0, "Swap %s: %s" % (key, get_bytes_human_readable(float(SWAP[key]), unit="KB"))


check_info['esx_vsphere_counters.swap'] = {
    'inventory_function': inventory_esx_vsphere_counters_swap,
    'check_function': check_esx_vsphere_counters_swap,
    'service_description': 'VMKernel Swap',
    'has_perfdata': False,
}
