#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# Agent / MIB output
# see: 1.3.6.1.4.1.3375.2.1.1.1.1.6.0
# F5-BIGIP-SYSTEM-MIB::sysAttrConfigsyncState (STRING)
# "-1 - uninitialized or disabled config state"

# F5 nodes need to be ntp synced otherwise status reports might be wrong.


def inventory_f5_bigip_cluster(info):
    # run inventory unless we found a device in unconfigured state
    # don't need to loop over the input as there's only one status
    if len(info) == 1 and not (info[0][0].startswith("-1") or info[0][0] == ''):
        return [(None, None)]
    return []


def check_f5_bigip_cluster(item, _no_params, info):
    cfgsyncstate = info[0][0]

    # Split the snmp supplied status string to the numeric and textual status
    statusid, statustxt = cfgsyncstate.split(" - ")

    # Possible states:
    # -1    unconfigured,           ok only if original status
    #                               otherwise this would mean something is heavily broken?
    # 0     in sync,                ok
    # 1/2   one system outdated,    warn
    # 3     both systems outdated,  crit   (config split brain)

    if statusid == "0":
        return (0, statustxt)
    elif statusid == "-1":
        return (2, statustxt)
    elif statusid == "1" or statusid == "2":
        return (1, statustxt)
    elif statusid == "3":
        return (2, statustxt)
    return (3, "unexpected output from SNMP Agent")

check_info["f5_bigip_cluster"] = {
    'check_function':          check_f5_bigip_cluster,
    'inventory_function':      inventory_f5_bigip_cluster,
    'service_description':     'Config Sync status',
    'snmp_info':               ('.1.3.6.1.4.1.3375.2.1.1.1.1', [
        6 # sysAttrConfigsyncState
    ]),
    'snmp_scan_function':
     lambda oid: '.1.3.6.1.4.1.3375.2' in oid(".1.3.6.1.2.1.1.2.0") \
        and "big-ip" in oid(".1.3.6.1.4.1.3375.2.1.4.1.0").lower() \
        and int(oid(".1.3.6.1.4.1.3375.2.1.4.2.0").split('.')[0]) < 11,
}
