#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from cmk.base.check_legacy_includes.mem import *  # pylint: disable=wildcard-import,unused-wildcard-import
# FIXME
# The WATO group 'memory_simple' needs an item and the service_description should
# have a '%s'.  At the moment the current item 'total'/'TMM' and 'Memory' without '%s'
# works but is not consistent.  This will be fixed in the future.
# If we change this we loose history and parameter sets have to be adapted.

# Example output:
# Overall memory
# .1.3.6.1.4.1.3375.2.1.7.1.1.0 8396496896 sysHostMemoryTotal
# .1.3.6.1.4.1.3375.2.1.7.1.2.0 1331092416 sysHostMemoryUsed
#
# TMM (Traffic Management Module) memory
# .1.3.6.1.4.1.3375.2.1.1.2.1.143 0 sysStatMemoryTotalKb
# .1.3.6.1.4.1.3375.2.1.1.2.1.144 0 sysStatMemoryUsedKb

factory_settings["f5_bigip_mem_default_levels"] = {"levels": ("perc_used", (80.0, 90.0))}


def parse_f5_bigip_mem(info):
    parsed = {}
    try:
        parsed["total"] = (float(info[0][0]), float(info[0][1]))
    except ValueError:
        pass

    try:
        parsed["TMM"] = (float(info[0][2]) * 1024, float(info[0][3]) * 1024)
    except ValueError:
        pass

    return parsed


def inventory_f5_bigip_mem(parsed):
    if parsed.get("total"):
        return [("total", {})]


@get_parsed_item_data
def check_f5_bigip_mem(_item, params, data):
    if isinstance(params, tuple):
        params = {"levels": ("perc_used", params)}

    mem_total, mem_used = data
    return check_memory_element(
        "Usage",
        mem_used,
        mem_total,
        params.get("levels"),
        metric_name="memory_used",
    )


check_info['f5_bigip_mem'] = {
    'parse_function': parse_f5_bigip_mem,
    'inventory_function': inventory_f5_bigip_mem,
    'check_function': check_f5_bigip_mem,
    'service_description': 'Memory',
    'has_perfdata': True,
    'snmp_info': (
        ".1.3.6.1.4.1.3375.2.1",
        [
            "7.1.1",  # F5-BIGIP-SYSTEM-MIB::sysHostMemoryTotal
            "7.1.2",  # F5-BIGIP-SYSTEM-MIB::sysHostMemoryUsed
            "1.2.1.143",  # F5-BIGIP-SYSTEM-MIB::sysStatMemoryTotalKb
            "1.2.1.144",  # F5-BIGIP-SYSTEM-MIB::sysStatMemoryUsedKb
        ]),
    'snmp_scan_function': lambda oid: ".1.3.6.1.4.1.3375" in oid(".1.3.6.1.2.1.1.2.0"),
    'default_levels_variable': 'f5_bigip_mem_default_levels',
    'group': 'memory_simple',
}

check_info['f5_bigip_mem.tmm'] = {
    'inventory_function': discover(lambda key, value: key == "TMM" and value[0] > 0.0),
    'check_function': check_f5_bigip_mem,
    'service_description': 'Memory',
    'has_perfdata': True,
    'default_levels_variable': 'f5_bigip_mem_default_levels',
    'group': 'memory_simple',
}
