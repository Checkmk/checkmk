#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def parse_fast_lta_volumes(info):
    parsed = {}
    for volname, volquota, volused in info:
        try:
            size_mb = int(volquota) / 1048576.0
            avail_mb = (int(volquota) - int(volused)) / 1048576.0
        except ValueError:
            continue
        parsed.setdefault(volname, []).append((volname, size_mb, avail_mb, 0))

    return parsed


@get_parsed_item_data
def check_fast_lta_volumes(item, params, data):
    yield df_check_filesystem_list(item, params, data)


check_info["fast_lta_volumes"] = {
    "parse_function": parse_fast_lta_volumes,
    "check_function": check_fast_lta_volumes,
    "inventory_function": discover(),
    "service_description": "Fast LTA Volume %s",
    "has_perfdata": True,
    "group": "filesystem",
    "includes": ["size_trend.include", "df.include"],
    "snmp_info": (
        ".1.3.6.1.4.1.27417.5.1.1",
        [
            2,  # Volume name
            9,  # Volume Quota
            11
        ]  # Volume used space
    ),
    "snmp_scan_function": lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(
        ".1.3.6.1.4.1.8072.3.2.10"),
}
