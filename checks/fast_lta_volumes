#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables from the check-context which are necessary for
# resolving legacy discovery results such as [("SUMMARY", "diskstat_default_levels")]. Furthermore,
# it might also remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.df import *  # pylint: disable=wildcard-import,unused-wildcard-import
# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables from the check-context which are necessary for
# resolving legacy discovery results such as [("SUMMARY", "diskstat_default_levels")]. Furthermore,
# it might also remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.size_trend import *  # pylint: disable=wildcard-import,unused-wildcard-import


def parse_fast_lta_volumes(info):
    parsed = {}
    for volname, volquota, volused in info:
        try:
            size_mb = int(volquota) / 1048576.0
            avail_mb = (int(volquota) - int(volused)) / 1048576.0
        except ValueError:
            continue
        parsed.setdefault(volname, []).append((volname, size_mb, avail_mb, 0))

    return parsed


@get_parsed_item_data
def check_fast_lta_volumes(item, params, data):
    yield df_check_filesystem_list(item, params, data)


check_info["fast_lta_volumes"] = {
    "parse_function": parse_fast_lta_volumes,
    "check_function": check_fast_lta_volumes,
    "inventory_function": discover(),
    "service_description": "Fast LTA Volume %s",
    "has_perfdata": True,
    "group": "filesystem",
    "snmp_info": (
        ".1.3.6.1.4.1.27417.5.1.1",
        [
            2,  # Volume name
            9,  # Volume Quota
            11
        ]  # Volume used space
    ),
    "snmp_scan_function": lambda oid: (oid(".1.3.6.1.2.1.1.2.0").startswith(
        ".1.3.6.1.4.1.8072.3.2.10") and oid(".1.3.6.1.4.1.27417.5.1.1.2")),
}
