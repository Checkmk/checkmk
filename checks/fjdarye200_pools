#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2019             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

PoolEntry = collections.namedtuple(
    "EternusProvisioningPool",
    ["capacity", "usage", "available"],
)


def parse_fjdarye200_pools(info):
    parsed = {}
    for pool_id, capacity, usage in info:
        try:
            # input unit in MB
            parsed[str(pool_id)] = PoolEntry(
                capacity=int(capacity),
                usage=int(usage),
                available=int(capacity) - int(usage),
            )
        except ValueError:
            pass
    return parsed


@get_parsed_item_data
def check_fjdarye200_pools(item, params, entry):
    return df_check_filesystem_single(
        item,
        entry.capacity,
        entry.available,
        0,
        None,
        None,
        params,
    )


check_info["fjdarye200_pools"] = {
    "parse_function": parse_fjdarye200_pools,
    "inventory_function": discover(),
    "check_function": check_fjdarye200_pools,
    "service_description": "Thin Provisioning Pool %s",
    "snmp_info": (
        ".1.3.6.1.4.1.211.1.21.1.150.14.5.2.1",
        [
            "1",  # fjdaryMgtTpPoolNumber
            "3",  # fjdaryMgtTpPoolTotalCapacity
            "4",  # fjdaryMgtTpPoolUsedCapacity
        ]),
    "snmp_scan_function": lambda oid: oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.211.1.21.1.150",
    "includes": ["size_trend.include", "df.include"],
    "default_levels_variable": "filesystem_default_levels",
    "group": "filesystem",
    "has_perfdata": True,
}
