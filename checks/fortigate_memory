#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

fortigate_memory_default_levels = (70, 80)


def parse_fortigate_memory(info):
    try:
        return int(info[0][0])
    except ValueError:
        return None


def inventory_fortigate_memory(parsed):
    if parsed is not None:
        return [(None, "fortigate_memory_default_levels")]


def check_fortigate_memory(item, params, current_reading):
    if current_reading is None:
        return

    # This check does not yet support averaging. We need to
    # convert it to mem.include
    if isinstance(params, dict):
        warn, crit = params["levels"]
    else:
        warn, crit = params

    # This check is only able to check the used space in percent.
    # Unfortunately, it is not straight forward to detect the configured absolute levels,
    # since the default levels here are integers...
    if isinstance(warn, int) and isinstance(params, dict):
        yield 3, "Absolute levels are not supported"
        warn, crit = None, None
    # The checkgroup "memory" might set negative values which act as levels for free space
    # These levels are converted to used space, too..
    if warn is not None and warn < 0:
        warn = 100 + warn
        crit = 100 + crit

    yield check_levels(
        current_reading,
        "mem_usage",
        (warn, crit),
        infoname="Usage",
        human_readable_func=get_percent_human_readable,
    )

check_info["fortigate_memory"] = {
    "parse_function"        : parse_fortigate_memory,
    "check_function"        : check_fortigate_memory,
    "inventory_function"    : inventory_fortigate_memory,
    "service_description"   : "Memory",
    "has_perfdata"          : True,
    "group"                 : "memory",
    "snmp_scan_function"    : lambda oid: "fortigate" in oid(".1.3.6.1.2.1.1.1.0").lower() \
                                          and oid(".1.3.6.1.4.1.12356.1.9.0"),
    "snmp_info"                    : ( ".1.3.6.1.4.1.12356.1", [ 9 ]),
}
