#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

fortigate_memory_base_default_levels = (70, 80)  # taken from fortigate_memory


def parse_fortigate_memory_base(info):
    try:
        total = int(info[0][1]) * 1024  # value from device is in kb, we need bytes
        used = float(info[0][0]) / 100. * total
    except (IndexError, ValueError):
        return ()
    return used, total


def inventory_fortigate_memory_base(parsed):
    if parsed:
        return [(None, "fortigate_memory_base_default_levels")]


def check_fortigate_memory_base(_item, params, parsed):

    if isinstance(params, tuple):
        levels = ("perc_used", params)
    else:
        warn, crit = params.get("levels", (None, None))
        levels = (get_levels_mode_from_value(warn), (abs(warn), abs(crit)))

    if not parsed:
        return
    used, total = parsed

    return check_memory_element("Used", used, total, levels, metric_name="mem_used")


check_info["fortigate_memory_base"] = {
    "parse_function": parse_fortigate_memory_base,
    "check_function": check_fortigate_memory_base,
    "inventory_function": inventory_fortigate_memory_base,
    "service_description": "Memory",
    "has_perfdata": True,
    "group": "memory",
    "snmp_scan_function": lambda oid: ".1.3.6.1.4.1.12356.101.1" in oid(".1.3.6.1.2.1.1.2.0"),
    "snmp_info": (
        ".1.3.6.1.4.1.12356.101.4.1",
        [
            4,  # fgSysMemUsage
            5  # fgSysMemCapacity
        ]),
    "includes": ['mem.include'],
}
