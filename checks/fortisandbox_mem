#!/usr/bin/python
<<<<<<< HEAD
# author: Oguzhan Cicek, OpenSource Security GmbH -  <oguzhan@os-s.de>

# Example Input:
# [...]
# .1.3.6.1.4.1.12356.118.3.1.1.0 v2.52-build0340 (GA)
# .1.3.6.1.4.1.12356.118.3.1.2.0 2
# .1.3.6.1.4.1.12356.118.3.1.3.0 4
# .1.3.6.1.4.1.12356.118.3.1.4.0 260459760
# .1.3.6.1.4.1.12356.118.3.1.5.0 710698
# .1.3.6.1.4.1.12356.118.3.1.6.0 3754417
# .1.3.6.1.4.1.12356.118.3.1.7.0 2
# .1.3.6.1.4.1.12356.118.3.1.8.0 32908349
# .1.3.6.1.4.1.12356.118.3.2.1.0 5.2.50534
# .1.3.6.1.4.1.12356.118.3.2.2.0 2.4.20034
# .1.3.6.1.4.1.12356.118.3.2.3.0 3.2.279
# .1.3.6.1.4.1.12356.118.3.2.4.0 4.478
# .1.3.6.1.4.1.12356.118.3.2.5.0 14.613
# [...]

# Example GUI Output:
# OK	FortiSandbox Memory	RAM used: 4.00% of 248.39 GB

factory_settings["fortisandbox_mem_default_levels"] = {
    "mem_usage": (80, 90),
}


def inventory_fortisandbox_mem(info):
    return [(None, "fortisandbox_mem_default_levels")]


def convert_filesize(size_bytes):
    if size_bytes == 0:
        return "0 MB"
    i = 0
    size_name = ("KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB")
    while size_bytes >= 1000:
        size_bytes = float(size_bytes / 1024)
        i = i + 1
    return "%.2f %s" % (size_bytes, size_name[i])

=======
#author: Oguzhan Cicek, OpenSource Security GmbH -  <oguzhan@os-s.de>

#Example Input:
#[...]
#.1.3.6.1.4.1.12356.118.3.1.1.0 v2.52-build0340 (GA)
#.1.3.6.1.4.1.12356.118.3.1.2.0 2
#.1.3.6.1.4.1.12356.118.3.1.3.0 4
#.1.3.6.1.4.1.12356.118.3.1.4.0 260459760
#.1.3.6.1.4.1.12356.118.3.1.5.0 710698
#.1.3.6.1.4.1.12356.118.3.1.6.0 3754417
#.1.3.6.1.4.1.12356.118.3.1.7.0 2
#.1.3.6.1.4.1.12356.118.3.1.8.0 32908349
#.1.3.6.1.4.1.12356.118.3.2.1.0 5.2.50534
#.1.3.6.1.4.1.12356.118.3.2.2.0 2.4.20034
#.1.3.6.1.4.1.12356.118.3.2.3.0 3.2.279
#.1.3.6.1.4.1.12356.118.3.2.4.0 4.478
#.1.3.6.1.4.1.12356.118.3.2.5.0 14.613
#[...]

#Example GUI Output:
#OK	FortiSandbox Memory	RAM used: 4.00% of 248.39 GB

factory_settings["fortisandbox_mem_default_levels"] = {
    "mem_usage" :     (80, 90),
}

def inventory_fortisandbox_mem(info):
    for i in info:
        yield (None, fortisandbox_mem_default_levels)

def convert_filesize(size_bytes):
    if size_bytes == 0:
       return "0 MB"
    iter = 0
    size_name = ("KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB")
    while size_bytes >= 1000:
        size_bytes = float(size_bytes/1024)
        iter = iter + 1
    return "%.2f %s" % (size_bytes, size_name[iter])
>>>>>>> 82344f0b0a33de2ea32f74b6c1a7c55cecaf2ba2

def check_fortisandbox_mem(item, params, info):
    warn, crit = params["mem_usage"]
    memusage = float(info[0][0][0])
    memcap = int(info[0][0][1])
    display_memcap = convert_filesize(memcap)
    statustext = "RAM used: %.2f%% of %s" % (memusage, display_memcap)
    perfdata = [("memory usage", memusage)]
    state = 0
<<<<<<< HEAD
    if memusage >= warn:
        state = 1
    if memusage >= crit:
        state = 2
    if memusage > 100 or memusage < 0:
        state = 3
    yield state, statustext, perfdata


check_info['fortisandbox_mem'] = {
    'inventory_function': inventory_fortisandbox_mem,
    'check_function': check_fortisandbox_mem,
    'has_perfdata': True,
    'service_description': "FortiSandbox Memory",
    'snmp_info': [(
        '.1.3.6.1.4.1.12356.118.3.1',
        [
            '3',  # fraSysMemUsage
            '4',  # fraSysMemCapacity
        ])],
    'snmp_scan_function': lambda oid: '.1.3.6.1.4.1.12356.118.1.30006' in oid('.1.3.6.1.2.1.1.2.0').
                          lower(),
    'group': 'fortisandbox_mem',
    'default_levels_variable': "fortisandbox_mem_default_levels",
}
=======
    if memusage > warn:
        state = 1
    if memusage > crit:
        state = 2
    if memusage > 100 or memusage < 0:
        state = 3
    yield state, statustext , perfdata

check_info['fortisandbox_mem'] = {
    'inventory_function'        : inventory_fortisandbox_mem,
    'check_function'            : check_fortisandbox_mem,
    'has_perfdata'              : True,
    'service_description'       : "FortiSandbox Memory",
    'snmp_info'                 : [('.1.3.6.1.4.1.12356.118.3.1', [
                                  '3',    # fraSysMemUsage
                                  '4',    # fraSysMemCapacity
                                  ])],
    'snmp_scan_function'        : lambda oid : '.1.3.6.1.4.1.12356.118.1.30006' in oid('.1.3.6.1.2.1.1.2.0').lower(),
    'group'                     : 'fortisandbox_mem',
    'default_levels_variable'   : 'fortisandbox_mem_default_levels',
}

>>>>>>> 82344f0b0a33de2ea32f74b6c1a7c55cecaf2ba2
