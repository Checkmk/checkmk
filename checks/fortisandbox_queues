#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Nikolas Hagemann, comNET GmbH - nikolas.hagemann@comnetgmbh.com

#Example output:
#.1.3.6.1.4.1.12356.118.5.1.1.0 0
#.1.3.6.1.4.1.12356.118.5.1.2.0 0
#.1.3.6.1.4.1.12356.118.5.1.3.0 0
#.1.3.6.1.4.1.12356.118.5.1.4.0 0
#.1.3.6.1.4.1.12356.118.5.1.5.0 0
#.1.3.6.1.4.1.12356.118.5.1.6.0 0
#.1.3.6.1.4.1.12356.118.5.1.7.0 0
#.1.3.6.1.4.1.12356.118.5.1.8.0 0
#.1.3.6.1.4.1.12356.118.5.1.9.0 0
#.1.3.6.1.4.1.12356.118.5.1.10.0 0
#.1.3.6.1.4.1.12356.118.5.1.11.0 0


def parse_fortisandbox_queues(info):
    queues = [
        'Executable', 'PDF', 'Office', 'Flash', 'Web', 'Android', 'MAC', 'URL job', 'User defined',
        'Non Sandboxing', 'Job Queue Assignment'
    ]
    parsed = dict(zip(queues, map(int, info[0])))
    return parsed


def inventory_fortisandbox_queues(parsed):
    for queue in parsed:
        yield queue, {}


def check_fortisandbox_queues(item, params, parsed):
    for queue, length in parsed.items():
        if queue == item:
            warn, crit = params.get('length', (None, None))
            state = 0
            if crit and length >= crit:
                state = 2
            elif warn and length >= warn:
                state = 1
            perfdata = [('queue', length, warn, crit)]
            infotext = 'Queue length: %s' % length
            if state:
                infotext += ' (warn/crit at %s/%s)' % (warn, crit)
            return state, infotext, perfdata


check_info['fortisandbox_queues'] = {
    'parse_function': parse_fortisandbox_queues,
    'inventory_function': inventory_fortisandbox_queues,
    'check_function': check_fortisandbox_queues,
    'service_description': 'Pending %s files',
    'has_perfdata': True,
    'snmp_scan_function': lambda oid: oid('.1.3.6.1.2.1.1.2.0') == '.1.3.6.1.4.1.12356.118.1.30006',
    'snmp_info': (
        '.1.3.6.1.4.1.12356.118.5.1',
        [
            '1',  #fsaFTypeExe
            '2',  #fsaFTypePDF
            '3',  #fsaFTypeDOC
            '4',  #fsaFTypeFLASH
            '5',  #fsaFTypeWEB
            '6',  #fsaFTypeAndroid
            '7',  #fsaFTypeMAC
            '8',  #fsaFTypeURL
            '9',  #fsaFTypeExtra
            '10',  #fsaFTypeNOVM
            '11',  #fsaFTypePre
        ]),
    'group': 'fortisandbox_queues',
}
