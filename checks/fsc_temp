#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# We fetch the following columns from SNMP:
# 13: name of the temperature sensor (used as item)
# 11: current temperature in C
# 6:  warning level
# 8:  critical level


def inventory_fsc_temp(info):
    for line in info:
        # Ignore non-connected sensors
        if int(line[1]) < 500:
            yield (line[0], None)


def check_fsc_temp(item, params, info):
    for name, rawtemp, warn, crit in info:
        if name == item:
            temp = int(rawtemp)
            if temp == -1 or temp == 4294967295:
                return 3, "Sensor or component missing"

            return check_temperature(temp,
                                     params,
                                     "fsc_temp_%s" % item,
                                     dev_levels=(int(warn), int(crit)))


check_info['fsc_temp'] = {
    'inventory_function': inventory_fsc_temp,
    'check_function': check_fsc_temp,
    'service_description': 'Temperature %s',
    'has_perfdata': True,
    'snmp_info': (".1.3.6.1.4.1.231.2.10.2.2.5.2.1.1", [13, 11, 6, 8]),
    'snmp_scan_function': is_fsc_temp_prefer_sc2,
    'group': "temperature",
    'includes': ['temperature.include', 'fsc.include'],
}
