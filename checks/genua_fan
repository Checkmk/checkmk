#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

factory_settings["genua_fan_default_levels"] = {
    "lower": (2000, 1000),
    "upper": (8000, 8400),
}


def inventory_genua_fan(info):
    # remove empty elements due to alternative enterprise id in snmp_info
    info = [_f for _f in info if _f]

    if not info:
        return

    inventory = []
    for fanName, _fanRPM, _fanState in info[0]:
        inventory.append((fanName, {}))
    return inventory


def check_genua_fan(item, params, info):
    # remove empty elements due to alternative enterprise id in snmp_info
    info = [_f for _f in info if _f]

    map_states = {
        "1": (0, "OK"),
        "2": (1, "warning"),
        "3": (2, "critical"),
        "4": (2, "unknown"),
        "5": (2, "unknown"),
        "6": (2, "unknown"),
    }

    for line in info[0]:
        fanName, fanRPM, fanState = line
        if fanName != item:
            continue

        rpm = saveint(fanRPM)
        state, state_readable = map_states[fanState]
        yield state, "Status: %s" % state_readable
        yield check_fan(rpm, params)


check_info['genua_fan'] = {
    "inventory_function": inventory_genua_fan,
    "check_function": check_genua_fan,
    "group": "hw_fans",
    "service_description": "FAN %s",
    "has_perfdata": True,
    "snmp_info": [
        (
            ".1.3.6.1.4.1.3717.2.1.1.1.1",
            [
                "2",  # "fanName"
                "3",  # "fanRPM"
                "4"  # "fanState"
            ]),
        (
            ".1.3.6.1.4.1.3137.2.1.1.1.1",
            [
                "2",  # "fanName"
                "3",  # "fanRPM"
                "4"  # "fanState"
            ])
    ],
    "snmp_scan_function": scan_genua,
    "includes": ["genua.include", "fan.include"],
    "default_levels_variable": "genua_fan_default_levels",
}
