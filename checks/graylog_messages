#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2019             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# <<<graylog_messages>>>
# {"events": 1268586}

import json


def parse_graylog_messages(info):
    parsed = {}

    for line in info:
        parsed.update(json.loads(line[0]))

    return parsed


def check_graylog_messages(no_item, params, parsed):
    # possible output without events
    # {"message": "Couldn't collect aliases for index pattern graylog_*",
    # "type": "DetailedError", "details": []}
    if not parsed or not "events" in parsed:
        return

    for perf_name, infotext, human_func in [
        ("messages", "Total number of messages", int),
        ("msg_count_avg", "Average number of messages", None),
    ]:

        msg_data = parsed["events"]
        levels = params.get('%s_upper' % perf_name, (None, None))
        levels_lower = params.get('%s_lower' % perf_name, (None, None))

        if perf_name == "msg_count_avg":
            avg = params.get(perf_name, 30)

            this_time = time.time()
            rate = get_rate("graylog_%s.rate" % perf_name, this_time, msg_data) * 60

            avg_rate = get_average("graylog_%s.avg" % perf_name, this_time, rate, avg)
            msg_data = avg_rate
            infotext += " (%s)" % get_age_human_readable(avg * 60)

        yield check_levels(msg_data,
                           perf_name,
                           levels + levels_lower,
                           human_readable_func=human_func,
                           infoname=infotext)


check_info["graylog_messages"] = {
    "parse_function": parse_graylog_messages,
    "check_function": check_graylog_messages,
    "inventory_function": discover_single,
    "service_description": "Graylog Messages",
    "has_perfdata": True,
    "group": "graylog_messages",
}
