#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2019             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# <<<graylog_messages>>>
# {"events": 1268586}

import json


def inventory_graylog_messages(parsed):
    events = parsed.get("events")
    if events is not None:
        return [(None, {})]


def check_graylog_messages(no_item, params, parsed):
    messages = parsed.get("events")
    if messages is None:
        return

    msgs_levels_upper = params.get('msgs_upper', (None, None))
    msgs_levels_lower = params.get('msgs_lower', (None, None))

    yield check_levels(messages,
                       "messages",
                       msgs_levels_upper + msgs_levels_lower,
                       human_readable_func=int,
                       infoname="Total number of messages")

    avg_key = "msgs_avg"
    avg = params.get(avg_key, 30)
    msgs_avg_levels_upper = params.get('msgs_avg_upper', (None, None))
    msgs_avg_levels_lower = params.get('msgs_avg_lower', (None, None))
    this_time = time.time()

    rate = get_rate("graylog_%s.rate" % avg_key, this_time, messages)
    avg_rate = get_average("graylog_%s.avg" % avg_key, this_time, rate, avg)

    yield check_levels(avg_rate,
                       avg_key,
                       msgs_avg_levels_upper + msgs_avg_levels_lower,
                       infoname="Average number of messages (%s)" %
                       get_age_human_readable(avg * 60))


check_info["graylog_messages"] = {
    "parse_function": parse_graylog_agent_data,
    "check_function": check_graylog_messages,
    "inventory_function": inventory_graylog_messages,
    "service_description": "Graylog Messages",
    "has_perfdata": True,
    "group": "graylog_messages",
    "includes": ["graylog.include"],
}
