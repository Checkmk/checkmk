#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2019             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

import json

# <<<graylog_sources>>>
# {"sources": {"klappclub": 81216}, "range": 0, "total": 1, "took_ms": 28}


def parse_graylog_sources(info):
    parsed = {}

    for line in info:
        sources_data = json.loads(line[0])

        source_name = sources_data.get("sources")
        if source_name is None:
            continue

        for name, messages in source_name.iteritems():

            parsed.setdefault(name, {
                "messages": int(messages),
            })

    return parsed


@get_parsed_item_data
def check_graylog_sources(item, params, item_data):
    messages = item_data.get("messages")
    if messages is None:
        return

    return handle_graylog_messages(messages, params)


check_info["graylog_sources"] = {
    "parse_function": parse_graylog_sources,
    "check_function": check_graylog_sources,
    "inventory_function": discover(),
    "default_levels_variable": "graylog_sources_default_levels",
    "service_description": "Graylog Source %s",
    "has_perfdata": True,
    "group": "graylog_sources",
    "includes": ["graylog.include"],
}
