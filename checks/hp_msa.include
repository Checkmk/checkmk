#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

#TODO
# Use 'status-numeric' instead of 'status' field regardless of language.
# See for state mapping: https://support.hpe.com/hpsc/doc/public/display?docId=emr_na-a00017709en_us

hp_msa_state_map = {
    "Up": (0, "up"),
    "OK": (0, "OK"),
    "Warning": (1, "warning"),
    "Degraded": (1, "degraded"),
    "Error": (2, "error"),
    "Not Present": (2, "not present"),
    "Fault": (2, "fault"),
    "Unknown": (3, "unknown"),
}


def _parse_hp_msa_objects(info):
    objects = []
    for line in info:
        if line[2] == "durable-id":  # marks start of new object
            objects.append({"item_type": line[0]})
        if not objects:
            continue  # should never happen
        objects[-1][line[2]] = " ".join(line[3:])

    return objects


def _get_hp_msa_object_item(data):
    item = data.get("location", data["durable-id"]).replace("- ", "")
    return item.rsplit("_", 1)[-1].strip()


def parse_hp_msa(info):
    return {_get_hp_msa_object_item(data): data for data in _parse_hp_msa_objects(info)}


def inventory_hp_msa_health(parsed):
    return [(key, None) for key in parsed]


def check_hp_msa_health(item, _no_params, parsed):
    if item in parsed:
        infotexts = []
        health_state, health_state_readable = hp_msa_state_map[parsed[item]["health"]]
        health_info = "Status: %s" % health_state_readable
        if health_state and parsed[item].get("health-reason", ""):
            health_info += " (%s)" % parsed[item]["health-reason"]

        infotexts.append(health_info)

        # extra info of volumes
        if parsed[item]["item_type"] == "volumes":
            volume_info = parsed[item].get("container-name", "")
            if volume_info:
                if parsed[item].get("raidtype", ""):
                    volume_info += " (%s)" % parsed[item]["raidtype"]
                infotexts.append("container name: %s" % volume_info)

        # extra info of disks
        elif parsed[item]["item_type"] == "drives":
            for disk_info in ["serial-number", "vendor", "model", "description", "size"]:
                if parsed[item].get(disk_info, ""):
                    infotexts.append("%s: %s" % \
                        (disk_info.replace("-", " "), parsed[item][disk_info].replace("GB", " GB") ))

            if parsed[item].get("rpm", ""):
                infotexts.append("speed: %s RPM" % (parsed[item]["rpm"]))

        return health_state, ", ".join(infotexts)


def inventory_hp_msa_io(parsed):
    return inventory_diskstat_generic([[None, item] for item in parsed])


def check_hp_msa_io(item, params, parsed):
    disks = {}
    now = time.time()
    for key, values in parsed.items():
        disk = disks.setdefault(key, {})
        try:
            read = int(values["data-read-numeric"])
            disk["read_throughput"] = get_rate("%s_read" % key, now, read)
        except (KeyError, ValueError, TypeError):
            pass
        try:
            written = int(values["data-written-numeric"])
            disk["write_throughput"] = get_rate("%s_write" % key, now, written)
        except (KeyError, ValueError, TypeError):
            pass

    return check_diskstat_dict(item, params, disks)
