#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# .1.3.6.1.4.1.232.11.1.3.0  1
# .1.3.6.1.4.1.232.11.2.14.1.1.5.0  "2009.05.18"
# .1.3.6.1.4.1.232.2.2.2.1.0  "GB8851CPPH


def inventory_proliant_general(info):
    if len(info) > 0 and len(info[0]) > 1 and info[0][0]:
        yield None, {}


def check_proliant_general(item, no_params, info):
    if not info:
        return 3, "Status not found in snmp data"

    map_states = {
        "1": (3, "unknown"),
        "2": (0, "OK"),
        "3": (1, "degraded"),
        "4": (2, "failed"),
    }

    status, firmware, serial_number = info[0]
    state, state_readable = map_states.get(status, (3, "unhandled[%s]" % status))
    return state, "Status: %s, Firmware: %s, S/N: %s" % \
          (state_readable, firmware, serial_number)


check_info["hp_proliant"] = {
    'inventory_function': inventory_proliant_general,
    'check_function': check_proliant_general,
    'service_description': 'General Status',
    'snmp_info': (
        '.1.3.6.1.4.1.232',
        [
            '11.1.3.0',  # CPQHOST-MIB::cpqHoMibCondition
            '11.2.14.1.1.5.0',  # cpqHoFwVerVersion
            '2.2.2.1.0',  # CPQSINFO-MIB::cpqSiSysSerialNum
        ]),
    'snmp_scan_function': lambda oid: "8072.3.2.10" in oid(".1.3.6.1.2.1.1.2.0") or "232.9.4.10" in
                          oid(".1.3.6.1.2.1.1.2.0") or (".1.3.6.1.4.1.311.1.1.3.1.2" in oid(
                              ".1.3.6.1.2.1.1.2.0") and oid(".1.3.6.1.4.1.232.11.1.3.0")),
}
