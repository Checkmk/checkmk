#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

hp_proliant_da_phydrv_condition_status2nagios = {
    'other': 3,
    'ok': 0,
    'degraded': 2,
    'failed': 2,
}
hp_proliant_da_phydrv_condition = {
    0: 'n/a',
    1: 'other',
    2: 'ok',
    3: 'degraded',
    4: 'failed',
}

hp_proliant_da_phydrv_status = {
    1: 'other',
    2: 'ok',
    3: 'failed',
    4: 'predictive failure',
    5: 'erasing',
    6: 'erase done',
    7: 'erase queued',
    8: 'SSD wear out',
    9: 'not authenticated',
}

hp_proliant_da_phydrv_smart_status = {
    1: 'other',
    2: 'ok',
    3: 'replace drive',
    4: 'replace drive SSD wear out',
}


def inventory_hp_proliant_da_phydrv(info):
    return [(line[0] + '/' + line[1], None) for line in info]


def check_hp_proliant_da_phydrv(item, _no_params, info):
    for line in info:
        # First condition is for legacy discovered services
        if line[1] == item or (line[0] + '/' + line[1]) == item:
            _cntlr_index, _index, bay, status, ref_hours, size, condition, \
                bus_number, smart_status, _model, _serial, _ty, _fw = line

            snmp_status = hp_proliant_da_phydrv_status[int(status)]

            condition = hp_proliant_da_phydrv_condition[int(condition)]
            status = hp_proliant_da_phydrv_condition_status2nagios[condition]

            return (
                status, 'Bay: %s, Bus number: %s, Status: %s, '
                'Smart status: %s, Ref hours: %s, Size: %sMB, Condition: %s' %
                (bay, bus_number, snmp_status,
                 hp_proliant_da_phydrv_smart_status[int(smart_status)], ref_hours, size, condition))


check_info["hp_proliant_da_phydrv"] = {
    'inventory_function': inventory_hp_proliant_da_phydrv,
    'check_function': check_hp_proliant_da_phydrv,
    'service_description': 'HW Phydrv %s',
    # If something changes here please adopt the related inventory plugin
    'snmp_info': (
        ".1.3.6.1.4.1.232.3.2.5.1.1",
        [
            "1",  # CPQIDA-MIB::cpqDaPhyDrvCntlrIndex
            "2",  # CPQIDA-MIB::cpqDaPhyDrvIndex
            "5",  # CPQIDA-MIB::cpqDaPhyDrvBay
            "6",  # CPQIDA-MIB::cpqDaPhyDrvStatus
            "9",  # CPQIDA-MIB::cpqDaPhyDrvRefHours
            "45",  # CPQIDA-MIB::cpqDaPhyDrvSize
            "37",  # CPQIDA-MIB::cpqDaPhyDrvCondition
            "50",  # CPQIDA-MIB::cpqDaPhyDrvBusNumber
            "57",  # CPQIDA-MIB::cpqDaPhyDrvSmartStatus
            "3",  # CPQIDA-MIB::cpqDaPhyDrvModel
            "51",  # CPQIDA-MIB::cpqDaPhyDrvSerialNum
            "60",  # CPQIDA-MIB::pqDaPhyDrvType
            "4",  # CPQIDA-MIB::cpqDaPhyDrvFWRev
        ]),
    'snmp_scan_function': lambda oid: "proliant" in oid(".1.3.6.1.4.1.232.2.2.4.2.0", "").lower(),
}
