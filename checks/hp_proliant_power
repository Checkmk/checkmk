#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# .2 cpqHePowerMeterStatus
#    Description:        This value specifies whether Power Meter reading is supported by this Server .
#    The following values are supported:
#       other(1) Could not read the Power Meter status.
#       present(2) The Power Meter data is available.
#       absent(3) The Power Meter data is not available at this time.


def inventory_hp_proliant_power(info):
    if len(info) > 0 and info[0][0] not in ['0', '3']:
        return [(None, None)]


def check_hp_proliant_power(_item, params, info):
    status_table = {
        1: "other",
        2: "present",
        3: "absent",
    }
    status, reading = map(int, info[0])
    if status != 2:
        return 2, "Power Meter state: %s" % (status_table[status])

    return check_levels(reading,
                        "watt",
                        params if params else (None, None),
                        infoname="Current reading",
                        unit="Watts")


check_info["hp_proliant_power"] = {
    'group': 'epower_single',
    'check_function': check_hp_proliant_power,
    'inventory_function': inventory_hp_proliant_power,
    'service_description': 'HW Power Meter',
    'snmp_info': (
        ".1.3.6.1.4.1.232.6.2.15",
        [
            "2",  # cpqHePowerMeterStatus
            "3",  # cpqHePowerMeterCurrReading
        ]),
    'snmp_scan_function': lambda oid: "proliant" in oid(".1.3.6.1.4.1.232.2.2.4.2.0", "").lower(),
    'has_perfdata': True
}
