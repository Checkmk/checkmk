#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from cmk.base.check_legacy_includes.hp_proliant import *  # pylint: disable=wildcard-import,unused-wildcard-import
# .2 cpqHePowerMeterStatus
#    Description:        This value specifies whether Power Meter reading is supported by this Server .
#    The following values are supported:
#       other(1) Could not read the Power Meter status.
#       present(2) The Power Meter data is available.
#       absent(3) The Power Meter data is not available at this time.


def inventory_hp_proliant_power(info):
    if len(info) > 0 and info[0][0] not in ['0', '3']:
        return [(None, None)]


def check_hp_proliant_power(_item, params, info):
    status_table = {
        1: "other",
        2: "present",
        3: "absent",
    }
    status, reading = map(int, info[0])
    if status != 2:
        return 2, "Power Meter state: %s" % (status_table[status])

    return check_levels(reading,
                        "watt",
                        params if params else (None, None),
                        infoname="Current reading",
                        unit="Watts")


check_info["hp_proliant_power"] = {
    'group': 'epower_single',
    'check_function': check_hp_proliant_power,
    'inventory_function': inventory_hp_proliant_power,
    'service_description': 'HW Power Meter',
    'snmp_info': (
        ".1.3.6.1.4.1.232.6.2.15",
        [
            "2",  # cpqHePowerMeterStatus
            "3",  # cpqHePowerMeterCurrReading
        ]),
    'snmp_scan_function': hp_proliant_scan_function,
    'has_perfdata': True
}
