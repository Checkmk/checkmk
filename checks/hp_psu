#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def parse_hp_psu(info):
    parsed = {index: {"temp": int(temp), "status": dev_status} for index, dev_status, temp in info}
    return parsed


#   .--Temperature---------------------------------------------------------.
#   |     _____                                   _                        |
#   |    |_   _|__ _ __ ___  _ __   ___ _ __ __ _| |_ _   _ _ __ ___       |
#   |      | |/ _ \ '_ ` _ \| '_ \ / _ \ '__/ _` | __| | | | '__/ _ \      |
#   |      | |  __/ | | | | | |_) |  __/ | | (_| | |_| |_| | | |  __/      |
#   |      |_|\___|_| |_| |_| .__/ \___|_|  \__,_|\__|\__,_|_|  \___|      |
#   |                       |_|                                            |
#   '----------------------------------------------------------------------'

factory_settings["hp_psu_temp_default_levels"] = {
    "levels": (70, 80),
}


def inventory_hp_psu_temp(parsed):
    for index in parsed:
        yield index, {}


def check_hp_psu_temp(item, params, parsed):
    data = parsed.get(item)
    if data is None:
        return
    # For some status, the device simply reports 0 as a temperature value.
    temp_unknown_status = ["8"]
    if data["status"] in temp_unknown_status and data["temp"] == 0:
        return 3, "No temperature data available"
    return check_temperature(data["temp"], params, item)


check_info['hp_psu.temp'] = {
    'default_levels_variable': "hp_psu_temp_default_levels",
    'inventory_function': inventory_hp_psu_temp,
    'check_function': check_hp_psu_temp,
    'service_description': "Temperature Power Supply %s",
    'group': "temperature",
    'includes': ["temperature.include"],
    'has_perfdata': True,
}

#   .--Status--------------------------------------------------------------.
#   |                    ____  _        _                                  |
#   |                   / ___|| |_ __ _| |_ _   _ ___                      |
#   |                   \___ \| __/ _` | __| | | / __|                     |
#   |                    ___) | || (_| | |_| |_| \__ \                     |
#   |                   |____/ \__\__,_|\__|\__,_|___/                     |
#   |                                                                      |
#   '----------------------------------------------------------------------'


def inventory_hp_psu(parsed):
    for item in parsed:
        yield item, None


def check_hp_psu(item, params, parsed):
    ps_statemap = {
        "1": (2, "Not present"),
        "2": (2, "Not plugged"),
        "3": (0, "Powered"),
        "4": (1, "Failed"),
        "5": (2, "Permanent Failure"),
        "6": (3, "Max"),
        # This value is not specified in the MIB, but has been observed in the wild.
        "8": (2, "Unplugged"),
    }

    return ps_statemap.get(parsed[item]["status"], (3, "Unknown status code sent by device"))


check_info['hp_psu'] = {
    'parse_function': parse_hp_psu,
    'inventory_function': inventory_hp_psu,
    'check_function': check_hp_psu,
    'service_description': 'Power Supply Status %s',
    'snmp_info': (
        '.1.3.6.1.4.1.11.2.14.11.5.1.55.1.1.1',  # POWERSUPPLY_MIB: hpicfPsEntry
        [
            OID_END,  # hpicfPsBayNum
            "2",  # hpicfPsState
            "4",  # hpicfPsTemp
        ]),
    'snmp_scan_function': lambda oid: "hp" in oid(".1.3.6.1.2.1.1.1.0").lower() and "5406rzl2" in
                          oid(".1.3.6.1.2.1.1.1.0").lower(),
}
