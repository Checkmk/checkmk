#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.


def parse_hr_mem(info):
    map_types = {
        '.1.3.6.1.2.1.25.2.1.1': 'other',
        '.1.3.6.1.2.1.25.2.1.2': 'RAM',
        '.1.3.6.1.2.1.25.2.1.3': 'virtual memory',
        '.1.3.6.1.2.1.25.2.1.4': 'fixed disk',
        '.1.3.6.1.2.1.25.2.1.5': 'removeable disk',
        '.1.3.6.1.2.1.25.2.1.6': 'floppy disk',
        '.1.3.6.1.2.1.25.2.1.7': 'compact disk',
        '.1.3.6.1.2.1.25.2.1.8': 'RAM disk',
        '.1.3.6.1.2.1.25.2.1.9': 'flash memory',
        '.1.3.6.1.2.1.25.2.1.10': 'network disk',
    }

    parsed = {}
    for hrtype, hrdescr, hrunits, hrsize, hrused in info:
        try:
            size = int(hrsize) * int(hrunits)
            used = int(hrused) * int(hrunits)
            parsed.setdefault(map_types[hrtype], []).append((hrdescr.lower(), size, used))
        except (ValueError, KeyError):
            pass

    return parsed


memused_default_levels = (150.0, 200.0)


# Memory information is - together with filesystems - in
# hrStorage. We need the entries of the types hrStorageVirtualMemory
# and hrStorageRam
def inventory_hr_mem(parsed):
    # Do we find at least one entry concerning memory?
    # some device have zero (broken) values
    if any(size > 0 for _, size, __ in parsed.get('RAM', [])):
        return [(None, "memused_default_levels")]


def aggregate_meminfo(parsed):
    """return a meminfo dict as expected by check_memory from mem.include"""
    meminfo = {'Cached': 0, 'Buffers': 0}

    for type_readable, entries in parsed.items():
        for descr, size, used in entries:
            if type_readable in ['RAM', 'virtual memory'] and descr != "virtual memory":
                # We use only the first entry of each type. We have
                # seen devices (pfSense), that have lots of additional
                # entries that are not useful.
                if type_readable == 'RAM':
                    meminfo.setdefault("MemTotal", size / 1024.0)
                    meminfo.setdefault("MemFree", (size - used) / 1024.0)
                else:
                    # Strictly speaking, swap space is a part of the hard
                    # disk drive that is used for virtual memory.
                    # We use the name "Swap" here for consistency.
                    meminfo.setdefault("SwapTotal", size / 1024.0)
                    meminfo.setdefault("SwapFree", (size - used) / 1024.0)

            if descr in ["cached memory", "memory buffers"] and used > 0:
                # Account for cached memory (this works at least for systems using
                # the UCD snmpd (such as Linux based applicances)
                # some devices report negative used cache values...
                if descr == "cached memory":
                    meminfo["Cached"] += used / 1024.0
                else:
                    meminfo["Buffers"] += used / 1024.0

    return meminfo


def check_hr_mem(_no_item, params, parsed):
    meminfo = aggregate_meminfo(parsed)

    if not meminfo.get('MemTotal'):
        yield 3, "Invalid information. Total memory is empty."
        return

    for subresult in check_memory(params, meminfo):
        yield subresult


check_info["hr_mem"] = {
    'parse_function': parse_hr_mem,
    'inventory_function': inventory_hr_mem,
    'check_function': check_hr_mem,
    'service_description': 'Memory',
    'has_perfdata': True,
    'snmp_info': (
        '.1.3.6.1.2.1.25.2.3.1',
        [
            2,  # hrStorageType
            3,  # hrStorageDescr
            4,  # hrStorageAllocationUnits
            5,  # hrStorageSize
            6,  # hrStorageUsed
        ]),
    # Some devices are reporting wrong data on
    # HOST-RESOURCES-MIB. Use UCD-MIB in these
    # cases instead
    'snmp_scan_function': is_hr_mem,
    'group': 'memory',
    'includes': ["mem.include", "ucd_hr.include"]
}
