#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2019             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

HuaweiFanData = collections.namedtuple("HuaweiFanData", "fan_present fan_speed")


def parse_huawei_switch_fan(info):
    entities_per_member = {}
    for line in info:
        member_number = line[0].partition(".")[0]
        fan_present = (line[2] == '1')

        try:
            fan_speed = float(line[1])
        except TypeError:
            continue

        entities_per_member.setdefault(member_number, []).append(
            HuaweiFanData(fan_present=fan_present, fan_speed=fan_speed))

    return huawei_item_dict_from_entities(entities_per_member)


def inventory_huawei_switch_fan(parsed):
    for item, item_data in parsed.items():
        if item_data.fan_present:
            yield (item, {})


@get_parsed_item_data
def check_huawei_switch_fan(item, params, item_data):
    levels = params.get('levels', (None, None)) + params.get('levels_lower', (None, None))
    return check_levels(item_data.fan_speed,
                        "fan_perc",
                        levels,
                        human_readable_func=get_percent_human_readable)


check_info['huawei_switch_fan'] = {
    'parse_function': parse_huawei_switch_fan,
    'inventory_function': inventory_huawei_switch_fan,
    'check_function': check_huawei_switch_fan,
    'service_description': 'Fan %s',
    'snmp_info': (
        '.1.3.6.1.4.1.2011.5.25.31.1.1.10.1',
        [
            # OID_END will be something like <stack id>.<fan index>
            # we are only interested in the stack id before the dot
            OID_END,
            '5',  # hwEntityFanSpeed
            '6',  # hwEntityFanPresent
        ],
    ),
    'snmp_scan_function': huawei_switch_scan_function,
    'has_perfdata': True,
    'group': 'hw_fans_perc',
    'includes': ['huawei_switch.include'],
}
