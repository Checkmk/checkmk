#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# Defined by customer, see SUP-1020
factory_settings["huawei_cpu_default"] = {"levels": (80.0, 90.0)}
factory_settings["huawei_mem_default"] = {"levels": (80.0, 90.0)}


def parse_huawei_wlc_devs(info):

    parsed = {}

    # Devices
    for name, cpu_perc, mem_perc in info:
        if name:
            parsed[name] = {}
            for metric, value in (("cpu_percent", cpu_perc), ("mem_used_percent", mem_perc)):
                parsed[name][metric] = float(value)

    return parsed


check_info['huawei_wlc_devs'] = {
    'parse_function': parse_huawei_wlc_devs,
    'snmp_info': (
        '.1.3.6.1.4.1.2011.5.25.31.1.1',
        [
            "2.1.13",  # DeviceID
            "1.1.5",  # Device CPU Usage
            "1.1.7",  # Device Mem Usage
        ]),
    "snmp_scan_function": lambda oid: ".1.3.6.1.4.1.2011.2.240.17" in oid(".1.3.6.1.2.1.1.2.0"),
}


def discovery_huawei_wlc_devs_mem(parsed):
    for name, dev in parsed.items():
        if dev["mem_used_percent"] is not None:
            yield name, {}


@get_parsed_item_data
def check_huawei_wlc_devs_mem(item, params, data):

    lev = params.get("levels")
    val = data.get("%s" % "mem_used_percent")

    yield check_levels(val,
                       "mem_used_percent",
                       lev,
                       human_readable_func=get_percent_human_readable,
                       infoname="Used")


check_info['huawei_wlc_devs.mem'] = {
    'inventory_function': discovery_huawei_wlc_devs_mem,
    'parse_function': parse_huawei_wlc_devs,
    'check_function': check_huawei_wlc_devs_mem,
    'service_description': 'Device %s Memory',
    'default_levels_variable': "huawei_mem_default",
    "has_perfdata": True,
}


def discovery_huawei_wlc_devs_cpu(parsed):
    for name, dev in parsed.items():
        if dev["cpu_percent"] is not None:
            yield name, {}


@get_parsed_item_data
def check_huawei_wlc_devs_cpu(item, params, data):

    lev = params.get("levels")
    val = data.get("%s" % "cpu_percent")

    yield check_levels(val,
                       "cpu_percent",
                       lev,
                       human_readable_func=get_percent_human_readable,
                       infoname="Usage")


check_info['huawei_wlc_devs.cpu'] = {
    'parse_function': parse_huawei_wlc_devs,
    'inventory_function': discovery_huawei_wlc_devs_cpu,
    'check_function': check_huawei_wlc_devs_cpu,
    'service_description': 'Device %s CPU',
    'default_levels_variable': "huawei_cpu_default",
    "has_perfdata": True,
}
