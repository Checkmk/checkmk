#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

hwg_humidity_defaultlevels = (0, 0, 60, 70)


def inventory_hwg_humidity(info):
    return [(line[0], "hwg_humidity_defaultlevels")
            for line in info
            if int(line[2]) != 0 and line[4] in ["4"]]


def check_hwg_humidity(item, params, info):
    #    status_text = {
    #        "0" : "Invalid",
    #        "1" : "Normal",
    #        "2" : "Out Of Range Low",
    #        "3" : "Out Of Range High",
    #        "4" : "Alarm Low",
    #        "5" : "Alarm High",
    #    }

    # Nomenclature in this check: sensorstatus is what the device sends, status is what the check returns.
    for index, descr, _sensorstatus, current, unit in info:
        if index == item:
            if unit != "4":
                return

            humidity = float(current)
            status, infotext, perfdata = check_humidity(humidity, params)
            if descr:
                infotext += " (%s)" % descr
            return status, infotext, perfdata


check_info['hwg_humidity'] = {
    "check_function": check_hwg_humidity,
    "inventory_function": inventory_hwg_humidity,
    "service_description": "Humidity %s",
    "has_perfdata": True,
    "snmp_info": (
        ".1.3.6.1.4.1.21796.4.1.3",
        [  # sensors index (1-2)
            "1.1",
            # sensor name string
            "1.2",
            # unit state: 0=Invalid, 1=Normal, 2=OutOfRangeLo, 3=OutOfRangeHi, 4=AlarmLo, 5=AlarmHi
            "1.3",
            # current value string
            "1.4",
            # sensor unit integer 0=unknown, 1=°C, 2=°F, 3=°K, 4=%
            "1.7",
        ]),
    "snmp_scan_function": lambda oid: "hwg" in oid(".1.3.6.1.2.1.1.1.0").lower(),
    "group": "humidity",
    "includes": ["humidity.include"],
}
