#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


@network_interface_scan_registry.register
def snmp_scan_function_if64_tplink(oid):
    return ".4.1.11863." in oid(".1.3.6.1.2.1.1.2.0") and has_ifHCInOctets(oid)


def parse_if64_tplink(info):
    parsed = []
    for line in info:
        # if we have no special alias info we use the standard ifAlias info
        if not line[18]:
            line[18] = line[20]
        # cut away the last column with the optional ifAlias info
        line = line[:20]

        parsed.append(line[:3] + [str(int(line[3]) * 1000000)] + line[4:])

    return parsed


def inventory_if64_tplink(parsed):
    return inventory_if_common(parsed)


check_info["if64_tplink"] = {
    'parse_function': parse_if64_tplink,
    'check_function': check_if_common,
    'inventory_function': inventory_if64_tplink,
    'service_description': 'Interface %s',
    'has_perfdata': True,
    'includes': ['if.include'],
    'snmp_info': (
        ".1.3.6.1",
        [
            "2.1.2.2.1.1",  # ifIndex                    0
            "2.1.2.2.1.2",  # ifDescr                    1
            "2.1.2.2.1.3",  # ifType                     2
            "2.1.31.1.1.1.15",  # ifHighSpeed            .. 1000 means 1Gbit
            "2.1.2.2.1.8",  # ifOperStatus               4
            "2.1.31.1.1.1.6",  # ifHCInOctets            5
            "2.1.31.1.1.1.7",  # ifHCInUcastPkts         6
            "2.1.31.1.1.1.8",  # ifHCInMulticastPkts     7
            "2.1.31.1.1.1.9",  # ifHCInBroadcastPkts     8
            "2.1.2.2.1.13",  # ifInDiscards              9
            "2.1.2.2.1.14",  # ifInErrors               10
            "2.1.31.1.1.1.10",  # ifHCOutOctets         11
            "2.1.31.1.1.1.11",  # ifHCOutUcastPkts      12
            "2.1.31.1.1.1.12",  # ifHCOutMulticastPkts  13
            "2.1.31.1.1.1.13",  # ifHCOutBroadcastPkts  14
            "2.1.2.2.1.19",  # ifOutDiscards            15
            "2.1.2.2.1.20",  # ifOutErrors              16
            "2.1.2.2.1.21",  # ifOutQLen                17
            "4.1.11863.1.1.3.2.1.1.1.1.2",  # special for TP Link
            BINARY("2.1.2.2.1.6"),  # ifPhysAddress            19
            # Additionally fetch the standard OIDs for aliases.
            # Current tplink devices seem to support this OID and no longer the
            # ones under 4.1.11863.
            "2.1.31.1.1.1.18",  # ifAlias
        ]),
    'snmp_scan_function': snmp_scan_function_if64_tplink,
    'group': 'if',
    'default_levels_variable': 'if_default_levels',
}
