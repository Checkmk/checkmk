#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.


def scan_infoblox(oid):
    return "infoblox" in oid(".1.3.6.1.2.1.1.1.0").lower() or \
           oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.7779.1")


#   .--services------------------------------------------------------------.
#   |                                     _                                |
#   |                 ___  ___ _ ____   _(_) ___ ___  ___                  |
#   |                / __|/ _ \ '__\ \ / / |/ __/ _ \/ __|                 |
#   |                \__ \  __/ |   \ V /| | (_|  __/\__ \                 |
#   |                |___/\___|_|    \_/ |_|\___\___||___/                 |
#   |                                                                      |
#   '----------------------------------------------------------------------'


def parse_infoblox_services(info):
    map_service_ids = {
        "1": "dhcp",
        "2": "dns",
        "3": "ntp",
        "4": "tftp",
        "5": "http-file-dist",
        "6": "ftp",
        "7": "bloxtools-move",
        "8": "bloxtools",
        "9": "node-status",
        "10": "disk-usage",
        "11": "enet-lan",
        "12": "enet-lan2",
        "13": "enet-ha",
        "14": "enet-mgmt",
        "15": "lcd",
        "16": "memory",
        "17": "replication",
        "18": "db-object",
        "19": "raid-summary",
        "20": "raid-disk1",
        "21": "raid-disk2",
        "22": "raid-disk3",
        "23": "raid-disk4",
        "24": "raid-disk5",
        "25": "raid-disk6",
        "26": "raid-disk7",
        "27": "raid-disk8",
        "28": "fan1",
        "29": "fan2",
        "30": "fan3",
        "31": "fan4",
        "32": "fan5",
        "33": "fan6",
        "34": "fan7",
        "35": "fan8",
        "36": "power-supply1",
        "37": "power-supply2",
        "38": "ntp-sync",
        "39": "cpu1-temp",
        "40": "cpu2-temp",
        "41": "sys-temp",
        "42": "raid-battery",
        "43": "cpu-usage",
        "44": "ospf",
        "45": "bgp",
        "46": "mgm-service",
        "47": "subgrid-conn",
        "48": "network-capacity",
        "49": "reporting",
        "50": "dns-cache-acceleration",
        "51": "ospf6",
        "52": "swap-usage",
        "53": "discovery-consolidator",
        "54": "discovery-collector",
        "55": "discovery-capacity",
        "56": "threat-protection",
        "57": "cloud-api",
        "58": "threat-analytics",
        "59": "taxii",
    }

    map_status_id = {
        "1": "working",
        "2": "warning",
        "3": "failed",
        "4": "inactive",
        "5": "unknown",
    }

    parsed = {}
    for _node, service_id, status_id, description in info:
        status = map_status_id.get(status_id, "unexpected")
        if status in ["inactive", "unknown"]:
            continue

        service_name = map_service_ids[service_id]
        service_nodes = parsed.setdefault(service_name, [])
        service_nodes.append((status, description))

    return parsed


def inventory_infoblox_services(parsed):
    for service_name in parsed:
        yield service_name, None


def check_infoblox_services(item, _no_params, parsed):
    if item in parsed:
        map_status = {
            "working": 0,
            "warning": 1,
            "failed": 2,
            "unexpected": 3,
        }
        node_data = parsed[item]

        # For a clustered service the best state is used
        min_status, min_descr = node_data[0]
        min_state = map_status[min_status]

        for status, descr in node_data[1:]:
            state = map_status[status]
            if state < min_state:
                min_state, min_status, min_descr = state, status, descr

        infotext = "Status: %s" % min_status
        if min_descr:
            infotext += " (%s)" % min_descr

        return min_state, infotext


#.
#   .--statistics----------------------------------------------------------.
#   |                    _        _   _     _   _                          |
#   |                ___| |_ __ _| |_(_)___| |_(_) ___ ___                 |
#   |               / __| __/ _` | __| / __| __| |/ __/ __|                |
#   |               \__ \ || (_| | |_| \__ \ |_| | (__\__ \                |
#   |               |___/\__\__,_|\__|_|___/\__|_|\___|___/                |
#   |                                                                      |
#   '----------------------------------------------------------------------'


def inventory_infoblox_statistics(info):
    return [(None, None)]


def check_infoblox_statistics(ty, stats):
    texts = {}
    perfdata = []
    for what, what_val, what_textfield, what_info in stats:
        texts.setdefault(what_textfield, [])
        texts[what_textfield].append("%d %s" % (what_val, what_info))
        perfdata.append(("%s_%s" % (ty, what), what_val))

    infotexts = []
    for what, entries in texts.items():
        infotexts.append("%s: %s" % (what, ", ".join(entries)))

    return 0, " - ".join(infotexts), perfdata
