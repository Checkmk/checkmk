#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def parse_innovaphone_priports_l1(info):
    parsed = {}
    for item, state_s, sigloss_s, slip_s in info:
        parsed[item] = {
            "state": saveint(state_s),
            "sigloss": saveint(sigloss_s),
            "slip": saveint(slip_s),
        }
    return parsed


def inventory_innovaphone_priports_l1(parsed):
    return [(item, {
        'err_slip_count': data["slip"]
    }) for item, data in parsed.items() if data["state"] != 1]


@get_parsed_item_data
def check_innovaphone_priports_l1(item, params, data):
    states = {
        1: "Down",
        2: "UP",
    }

    l1state = data["state"]
    yield 0 if l1state == 2 else 2, "Current state is %s" % states[l1state]

    l1sigloss = data["sigloss"]
    siglos_per_sec = get_rate("innovaphone_priports_l1." + item, time.time(), l1sigloss)
    if siglos_per_sec > 0:
        yield 2, "Signal loss is %.2f/sec" % siglos_per_sec

    l1slip = data["slip"]
    if l1slip > params.get('err_slip_count', 0):
        yield 2, "Slip error count at %d" % l1slip


check_info["innovaphone_priports_l1"] = {
    "parse_function": parse_innovaphone_priports_l1,
    "inventory_function": inventory_innovaphone_priports_l1,
    "check_function": check_innovaphone_priports_l1,
    "service_description": "Port L1 %s",
    "snmp_info": (
        ".1.3.6.1.4.1.6666.1.2.1",
        [
            1,  #l1PriLabel
            2,  #l1PriState
            5,  #l1PriErrSigLoss
            9,  #l1PriErrSlip
        ]),
    "snmp_scan_function": lambda oid: oid('.1.3.6.1.2.1.1.2.0') == ".1.3.6.1.4.1.6666",
}
