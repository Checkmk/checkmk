#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2016             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

#TODO Cleanup the whole status text mapping in
# ipmi_common.include, ipmi_sensors.include, ipmi


def ipmi_ignore_entry(name, status_txt, rules):
    if status_txt is None:
        return True
    ignored_sensors = rules.get("ignored_sensors", [])
    ignored_sensorstates = rules.get("ignored_sensorstates", [])
    for cmp_status in ignored_sensorstates:
        if status_txt.startswith(cmp_status):
            return True
    for e in ignored_sensors:
        if name.startswith(e):
            return True
    return False


def check_ipmi_common(item, params, parsed, what, status_txt_mapping):
    if params is None:
        params = {}

    if item == "Summary" or item == "Summary FreeIPMI":
        return check_ipmi_common_summarized(params, parsed, status_txt_mapping)
    elif item in parsed:
        return check_ipmi_common_detailed(item, params, parsed[item], what, status_txt_mapping)


def ipmi_common_check_levels(sensorname, val, params):
    warn_texts, crit_texts = [], []
    for this_sensorname, levels in params.get("numerical_sensor_levels", []):
        if this_sensorname == sensorname and levels and val is not None:
            if levels.get("lower"):
                warn, crit = levels["lower"]
                if val < crit:
                    crit_texts.append("%s %s (warn/crit below %s/%s)" %
                                      (sensorname, val, warn, crit))
                elif val < warn:
                    warn_texts.append("%s %s (warn/crit below %s/%s)" %
                                      (sensorname, val, warn, crit))
            if levels.get("upper"):
                warn, crit = levels["upper"]
                if val >= crit:
                    crit_texts.append("%s %s (warn/crit at %s/%s)" % (sensorname, val, warn, crit))
                elif val >= warn:
                    warn_texts.append("%s %s (warn/crit at %s/%s)" % (sensorname, val, warn, crit))
            break
    return warn_texts, crit_texts


def check_ipmi_common_detailed(item, params, data, what, status_txt_mapping):
    val = data["value"]
    unit = data["unit"]
    status_txt = data["status_txt"]
    crit_low = data["crit_low"]
    warn_low = data["warn_low"]
    warn_high = data["warn_high"]
    crit_high = data["crit_high"]

    # stay compatible with older versions
    infotext = status_txt
    perfdata = []
    if val is not None:
        infotext += ", %s" % val
        if unit is not None:
            if unit == "%":
                infotext += unit
            else:
                infotext += " %s" % unit

        if what == "ipmitool":
            old_perf_val = str(val)
            if unit is not None:
                old_perf_val += unit
            perfdata = [(item, old_perf_val, warn_high, crit_high)]

        elif what == "freeipmi" and \
             ("temperature" in item.lower() or "temp" in item.lower() or unit == 'C'):
            # Do not save performance data for FANs. This produces
            # much data and is - in my opinion - useless.
            perfdata = [("value", val, None, crit_high)]

    warn_texts = []
    crit_texts = []
    state = status_txt_mapping(status_txt)
    if state:
        for ty, warn, crit in [("below", warn_low, crit_low), ("at", warn_high, crit_high)]:
            if warn is not None and crit is None:
                warn_texts.append("warn %s %s" % (ty, warn))
            elif warn is not None and crit is not None:
                crit_texts.append("warn/crit %s %s/%s" % (ty, warn, crit))
            elif warn is None and crit is not None:
                crit_texts.append("crit %s %s" % (ty, crit))

    for wato_status_txt, wato_status in params.get("sensor_states", []):
        if status_txt.startswith(wato_status_txt):
            state = wato_status
            break

    these_warn_texts, these_crit_texts = ipmi_common_check_levels(item, val, params)
    warn_texts += these_warn_texts
    crit_texts += these_crit_texts

    levelsinfo = ""
    if crit_texts:
        state = 2
        levelsinfo = " (%s)" % ", ".join(crit_texts)
    elif warn_texts:
        state = 1
        levelsinfo = " (%s)" % ", ".join(warn_texts)

    # Sensor reports 'nc' ('non critical'), so we set the state to WARNING
    # but only if user thresholds are not exceeded to CRITICAL
    if status_txt.startswith('nc') and not these_crit_texts:
        state = 1

    return state, "Status: %s%s" % (infotext, levelsinfo), perfdata


def check_ipmi_common_summarized(params, parsed, status_txt_mapping):
    states = [0]
    warn_texts = []
    crit_texts = []
    ok_texts = []
    skipped_texts = []
    ambient_count = 0
    ambient_sum = 0.0

    for sensorname, data in parsed.items():
        val = data["value"]
        unit = data["unit"]
        status_txt = data["status_txt"]

        # Skip datasets which have no valid data (zero value, no unit and state nc)
        if ipmi_ignore_entry(sensorname, status_txt, params) or \
           (val == '0.000' and unit is None and status_txt.startswith('nc')):
            skipped_texts.append("%s (%s)" % (sensorname, status_txt))
            continue

        sensorstate = status_txt_mapping(status_txt)
        for wato_status_txt, wato_status in params.get("sensor_states", []):
            if status_txt.startswith(wato_status_txt):
                sensorstate = wato_status
                break

        these_warn_texts, these_crit_texts = ipmi_common_check_levels(sensorname, val, params)
        warn_texts += these_warn_texts
        crit_texts += these_crit_texts

        infotext = "%s (%s)" % (sensorname, status_txt)
        if sensorstate == 1:
            warn_texts.append(infotext)
        elif sensorstate == 2:
            crit_texts.append(infotext)
        else:
            ok_texts.append(infotext)

        states.append(sensorstate)

        if "amb" in sensorname or "Ambient" in sensorname:
            try:
                ambient_count += 1
                ambient_sum += float(val)
            except (TypeError, ValueError):
                pass

    if ambient_count > 0:
        perfdata = [("ambient_temp", ambient_sum / ambient_count)]  # fixed: true-division
    else:
        perfdata = []

    infotexts = ["%d sensors" % len(parsed)]
    for title, texts, extrainfo, text_state in [("OK", ok_texts, "", 0),
                                                ("WARN", warn_texts, "(!)", 1),
                                                ("CRIT", crit_texts, "(!!)", 2),
                                                ("skipped", skipped_texts, "", 0)]:
        if len(parsed) == len(texts):
            # Everything OK
            infotext = "%d sensors %s" % (len(parsed), title)
            if extrainfo:
                infotext += ": %s%s" % (", ".join(texts), extrainfo)
            infotexts = [infotext]
            break

        elif texts:
            infotext = "%d %s" % (len(texts), title)
            if extrainfo:
                infotext += ": %s%s" % (", ".join(texts), extrainfo)
            infotexts.append(infotext)

            if text_state:
                states.append(text_state)

    return max(states), ' - '.join(infotexts), perfdata
