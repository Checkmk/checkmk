#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2019             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

#<<<jenkins_nodes>>>
# [{"displayName": "master", "description": "the master Jenkins node",
# "temporarilyOffline": false, "monitorData":
# {"hudson.node_monitors.SwapSpaceMonitor": {"totalPhysicalMemory":
# 67429339136, "availableSwapSpace": 47768457216, "_class":
# "hudson.node_monitors.SwapSpaceMonitor$MemoryUsage2",
# "availablePhysicalMemory": 13439528960, "totalSwapSpace": 64000876544},
# "hudson.node_monitors.ClockMonitor": {"diff": 0, "_class":
# "hudson.util.ClockDifference"},
# "hudson.node_monitors.DiskSpaceMonitor": {"size": 332634664960,
# "timestamp": 1566969226922, "_class":
# "hudson.node_monitors.DiskSpaceMonitorDescriptor$DiskSpace",
# "path": "/var/lib/jenkins"},
# "hudson.node_monitors.TemporarySpaceMonitor": {"size": 23989067776,
# "timestamp": 1566969227236, "_class":
# "hudson.node_monitors.DiskSpaceMonitorDescriptor$DiskSpace",
# "path": "/tmp"}, "hudson.node_monitors.ResponseTimeMonitor":
# {"timestamp": 1566969226923, "average": 0, "_class":
# "hudson.node_monitors.ResponseTimeMonitor$Data"},
# "hudson.node_monitors.ArchitectureMonitor": "Linux (amd64)"},
# "numExecutors": 10, "idle": true, "offlineCause": null, "offline": false,
# "_class": "hudson.model.Hudson$MasterComputer", "jnlpAgent": false},
# {"displayName": "Windows", "description": "Name: MY-NODE",
# "temporarilyOffline": false, "monitorData":
# {"hudson.node_monitors.SwapSpaceMonitor": {"totalPhysicalMemory":
# 17179332608, "availableSwapSpace": 14135590912, "_class":
# "hudson.node_monitors.SwapSpaceMonitor$MemoryUsage2",
# "availablePhysicalMemory": 9060417536, "totalSwapSpace":
# 22548041728}, "hudson.node_monitors.ClockMonitor": {"diff": -4,
# "_class": "hudson.util.ClockDifference"},
# "hudson.node_monitors.DiskSpaceMonitor": {"size": 14138306560,
# "timestamp": 1566969226949, "_class":
# "hudson.node_monitors.DiskSpaceMonitorDescriptor$DiskSpace",
# "path": "C:\\"}, "hudson.node_monitors.TemporarySpaceMonitor":
# {"size": 14138306560, "timestamp": 1566969227263, "_class":
# "hudson.node_monitors.DiskSpaceMonitorDescriptor$DiskSpace",
# "path": "C:\\Windows\\Temp"},
# "hudson.node_monitors.ResponseTimeMonitor": {"timestamp":
# 1566969226952, "average": 27, "_class":
# "hudson.node_monitors.ResponseTimeMonitor$Data"},
# "hudson.node_monitors.ArchitectureMonitor": "Windows Server 2010
# (x86)"}, "numExecutors": 1, "idle": true, "offlineCause": null,
# "offline": false, "_class": "hudson.slaves.SlaveComputer",
# "jnlpAgent": true}, {"displayName": "Windows",
# "description": "vM", "temporarilyOffline": false,
# "monitorData": {"hudson.node_monitors.SwapSpaceMonitor": null,
# "hudson.node_monitors.ClockMonitor": null,
# "hudson.node_monitors.DiskSpaceMonitor": null,
# "hudson.node_monitors.TemporarySpaceMonitor": null,
# "hudson.node_monitors.ResponseTimeMonitor": null,
# "hudson.node_monitors.ArchitectureMonitor": null},
# "numExecutors": 1, "idle": true, "offlineCause": null,
# "offline": true, "_class": "hudson.slaves.SlaveComputer",
# "jnlpAgent": true}]

import json

MAP_NODE_STATES = {
    True: "yes",
    False: "no",
}


def parse_jenkins_nodes(info):
    parsed = {}

    for line in info:
        node_detail = json.loads(line[0])

        for node in node_detail:
            try:
                parsed.setdefault(node["displayName"], []).append(node)
            except KeyError:
                pass

    return parsed


factory_settings["jenkins_nodes_default_levels"] = {
    "jenkins_offline": 2,
}


@get_parsed_item_data
def check_jenkins_nodes(item, params, item_data):
    for node in item_data:

        for key, infotext in [
            ("description", "Description"),
            ("jnlpAgent", "Is JNLP agent"),
            ("idle", "Is idle"),
        ]:
            data = node.get(key)

            # description can be an empty string
            if data is not None and data != "":
                if key != "description":
                    data = MAP_NODE_STATES[data]

                yield 0, "%s: %s" % (infotext, data)

        exec_key = "numExecutors"
        exec_data = node.get(exec_key)

        if exec_data is not None:
            exec_name = "jenkins_%s" % exec_key.lower()

            yield check_levels(exec_data,
                               exec_name, (None, None) + params.get(exec_name, (None, None)),
                               human_readable_func=int,
                               infoname="Number of executers")

        state = 0
        offline_state = node.get("offline")

        if offline_state:
            state = params["jenkins_offline"]

        yield state, "Offline: %s" % MAP_NODE_STATES[offline_state]

        for key, column, value, info, ds_key, hr_func in [
            ("monitorData", "hudson.node_monitors.ResponseTimeMonitor", "average",
             "Average response time", "avg_response_time", get_age_human_readable),
            ("monitorData", "hudson.node_monitors.ClockMonitor", "diff", "Clock difference",
             "jenkins_clock", get_age_human_readable),
            ("monitorData", "hudson.node_monitors.TemporarySpaceMonitor", "size", "Free temp space",
             "jenkins_temp", get_bytes_human_readable)
        ]:

            if params.get(ds_key) is not None and value == "size":
                # lower level checking
                params[ds_key] = (None, None) + (params[ds_key][0] * 1024 * 1024,
                                                 params[ds_key][1] * 1024 * 1024)

            try:
                node_data = node[key][column][value]
            except (AttributeError, KeyError, TypeError):
                pass
            else:
                if value in ["average", "diff"]:
                    # ms in s
                    node_data = node_data / 1000.0

                yield check_levels(node_data,
                                   ds_key,
                                   params.get(ds_key),
                                   human_readable_func=hr_func,
                                   infoname=info)


check_info["jenkins_nodes"] = {
    "parse_function": parse_jenkins_nodes,
    "check_function": check_jenkins_nodes,
    'inventory_function': discover(),
    'default_levels_variable': "jenkins_nodes_default_levels",
    "service_description": "Jenkins Node %s",
    "has_perfdata": True,
    "group": "jenkins_nodes",
}
