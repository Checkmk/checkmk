#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

#<<<jenkins_nodes>>>
# [[u'[{"displayName": "master", "description": "the master Jenkins node",
# "temporarilyOffline": false, "monitorData":
# {"hudson.node_monitors.SwapSpaceMonitor": {"totalPhysicalMemory":
# 67429359616, "availableSwapSpace": 59097583616, "_class":
# "hudson.node_monitors.SwapSpaceMonitor$MemoryUsage2",
# "availablePhysicalMemory": 4450242560, "totalSwapSpace": 64000876544},
# "hudson.node_monitors.ClockMonitor": {"diff": 0, "_class":
# "hudson.util.ClockDifference"}, "hudson.node_monitors.DiskSpaceMonitor":
# {"size": 290845855744, "timestamp": 1573468791686, "_class":
# "hudson.node_monitors.DiskSpaceMonitorDescriptor$DiskSpace", "path":
# "/var/lib/jenkins"}, "hudson.node_monitors.TemporarySpaceMonitor": {"size":
# 32569888768, "timestamp": 1573468792277, "_class":
# "hudson.node_monitors.DiskSpaceMonitorDescriptor$DiskSpace", "path": "/tmp"},
# "hudson.node_monitors.ResponseTimeMonitor": {"timestamp": 1573468791687,
# "average": 0, "_class": "hudson.node_monitors.ResponseTimeMonitor$Data"},
# "hudson.node_monitors.ArchitectureMonitor": "Linux (amd64)"},
# "assignedLabels": [{"busyExecutors": 3, "idleExecutors": 17},
# {"busyExecutors": 3, "idleExecutors": 17}], "numExecutors": 20, "idle":
# false, "offlineCause": null, "offline": false, "_class":
# "hudson.model.Hudson$MasterComputer", "jnlpAgent": false}, {"displayName":
# "Windows", "description": "Name: MYNAME, IP-Address: 1.1.1.1",
# "temporarilyOffline": false, "monitorData":
# {"hudson.node_monitors.SwapSpaceMonitor": {"totalPhysicalMemory":
# 17179332608, "availableSwapSpace": 8569982976, "_class":
# "hudson.node_monitors.SwapSpaceMonitor$MemoryUsage2",
# "availablePhysicalMemory": 5656227840, "totalSwapSpace": 22548041728},
# "hudson.node_monitors.ClockMonitor": {"diff": 8, "_class":
# "hudson.util.ClockDifference"}, "hudson.node_monitors.DiskSpaceMonitor":
# {"size": 15085674496, "timestamp": 1573468791711, "_class":
# "hudson.node_monitors.DiskSpaceMonitorDescriptor$DiskSpace", "path":
# "C:\\\\"}, "hudson.node_monitors.TemporarySpaceMonitor": {"size":
# 15085674496, "timestamp": 1573468792334, "_class":
# "hudson.node_monitors.DiskSpaceMonitorDescriptor$DiskSpace", "path":
# "C:\\\\Windows\\\\Temp"}, "hudson.node_monitors.ResponseTimeMonitor":
# {"timestamp": 1573468791722, "average": 35, "_class":
# "hudson.node_monitors.ResponseTimeMonitor$Data"},
# "hudson.node_monitors.ArchitectureMonitor": "Windows Server"},
# "assignedLabels": [{"busyExecutors": 0, "idleExecutors": 1},
# {"busyExecutors": 0, "idleExecutors": 1}], "numExecutors": 1, "idle": true,
# "offlineCause": null, "offline": false, "_class":
# "hudson.slaves.SlaveComputer", "jnlpAgent": true}]']]

import json

MAP_NODE_STATES = {
    True: "yes",
    False: "no",
}


def parse_jenkins_nodes(info):
    parsed = {}

    for line in info:
        node_detail = json.loads(line[0])

        for node in node_detail:
            try:
                parsed.setdefault(node["displayName"], []).append(node)
            except KeyError:
                pass

    return parsed


factory_settings["jenkins_nodes_default_levels"] = {
    "jenkins_offline": 2,
}


def inventory_jenkins_nodes(parsed):
    if parsed:
        for item, values in parsed.items():
            for line in values:
                label_data = line.get("assignedLabels")
                if label_data is None:
                    continue

                service_labels = []
                for label in label_data:
                    label_name = label.get("name")
                    if label_name is None:
                        continue

                    if label_name != item:
                        service_labels.append(
                            ServiceLabel('cmk/jenkins_node_label_%s' % label_name, 'yes'))

            yield Service(item=item, parameters={}, service_labels=service_labels)


@get_parsed_item_data
def check_jenkins_nodes(item, params, item_data):
    for node in item_data:

        node_desc = node.get("description")
        if node_desc and node_desc is not None:
            yield 0, "Description: %s" % node_desc.title()

        for key, infotext in [
            ("jnlpAgent", "Is JNLP agent"),
            ("idle", "Is idle"),
        ]:
            data = node.get(key)

            # description can be an empty string
            if data is not None and data != "":
                if key != "description":
                    data = MAP_NODE_STATES[data]

                yield 0, "%s: %s" % (infotext, data)

        exec_key = "numExecutors"
        exec_data = node.get(exec_key)

        if exec_data is not None:
            exec_name = "jenkins_%s" % exec_key.lower()

            yield check_levels(exec_data,
                               "jenkins_num_executors",
                               (None, None) + params.get(exec_name, (None, None)),
                               human_readable_func=int,
                               infoname="Total number of executors")

        for key, infotext in [
            ("busyExecutors", "Number of busy executors"),
            ("idleExecutors", "Number of idle executors"),
        ]:

            exec_label_data = node.get("assignedLabels")

            if exec_label_data is None:
                continue

            for executor in exec_label_data:
                # list of two dicts like [{"busyExecutors": 0,
                # "idleExecutors": 1}, {"busyExecutors": 0,
                # "idleExecutors": 1}], we only need one entry here
                executors = executor.get(key)
                break

            if executors is None:
                continue

            executor_name = "jenkins_%s" % key.lower()

            yield check_levels(executors,
                               "jenkins_%s_executors" % key[0:4],
                               params.get(executor_name),
                               human_readable_func=int,
                               infoname=infotext)

        state = 0
        offline_state = node.get("offline")

        # get labels for each node
        labels_data = node.get("assignedLabels")
        label_collection = ""
        if labels_data is not None:
            for labels in labels_data:
                label_name = labels.get("name")
                if label_name is not None and label_name != item:
                    label_collection += " %s" % label_name

        mode = "Unknown"
        mode_state = 3
        mode_infotext = "Mode: "
        try:
            mode = node["assignedLabels"][0]["nodes"][0]["mode"]
            mode_state = 0
        except (KeyError, ValueError):
            pass

        mode_infotext += "%s " % mode.title()

        if mode == "EXCLUSIVE" and label_collection:
            mode_infotext += "(Labels:%s)" % label_collection

        mode_expected = params.get("jenkins_mode")
        if params.get("jenkins_mode") is not None:
            if mode_expected != mode:
                mode_state = 2
                mode_infotext += " (expected: %s)" % mode_expected.title()

        yield mode_state, mode_infotext

        if offline_state:
            state = params["jenkins_offline"]

        yield state, "Offline: %s" % MAP_NODE_STATES[offline_state]

        for key, column, value, info, ds_key, hr_func in [
            ("monitorData", "hudson.node_monitors.ResponseTimeMonitor", "average",
             "Average response time", "avg_response_time", get_age_human_readable),
            ("monitorData", "hudson.node_monitors.ClockMonitor", "diff", "Clock difference",
             "jenkins_clock", get_age_human_readable),
            ("monitorData", "hudson.node_monitors.TemporarySpaceMonitor", "size", "Free temp space",
             "jenkins_temp", get_bytes_human_readable)
        ]:

            if params.get(ds_key) is not None and value == "size":
                # lower level checking
                params[ds_key] = (None, None) + (params[ds_key][0] * 1024 * 1024,
                                                 params[ds_key][1] * 1024 * 1024)

            try:
                node_data = node[key][column][value]
            except (AttributeError, KeyError, TypeError):
                pass
            else:
                if value in ["average", "diff"]:
                    # ms in s
                    node_data = node_data / 1000.0

                yield check_levels(node_data,
                                   ds_key,
                                   params.get(ds_key),
                                   human_readable_func=hr_func,
                                   infoname=info)


check_info["jenkins_nodes"] = {
    "parse_function": parse_jenkins_nodes,
    "check_function": check_jenkins_nodes,
    'inventory_function': inventory_jenkins_nodes,
    'default_levels_variable': "jenkins_nodes_default_levels",
    "service_description": "Jenkins Node %s",
    "has_perfdata": True,
    "group": "jenkins_nodes",
}
