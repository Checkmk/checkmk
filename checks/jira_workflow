#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2019             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# <<<jira_workflow>>>
# {'my_project': {'in progress': 29}}

import json


def parse_jira_workflow(info):
    parsed = {}

    for line in info:
        projects = json.loads(" ".join(line))

        for project in projects:

            workflows = projects.get(project)
            if workflows is None:
                continue

            for workflow in workflows:
                issue_count = workflows.get(workflow)
                if issue_count is None:
                    continue

                try:
                    parsed.setdefault("%s/%s" % (project.title(), workflow.title()),
                                      {}).update({workflow: issue_count})
                except KeyError:
                    pass

    return parsed


@get_parsed_item_data
def check_jira_workflow(item, params, item_data):
    if not item_data:
        return

    msg_error = item_data.get("error")
    if msg_error is not None:
        yield 2, "Jira error while searching (see long output for details)\n%s" % msg_error
        return

    for _workflow, issue_count in item_data.items():

        issue_nr_levels = params.get('workflow_count_upper', (None, None))
        issue_nr_levels_lower = params.get('workflow_count_lower', (None, None))
        yield check_levels(issue_count,
                           "jira_count",
                           issue_nr_levels + issue_nr_levels_lower,
                           human_readable_func=int,
                           infoname="Total number of issues")


check_info["jira_workflow"] = {
    "parse_function": parse_jira_workflow,
    "check_function": check_jira_workflow,
    'inventory_function': discover(),
    "service_description": "Jira Workflow %s",
    "has_perfdata": True,
    "group": "jira_workflow",
}
