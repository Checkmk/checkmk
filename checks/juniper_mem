#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# .1.3.6.1.4.1.2636.3.1.13.1.5.9.1.0.0 Routing Engine 0 --> JUNIPER-MIB::jnxOperatingDescr.9.1.0.0
# .1.3.6.1.4.1.2636.3.1.13.1.5.9.2.0.0 Routing Engine 1 --> JUNIPER-MIB::jnxOperatingDescr.9.2.0.0
# .1.3.6.1.4.1.2636.3.1.13.1.11.9.1.0.0 37 --> JUNIPER-MIB::jnxOperatingBuffer.9.1.0.0
# .1.3.6.1.4.1.2636.3.1.13.1.11.9.2.0.0 36 --> JUNIPER-MIB::jnxOperatingBuffer.9.2.0.0


def inventory_juniper_mem(info):
    return [(line[0], "juniper_mem_default_levels") for line in info]


def check_juniper_mem(item, params, info):
    for descr, memory_str in info:
        if descr == item:
            memory_percent = float(memory_str)
            infotext = "%s%% used" % memory_str
            warn, crit = params
            if memory_percent >= crit:
                state = 2
            elif memory_percent >= warn:
                state = 1
            else:
                state = 0

            if state > 0:
                infotext += " (warn/crit at %.1f%%/%.1f%%)" % (warn, crit)

            return state, infotext, [("mem_used_percent", memory_percent, warn, crit, 0, 100.0)]


check_info['juniper_mem'] = {
    'inventory_function': inventory_juniper_mem,
    'check_function': check_juniper_mem,
    'service_description': 'Memory %s',
    'snmp_scan_function': lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.2636.1.1.1"
                                                                          ),
    'snmp_info': (
        ".1.3.6.1.4.1.2636.3.1.13.1",
        [
            "5.9",  # jnxOperatingDescr
            "11.9",  # jnxOperatingBuffer
        ]),
    'group': 'juniper_mem_modules',
    'has_perfdata': True,
    'includes': ["juniper_mem.include"],
}
