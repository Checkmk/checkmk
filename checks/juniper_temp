#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2015             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# .1.3.6.1.4.1.2636.3.1.13.1.5.7.1.0.0 FPC: EX3300 48-Port @ 0/*/* --> SNMPv2-SMI::enterprises.2636.3.1.13.1.5.7.1.0.0
# .1.3.6.1.4.1.2636.3.1.13.1.5.7.2.0.0 FPC: EX3300 48-Port @ 1/*/* --> SNMPv2-SMI::enterprises.2636.3.1.13.1.5.7.2.0.0
# .1.3.6.1.4.1.2636.3.1.13.1.7.7.1.0.0 45 --> SNMPv2-SMI::enterprises.2636.3.1.13.1.7.7.1.0.0
# .1.3.6.1.4.1.2636.3.1.13.1.7.7.2.0.0 43 --> SNMPv2-SMI::enterprises.2636.3.1.13.1.7.7.2.0.0

factory_settings["juniper_temp_default_levels"] = {
    "levels": (55, 60),  # Just an assumption based on observed real temperatures
}


def parse_juniper_temp(info):
    parsed = {}
    for description, reading_str in info:
        temperature = float(reading_str)
        if temperature > 0:
            description = description.replace(":", "") \
                                     .replace("/*", "") \
                                     .replace("@ ", "") \
                                     .strip()
            parsed[description] = temperature
    return parsed


def inventory_juniper_temp(parsed):
    return [(description, {}) for description in parsed]


def check_juniper_temp(item, params, parsed):
    if item in parsed:
        return check_temperature(parsed[item], params, "juniper_temp_%s" % item)


check_info['juniper_temp'] = {
    'parse_function': parse_juniper_temp,
    'inventory_function': inventory_juniper_temp,
    'check_function': check_juniper_temp,
    'service_description': 'Temperature %s',
    'has_perfdata': True,
    "snmp_scan_function": lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(
        ".1.3.6.1.4.1.2636.1.1.1.2") or oid(".1.3.6.1.2.1.1.2.0").startswith(
            ".1.3.6.1.4.1.2636.1.1.1.4"),
    'snmp_info': (
        ".1.3.6.1.4.1.2636.3.1.13.1",
        [
            "5.7",  # jnxOperatingDescr
            "7.7",  # jnxOperatingTemp
        ]),
    'group': 'temperature',
    'default_levels_variable': "juniper_temp_default_levels",
    'includes': ["temperature.include"],
}
