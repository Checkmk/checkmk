#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

juniper_trpz_cpu_util_default_levels = (80.0, 90.0)


def inventory_juniper_trpz_cpu_util(info):
    return [(None, "juniper_trpz_cpu_util_default_levels")]


def check_juniper_trpz_cpu_util(_no_item, params, info):
    utilc, util1, util5 = map(savefloat, info[0])

    warn, crit = params.get("util", (None, None)) if isinstance(params, dict) else params

    label1, label5 = "", ""
    state = 0

    if util1 >= crit:
        state = 2
        label1 = "(!!)"
    elif util1 >= warn:
        state = 1
        label1 = "(!)"

    if util5 >= crit:
        state = 2
        label5 = "(!!)"
    elif util5 >= warn:
        state = max(state, 1)
        label5 = "(!)"

    perf = [
        ("util1", util1, warn, crit),
        ("util5", util5, warn, crit),
        ("utilc", utilc),
    ]

    message = "%d%% current, %d%% 1min%s, %d%% 5min%s" % (utilc, util1, label1, util5, label5)

    return state, message, perf


check_info["juniper_trpz_cpu_util"] = {
    "check_function": check_juniper_trpz_cpu_util,
    "inventory_function": inventory_juniper_trpz_cpu_util,
    "group": "cpu_utilization",
    "service_description": "CPU utilization",
    "has_perfdata": True,
    "snmp_scan_function": lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(
        ".1.3.6.1.4.1.14525.3.1.6"),
    # see: http://www.observium.org/svn/observer/trunk/mibs/trapeze/trpz-system-mib.my
    "snmp_info": (
        ".1.3.6.1.4.1.14525.4.8.1.1.11",
        [
            1,  # trpzSysCpuInstantLoad
            2,  # trpzSysCpuLastMinuteLoad
            3,  # trpzSysCpuLast5MinutesLoad
        ])
}
