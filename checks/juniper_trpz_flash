#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

juniper_trpz_flash_default_levels = (90.0, 95.0)


def inventory_juniper_trpz_flash(info):
    return [(None, "juniper_trpz_flash_default_levels")]


def check_juniper_trpz_flash(_no_item, params, info):
    warn, crit = params
    used, total = map(savefloat, info[0])
    message = "Used: %s of %s " % (get_bytes_human_readable(used), get_bytes_human_readable(total))
    perc_used = (used / total) * 100  # fixed: true-division
    if isinstance(crit, float):
        a_warn = (warn / 100.0) * total
        a_crit = (crit / 100.0) * total
        perf = [("used", used, a_warn, a_crit, 0, total)]
        levels = "Levels Warn/Crit are (%.2f%%, %.2f%%)" % (warn, crit)
        if perc_used > crit:
            return 2, message + levels, perf
        if perc_used > warn:
            return 1, message + levels, perf
    else:
        perf = [("used", used, warn, crit, 0, total)]
        levels = "Levels Warn/Crit are (%.2f, %.2f)" % \
        ( get_bytes_human_readable(warn), get_bytes_human_readable(crit))
        if used > crit:
            return 2, message + levels, perf
        if used > warn:
            return 1, message + levels, perf
    return 0, message, perf


check_info["juniper_trpz_flash"] = {
    "check_function": check_juniper_trpz_flash,
    "inventory_function": inventory_juniper_trpz_flash,
    "service_description": "Flash",
    "has_perfdata": True,
    "snmp_info": (
        ".1.3.6.1.4.1.14525.4.8.1.1",
        [
            3,  #Flash used
            4,  #Flash_total
        ]),
    "snmp_scan_function": lambda oid: oid('.1.3.6.1.2.1.1.2.0') == ".1.3.6.1.4.1.14525.3.1.6",
    "group": "general_flash_usage",
}
