#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2019             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

import itertools

_flatten = itertools.chain.from_iterable


def _has_tls(path, hosts):
    """Return True if path is available over TLS, otherwise return False."""
    return path.split("/", 1)[0] in _flatten(hosts.itervalues())


def _iter_backends(parsed):
    for data in sorted(parsed.itervalues()):
        for backend in data['backends']:
            yield backend, data


def inventory_k8s_ingress_infos(parsed):
    for backend, _ in _iter_backends(parsed):
        yield HostLabel(u'cmk/kubernetes_object', u'ingress')
        yield (backend[0], None)


def check_k8s_ingress_infos(item, params, parsed):
    for backend, data in _iter_backends(parsed):
        if backend[0] != item:
            continue
        ports = [backend[-1]]
        if _has_tls(backend[0], data['hosts']):
            ports.append(443)
        yield 0, u"Ports: %s" % ", ".join(map(str, ports))
        yield 0, u"Service: %s:%s" % (backend[1], backend[2])


check_info['k8s_ingress_infos'] = {
    'parse_function': parse_k8s,
    'inventory_function': inventory_k8s_ingress_infos,
    'check_function': check_k8s_ingress_infos,
    'service_description': "Ingress %s",
    'includes': ['k8s.include'],
}
