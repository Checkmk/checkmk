#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2018             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def discover_k8s_service_port(parsed):
    if parsed:
        yield HostLabel(u'cmk/kubernetes_object', u'service')
        for item in parsed:
            yield (item, {})


def k8s_check_value(value, expected, infotext_template):
    state = 0
    infotext = infotext_template % value
    if expected is not None and value != expected:
        state = 2
        infotext += ' (expected %s)' % expected
    return state, infotext


@get_parsed_item_data
def check_k8s_service_port(item, params, parsed):
    yield k8s_check_value(
        parsed['port'],
        params.get('port'),
        'Port: %s',
    )
    yield k8s_check_value(
        parsed['target_port'],
        params.get('target_port'),
        'Target port: %s',
    )

    if parsed['node_port']:
        yield k8s_check_value(
            parsed['node_port'],
            params.get('node_port'),
            'Node port: %s',
        )

    yield k8s_check_value(
        parsed['protocol'],
        params.get('protocol'),
        'Protocol: %s',
    )


check_info['k8s_service_port'] = {
    'parse_function': parse_k8s,
    'inventory_function': discover_k8s_service_port,
    'check_function': check_k8s_service_port,
    'service_description': 'Port %s',
    'group': 'k8s_port',
    'includes': ['k8s.include'],
}
