#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.


def discover_k8s_stats_network(parsed):
    # don't use the k8s check if the check_mk_agent delivers interface data
    parsed, lnx_info = parsed
    if lnx_info:
        return

    for key, value in parsed.items():
        if key != 'network':
            continue

        interfaces = {i.get('name') for i in value['interfaces']}
        for interface in interfaces:
            yield interface, {}


def discover_k8s_stats_fs(parsed):
    parsed, _ = parsed
    ignore_fs = ['tmpfs', 'rootfs']

    for key, value in parsed.items():
        if key != 'filesystem':
            continue

        devices = {disk.get('device') for disk in value}
        for device in devices:
            if (device in ignore_fs or device.startswith("/var/lib/docker/") or
                    device.startswith('overlay') or device == '/dev/shm'):
                continue
            yield device, {}


def k8s_network_err_pac(device, params, now):
    for name, mway, pway in [('Input', 'rx', 'in'), ('Output', 'tx', 'out')]:
        pac_rate = get_rate('if.%s.if_%s_pkts' % (device['name'], pway), now,
                            device['%s_packets' % mway])
        err_rate = get_rate('if.%s.if_%s_errors' % (device['name'], pway), now,
                            device['%s_errors' % mway])
        warn, crit = params.get('errors', (None, None))
        yield 0, '', [('if_%s_pkts' % pway, pac_rate), ('if_%s_errors' % pway, err_rate)]
        if isinstance(warn, float):
            try:
                err_perc = 100.0 * err_rate / (err_rate + pac_rate)
            except ZeroDivisionError:
                err_perc = 0

            yield check_levels(err_perc,
                               None, (warn, crit),
                               human_readable_func=get_percent_human_readable,
                               infoname="%s errors" % name)
        else:  # absolute levels or no levels
            yield check_levels(err_rate,
                               None, (warn, crit),
                               unit='1/s',
                               infoname="%s error rate" % name)


def check_k8s_stats_network(item, params, parsed):
    metrics, _ = parsed

    device = sum([
        collections.Counter(_get_device_counters(device))
        for device in metrics['network']['interfaces']
        if device.get('name') == item
    ], collections.Counter())

    now = metrics['timestamp']

    # Bandwidth
    for name, met, dsname in [('In', 'rx_bytes', 'in'), ('Out', 'tx_bytes', 'out')]:
        rate = get_rate('if.%s.%s' % (item, dsname), now, device[met])
        yield check_levels(rate,
                           dsname,
                           None,
                           unit='/s',
                           human_readable_func=get_bytes_human_readable,
                           infoname=name)

    # Errors / Packets
    for check_result in k8s_network_err_pac(device, params, now):
        yield check_result

    # Discards
    for name, met, dsname in [
        ('Input Discards', 'rx_dropped', 'if_in_discards'),
        ('Output Discards', 'tx_dropped', 'if_out_discards'),
    ]:
        rate = get_rate('if.%s.%s' % (item, dsname), now, device[met])
        yield check_levels(rate, dsname, params.get('discards'), unit='1/s', infoname=name)


def check_k8s_stats_fs(item, params, parsed):
    metrics, _ = parsed

    disk = sum([
        collections.Counter(_get_device_counters(device))
        for device in metrics['filesystem']
        if device.get('device') == item
    ], collections.Counter())

    yield df_check_filesystem_single(
        item,
        (disk['capacity'] / 1024.0) / 1024.0,
        (disk['available'] / 1024.0) / 1024.0,
        0,
        disk['inodes'],
        disk['inodes_free'],
        params,
    )


def _get_device_counters(device):
    return {k: v for k, v in device.items() if isinstance(v, (int, float))}


check_info['k8s_stats'] = {
    'parse_function': parse_k8s,
    'extra_sections': ['lnx_if'],
}

check_info['k8s_stats.network'] = {
    'inventory_function': discover_k8s_stats_network,
    'check_function': check_k8s_stats_network,
    'service_description': 'Interface %s',
    "has_perfdata": True,
    "group": "k8s_if",
    'includes': ['k8s.include'],
}

check_info['k8s_stats.fs'] = {
    'inventory_function': discover_k8s_stats_fs,
    'check_function': check_k8s_stats_fs,
    'service_description': 'Filesystem %s',
    "has_perfdata": True,
    "group": "filesystem",
    "default_levels_variable": "filesystem_default_levels",
    'includes': ['k8s.include', 'size_trend.include', 'df.include'],
}
