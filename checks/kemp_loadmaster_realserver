#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

def parse_kemp_loadmaster_realserver(info):
    vs_states = {
        "1": (0, 'in service'),
        "2": (2, 'out of service'),
        "3": (2, 'failed'),
        "4": (1, 'disabled'),
        "5": (1, 'sorry'),
        "6": (0, 'redirect'),
        "7": (2, 'error message'),
    }

    rs_states = {
        '1': (0, 'in service'),
        '2': (2, 'out of service'),
        '3': (2, 'failed'),
        '4': (1, 'disabled'),
    }

        
    section = {}

    for vs in info[1]:
        section[vs[0]] = {
            'name': vs[1],
            'state': vs_states.get(vs[2], (3, 'unknown state %s' % vs[2])),
            'rs': [],
        }

    for rs in info[0]:
        section[rs[1]]['rs'].append((rs[0], rs_states.get(rs[2], (3, 'unknown state %s' % rs[2]))))

    return section

def inventory_kemp_loadmaster_realserver(section):
    for vsid, vsdata in section.items():
        if vsdata['state'][1] not in ['disabled']:
            for rsip, (state, state_name) in vsdata['rs']:
                if state_name not in ['disabled']:
                    yield '%s %s' % (vsdata['name'], rsip), None

def check_kemp_loadmaster_realserver(item, _no_params, section):
    comps = item.split()
    vsname = " ".join(comps[:-1])
    ip = comps[-1]
    for vsid, vsdata in section.items():
        if vsdata['name'] == vsname:
            for rsip, (state, state_name) in vsdata['rs']:
                if rsip == ip:
                    yield state, "State: %s" % state_name

check_info["kemp_loadmaster_realserver"] = {
    "parse_function": parse_kemp_loadmaster_realserver,
    "inventory_function": inventory_kemp_loadmaster_realserver,
    "check_function": check_kemp_loadmaster_realserver,
    "service_description": "Real Server %s",
    "snmp_info": [(
        ".1.3.6.1.4.1.12196.13.2.1",
        [
            2,  # IP address: B100-MIB::rSip
            1,  # ID of virtual Service
            8,  # state: B100-MIB::rSstate
        ]),
                  (
        ".1.3.6.1.4.1.12196.13.1.1",
        [
            OID_END,
            13, # B100-MIB::vSname
            14, # B100-MIB::vSstate
        ]),
    ],

    "snmp_scan_function": lambda oid: oid(".1.3.6.1.2.1.1.2.0") in
                          [".1.3.6.1.4.1.12196.250.10", ".1.3.6.1.4.1.2021.250.10"],
}
