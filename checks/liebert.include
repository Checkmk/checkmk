#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2017             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def parse_liebert(info, type_func=None):
    if type_func is None:
        type_func = float

    parsed = {}
    used_names = set()

    def get_item_name(name):
        counter = 2
        new_name = name
        while True:
            if new_name in used_names:
                new_name = "%s %d" % (name, counter)
                counter += 1
            else:
                used_names.add(new_name)
                break
        return new_name

    for line in info:
        elements = zip(line[0::3], line[1::3], line[2::3])

        for element in elements:
            if not element[0]:
                continue
            name = get_item_name(element[0])
            try:
                parsed[name] = [type_func(element[1]), element[2]]
            except ValueError:
                continue

    return parsed


def parse_liebert_without_unit(info, type_func=None):
    if type_func is None:
        type_func = float

    parsed = {}
    used_names = set()

    def get_item_name(name):
        counter = 2
        new_name = name
        while True:
            if new_name in used_names:
                new_name = "%s %d" % (name, counter)
                counter += 1
            else:
                used_names.add(new_name)
                break
        return new_name

    parsed = {}

    for line in info:
        elements = zip(line[0::2], line[1::2])

        for element in elements:
            if not element[0]:
                continue
            name = get_item_name(element[0])
            try:
                parsed[name] = type_func(element[1])
            except ValueError:
                continue

    return parsed


def scan_liebert(oid):

    return oid('.1.3.6.1.2.1.1.2.0').startswith('.1.3.6.1.4.1.476.1.42')


def levels_liebert(value, warn, crit, sorting="upper"):
    state = 0
    if sorting == "upper":
        if value >= crit:
            state = 2
        elif value >= warn:
            state = 1
        else:
            state = 0
    elif sorting == "lower":
        if value <= crit:
            state = 2
        elif value <= warn:
            state = 1
        else:
            state = 0

    return state


def check_temp_unit(output):
    value = float(output[0])
    unit = output[1]
    if unit == "deg F":
        value = 5.0 / 9.0 * (value - 32)

    return value
