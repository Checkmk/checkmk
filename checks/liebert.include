#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.


def parse_liebert(info, type_func=None):
    if type_func is None:
        type_func = float

    parsed = {}
    used_names = set()

    def get_item_name(name):
        counter = 2
        new_name = name
        while True:
            if new_name in used_names:
                new_name = "%s %d" % (name, counter)
                counter += 1
            else:
                used_names.add(new_name)
                break
        return new_name

    for line in info:
        for element in zip(line[0::3], line[1::3], line[2::3]):
            if not element[0]:
                continue
            name = get_item_name(element[0])
            try:
                parsed[name] = [type_func(element[1]), element[2]]
            except ValueError:
                continue

    return parsed


def parse_liebert_without_unit(info, type_func=None):
    if type_func is None:
        type_func = float

    parsed = {}
    used_names = set()

    def get_item_name(name):
        counter = 2
        new_name = name
        while True:
            if new_name in used_names:
                new_name = "%s %d" % (name, counter)
                counter += 1
            else:
                used_names.add(new_name)
                break
        return new_name

    parsed = {}

    for line in info:
        for element in zip(line[0::2], line[1::2]):
            if not element[0]:
                continue
            name = get_item_name(element[0])
            try:
                parsed[name] = type_func(element[1])
            except ValueError:
                continue

    return parsed


def scan_liebert(oid):

    return oid('.1.3.6.1.2.1.1.2.0').startswith('.1.3.6.1.4.1.476.1.42')


def levels_liebert(value, warn, crit, sorting="upper"):
    state = 0
    if sorting == "upper":
        if value >= crit:
            state = 2
        elif value >= warn:
            state = 1
        else:
            state = 0
    elif sorting == "lower":
        if value <= crit:
            state = 2
        elif value <= warn:
            state = 1
        else:
            state = 0

    return state


def check_temp_unit(output):
    value = float(output[0])
    unit = output[1]
    if unit == "deg F":
        value = 5.0 / 9.0 * (value - 32)

    return value
