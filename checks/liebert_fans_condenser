#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2017             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# example output
factory_settings["liebert_fans_condenser_default_levels"] = {
    'levels': (80, 90),
}


def inventory_liebert_fans_condenser(parsed):
    for key, values in parsed.iteritems():
        if not "Unavailable" in values[0]:
            yield (key, {})


def check_liebert_fans_condenser(item, params, parsed):
    for key, values in parsed.iteritems():
        if item == key and not "Unavailable" in values[0]:
            value = float(values[0])
            unit = values[1]
            warn, crit = params['levels']
            yield 0, "Speed: %.1f%s" % (value, unit), [('filehandler_perc', value, warn, crit)]

            state = levels_liebert(value, warn, crit)
            if state > 0:
                yield state, "warn/crit at %s/%s" % (warn, crit)

            if 'levels_lower' in params:
                warn_lower, crit_lower = params['levels_lower']
                state_lower = levels_liebert(value, warn_lower, crit_lower, 'lower')
                if state_lower > 0:
                    yield state_lower, "warn/crit below %s/%s" % (warn_lower, crit_lower)


check_info['liebert_fans_condenser'] = {
    'parse_function': parse_liebert,
    'inventory_function': inventory_liebert_fans_condenser,
    'check_function': check_liebert_fans_condenser,
    'service_description': '%s',
    'snmp_info': (
        '.1.3.6.1.4.1.476.1.42.3.9.20.1',
        [
            '10.1.2.1.5276',  #LIEBERT-GP-FLExible-MIB: lgpFlexibleEntryDataLabel
            '20.1.2.1.5276',  #LIEBERT-GP-FLExible-MIB: lgpFlexibleEntryValue
            '30.1.2.1.5276',  #LIEBERT-GP-FLExible-MIB: lgpFlexibleEntryUnitsOfMeasure
        ]),
    'snmp_scan_function': scan_liebert,
    'includes': ['liebert.include'],
    'group': 'hw_fans_perc',
    'default_levels_variable': 'liebert_fans_condenser_default_levels',
    'has_perfdata': True,
}
