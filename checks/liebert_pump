#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from cmk.base.check_legacy_includes.liebert import *  # pylint: disable=wildcard-import,unused-wildcard-import
# example output
# .1.3.6.1.4.1.476.1.42.3.9.20.1.10.1.2.1.5298.1 Pump Hours
# .1.3.6.1.4.1.476.1.42.3.9.20.1.10.1.2.1.5298.2 Pump Hours
# .1.3.6.1.4.1.476.1.42.3.9.20.1.20.1.2.1.5298.1 3423
# .1.3.6.1.4.1.476.1.42.3.9.20.1.20.1.2.1.5298.2 1
# .1.3.6.1.4.1.476.1.42.3.9.20.1.30.1.2.1.5298.1 hr
# .1.3.6.1.4.1.476.1.42.3.9.20.1.30.1.2.1.5298.2 hr
# .1.3.6.1.4.1.476.1.42.3.9.20.1.10.1.2.1.5299.1 Pump Hours Threshold
# .1.3.6.1.4.1.476.1.42.3.9.20.1.10.1.2.1.5299.2 Pump Hours Threshold
# .1.3.6.1.4.1.476.1.42.3.9.20.1.20.1.2.1.5299.1 32000
# .1.3.6.1.4.1.476.1.42.3.9.20.1.20.1.2.1.5299.2 32000
# .1.3.6.1.4.1.476.1.42.3.9.20.1.30.1.2.1.5299.1 hr
# .1.3.6.1.4.1.476.1.42.3.9.20.1.30.1.2.1.5299.2 hr


def check_liebert_pump(item, _no_params, parsed):
    data = parsed.get(item)
    if data is None:
        return

    # TODO: this should be done in the parse function, per OID end.
    for key, (value, _unit) in parsed.items():
        if "Threshold" in key and key.replace(" Threshold", "") == item:
            crit = value

    yield check_levels(data[0], None, (crit, crit), unit=data[1])


check_info['liebert_pump'] = {
    'parse_function': parse_liebert_wrapper,
    'inventory_function': discover(lambda key, _value: "threshold" not in key.lower()),
    'check_function': check_liebert_pump,
    'service_description': '%s',
    'snmp_info': (
        '.1.3.6.1.4.1.476.1.42.3.9.20.1',
        [
            '10.1.2.1.5298',  #LIEBERT-GP-FLExible-MIB: lgpFlexibleEntryDataLabel
            '20.1.2.1.5298',  #LIEBERT-GP-FLExible-MIB: lgpFlexibleEntryValue
            '30.1.2.1.5298',  #LIEBERT-GP-FLExible-MIB: lgpFlexibleEntryUnitsOfMeasure
            '10.1.2.1.5299',  #LIEBERT-GP-FLExible-MIB: lgpFlexibleEntryDataLabel
            '20.1.2.1.5299',  #LIEBERT-GP-FLExible-MIB: lgpFlexibleEntryValue
            '30.1.2.1.5299',  #LIEBERT-GP-FLExible-MIB: lgpFlexibleEntryUnitsOfMeasure
        ]),
    'snmp_scan_function': scan_liebert,
    'has_perfdata': True,
}
