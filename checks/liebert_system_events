#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 Checkmk GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables from the check-context which are necessary for
# resolving legacy discovery results such as [("SUMMARY", "diskstat_default_levels")]. Furthermore,
# it might also remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.liebert import *  # pylint: disable=wildcard-import,unused-wildcard-import
# example output
# .1.3.6.1.4.1.476.1.42.3.9.20.1.10.1.2.100.4618 Ambient Air Temperature Sensor Issue
# .1.3.6.1.4.1.476.1.42.3.9.20.1.20.1.2.100.4618 Inactive Event
# .1.3.6.1.4.1.476.1.42.3.9.20.1.10.1.2.100.4645 Supply Fluid Over Temp
# .1.3.6.1.4.1.476.1.42.3.9.20.1.20.1.2.100.4645 Inactive Event
# .1.3.6.1.4.1.476.1.42.3.9.20.1.10.1.2.100.4648 Supply Fluid Under Temp
# .1.3.6.1.4.1.476.1.42.3.9.20.1.20.1.2.100.4648 Inactive Event
# .1.3.6.1.4.1.476.1.42.3.9.20.1.10.1.2.100.4651 Supply Fluid Temp Sensor Issue
# .1.3.6.1.4.1.476.1.42.3.9.20.1.20.1.2.100.4651 Active Warning
# and much more...


def parse_liebert_system_events(info):
    return {"events": parse_liebert_without_unit_wrapper(info, str)}


def _is_active_event(event):
    event_name, event_type = event

    if not event_name or not event_type:
        return False

    return event_type.lower() != "inactive event"


def check_liebert_system_events(_no_item, _no_params, parsed):
    active_events = [e for e in parsed.get("events", {}).items() if _is_active_event(e)]

    if not active_events:
        yield 0, "Normal"
        return

    yield from ((2, f"{k}: {v}") for k, v in active_events)


check_info['liebert_system_events'] = {
    'parse_function': parse_liebert_system_events,
    'inventory_function': lambda _parsed: [(None, {})],
    'check_function': check_liebert_system_events,
    'service_description': 'System events',
    'snmp_info': (
        '.1.3.6.1.4.1.476.1.42.3.9.20.1',
        [
            '10.1.2.100',  #LIEBERT-GP-FLExible-MIB: lgpFlexibleEntryDataLabel
            '20.1.2.100',  #LIEBERT-GP-FLExible-MIB: lgpFlexibleEntryValue
        ]),
    'snmp_scan_function': scan_liebert,
    'handle_empty_info': True,
}
