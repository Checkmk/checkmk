#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 Checkmk GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.


def get_discover_lsi(item_type):
    def discover_lsi(info):
        # convert [ 0, 1, 2, 3, 4, 5, ...] into [ (0,1), (2,3), (4,5), ... ]
        arrays = []
        disks = []
        for entry in zip(info[::2], info[1::2]):
            id_ = entry[0][1]
            state = entry[1][1].split('(')[-1][:-1]
            if entry[0][0] == 'VolumeID':
                arrays.append((id_, state))
            else:
                disks.append((id_, state))

        if item_type == 'arrays':
            return [(item, {}) for (item, _state) in arrays]
        return [(item, {"expected_state": state}) for (item, state) in disks]

    return discover_lsi


def check_lsi_array(item, _no_params, info):
    volumeid = -1
    for line in info:
        if line[0] == 'VolumeID':
            volumeid = line[1]
        elif line[0] == 'Statusofvolume' and volumeid == item:
            status = line[1]
            if status == 'Okay(OKY)':
                return (0, 'Status is Okay (OKY)')
            return (2, 'Status is %s' % status)
    return (2, 'RAID volume %d not existing' % item)


check_info["lsi.array"] = {
    'check_function': check_lsi_array,
    'default_levels_variable': None,
    'group': 'raid',
    'inventory_function': get_discover_lsi('arrays'),
    'service_description': 'RAID array %s',
    'snmp_info': None,
    'snmp_scan_function': None
}


def check_lsi_disk(item, params, info):
    target_state = params.get("expected_state", "")
    target_id = -1
    for line in info:
        if line[0] == 'TargetID':
            target_id = line[1]
        elif line[0] == 'State' and target_id == item:
            state = line[1].split('(')[-1][:-1]
            if state == target_state:
                return (0, 'disk has state %s' % state)
            return (2, 'disk has state %s (should be %s)' % (state, target_state))
    return (2, 'disk not present')


check_info["lsi.disk"] = {
    'check_function': check_lsi_disk,
    'default_levels_variable': None,
    'group': 'raid_disk',
    'inventory_function': get_discover_lsi('disks'),
    'service_description': 'RAID disk %s',
    'snmp_info': None,
    'snmp_scan_function': None
}
