#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | "_ \ / _ \/ __| |/ /   | |\/| | " /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

factory_settings["mbg_lantime_state_default_levels"] = {
    "stratum": (2, 3),
    "offset": (10, 20),  # us
}


def snmp_scan_mbg_lantime_ng_hw(oid):
    return oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.5597.3" or \
            oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.5597.30"


def check_mbg_lantime_state_common(states, _no_item, params, info):
    ntp_state, stratum, refclock_name, refclock_offset = info[0]
    if not isinstance(params, dict):
        params = {
            "stratum": (params[0], params[1]),
            "offset": (params[2], params[3]),
        }

    # Handle State
    yield states[ntp_state][0], "State: " + states[ntp_state][1]

    # Check the reported stratum
    state = 0
    levels_text = ""
    warn, crit = params["stratum"]
    if int(stratum) >= crit:
        state = 2
    elif int(stratum) >= warn:
        state = 1
    if state != 0:
        levels_text = " (warn/crit at %d/%d)" % (warn, crit)
    yield state, "Stratum: %s%s" % (stratum, levels_text)

    # Add refclock information
    yield 0, "Reference clock: " + refclock_name

    # Check offset
    # offset AND levels are measured in microseconds
    # Valuespec of "offset" has unit info: microseconds
    state = 0
    levels_text = ""
    warn, crit = params["offset"]
    refclock_offset = float(refclock_offset)
    pos_refclock_offset = abs(refclock_offset)
    if pos_refclock_offset >= crit:
        state = 2
    elif pos_refclock_offset >= warn:
        state = 1
    if state != 0:
        levels_text = u" (warn/crit at %s/%s µs)" % (warn, crit)
    perfdata = [("offset", refclock_offset, warn, crit)]  # all in us
    yield state, u"Reference clock offset: %g µs%s" % (refclock_offset, levels_text), perfdata
