#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

#   .--mem.linux-----------------------------------------------------------.
#   |                                      _ _                             |
#   |           _ __ ___   ___ _ __ ___   | (_)_ __  _   ___  __           |
#   |          | '_ ` _ \ / _ \ '_ ` _ \  | | | '_ \| | | \ \/ /           |
#   |          | | | | | |  __/ | | | | |_| | | | | | |_| |>  <            |
#   |          |_| |_| |_|\___|_| |_| |_(_)_|_|_| |_|\__,_/_/\_\           |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   |  Specialized memory check for Linux that takes into account          |
#   |  all of its specific information in /proc/meminfo.                   |
#   '----------------------------------------------------------------------'

# BEWARE: half of the information and blob entries about /proc/meminfo
# in the internet is unprecise or even totally wrong!

# <<<mem>>>
# MemTotal:       24707592 kB
# MemFree:          441224 kB
# Buffers:          320672 kB
# Cached:         19981008 kB
# SwapCached:         6172 kB
# Active:          8756876 kB
# Inactive:       13360444 kB
# Active(anon):    1481236 kB
# Inactive(anon):   371260 kB
# Active(file):    7275640 kB
# Inactive(file): 12989184 kB
# Unevictable:      964808 kB
# Mlocked:          964808 kB
# SwapTotal:      16777212 kB
# SwapFree:       16703328 kB
# Dirty:           4408124 kB
# Writeback:         38020 kB
# AnonPages:       2774444 kB
# Mapped:            69456 kB
# Shmem:             33772 kB
# Slab:             861028 kB
# SReclaimable:     756236 kB
# SUnreclaim:       104792 kB
# KernelStack:        4176 kB
# PageTables:        15892 kB
# NFS_Unstable:          0 kB
# Bounce:                0 kB
# WritebackTmp:          0 kB
# CommitLimit:    39014044 kB
# Committed_AS:    3539808 kB
# VmallocTotal:   34359738367 kB
# VmallocUsed:      347904 kB
# VmallocChunk:   34346795572 kB
# HardwareCorrupted:     0 kB
# AnonHugePages:         0 kB
# HugePages_Total:       0
# HugePages_Free:        0
# HugePages_Rsvd:        0
# HugePages_Surp:        0
# Hugepagesize:       2048 kB
# DirectMap4k:      268288 kB
# DirectMap2M:     8112128 kB
# DirectMap1G:    16777216 kB

# This is from an earlier kernel (CentOS 5.5). Some entries
# are missing here:
# <<<mem>>>
# MemTotal:       377176 kB
# MemFree:         60112 kB
# Buffers:         93864 kB
# Cached:         116364 kB
# SwapCached:          0 kB
# Active:         169140 kB
# Inactive:        84144 kB
# HighTotal:           0 kB
# HighFree:            0 kB
# LowTotal:       377176 kB
# LowFree:         60112 kB
# SwapTotal:     2064376 kB
# SwapFree:      2062756 kB
# Dirty:             172 kB
# Writeback:           0 kB
# AnonPages:       43080 kB
# Mapped:           8352 kB
# Slab:            45892 kB
# PageTables:       3208 kB
# NFS_Unstable:        0 kB
# Bounce:              0 kB
# CommitLimit:   2252964 kB
# Committed_AS:   125968 kB
# VmallocTotal: 34359738367 kB
# VmallocUsed:     18112 kB
# VmallocChunk: 34359719415 kB
# HugePages_Total:     0
# HugePages_Free:      0
# HugePages_Rsvd:      0
# Hugepagesize:     2048 kB

# Yet earlier kernel (SLES 9):
# <<<mem>>>
# MemTotal: 6224268 kB
# MemFree: 2913660 kB
# Buffers: 84712 kB
# Cached: 1779052 kB
# SwapCached: 0 kB
# Active: 1931528 kB
# Inactive: 1276156 kB
# HighTotal: 5373824 kB
# HighFree: 2233984 kB
# LowTotal: 850444 kB
# LowFree: 679676 kB
# SwapTotal: 1052280 kB
# SwapFree: 1052280 kB
# Dirty: 55680 kB
# Writeback: 0 kB
# Mapped: 1469268 kB
# Slab: 71724 kB
# Committed_AS: 2758332 kB
# PageTables: 7672 kB
# VmallocTotal: 112632 kB
# VmallocUsed: 9324 kB
# VmallocChunk: 103180 kB
# HugePages_Total: 0
# HugePages_Free: 0
# Hugepagesize: 2048 kB

factory_settings["mem_linux_default_levels"] = {
    "levels_virtual": ("perc_used", (80.0, 90.0)),
    "levels_total": ("perc_used", (120.0, 150.0)),
    "levels_shm": ("perc_used", (20.0, 30.0)),
    "levels_pagetables": ("perc_used", (8.0, 16.0)),
    "levels_committed": ("perc_used", (100.0, 150.0)),
    "levels_commitlimit": ("perc_free", (20.0, 10.0)),
    "levels_vmalloc": ("abs_free", (50 * 1024 * 1024, 30 * 1024 * 1024)),
    "levels_hardwarecorrupted": ("abs_used", (1, 1)),
}


def is_linux_meminfo(meminfo):
    return "PageTables" in meminfo and "Writeback" in meminfo and "Committed_AS" in meminfo


def inventory_mem_linux(info):
    meminfo = parse_proc_meminfo_bytes(info)
    if is_linux_meminfo(meminfo):
        yield None, {}


def check_memory_dict(meminfo, params, render_base=1024):
    """Check a dictionary of Memory entries against levels.

    Only keys of meminfo that are checked below explicitly are considered.
    All other keys are ignored.
    """
    results = collections.OrderedDict()

    # RAM
    if "MemUsed" in meminfo and "MemTotal" in meminfo:
        results["ram"] = check_memory_element(
            "RAM",
            meminfo["MemUsed"],
            meminfo["MemTotal"],
            params.get("levels_ram"),
            metric_name="mem_used",
            render_base=render_base,
        )

    # Swap
    if "SwapUsed" in meminfo and meminfo.get("SwapTotal"):
        results["swap"] = check_memory_element(
            "Swap",
            meminfo["SwapUsed"],
            meminfo["SwapTotal"],
            params.get("levels_swap"),
            metric_name="swap_used",
            render_base=render_base,
        )

    # Total virtual memory
    if all(k in meminfo for k in ("MemTotal", "MemUsed", "SwapTotal", "SwapUsed")):
        virtual_used = meminfo["MemUsed"] + meminfo["SwapUsed"]
        virtual_total = meminfo["MemTotal"] + meminfo["SwapTotal"]
        results["virtual"] = check_memory_element(
            "Total virtual memory",
            virtual_used,
            virtual_total,
            params.get("levels_virtual"),
            render_base=render_base,
        )

        # Committed memory, only if we have virtual_total
        if "Committed_AS" in meminfo:
            results["committed"] = check_memory_element(
                "Committed",
                meminfo["Committed_AS"],
                virtual_total,
                params.get("levels_committed"),
                label_total="virtual memory",
                metric_name="mem_lnx_committed_as",
                render_base=render_base,
            )

        # Commit limit
        if "CommitLimit" in meminfo:
            results["commitlimit"] = check_memory_element(
                "Commit Limit",
                virtual_total - meminfo["CommitLimit"],
                virtual_total,
                params.get("levels_commitlimit"),
                label_total="virtual memory",
                render_base=render_base,
            )

    # Shared memory
    if "Shmem" in meminfo and "MemTotal" in meminfo:
        results["shm"] = check_memory_element(
            "Shared memory",
            meminfo["Shmem"],
            meminfo["MemTotal"],
            params.get("levels_shm"),
            label_total="RAM",
            metric_name="mem_lnx_shmem",
            render_base=render_base,
        )

    # Page tables
    if "PageTables" in meminfo and "MemTotal" in meminfo:
        results["pagetables"] = check_memory_element(
            "Page tables",
            meminfo["PageTables"],
            meminfo["MemTotal"],
            params.get("levels_pagetables"),
            label_total="RAM",
            metric_name="mem_lnx_page_tables",
            render_base=render_base,
        )

    # Disk Writeback
    if "Pending" in meminfo and "MemTotal" in meminfo:
        results["pending"] = check_memory_element(
            "Disk Writeback",
            meminfo["Pending"],
            meminfo["MemTotal"],
            params.get("levels_writeback"),
            label_total="RAM",
            render_base=render_base,
        )

    # Available Memory
    if "MemAvailable" in meminfo and "MemTotal" in meminfo:
        results["available"] = check_memory_element(
            "RAM available",
            meminfo["MemTotal"] - meminfo["MemAvailable"],
            meminfo["MemTotal"],
            params.get("levels_available"),
            show_free=True,
            render_base=render_base,
        )

    # VMalloc,
    # newer kernel version report wrong data,
    # i.d. both VmallocUsed and Chunk equal zero
    if "VmallocUsed" in meminfo and "VmallocChunk" in meminfo and (
            meminfo["VmallocUsed"] + meminfo["VmallocChunk"]):
        results["vmalloc"] = check_memory_element(
            "Largest Free VMalloc Chunk",
            meminfo["VmallocTotal"] - meminfo["VmallocChunk"],
            meminfo["VmallocTotal"],
            params.get("levels_vmalloc"),
            label_total="VMalloc Area",
            show_free=True,
            render_base=render_base,
        )

    # HardwareCorrupted
    if "HardwareCorrupted" in meminfo and "MemTotal" in meminfo:
        results["corrupted"] = check_memory_element(
            "Hardware Corrupted",
            meminfo["HardwareCorrupted"],
            meminfo["MemTotal"],
            params.get("levels_hardwarecorrupted"),
            label_total="RAM",
            render_base=render_base,
        )

    return results


def check_mem_linux(_no_item, params, info):
    meminfo = parse_proc_meminfo_bytes(info)
    if not meminfo:
        return

    # TODO: Currently some of these values are just set to generate the metrics later
    # See which ones we actually need.

    # SReclaimable is not available for older kernels
    # Compute memory used by caches, that can be considered "free"
    meminfo["Caches"] = meminfo["Cached"] + meminfo["Buffers"] \
                      + meminfo["SwapCached"] + meminfo.get("SReclaimable", 0)

    meminfo["MemUsed"] = meminfo["MemTotal"] - meminfo["MemFree"] - meminfo["Caches"]
    meminfo["SwapUsed"] = meminfo["SwapTotal"] - meminfo["SwapFree"]
    meminfo["TotalTotal"] = meminfo["MemTotal"] + meminfo["SwapTotal"]
    meminfo["TotalUsed"] = meminfo["MemUsed"] + meminfo["SwapUsed"]

    # Disk Writeback
    meminfo["Pending"] = \
         meminfo["Dirty"] \
       + meminfo.get("Writeback", 0) \
       + meminfo.get("NFS_Unstable", 0) \
       + meminfo.get("Bounce", 0) \
       + meminfo.get("WritebackTmp", 0)

    results = check_memory_dict(meminfo, params)

    # show these always:
    yield results.pop("virtual", (0, ""))[:2]
    yield results.pop("ram", (0, ""))[:2]
    yield results.pop("swap", (0, ""))[:2]
    # show rest only if not OK:
    for state, infotext, _perf in results.itervalues():
        if state:
            yield state, infotext

    # Now send performance data. We simply output *all* fields of meminfo
    # except for a few really useless values
    perfdata = []
    items = sorted(meminfo.items())
    for name, value in items:
        if name.startswith("DirectMap"):
            continue
        if name.startswith(
                "Vmalloc") and meminfo["VmallocTotal"] > 2**40:  # useless on 64 Bit system
            continue
        if name.startswith("Huge"):
            if meminfo["HugePages_Total"] == 0:  # omit useless data
                continue
            if name == "Hugepagesize":
                continue  # not needed
            value = value * meminfo["Hugepagesize"]  # convert number to actual memory size
        perfdata.append((camelcase_to_underscored(name.replace("(", "_").replace(")", "")), value))
    yield 0, "", perfdata


# ThisIsACamel -> this_is_a_camel
def camelcase_to_underscored(name):
    previous_lower = False
    previous_underscore = True
    result = ""
    for char in name:
        if char.isupper():
            if previous_lower and not previous_underscore:
                result += "_"
            previous_lower = False
            previous_underscore = False
            result += char.lower()
        elif char == "_":
            previous_lower = False
            previous_underscore = True
            result += char
        else:
            previous_lower = True
            previous_underscore = False
            result += char
    return result


check_info["mem.linux"] = {
    'inventory_function': inventory_mem_linux,
    'check_function': check_mem_linux,
    'service_description': 'Memory',
    'default_levels_variable': 'mem_linux_default_levels',
    'has_perfdata': True,
    'group': 'memory_linux',
    "handle_real_time_checks": True,
    'includes': ['mem.include'],
}

#.
#   .--mem.used------------------------------------------------------------.
#   |                                                        _             |
#   |           _ __ ___   ___ _ __ ___   _   _ ___  ___  __| |            |
#   |          | '_ ` _ \ / _ \ '_ ` _ \ | | | / __|/ _ \/ _` |            |
#   |          | | | | | |  __/ | | | | || |_| \__ \  __/ (_| |            |
#   |          |_| |_| |_|\___|_| |_| |_(_)__,_|___/\___|\__,_|            |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   | Memory check that takes into account the swap space. This check is   |
#   | used for unixoide operating systems.                                 |
#   '----------------------------------------------------------------------'


def parse_proc_meminfo(info):
    parsed = {}
    for line in info:
        try:
            parsed[line[0][:-1]] = int(line[1])
        except (ValueError, IndexError) as _exc:
            pass
    return parsed


# The following variable is obsolete. It is kept here so that Check_MK
# won't fail if it's found in main.mk
mem_extended_perfdata = None


def inventory_mem_used(info):
    meminfo = parse_proc_meminfo(info)
    if "MemTotal" in meminfo \
        and "PageTotal" not in meminfo \
        and not is_linux_meminfo(meminfo): # handled by more modern check
        yield None, {}


def check_mem_used(_no_item, params, info):
    meminfo = parse_proc_meminfo(info)
    return check_memory(params, meminfo)


check_info['mem.used'] = {
    "check_function": check_mem_used,
    "inventory_function": inventory_mem_used,
    "service_description": "Memory used",
    "has_perfdata": True,
    "group": "memory",
    "default_levels_variable": "memory_default_levels",
    "includes": ["mem.include"],
    "handle_real_time_checks": True,
}

#.
#   .--mem.win-------------------------------------------------------------.
#   |                                                _                     |
#   |              _ __ ___   ___ _ __ ___ __      _(_)_ __                |
#   |             | '_ ` _ \ / _ \ '_ ` _ \\ \ /\ / / | '_ \               |
#   |             | | | | | |  __/ | | | | |\ V  V /| | | | |              |
#   |             |_| |_| |_|\___|_| |_| |_(_)_/\_/ |_|_| |_|              |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   | Windows now has a dedicated memory check that reflect the special    |
#   | nature of the page file.                                             |
#   '----------------------------------------------------------------------'

# Special memory and page file check for Windows
factory_settings["memory_win_default_levels"] = {
    "memory": (80.0, 90.0),
    "pagefile": (80.0, 90.0),
}


def inventory_mem_win(info):
    meminfo = parse_proc_meminfo(info)
    if "MemTotal" in meminfo and "PageTotal" in meminfo:
        yield None, {}


def check_mem_windows(_no_item, params, info):
    meminfo = parse_proc_meminfo(info)
    now = time.time()

    def _get_levels_on_used_mb(param_key, total_mb):
        levels = params.get(param_key)
        if not isinstance(levels, tuple):
            # Predictive levels have no level information in the performance data
            return None, None

        if isinstance(levels[0], float):
            # float type means percent
            warn = total_mb * levels[0] / 100
        else:
            # int means levels on *free* space
            warn = total_mb - levels[0]
        if isinstance(levels[1], float):
            crit = total_mb * levels[1] / 100
        else:
            crit = total_mb - levels[1]
        return warn, crit

    for title, prefix, paramname in [("Memory usage", "Mem", "memory"),
                                     ("Commit charge", "Page", "pagefile")]:

        total_kb = meminfo.get("%sTotal" % prefix)
        free_kb = meminfo.get("%sFree" % prefix)
        if None in (total_kb, free_kb):
            continue

        total_mb = total_kb / 1024.0
        free_mb = free_kb / 1024.0
        used_kb = total_kb - free_kb
        used_mb = total_mb - free_mb
        perc = 100.0 * used_kb / total_kb

        warn, crit = _get_levels_on_used_mb(paramname, total_mb)

        infotext = "%s: %s (%s/%s)" % (title, get_percent_human_readable(perc),
                                       get_bytes_human_readable(used_kb * 1024),
                                       get_bytes_human_readable(total_kb * 1024))

        perfdata = [(paramname, used_mb, warn, crit, 0, total_mb)]
        if prefix == "Mem":
            perfdata.append(("mem_total", total_mb))
        elif prefix == "Page":
            perfdata.append(("pagefile_total", total_mb))

        # Do averaging, if configured, just for matching the levels
        if "average" in params:
            average_min = params["average"]
            used_kb = get_average("mem.win.%s" % paramname,
                                  now,
                                  used_kb,
                                  average_min,
                                  initialize_zero=False)
            used_mb = used_kb / 1024.0
            perc = 100.0 * used_kb / total_kb
            infotext += ", %d min average: %s (%s)" % (average_min,
                                                       get_percent_human_readable(perc),
                                                       get_bytes_human_readable(used_kb * 1024))
            perfdata.append((paramname + "_avg", used_mb))

        # Now check the levels
        if (warn, crit) != (None, None):
            state = 0
            if used_mb >= crit:
                state = 2
            elif used_mb >= warn:
                state = 1

        # Predictive levels
        else:
            if "average" in params:
                titleinfo = title
                dsname = "%s_avg" % paramname
            else:
                titleinfo = title
                dsname = paramname

            state, infoadd, perfadd = check_levels(
                used_mb,  # Current value stored in MB in RRDs
                dsname,
                params[paramname],
                unit="GB",  # Levels are specified in GB...
                scale=1024,  # ... in WATO ValueSpec
                infoname=titleinfo)
            if infoadd:
                infotext += ", " + infoadd
            perfdata += perfadd

        yield state, infotext, perfdata


check_info["mem.win"] = {
    'check_function': check_mem_windows,
    'inventory_function': inventory_mem_win,
    'service_description': 'Memory and pagefile',
    'has_perfdata': True,
    'group': 'memory_pagefile_win',
    'default_levels_variable': 'memory_win_default_levels',
    "handle_real_time_checks": True,
}

#.
#   .--mem.vmalloc---------------------------------------------------------.
#   |                                                   _ _                |
#   |    _ __ ___   ___ _ __ ___ __   ___ __ ___   __ _| | | ___   ___     |
#   |   | '_ ` _ \ / _ \ '_ ` _ \\ \ / / '_ ` _ \ / _` | | |/ _ \ / __|    |
#   |   | | | | | |  __/ | | | | |\ V /| | | | | | (_| | | | (_) | (__     |
#   |   |_| |_| |_|\___|_| |_| |_(_)_/ |_| |_| |_|\__,_|_|_|\___/ \___|    |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   | This very specific check checks the usage and fragmentation of the   |
#   | address space 'vmalloc' that can be problematic on 32-Bit systems.   |
#   | It is superseeded by the new check mem.linux and will be removed     |
#   | soon.                                                                |
#   '----------------------------------------------------------------------'

# warn, crit, warn_chunk, crit_chunk. Integers are in MB, floats are in percent
mem_vmalloc_default_levels = (80.0, 90.0, 64, 32)


def inventory_mem_vmalloc(info):
    meminfo = parse_proc_meminfo(info)
    if is_linux_meminfo(meminfo):
        return  # handled by new Linux memory check

    # newer kernel version report wrong data,
    # i.d. both VmallocUsed and Chunk equal zero
    if "VmallocTotal" in meminfo and \
        not (meminfo["VmallocUsed"] == 0 and meminfo["VmallocChunk"] == 0):
        # Do not checks this on 64 Bit systems. They have almost
        # infinitive vmalloc
        vmalloc = meminfo["VmallocTotal"] / 1024.4
        if vmalloc < 4096:
            yield None, "mem_vmalloc_default_levels"


def check_mem_vmalloc(_item, params, info):
    meminfo = parse_proc_meminfo(info)
    total_mb = meminfo["VmallocTotal"] / 1024.0
    used_mb = meminfo["VmallocUsed"] / 1024.0
    chunk_mb = meminfo["VmallocChunk"] / 1024.0
    warn, crit, warn_chunk, crit_chunk = params

    state = 0
    infotxts = []
    perfdata = []
    for var, loop_warn, loop_crit, loop_val, neg, what in [
        ("used", warn, crit, used_mb, False, "used"),
        ("chunk", warn_chunk, crit_chunk, chunk_mb, True, "largest chunk")
    ]:

        # convert levels from percentage to MB values
        if isinstance(loop_warn, float):
            w_mb = total_mb * loop_warn / 100
        else:
            w_mb = float(loop_warn)

        if isinstance(loop_crit, float):
            c_mb = total_mb * loop_crit / 100
        else:
            c_mb = float(loop_crit)

        loop_state = 0
        infotxt = "%s %.1f MB" % (what, loop_val)
        if (loop_val >= c_mb) != neg:
            loop_state = 2
            infotxt += " (critical at %.1f MB!!)" % c_mb
        elif (loop_val >= w_mb) != neg:
            loop_state = 1
            infotxt += " (warning at %.1f MB!)" % w_mb
        state = max(state, loop_state)
        infotxts.append(infotxt)
        perfdata.append((var, loop_val, w_mb, c_mb, 0, total_mb))
    return (state, ("total %.1f MB, " % total_mb) + ", ".join(infotxts), perfdata)


check_info["mem.vmalloc"] = {
    'inventory_function': inventory_mem_vmalloc,
    'check_function': check_mem_vmalloc,
    'service_description': 'Vmalloc address space',
    'has_perfdata': True,
    "handle_real_time_checks": True,
}
