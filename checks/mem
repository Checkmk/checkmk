#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from cmk.base.check_legacy_includes.mem import *  # pylint: disable=wildcard-import,unused-wildcard-import
#   .--mem.linux-----------------------------------------------------------.
#   |                                      _ _                             |
#   |           _ __ ___   ___ _ __ ___   | (_)_ __  _   ___  __           |
#   |          | '_ ` _ \ / _ \ '_ ` _ \  | | | '_ \| | | \ \/ /           |
#   |          | | | | | |  __/ | | | | |_| | | | | | |_| |>  <            |
#   |          |_| |_| |_|\___|_| |_| |_(_)_|_|_| |_|\__,_/_/\_\           |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   |  Specialized memory check for Linux that takes into account          |
#   |  all of its specific information in /proc/meminfo.                   |
#   '----------------------------------------------------------------------'

import cmk.base.plugins.agent_based.utils.memory as memory

factory_settings["mem_linux_default_levels"] = {
    "levels_virtual": ("perc_used", (80.0, 90.0)),
    "levels_total": ("perc_used", (120.0, 150.0)),
    "levels_shm": ("perc_used", (20.0, 30.0)),
    "levels_pagetables": ("perc_used", (8.0, 16.0)),
    "levels_committed": ("perc_used", (100.0, 150.0)),
    "levels_commitlimit": ("perc_free", (20.0, 10.0)),
    "levels_vmalloc": ("abs_free", (50 * 1024 * 1024, 30 * 1024 * 1024)),
    "levels_hardwarecorrupted": ("abs_used", (1, 1)),
}


def inventory_mem_linux(section):
    if memory.is_linux_section(section):
        yield None, {}


def check_mem_linux(_no_item, params, section):
    if not section:
        return

    # quick fix: stop modifying parsed data in place!
    section = section.copy()

    # TODO: Currently some of these values are just set to generate the metrics later
    # See which ones we actually need.

    # SReclaimable is not available for older kernels
    # Compute memory used by caches, that can be considered "free"
    section["Caches"] = section["Cached"] + section["Buffers"] \
                      + section["SwapCached"] + section.get("SReclaimable", 0)

    section["MemUsed"] = section["MemTotal"] - section["MemFree"] - section["Caches"]
    section["SwapUsed"] = section["SwapTotal"] - section["SwapFree"]
    section["TotalTotal"] = section["MemTotal"] + section["SwapTotal"]
    section["TotalUsed"] = section["MemUsed"] + section["SwapUsed"]

    # Disk Writeback
    section["Pending"] = \
         section["Dirty"] \
       + section.get("Writeback", 0) \
       + section.get("NFS_Unstable", 0) \
       + section.get("Bounce", 0) \
       + section.get("WritebackTmp", 0)

    results = check_memory_dict(section, params)

    # show this always:
    yield results.pop("virtual", (0, ""))[:2]

    # show these if not OK:
    ok_results = []
    for key, (state, text, _perf) in results.items():
        if state:
            yield state, text
        elif key in ("ram", "swap"):
            ok_results.append((state, text))
    for state, text in ok_results:
        yield state, f"\n{text}"

    # add value of "mem_used_percent" metric to section
    section["MemUsedPercent"] = results["ram"][2][-1][1]

    # Now send performance data. We simply output *all* fields of section
    # except for a few really useless values
    perfdata = []
    items = sorted(section.items())
    for name, value in items:
        if name.startswith("DirectMap"):
            continue
        if name.startswith(
                "Vmalloc") and section["VmallocTotal"] > 2**40:  # useless on 64 Bit system
            continue
        if name.startswith("Huge"):
            if section["HugePages_Total"] == 0:  # omit useless data
                continue
            if name == "Hugepagesize":
                continue  # not needed
            value = value * section["Hugepagesize"]  # convert number to actual memory size
        perfdata.append((camelcase_to_underscored(name.replace("(", "_").replace(")", "")), value))
    yield 0, "", perfdata


# ThisIsACamel -> this_is_a_camel
def camelcase_to_underscored(name):
    previous_lower = False
    previous_underscore = True
    result = ""
    for char in name:
        if char.isupper():
            if previous_lower and not previous_underscore:
                result += "_"
            previous_lower = False
            previous_underscore = False
            result += char.lower()
        elif char == "_":
            previous_lower = False
            previous_underscore = True
            result += char
        else:
            previous_lower = True
            previous_underscore = False
            result += char
    return result


check_info["mem.linux"] = {
    'inventory_function': inventory_mem_linux,
    'check_function': check_mem_linux,
    'service_description': 'Memory',
    'default_levels_variable': 'mem_linux_default_levels',
    'has_perfdata': True,
    'group': 'memory_linux',
    "handle_real_time_checks": True,
}

#.
#   .--mem.used------------------------------------------------------------.
#   |                                                        _             |
#   |           _ __ ___   ___ _ __ ___   _   _ ___  ___  __| |            |
#   |          | '_ ` _ \ / _ \ '_ ` _ \ | | | / __|/ _ \/ _` |            |
#   |          | | | | | |  __/ | | | | || |_| \__ \  __/ (_| |            |
#   |          |_| |_| |_|\___|_| |_| |_(_)__,_|___/\___|\__,_|            |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   | Memory check that takes into account the swap space. This check is   |
#   | used for unixoide operating systems.                                 |
#   '----------------------------------------------------------------------'

# The following variable is obsolete. It is kept here so that Checkmk
# won't fail if it's found in main.mk
mem_extended_perfdata = None

#.
#   .--mem.win-------------------------------------------------------------.
#   |                                                _                     |
#   |              _ __ ___   ___ _ __ ___ __      _(_)_ __                |
#   |             | '_ ` _ \ / _ \ '_ ` _ \\ \ /\ / / | '_ \               |
#   |             | | | | | |  __/ | | | | |\ V  V /| | | | |              |
#   |             |_| |_| |_|\___|_| |_| |_(_)_/\_/ |_|_| |_|              |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   | Windows now has a dedicated memory check that reflect the special    |
#   | nature of the page file.                                             |
#   '----------------------------------------------------------------------'

# Special memory and page file check for Windows
factory_settings["memory_win_default_levels"] = {
    "memory": (80.0, 90.0),
    "pagefile": (80.0, 90.0),
}


def inventory_mem_win(section):
    if "MemTotal" in section and "PageTotal" in section:
        yield None, {}


def check_mem_windows(_no_item, params, section):
    now = time.time()

    def _get_levels_on_used_mb(param_key, total_mb):
        levels = params.get(param_key)
        if not isinstance(levels, tuple):
            # Predictive levels have no level information in the performance data
            return None, None

        if isinstance(levels[0], float):
            # float type means percent
            warn = total_mb * levels[0] / 100
        else:
            # int means levels on *free* space
            warn = total_mb - levels[0]
        if isinstance(levels[1], float):
            crit = total_mb * levels[1] / 100
        else:
            crit = total_mb - levels[1]
        return warn, crit

    for title, prefix, paramname, metric_name in [("RAM", "Mem", "memory", "mem_used"),
                                                  ("Commit charge", "Page", "pagefile",
                                                   "pagefile_used")]:

        total = section.get("%sTotal" % prefix)
        free = section.get("%sFree" % prefix)
        if None in (total, free):
            continue
        used = total - free

        total_mb = total / 1024.0**2
        free_mb = free / 1024.0**2
        used_mb = total_mb - free_mb
        perc = 100.0 * used / total

        warn, crit = _get_levels_on_used_mb(paramname, total_mb)

        status, infotext, perfdata = check_memory_element(
            title,
            used,
            total,
            None,
            metric_name=metric_name,
            create_percent_metric=title == "RAM",
        )

        if prefix == "Mem":
            perfdata.append(("mem_total", total_mb))
        elif prefix == "Page":
            perfdata.append(("pagefile_total", total_mb))

        # Do averaging, if configured, just for matching the levels
        if "average" in params:
            average_min = params["average"]
            used_kb = get_average(
                "mem.win.%s" % paramname,
                now,
                used / 1024.0,  # use kB for compatibility
                average_min,
                initialize_zero=False)
            used_mb = used_kb / 1024.0
            perc = 100.0 * used_mb / total_mb
            infotext += ", %d min average: %s (%s)" % (average_min,
                                                       get_percent_human_readable(perc),
                                                       get_bytes_human_readable(used_kb * 1024))
            perfdata.append((paramname + "_avg", used_mb))

        # Now check the levels
        if (warn, crit) != (None, None):
            state = 0
            if used_mb >= crit:
                state = 2
            elif used_mb >= warn:
                state = 1

        # Predictive levels
        else:
            if "average" in params:
                titleinfo = title
                dsname = "%s_avg" % paramname
            else:
                titleinfo = title
                dsname = paramname

            state, infoadd, perfadd = check_levels(
                used_mb,  # Current value stored in MB in RRDs
                dsname,
                params[paramname],
                unit="GB",  # Levels are specified in GB...
                scale=1024,  # ... in WATO ValueSpec
                infoname=titleinfo)
            if infoadd:
                infotext += ", " + infoadd
            perfdata += perfadd

        yield state, infotext, perfdata


check_info["mem.win"] = {
    'check_function': check_mem_windows,
    'inventory_function': inventory_mem_win,
    'service_description': 'Memory',
    'has_perfdata': True,
    'group': 'memory_pagefile_win',
    'default_levels_variable': 'memory_win_default_levels',
    "handle_real_time_checks": True,
}

#.
#   .--mem.vmalloc---------------------------------------------------------.
#   |                                                   _ _                |
#   |    _ __ ___   ___ _ __ ___ __   ___ __ ___   __ _| | | ___   ___     |
#   |   | '_ ` _ \ / _ \ '_ ` _ \\ \ / / '_ ` _ \ / _` | | |/ _ \ / __|    |
#   |   | | | | | |  __/ | | | | |\ V /| | | | | | (_| | | | (_) | (__     |
#   |   |_| |_| |_|\___|_| |_| |_(_)_/ |_| |_| |_|\__,_|_|_|\___/ \___|    |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   | This very specific check checks the usage and fragmentation of the   |
#   | address space 'vmalloc' that can be problematic on 32-Bit systems.   |
#   | It is superseeded by the new check mem.linux and will be removed     |
#   | soon.                                                                |
#   '----------------------------------------------------------------------'

# warn, crit, warn_chunk, crit_chunk. Integers are in MB, floats are in percent
mem_vmalloc_default_levels = (80.0, 90.0, 64, 32)


def inventory_mem_vmalloc(section):
    if memory.is_linux_section(section):
        return  # handled by new Linux memory check

    # newer kernel version report wrong data,
    # i.d. both VmallocUsed and Chunk equal zero
    if "VmallocTotal" in section and not (section["VmallocUsed"] == 0 and
                                          section["VmallocChunk"] == 0):
        # Do not checks this on 64 Bit systems. They have almost
        # infinitive vmalloc
        if section["VmallocTotal"] < 4 * 1024**2:
            yield None, "mem_vmalloc_default_levels"


def check_mem_vmalloc(_item, params, section):
    total_mb = section["VmallocTotal"] / 1024.0**2
    used_mb = section["VmallocUsed"] / 1024.0**2
    chunk_mb = section["VmallocChunk"] / 1024.0**2
    warn, crit, warn_chunk, crit_chunk = params

    state = 0
    infotxts = []
    perfdata = []
    for var, loop_warn, loop_crit, loop_val, neg, what in [
        ("used", warn, crit, used_mb, False, "used"),
        ("chunk", warn_chunk, crit_chunk, chunk_mb, True, "largest chunk")
    ]:

        # convert levels from percentage to MB values
        if isinstance(loop_warn, float):
            w_mb = total_mb * loop_warn / 100
        else:
            w_mb = float(loop_warn)

        if isinstance(loop_crit, float):
            c_mb = total_mb * loop_crit / 100
        else:
            c_mb = float(loop_crit)

        loop_state = 0
        infotxt = "%s %.1f MB" % (what, loop_val)
        if (loop_val >= c_mb) != neg:
            loop_state = 2
            infotxt += " (critical at %.1f MB!!)" % c_mb
        elif (loop_val >= w_mb) != neg:
            loop_state = 1
            infotxt += " (warning at %.1f MB!)" % w_mb
        state = max(state, loop_state)
        infotxts.append(infotxt)
        perfdata.append((var, loop_val, w_mb, c_mb, 0, total_mb))
    return (state, ("total %.1f MB, " % total_mb) + ", ".join(infotxts), perfdata)


check_info["mem.vmalloc"] = {
    'inventory_function': inventory_mem_vmalloc,
    'check_function': check_mem_vmalloc,
    'service_description': 'Vmalloc address space',
    'has_perfdata': True,
    "handle_real_time_checks": True,
}
