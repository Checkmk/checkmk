#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

memused_default_levels = (150.0, 200.0)

factory_settings["memory_default_levels"] = {
    "levels": memused_default_levels,
}


# Parse /proc/meminfo into the canonical form: into bytes, not kB
# This function is also used by the ps check
def parse_proc_meminfo_bytes(info):
    meminfo = {}
    for line in info:
        value = int(line[1])
        if len(line) > 2 and line[2] == 'kB':
            value *= 1024
        meminfo[line[0][:-1]] = value
    return meminfo


def check_memory(params, meminfo):
    swapused_kb = meminfo['SwapTotal'] - meminfo['SwapFree']
    swapused = swapused_kb * 1024.0
    memused_kb = meminfo['MemTotal'] - meminfo['MemFree']
    memused = memused_kb * 1024.0

    # Buffers and Cached are optional. On Linux both mean basically the same.
    caches_kb = meminfo.get('Buffers', 0) + meminfo.get('Cached', 0)
    caches = caches_kb * 1024.0

    # Size of Pagetable on Linux can be relevant e.g. on ORACLE
    # servers with much memory, that do not use HugeTables. We account
    # that for used
    pagetables_kb = meminfo.get('PageTables', 0)
    pagetables_mb = pagetables_kb / 1024.0

    totalused_kb = (swapused_kb + memused_kb - caches_kb + pagetables_kb)
    totalused_mb = totalused_kb / 1024.0
    totalused = totalused_kb * 1024.0
    totalmem_kb = meminfo['MemTotal']
    totalmem_mb = totalmem_kb / 1024.0
    totalmem = totalmem_kb * 1024.0
    totalused_perc = 100 * (float(totalused_kb) / float(totalmem_kb))
    totalvirt_mb = (meminfo['SwapTotal'] + meminfo['MemTotal']) / 1024.0

    if isinstance(params, tuple):
        params = {"levels": params}
    warn, crit = params["levels"]

    details = []
    if swapused:
        details.append("%s SWAP" % render.fmt_bytes(swapused))

    if pagetables_kb:
        details.append("%s Pagetables" % render.fmt_bytes(pagetables_kb * 1024.0))

    if details:
        details.insert(0, "%s RAM" % render.fmt_bytes(memused - caches))
        details_txt = " + ".join(details) + ", "
    else:
        details_txt = ""

    if meminfo["SwapTotal"]:
        swap_txt = (" + %s SWAP" % render.fmt_bytes(meminfo["SwapTotal"]))
    else:
        swap_txt = ""

    infotext = "%s used (%sthis is %.1f%% of %s RAM%s)" % \
               (render.fmt_bytes(totalused), details_txt,
                totalused_perc, render.fmt_bytes(totalmem), swap_txt)

    # Take into account averaging
    average_min = params.get("average")
    if average_min:
        totalused_mb_avg = get_average("mem.used.total",
                                       time.time(),
                                       totalused_mb,
                                       average_min,
                                       initialize_zero=False)
        totalused_perc_avg = totalused_mb_avg / totalmem_mb * 100
        infotext += ", %d min average %.1f%%" % (average_min, totalused_perc_avg)
        comp_mb = totalused_mb_avg
    else:
        comp_mb = totalused_mb

    # levels may be given either in int -> MB or in float -> percentages. So convert
    # effective levels to MB now
    if isinstance(warn, float):
        warn_mb = int(warn / 100.0 * totalmem_mb)
        crit_mb = int(crit / 100.0 * totalmem_mb)
        leveltext = lambda x: "%.1f%%" % x
    else:
        warn_mb = warn
        crit_mb = crit
        leveltext = lambda x: "%.2f GB" % (x / 1024.0)

    # Prepare performance data
    perfdata = [
        ('ramused', (memused_kb - caches_kb) / 1024, None, None, 0, totalmem_mb),
        ('swapused', swapused_kb / 1024, None, None, 0, meminfo['SwapTotal'] / 1024),
        ('memused', totalused_mb, warn_mb, crit_mb, 0, totalvirt_mb),
    ]

    if average_min:
        perfdata.append(('memusedavg', totalused_mb_avg))

    # Check levels
    state = 0
    if warn_mb > 0:  # positive levels - used memory
        if comp_mb >= crit_mb:
            state = 2
            infotext += ", critical at %s used" % leveltext(crit)
        elif comp_mb >= warn_mb:
            state = 1
            infotext += ", warning at %s used" % leveltext(warn)
    else:  # negative levels - free memory
        freemem_mb = totalvirt_mb - comp_mb
        if freemem_mb <= -crit_mb:
            state = 2
            infotext += ", critical at %s free" % leveltext(-crit)
        elif freemem_mb <= -warn_mb:
            state = 1
            infotext += ", warning at %s free" % leveltext(-warn)

    # Add additional metrics, provided by Linux.
    mapped = meminfo.get('Mapped')
    if mapped:
        mapped_mb = int(mapped) / 1024
        committed_as_mb = int(meminfo.get('Committed_AS', 0)) / 1024
        shared_mb = int(meminfo.get('Shmem', 0)) / 1024

        perfdata += [
            ('mapped', mapped_mb),
            ('committed_as', committed_as_mb),
            ('pagetables', pagetables_mb),
            ('shared', shared_mb),
        ]
        infotext += ", %.1f mapped, %.1f committed, %.1f shared" % \
                    (mapped_mb / 1024.0, committed_as_mb / 1024.0, shared_mb / 1024.0)

    return state, infotext, perfdata
