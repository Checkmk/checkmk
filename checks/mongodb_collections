#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# <<<mongodb_collections:sep(9)>>>
# tanserver        tans        count        0
# tanserver        tans        indexDetails        {}
# tanserver        tans        storageSize        8192
# tanserver        tans        ok        1.0
# tanserver        tans        lastExtentSize        8192.0
# tanserver        tans        userFlags        1
# tanserver        tans        totalIndexSize        24528
# tanserver        tans        capped        False
# tanserver        tans        numExtents        1
# tanserver        tans        nindexes        3
# tanserver        tans        ns        tanserver.tans


def parse_mongodb_collections(info):
    required_keys_int = ("size", "storageSize")
    parsed = {}
    for line in info:
        db_name, collection, key, value = line
        data = parsed.setdefault("%s %s" % (db_name, collection), {})
        if key in required_keys_int:
            try:
                # Observed in the wild (on MongoDB 2.4.10, we don't know about other versions):
                # For some collections, these integer values are represented with a trailing .0
                # This does not appear to have any significance, but would throw a ValueError
                # when casting directly to int.
                data[key] = int(float(value))
            except ValueError:
                pass
        else:
            data[key] = value
    return parsed


@get_parsed_item_data
def check_mongodb_collections(_no_item, params, data):
    for key, label in (
        ("size", "Uncompressed size in memory"),
        ("storageSize", "Allocated for document storage"),
    ):
        if key not in data:
            continue
        levels = params.get("levels_%s" % key.lower())
        if levels is not None:
            levels = (levels[0] * 1024**2, levels[1] * 1024**2)

        perfdata = _get_perfdata_key(key)
        yield check_levels(data[key],
                           perfdata,
                           levels,
                           human_readable_func=get_bytes_human_readable,
                           infoname=label)
    yield 0, _long_output(data)


def _get_perfdata_key(key):
    if key == "size":
        return "mongodb_collection_size"
    elif key == "storageSize":
        return "mongodb_collection_storage_size"
    return None


def _long_output(data):
    number_of_chunks = data.get("nchunks", None)
    is_sharded = data.get("sharded", None)
    number_of_shards = data.get("shardsCount", None)
    average_object_size = float(data.get("avgObjSize", 0))
    number_of_documents = int(data.get("count", 0))
    collection_size = int(data.get("size", 0))
    storage_size = int(data.get("storageSize", 0))

    # output per collection
    long_output = ["Collection"]
    if is_sharded:
        long_output.append("- Sharded: %s (Data distributed in cluster)" % is_sharded)
    if number_of_shards:
        long_output.append("- Shards: %s (Number of shards)" % number_of_shards)
    if number_of_chunks:
        long_output.append("- Chunks: %s (Total number of chunks)" % number_of_chunks)
    long_output.append("- Document Count: %s (Number of documents in collection)" %
                       number_of_documents)
    long_output.append("- Object Size %s (Average object size)" %
                       get_bytes_human_readable(average_object_size))
    long_output.append("- Collection Size: %s (Uncompressed size in memory)" %
                       get_bytes_human_readable(collection_size))
    long_output.append("- Storage Size: %s (Allocated for document storage)" %
                       get_bytes_human_readable(storage_size))
    return "\n" + "\n".join(long_output)


check_info["mongodb_collections"] = {
    "parse_function": parse_mongodb_collections,
    "inventory_function": discover(),
    "check_function": check_mongodb_collections,
    "service_description": "MongoDB Collection: %s",
    "group": "mongodb_collections",
    "has_perfdata": True,
}
