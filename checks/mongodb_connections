#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# ------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# ------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# <<<mongodb_connections>>>
# current 68
# available 51132
# totalCreated 108141

factory_settings["mongodb_connections_default_levels"] = {
    'levels_perc': (80.0, 90.0),  # Levels at 80%/90% of maximum
}


def inventory_mongodb_connections(info):
    return [("Connections", {})]


def check_mongodb_connections(item, params, info):
    info_dict = {x[0]: x[1] for x in info}

    if not _is_int(["current", "available", "totalCreated"], info_dict):
        return

    current = int(info_dict["current"])
    available = int(info_dict["available"])
    maximum = current + available
    used_perc = float(current) / maximum * 100

    yield check_levels(current,
                       "connections",
                       params.get("levels_abs"),
                       human_readable_func=lambda x: "%d" % (x),
                       infoname="Used connections")

    yield check_levels(used_perc,
                       None,
                       params.get("levels_perc"),
                       human_readable_func=get_percent_human_readable,
                       infoname="Used percentage")

    rate = get_rate("total_created", time.time(), int(info_dict["totalCreated"]))
    yield 0, "Rate: %s/sec" % rate, [("connections_rate", rate)]


def _is_int(key_list, info_dict):
    """
    check if key is in dict and value is an integer
    :param key_list: list of keys
    :param info_dict: dict
    :return: True if all keys are in dict and values are integers
    """
    for key in key_list:
        try:
            int(info_dict[key])
        except (KeyError, ValueError, TypeError):
            return False
    return True


check_info['mongodb_connections'] = {
    "service_description": "MongoDB %s",
    "check_function": check_mongodb_connections,
    "inventory_function": inventory_mongodb_connections,
    "default_levels_variable": "mongodb_connections_default_levels",
    "group": "db_connections",
    "has_perfdata": True,
}
