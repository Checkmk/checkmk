#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.


def parse_mrpe(info):
    PluginData = collections.namedtuple("PluginData", ("name", "state", "info"))

    parsed = {}
    for line in info:
        # New Linux agent sends (check_name) in first column. Stay
        # compatible with MRPE versions not providing this info
        if line[0].startswith("("):
            name = line[0].strip('()')
            line = line[1:]
        else:
            name = None

        if len(line) < 2:
            continue

        import urllib.parse
        item = urllib.parse.unquote(line[0])
        state = line[1]
        line = line[2:]

        try:
            state = int(state)
        except ValueError:
            pass

        if state not in (0, 1, 2, 3):
            line.insert(0, "Invalid plugin status '%s'. Output is:" % state)
            state = 3

        # convert to original format by joining and splitting at \1 (which replaced \n)
        info = " ".join(line).split("\1")

        dataset = PluginData(name, state, info)
        parsed.setdefault(item, []).append(dataset)

    return parsed


@get_parsed_item_data
def check_mrpe(_no_item, _no_params, data):
    # This check is cluster-aware. An item might be found
    # more than once. In that case we use the best of the
    # multiple statuses (Where OK < WARN < UNKNOWN < CRIT).
    dataset = min(data, key=lambda x: (0, 1, 3, 2)[x.state])

    # First line:  OUTPUT|PERFDATA
    parts = dataset.info[0].split("|", 1)
    output = [parts[0].strip()]
    if len(parts) > 1:
        perfdata = parts[1].strip().split()
    else:
        perfdata = []

    # Further lines
    now_comes_perfdata = False
    for line in dataset.info[1:]:
        if now_comes_perfdata:
            perfdata += line.split()
        else:
            parts = line.split("|", 1)
            output.append(parts[0].strip())
            if len(parts) > 1:
                perfdata += parts[1].strip().split()
                now_comes_perfdata = True

    perf_parsed = []
    for perfvalue in perfdata:
        new_perf = parse_nagios_perfstring(perfvalue)
        if new_perf:
            perf_parsed.append(new_perf)

    # name of check command needed for PNP to choose the correct template
    if dataset.name:
        perf_parsed.append(dataset.name)
    return dataset.state, "\n".join(output), perf_parsed


check_info["mrpe"] = {
    'parse_function': parse_mrpe,
    'inventory_function': discover(),
    'check_function': check_mrpe,
    'service_description': '%s',
    'has_perfdata': True,
    'includes': ['parse_nagios.include'],
}
