#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

import typing

from cmk.base.plugins.agent_based.utils import cache_helper

LegacyMetricTuple = typing.Tuple[
    str,
    float,
    typing.Optional[float],
    typing.Optional[float],
    typing.Optional[float],
    typing.Optional[float],
]


def _opt_float(string: str) -> typing.Optional[float]:
    try:
        return float(string)
    except ValueError:
        return None


def _strip_unit_float(string: str) -> float:
    """
    >>> _strip_unit_float("12.3 MB")
    12.3
    """
    for i in range(len(string), 0, -1):
        try:
            return float(string[:i])
        except ValueError:
            pass
    # retrigger first ValueError:
    return float(string)


def parse_nagios_perfstring(perfinfo: str) -> typing.Optional[LegacyMetricTuple]:
    try:
        name, valuetxt = perfinfo.split("=", 1)
    except ValueError:
        return None
    if valuetxt.startswith("U"):
        # Nagios perfstrings can start with a value 'U' to indicate an undefined value
        # see https://nagios-plugins.org/doc/guidelines.html#AEN200
        return None
    values = valuetxt.split(";")

    # for the migrator: the code above ^^^^^ should go to a separate function

    # perfdata must not contain values with colons. So we split
    # these values and use the upper levels only.
    values = [v.split(":")[-1] for v in values][:5]
    value, warn, crit, min_, max_ = values + [""] * (5 - len(values))

    return (
        name,
        _strip_unit_float(value),
        _opt_float(warn),
        _opt_float(crit),
        _opt_float(min_),
        _opt_float(max_),
    )


@get_parsed_item_data
def check_mrpe(_no_item, _no_params, data):
    # This check is cluster-aware. An item might be found
    # more than once. In that case we use the best of the
    # multiple statuses (Where OK < WARN < UNKNOWN < CRIT).
    dataset = min(data, key=lambda x: (0, 1, 3, 2)[x.state])

    # First line:  OUTPUT|PERFDATA
    parts = dataset.info[0].split("|", 1)
    output = [parts[0].strip()]
    if len(parts) > 1:
        perfdata = parts[1].strip().split()
    else:
        perfdata = []

    # Further lines
    now_comes_perfdata = False
    for line in dataset.info[1:]:
        if now_comes_perfdata:
            perfdata += line.split()
        else:
            parts = line.split("|", 1)
            output.append(parts[0].strip())
            if len(parts) > 1:
                perfdata += parts[1].strip().split()
                now_comes_perfdata = True

    perf_parsed: typing.List[LegacyMetricTuple] = []
    for perfvalue in perfdata:
        new_perf = parse_nagios_perfstring(perfvalue)
        if new_perf:
            perf_parsed.append(new_perf)

    if dataset.cache_info is not None:
        yield 0, cache_helper.render_cache_info(dataset.cache_info)

    yield dataset.state, "\n".join(output), perf_parsed

    # name of check command needed for PNP to choose the correct template
    if dataset.name:
        yield 0, "\nCheck command used in metric system: %s" % dataset.name


check_info["mrpe"] = {
    # section already migrated!
    "inventory_function": discover(),
    "check_function": check_mrpe,
    "service_description": "%s",
    "has_perfdata": True,
}
