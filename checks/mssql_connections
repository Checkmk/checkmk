#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2017             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Example output:
# <<<mssql_connections>>>
# MSSQLSERVER master 16
# MSSQLSERVER tempdb 1

factory_settings["mssql_connections_default_levels"] = {
    "levels": (None, None),
}


def parse_mssql_connections(info):
    parsed = {}
    for line in info:
        try:
            instance, db_name, connection_count = line
            connection_count = int(connection_count)
            parsed.setdefault("%s %s" % (instance, db_name), connection_count)
        except ValueError:
            pass
    return parsed


def inventory_mssql_connections(parsed):
    for item in parsed:
        yield item, {}


def check_mssql_connections(item, params, parsed):
    # If a database is missing in the agent output there are no
    # active connections for that database.
    return check_levels(
        parsed.get(item, 0),
        "connections",
        params['levels'],
        human_readable_func=int,
        infoname="Connections",
    )


check_info['mssql_connections'] = {
    'parse_function': parse_mssql_connections,
    'inventory_function': inventory_mssql_connections,
    'check_function': check_mssql_connections,
    'service_description': 'MSSQL Connections %s',
    'group': 'mssql_connections',
    'default_levels_variable': "mssql_connections_default_levels",
    'has_perfdata': True,
}
