#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# example output
# <<<mssql_databases>>>^M
# MSSQL_MSSQL46 CorreLog_Report_T ONLINE FULL 0 0^M
# MSSQL_MSSQL46 DASH_CONFIG_T ONLINE FULL 0 0^M
# MSSQL_MSSQL46 master ONLINE SIMPLE 0 0^M
# MSSQL_MSSQL46 model ONLINE FULL 0 0^M
# MSSQL_MSSQL46 msdb ONLINE SIMPLE 0 0^M
# MSSQL_MSSQL46 NOC_ALARM_T ONLINE FULL 0 1^M
# MSSQL_MSSQL46 NOC_CONFIG_T ONLINE FULL 0 0^M
# MSSQL_MSSQL46 tempdb ONLINE SIMPLE 0 0^M
# MSSQL_MSSQL46 test_autoclose ONLINE FULL 1 0^M
# MSSQL_MSSQL46 test_autoclose RECOVERY PENDING FULL 1 0^M


def check_mssql_databases(item, params, parsed):
    data = parsed.get(item)
    if data is None:
        raise MKCounterWrapped("Login into database failed")

    map_states = {
        "1": (1, "on"),
        "0": (0, "off"),
    }

    db_state = data["Status"]
    if db_state.startswith("ERROR: "):
        yield 2, db_state[7:]
        return
    state = params.get("map_db_states", {}).get(db_state.replace(" ", "_").upper(), 0)
    yield state, 'Status: %s' % db_state
    yield 0, 'Recovery: %s' % data["Recovery"]

    for what in ["close", "shrink"]:
        state, state_readable = map_states[data["auto_%s" % what]]
        state = params.get("map_auto_%s_state" % what, {}).get(state_readable, state)
        yield state, 'Auto %s: %s' % (what, state_readable)


check_info['mssql_databases'] = {
    'parse_function': parse_mssql_databases,
    'inventory_function': discover(),
    'check_function': check_mssql_databases,
    'service_description': 'MSSQL %s Database',
    'group': 'mssql_databases',
    'includes': ['mssql.include'],
}
