#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# <<<mysql>>>
# [[mysql]]
# Aborted_clients 0
# Aborted_connects        15
# Binlog_cache_disk_use   0
# Binlog_cache_use        0
# Binlog_stmt_cache_disk_use      0
# Binlog_stmt_cache_use   0
# Bytes_received  7198841
# Bytes_sent      19266624
# Com_admin_commands      200
# Com_assign_to_keycache  0
# Com_alter_db    0
# Com_alter_db_upgrade    0

#   .--Helpers-------------------------------------------------------------.
#   |                  _   _      _                                        |
#   |                 | | | | ___| |_ __   ___ _ __ ___                    |
#   |                 | |_| |/ _ \ | '_ \ / _ \ '__/ __|                   |
#   |                 |  _  |  __/ | |_) |  __/ |  \__ \                   |
#   |                 |_| |_|\___|_| .__/ \___|_|  |___/                   |
#   |                              |_|                                     |
#   '----------------------------------------------------------------------'


# FIXME: Crapy copy n paste! Consolidate with other mysql_* parse functions
def parse_mysql(info):
    def parse_line(line):
        if len(line) == 2:
            varname, value = line
            try:
                value = int(value)
            except:
                pass
        else:
            varname = line[0]
            value = None
        return varname, value

    parsed = {}
    instance = False
    for line in info:
        if line[0].startswith("[["):
            instance = line[0][2:-2]
            if instance == "":
                instance = "mysql"
            parsed[instance] = {}
        elif instance:
            varname, value = parse_line(line)
            parsed[instance][varname] = value

    # Old Agent Plugin, no Instances in output
    if not instance:
        parsed['mysql'] = {}
        for line in info:
            varname, value = parse_line(line)
            parsed['mysql'][varname] = value

    return parsed


def check_mysql_version(item, _no_params, parsed):
    if item in parsed and not len(parsed[item]) == 0:
        values = parsed[item]
        return 0, "Version: " + values['version']


check_info['mysql'] = {
    "parse_function": parse_mysql,
    "inventory_function": discover(lambda k, values: 'version' in values),
    "check_function": check_mysql_version,
    "service_description": "MySQL Version %s",
}

#.
#   .--Sessions------------------------------------------------------------.
#   |                ____                _                                 |
#   |               / ___|  ___  ___ ___(_) ___  _ __  ___                 |
#   |               \___ \ / _ \/ __/ __| |/ _ \| '_ \/ __|                |
#   |                ___) |  __/\__ \__ \ | (_) | | | \__ \                |
#   |               |____/ \___||___/___/_|\___/|_| |_|___/                |
#   |                                                                      |
#   '----------------------------------------------------------------------'

# params:
# { "running" : (20, 40),
#    "total" : (100, 400),
#    "connections" : (3, 5 ),
# }


def check_mysql_sessions(item, params, parsed):
    if item in parsed and not len(parsed[item]) == 0:
        values = parsed[item]
        total_sessions = values["Threads_connected"]
        running_sessions = values["Threads_running"]
        connects = get_rate("mysql.sessions", time.time(), values["Connections"])

        infos = []
        perfdata = []
        status = 0

        for value, perfvar, what, format_str, unit in [
            (total_sessions, "total_sessions", "total", "%d", ""),
            (running_sessions, "running_sessions", "running", "%d", ""),
            (connects, "connect_rate", "connections", "%.2f", "/s"),
        ]:
            infos.append((format_str + " %s%s") % (value, what, unit))
            if what in params:
                warn, crit = params[what]
                if value >= crit:
                    status = 2
                    infos[-1] += "(!!)"
                elif value >= warn:
                    status = max(status, 1)
                    infos[-1] += "(!)"
            else:
                warn, crit = None, None
            perfdata.append((perfvar, value, warn, crit))

        return status, ", ".join(infos), perfdata


check_info['mysql.sessions'] = {
    "inventory_function": discover(lambda k, values: len(values.keys()) > 200),
    "check_function": check_mysql_sessions,
    "service_description": "MySQL Sessions %s",
    "has_perfdata": True,
    "group": "mysql_sessions",
}

#.
#   .--InnoDB-IO-----------------------------------------------------------.
#   |           ___                   ____  ____       ___ ___             |
#   |          |_ _|_ __  _ __   ___ |  _ \| __ )     |_ _/ _ \            |
#   |           | || '_ \| '_ \ / _ \| | | |  _ \ _____| | | | |           |
#   |           | || | | | | | | (_) | |_| | |_) |_____| | |_| |           |
#   |          |___|_| |_|_| |_|\___/|____/|____/     |___\___/            |
#   |                                                                      |
#   '----------------------------------------------------------------------'


def check_mysql_iostat(item, params, parsed):
    if item in parsed:
        values = parsed[item]

        if not ("Innodb_data_read" in values and "Innodb_data_written" in values):
            return 3, "Incomplete agent output"

        line = [None, None, values["Innodb_data_read"] / 512, values["Innodb_data_written"] / 512]
        return check_diskstat_line(time.time(), 'innodb_io' + item, params, line)


check_info['mysql.innodb_io'] = {
    "inventory_function": discover(lambda k, values: "Innodb_data_read" in values),
    "check_function": check_mysql_iostat,
    "service_description": "MySQL InnoDB IO %s",
    "has_perfdata": True,
    "group": "mysql_innodb_io",
    "includes": ["diskstat.include"],
}

#.
#   .--Connections---------------------------------------------------------.
#   |        ____                            _   _                         |
#   |       / ___|___  _ __  _ __   ___  ___| |_(_) ___  _ __  ___         |
#   |      | |   / _ \| '_ \| '_ \ / _ \/ __| __| |/ _ \| '_ \/ __|        |
#   |      | |__| (_) | | | | | | |  __/ (__| |_| | (_) | | | \__ \        |
#   |       \____\___/|_| |_|_| |_|\___|\___|\__|_|\___/|_| |_|___/        |
#   |                                                                      |
#   +----------------------------------------------------------------------+


# TODO: This check should rather output the current number of connections.
# The historic maximum can be viewed in the RRD data...
def check_mysql_connections(item, params, parsed):
    if item in parsed:
        values = parsed[item]
        if 'Max_used_connections' not in values:
            return 3, 'Connection information are missing'

        # The maximum number of connections that have been in use simultaneously
        # since the server started.
        conn = float(values['Max_used_connections'])

        # Maximum number of possible parallel connections
        max_conn = float(values['max_connections'])

        perc_used = conn / max_conn * 100

        status = 0
        status_txt = ''
        perf_data = [
            ("connections_max_used", conn),
            ("connections_max", max_conn),
            ('connections_perc_used', perc_used),
        ]

        if 'perc_used' in params:
            warn, crit = params['perc_used']
            if perc_used >= crit:
                status = 2
                status_txt = ' (Threshold (%0.2f%%) for number of maximum parallel connections ' \
                             'has been reached at least once since program start' % crit
            elif perc_used >= warn:
                status = 1
                status_txt = ' (Threshold (%0.2f%%) for number of maximum parallel connections ' \
                             'has been reached at least once since program start' % warn


        return status, 'Max. parallel Connections: %d (Max.: %d): %0.2f%%%s' % \
                (conn, max_conn, perc_used, status_txt), perf_data


@discover
def mysql_connections(instance, values):
    return all(x in values for x in ['Max_used_connections', 'max_connections'])


check_info['mysql.connections'] = {
    "inventory_function": mysql_connections,
    "check_function": check_mysql_connections,
    "service_description": "MySQL Connections %s",
    "group": "mysql_connections",
    "has_perfdata": True,
}

#
# Galera Sync Status
#

def inventory_mysql_galerasync(parsed):
    for instance, values in parsed.items():
        if values.get('wsrep_provider', 'none') != 'none' and u'wsrep_local_state_comment' in values:
            yield instance, {}

def check_mysql_galerasync(item, _no_params, parsed):
    if item in parsed:
        values = parsed[item]
        if u'wsrep_local_state_comment' in values:
            if values[u'wsrep_local_state_comment'] == 'Synced':
                return (0, 'wsrep_local_state_comment is %s' % values[u'wsrep_local_state_comment'])
            else:
                return (2, 'wsrep_local_state_comment is %s' % values[u'wsrep_local_state_comment'])

check_info['mysql.galerasync'] = {
    "inventory_function"      : inventory_mysql_galerasync,
    "check_function"          : check_mysql_galerasync,
    "service_description"     : "MySQL Galera Sync %s",
    "has_perfdata"            : False,
}

#.
#   .--Galera Donor--------------------------------------------------------.
#   |      ____       _                  ____                              |
#   |     / ___| __ _| | ___ _ __ __ _  |  _ \  ___  _ __   ___  _ __      |
#   |    | |  _ / _` | |/ _ \ '__/ _` | | | | |/ _ \| '_ \ / _ \| '__|     |
#   |    | |_| | (_| | |  __/ | | (_| | | |_| | (_) | | | | (_) | |        |
#   |     \____|\__,_|_|\___|_|  \__,_| |____/ \___/|_| |_|\___/|_|        |
#   |                                                                      |
#   +----------------------------------------------------------------------+

def inventory_mysql_galeradonor(parsed):
    for instance, values in parsed.items():
        if values.get('wsrep_provider', 'none') != 'none' and u'wsrep_sst_donor' in values:
            yield instance, {'wsrep_sst_donor': values['wsrep_sst_donor']}

def check_mysql_galeradonor(item, params, parsed):
    if item in parsed:
        values = parsed[item]
        if u'wsrep_sst_donor' in values:
            if values[u'wsrep_sst_donor'] == params['wsrep_sst_donor']:
                return (0, 'wsrep_sst_donor contains "%s"' % values[u'wsrep_sst_donor'])
            else:
                return (1, 'wsrep_sst_donor contains "%s" and not "%s"' % (values[u'wsrep_sst_donor'], params['wsrep_sst_donor']))

check_info['mysql.galeradonor'] = {
    "inventory_function"      : inventory_mysql_galeradonor,
    "check_function"          : check_mysql_galeradonor,
    "service_description"     : "MySQL Galera Donor %s",
    "has_perfdata"            : False,
}

#.
#   .--Galera Startup------------------------------------------------------.
#   |  ____       _                  ____  _             _                 |
#   | / ___| __ _| | ___ _ __ __ _  / ___|| |_ __ _ _ __| |_ _   _ _ __    |
#   || |  _ / _` | |/ _ \ '__/ _` | \___ \| __/ _` | '__| __| | | | '_ \   |
#   || |_| | (_| | |  __/ | | (_| |  ___) | || (_| | |  | |_| |_| | |_) |  |
#   | \____|\__,_|_|\___|_|  \__,_| |____/ \__\__,_|_|   \__|\__,_| .__/   |
#   |                                                             |_|      |
#   +----------------------------------------------------------------------+

def inventory_mysql_galerastartup(parsed):
    for instance, values in parsed.items():
        if values.get('wsrep_provider', 'none') != 'none' and u'wsrep_cluster_address' in values:
            yield instance, {}

def check_mysql_galerastartup(item, _no_params, parsed):
    if item in parsed:
        values = parsed[item]
        if u'wsrep_cluster_address' in values:
            if values[u'wsrep_cluster_address'] == 'gcomm://':
                return (2, 'wsrep_cluster_address is empty')
            else:
                return (0, 'wsrep_cluster_address contains %s' % values[u'wsrep_cluster_address'])

check_info['mysql.galerastartup'] = {
    "inventory_function"      : inventory_mysql_galerastartup,
    "check_function"          : check_mysql_galerastartup,
    "service_description"     : "MySQL Galera Startup %s",
    "has_perfdata"            : False,
}

#.
#   .--Galera Cluster Size-------------------------------------------------.
#   |     ____       _                   ____ _           _                |
#   |    / ___| __ _| | ___ _ __ __ _   / ___| |_   _ ___| |_ ___ _ __     |
#   |   | |  _ / _` | |/ _ \ '__/ _` | | |   | | | | / __| __/ _ \ '__|    |
#   |   | |_| | (_| | |  __/ | | (_| | | |___| | |_| \__ \ ||  __/ |       |
#   |    \____|\__,_|_|\___|_|  \__,_|  \____|_|\__,_|___/\__\___|_|       |
#   |                                                                      |
#   |                           ____  _                                    |
#   |                          / ___|(_)_______                            |
#   |                          \___ \| |_  / _ \                           |
#   |                           ___) | |/ /  __/                           |
#   |                          |____/|_/___\___|                           |
#   |                                                                      |
#   +----------------------------------------------------------------------+

def inventory_mysql_galerasize(parsed):
    for instance, values in parsed.items():
        if values.get('wsrep_provider', 'none') != 'none' and u'wsrep_cluster_size' in values:
            yield instance, {'invsize': saveint(values[u'wsrep_cluster_size'])}

def check_mysql_galerasize(item, params, parsed):
    if item in parsed:
        values = parsed[item]
        if u'wsrep_cluster_size' in values:
            size = saveint(values[u'wsrep_cluster_size'])
            res = 0
            txt = 'wsrep_cluster_size = %d' % size
            perfdata = [('galera_size', size)]
            if size != params['invsize']:
                res = 2
                txt += ', size at discovery was %d' % params['invsize']
            return (res, txt, perfdata)

check_info['mysql.galerasize'] = {
    "inventory_function"  : inventory_mysql_galerasize,
    "check_function"      : check_mysql_galerasize,
    "service_description" : "MySQL Galera Size %s",
    "has_perfdata"        : True,
}

#.
#   .--Galera Status-------------------------------------------------------.
#   |      ____       _                  ____  _        _                  |
#   |     / ___| __ _| | ___ _ __ __ _  / ___|| |_ __ _| |_ _   _ ___      |
#   |    | |  _ / _` | |/ _ \ '__/ _` | \___ \| __/ _` | __| | | / __|     |
#   |    | |_| | (_| | |  __/ | | (_| |  ___) | || (_| | |_| |_| \__ \     |
#   |     \____|\__,_|_|\___|_|  \__,_| |____/ \__\__,_|\__|\__,_|___/     |
#   |                                                                      |
#   +----------------------------------------------------------------------+

def inventory_mysql_galerastatus(parsed):
    for instance, values in parsed.items():
        if values.get('wsrep_provider', 'none') != 'none' and u'wsrep_cluster_status' in values:
            yield instance, {}

def check_mysql_galerastatus(item, _no_params, parsed):
    if item in parsed:
        values = parsed[item]
        if u'wsrep_cluster_status' in values:
            if values[u'wsrep_cluster_status'] == 'Primary':
                return (0, 'wsrep_cluster_status is %s' % values[u'wsrep_cluster_status'])
            else:
                return (2, 'wsrep_cluster_status is %s' % values[u'wsrep_cluster_status'])

check_info['mysql.galerastatus'] = {
    "inventory_function"      : inventory_mysql_galerastatus,
    "check_function"          : check_mysql_galerastatus,
    "service_description"     : "MySQL Galera Status %s",
    "has_perfdata"            : False,
}
