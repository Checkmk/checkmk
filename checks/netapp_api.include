#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.


# Transforms all lines into a dictionary.
# The first key is the dictionary key, unless modified by the custom_keys
def netapp_api_parse_lines(info, custom_keys=None, as_dict_list=False, item_func=None):
    if custom_keys is None:
        custom_keys = []

    instances = {}
    for line in info:
        instance = {}
        name = line[0].split(" ", 1)[1]
        for element in line:
            tokens = element.split(" ", 1)
            instance[tokens[0]] = tokens[1]

        if custom_keys:
            custom_name = []
            for key in custom_keys:
                if key in instance:
                    custom_name.append(instance[key])
            name = ".".join(custom_name)

        if item_func:
            name = item_func(name, instance)

        if as_dict_list:
            instances.setdefault(name, [])
            instances[name].append(instance)
        else:
            instances[name] = instance

    return instances


def _discover_single_items(discovery_rules):
    config = host_extra_conf_merged(host_name(), discovery_rules)
    mode = config.get("mode", "single")
    return mode == "single"


def maybefloat(num):
    """Return a float, or None if not possible.

    :param num:
        Something numeric, either an integer a float or a string. Must be convertible
        via a call to `float`.

    :return:
        A float or None
    """
    try:
        return float(num)
    except (TypeError, ValueError):
        return None
