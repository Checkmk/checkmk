#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


# Transforms all lines into a dictionary.
# The first key is the dictionary key, unless modified by the custom_keys
def netapp_api_parse_lines(info, custom_keys=None, as_dict_list=False, item_func=None):
    if custom_keys is None:
        custom_keys = []

    instances = {}
    for line in info:
        instance = {}
        name = line[0].split(" ", 1)[1]
        for element in line:
            tokens = element.split(" ", 1)
            instance[tokens[0]] = tokens[1]

        if custom_keys:
            custom_name = []
            for key in custom_keys:
                if key in instance:
                    custom_name.append(instance[key])
            name = ".".join(custom_name)

        if item_func:
            name = item_func(name, instance)

        if as_dict_list:
            instances.setdefault(name, [])
            instances[name].append(instance)
        else:
            instances[name] = instance

    return instances


def _discover_single_items(discovery_rules):
    config = host_extra_conf_merged(host_name(), discovery_rules)
    mode = config.get("mode", "single")
    return mode == "single"


def maybefloat(num):
    """Return a float, or None if not possible.

    :param num:
        Something numeric, either an integer a float or a string. Must be convertible
        via a call to `float`.

    :return:
        A float or None
    """
    try:
        return float(num)
    except (TypeError, ValueError):
        return None
