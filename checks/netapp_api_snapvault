#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from cmk.base.check_legacy_includes.netapp_api import *  # pylint: disable=wildcard-import,unused-wildcard-import
# <<<netapp_api_vf_snapvault:sep(9)>>>
# snapvault /vol/ipb_datap/   status idle state snapvaulted   lag-time 53812  source-system 172.31.12.15
# snapvault /vol/ipb_datas/   status idle state snapvaulted   lag-time 53812  source-system 172.31.12.15
# snapvault /vol/ipb_user/    status idle state snapvaulted   lag-time 97007  source-system 172.31.12.15
# snapvault /vol/ipb_vol0/    status idle state snapvaulted   lag-time 97011  source-system 172.31.12.15


def inventory_netapp_api_snapvault(parsed):
    for snapvault, values in parsed.items():
        if "lag-time" in values:
            yield snapvault, {}


@get_parsed_item_data
def check_netapp_api_snapvault(item, params, snapvault):
    for what in ["source-system", "destination-system", "policy", "status", "state"]:
        if what in snapvault:
            yield 0, "%s: %s" % (what.title(), snapvault[what])

    lag_time = snapvault.get("lag-time")
    if not lag_time:
        return

    lag_time = int(lag_time)
    state = 0
    if params:
        levels = None
        snapvault_policy = snapvault.get("policy")

        for name, policy_levels in params.get("policy_lag_time", []):
            if name == snapvault_policy:
                levels = policy_levels
                break

        if not levels and params.get("lag_time"):
            levels = params["lag_time"]

        if levels:
            warn, crit = levels
            if lag_time >= crit:
                state = 2
            elif lag_time >= warn:
                state = 1

    yield state, "Lag-Time: %s" % get_age_human_readable(lag_time)


def netapp_api_snapvault_item(name, _values):
    return name.replace("$", "_")


check_info["netapp_api_snapvault"] = {
    'parse_function': lambda x: netapp_api_parse_lines(x, item_func=netapp_api_snapvault_item),
    'check_function': check_netapp_api_snapvault,
    'inventory_function': inventory_netapp_api_snapvault,
    'group': "snapvault",
    'service_description': 'Snapvault %s',
}
