#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

netapp_api_vf_stats_cpu_util_default_levels = (90.0, 95.0)

# <<<netapp_api_vf_stats:sep(9)>>>
# vfiler vfiler0 instance_uuid   node_uuid       vfiler_cpu_busy 663312444303217 vfiler_net_data_sent 8204762    vfiler_read_ops 14334581 ...


def inventory_netapp_api_vf_stats(parsed):
    stats, _cpu = parsed
    for key in stats:
        yield key, 'netapp_api_vf_stats_cpu_util_default_levels'


def check_netapp_api_vf_stats(item, params, parsed):
    stats, cpu = parsed

    vf = stats.get(item)
    if not vf:
        return

    now = time.time()

    cpu_busy = int(vf["vfiler_cpu_busy"])
    ticks_per_sec = get_rate("netapp_api_vf_stats.cpu_busy", now, cpu_busy, onwrap=RAISE)

    cpu_busy_base = int(vf["vfiler_cpu_busy_base"])
    ticks_per_sec_base = get_rate("netapp_api_vf_stats.cpu_busy_base",
                                  now,
                                  cpu_busy_base,
                                  onwrap=RAISE)

    if ticks_per_sec == 0:
        raise MKCounterWrapped("Counter wrapped")

    # vFilers are 7mode only and cannot appear in clustermoder
    num_processors = float(cpu.get('7mode', {}).get("num_processors", 1))

    used_perc = (ticks_per_sec / num_processors) / ticks_per_sec_base * 100  # fixed: true-division

    # Due to timeing invariancies the measured level can become > 100%.
    # This makes users unhappy, so cut it off.
    if used_perc < 0:
        used_perc = 0
    elif used_perc > 100:
        used_perc = 100

    state, infotext, perfdata = next(check_cpu_util(used_perc, params, now))
    perfdata[0] = perfdata[0][:5]
    infotext += ", Num Processors: %d" % num_processors
    return state, infotext, perfdata


check_info["netapp_api_vf_stats"] = {
    'parse_function': netapp_api_parse_lines,
    'check_function': check_netapp_api_vf_stats,
    'inventory_function': inventory_netapp_api_vf_stats,
    'has_perfdata': True,
    'group': 'cpu_utilization_multiitem',
    'service_description': 'CPU utilization %s',
    'includes': ["cpu_util.include", "netapp_api.include"],
    'extra_sections': ['netapp_api_cpu'],
}


def inventory_netapp_api_vf_stats_traffic(parsed):
    stats, _ = parsed
    for key in stats:
        yield key, None


def check_netapp_api_vf_stats_traffic(item, params, parsed):
    stats, _ = parsed

    vf = stats.get(item)
    if not vf:
        return
    else:
        now = time.time()
        for entry, name, base, factor, unit in [
            ("read_ops", "Read", 1000.0, 1, "OP/s"),
            ("write_ops", "Write", 1000.0, 1, "OP/s"),
            ("net_data_recv", "Net Data Recv", 1024.0, 1024, "B/s"),
            ("net_data_sent", "Net Data Sent", 1024.0, 1024, "B/s"),
            ("read_bytes", "Read", 1024.0, 1024, "B/s"),
            ("write_bytes", "Write", 1024.0, 1024, "B/s"),
        ]:
            traffic = int(vf["vfiler_" + entry]) * factor
            ticks_per_sec = get_rate("netapp_api_vf_stats.traffic.%s.%s" % (item, entry), now,
                                     traffic)
            yield 0, "%s: %s" % (name, get_bytes_human_readable(
                ticks_per_sec, base=base, unit=unit)), [(entry, ticks_per_sec)]


check_info["netapp_api_vf_stats.traffic"] = {
    'check_function': check_netapp_api_vf_stats_traffic,
    'inventory_function': inventory_netapp_api_vf_stats_traffic,
    'has_perfdata': True,
    'service_description': 'Traffic vFiler %s',
}
