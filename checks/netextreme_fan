#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from cmk.base.check_legacy_includes.fan import *  # pylint: disable=wildcard-import,unused-wildcard-import
# Just an assumption, levels as in other fan checks
factory_settings["netextreme_fan_default_levels"] = {
    "lower": (2000, 1000),
    "upper": (8000, 8400),
}


def inventory_netextreme_fan(info):
    return [(line[0], {}) for line in info]


def check_netextreme_fan(item, params, info):
    map_fan_status = {
        "1": (0, "on"),
        "2": (0, "off"),
    }
    for fan_nr, fan_status, fan_speed_str in info:
        if fan_nr == item:
            state, state_readable = map_fan_status[fan_status]
            yield state, "Operational status: %s" % state_readable
            if fan_speed_str:
                yield check_fan(int(fan_speed_str), params)


check_info['netextreme_fan'] = {
    'inventory_function': inventory_netextreme_fan,
    'check_function': check_netextreme_fan,
    'service_description': 'Fan %s',
    'snmp_info': (
        ".1.3.6.1.4.1.1916.1.1.1.9.1",
        [
            "1",  # extremeFanNumber
            "2",  # extremeFanOperational (TruthValue)
            "4",  # extremeFanSpeed (RPM)
        ]),
    'snmp_scan_function': lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.1916.2"),
    'has_perfdata': True,
    'group': 'hw_fans',
    'default_levels_variable': 'netextreme_fan_default_levels',
}
