#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from cmk.base.check_legacy_includes.elphase import *  # pylint: disable=wildcard-import,unused-wildcard-import
# .1.3.6.1.4.1.1916.1.1.1.27.1.9.1 52550 --> EXTREME-SYSTEM-MIB::extremePowerSupplyInputPowerUsage.1
# .1.3.6.1.4.1.1916.1.1.1.27.1.9.2 43700 --> EXTREME-SYSTEM-MIB::extremePowerSupplyInputPowerUsage.2
# .1.3.6.1.4.1.1916.1.1.1.27.1.11.1 -3 --> EXTREME-SYSTEM-MIB::extremePowerSupplyInputPowerUsageUnitMultiplier.1
# .1.3.6.1.4.1.1916.1.1.1.27.1.11.2 -3 --> EXTREME-SYSTEM-MIB::extremePowerSupplyInputPowerUsageUnitMultiplier.2

# Just an assumption
factory_settings["netextreme_psu_in_default_levels"] = {
    "power": (110, 120),  # This levels a recomended by the manufactorer
}


def parse_netextreme_psu_in(info):
    parsed = {}
    for psu_index, psu_usage_str, psu_factor_str in info:
        power = float(psu_usage_str) * pow(10, int(psu_factor_str))
        if power > 0:
            parsed["Input %s" % psu_index] = {
                "power": power,
            }
    return parsed


check_info['netextreme_psu_in'] = {
    'parse_function': parse_netextreme_psu_in,
    'inventory_function': inventory_elphase,
    'check_function': check_elphase,
    'service_description': 'Power Supply %s',
    'has_perfdata': True,
    'snmp_info': (
        ".1.3.6.1.4.1.1916.1.1.1.27.1",
        [
            OID_END,  # Power Supply Index
            "9",  # extremePowerSupplyInputPowerUsage
            "11",  # extremePowerSupplyInputPowerUsageUnitMultiplier
        ]),
    'snmp_scan_function': lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.1916.2"),
    'group': "el_inphase",
    'default_levels_variable': "netextreme_psu_in_default_levels",
}
