#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

#
# Example Output:
# .1.3.6.1.4.1.5951.4.1.1.53.1.1.0  13
# .1.3.6.1.4.1.5951.4.1.1.53.1.2.0  11

factory_settings["netscaler_dnsrates_default_levels"] = {
    "query": (1500.0, 2000.0),
    "answer": (1500.0, 2000.0),
}


def inventory_netscaler_dnsrates(info):
    if info:
        return [(None, 'netscaler_dnsrates_default_levels')]


def check_netscaler_dnsrates(_no_item, params, info):
    queries, answers = map(int, info[0])

    now = time.time()
    for name, counter in [("query", queries), ("answer", answers)]:

        rate = get_rate(name, now, counter)
        warn, crit = params[name]
        infotext = "%s rate %.1f/sec" % (name, rate)
        perfdata = [(name + "_rate", rate, warn, crit, 0)]

        state = 0
        if rate >= crit:
            state = 2
        elif rate >= warn:
            state = 1
        if state > 0:
            infotext += " (warn/crit at %.1f/%.1f /sec)" % (warn, crit)

        yield state, infotext, perfdata


check_info["netscaler_dnsrates"] = {
    "check_function": check_netscaler_dnsrates,
    "inventory_function": inventory_netscaler_dnsrates,
    "service_description": "DNS rates",
    "has_perfdata": True,
    "group": "netscaler_dnsrates",
    "snmp_info": (
        ".1.3.6.1.4.1.5951.4.1.1.53.1",
        [  # nsDnsServerStatsGroup
            1,  # dnsTotQueries
            2,  # dnsTotAnswers
        ]),
    "snmp_scan_function": lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.5951.1"),
    "default_levels_variable": "netscaler_dnsrates_default_levels",
}
