#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

#
# Example Output:
# .1.3.6.1.4.1.5951.4.1.1.46.1.0  3
# .1.3.6.1.4.1.5951.4.1.1.46.2.0  16

factory_settings["netscaler_tcp_conns_default_levels"] = {
    "server_conns": (25000, 30000),
    "client_conns": (25000, 30000),
}


def inventory_netscaler_tcp_conns(info):
    if info:
        return [(None, {})]


def check_netscaler_tcp_conns(_no_item, params, info):
    for name, index, infotext in [
        ("server_conns", 0, "Server Connections"),
        ("client_conns", 1, "Client Connections"),
    ]:
        value = int(info[0][index])
        infotext += ": %d" % value
        warn, crit = params[name]

        perfdata = [(name, value, warn, crit, 0)]

        state = 0
        if value >= crit:
            state = 2
        elif value >= warn:
            state = 1
        if state > 0:
            infotext += " (warn/crit at %d/%d)" % (warn, crit)

        yield state, infotext, perfdata


check_info["netscaler_tcp_conns"] = {
    "check_function": check_netscaler_tcp_conns,
    "inventory_function": inventory_netscaler_tcp_conns,
    "default_levels_variable": "netscaler_tcp_conns_default_levels",
    "service_description": "TCP Connections",
    "has_perfdata": True,
    "group": "netscaler_tcp_conns",
    "snmp_info": (
        ".1.3.6.1.4.1.5951.4.1.1.46",
        [
            1,  # tcpCurServerConn
            2,  # tcpCurClientConn
        ]),
    "snmp_scan_function": lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.5951.1"),
}
