#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2019             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Example output from agent (Linux) - note missing LISTENING column for UDP
# <<netstat>>>
# tcp        0      0 0.0.0.0:6556            0.0.0.0:*               LISTENING
# tcp        0      0 127.0.0.1:445           0.0.0.0:*               LISTENING
# tcp        0      0 10.1.1.50:445           0.0.0.0:*               LISTENING
# tcp        0      0 127.0.0.1:57573         127.0.0.1:80            ESTABLISHED
# tcp        0      0 10.1.1.50:38692         178.248.246.154:993     ESTABLISHED
# tcp        0      0 127.0.0.1:34929         127.0.0.1:5000          TIME_WAIT
# tcp        0      0 127.0.0.1:34922         127.0.0.1:5000          TIME_WAIT
# tcp        0      0 127.0.0.1:80            127.0.0.1:57454         TIME_WAIT
# tcp        0      0 127.0.0.1:35005         127.0.0.1:5000          TIME_WAIT
# tcp        0      0 10.1.1.50:38612         178.248.246.154:993     ESTABLISHED
# tcp        0      0 127.0.0.1:80            127.0.0.1:57548         TIME_WAIT
# tcp        0      0 127.0.0.1:34981         127.0.0.1:5000          TIME_WAIT
# tcp        0      0 127.0.0.1:54552         127.0.0.1:13419         ESTABLISHED
# tcp        0      0 127.0.0.1:35012         127.0.0.1:5000          TIME_WAIT
# tcp        0      0 127.0.0.1:34910         127.0.0.1:5000          TIME_WAIT
# tcp        0      0 127.0.0.1:34915         127.0.0.1:5000          TIME_WAIT
# tcp        0      0 127.0.0.1:80            127.0.0.1:57546         TIME_WAIT
# tcp        0      0 127.0.0.1:34935         127.0.0.1:5000          TIME_WAIT
# tcp        0      0 127.0.0.1:34984         127.0.0.1:5000          TIME_WAIT
# tcp        0      0 127.0.0.1:80            127.0.0.1:57488         TIME_WAIT
# tcp        0      0 127.0.0.1:34967         127.0.0.1:5000          TIME_WAIT
# udp        0      0 10.1.2.255:137          0.0.0.0:*
# udp        0      0 10.1.2.160:137          0.0.0.0:*
# udp        0      0 0.0.0.0:137             0.0.0.0:*

# Example Output for AIX:
# tcp4  0   0   127.0.0.1.1234  127.0.0.1.5678  ESTABLISHED


def parse_netstat(info):
    def split_ip_address(ip_address):
        if ":" in ip_address:
            return ip_address.rsplit(":", 1)
        return ip_address.rsplit(".", 1)

    connections = []
    for line in info:
        if len(line) == 6:
            proto, _recv_q, _send_q, local, remote, connstate = line
            if proto.startswith("tcp"):  # also tcp4 and tcp6
                proto = "TCP"
            elif proto.startswith("udp"):
                proto = "UDP"
            # Ubuntu recently deviced to use "LISTEN" instead of "LISTENING"
            if connstate == "LISTEN":
                connstate = "LISTENING"

        if len(line) == 5:
            proto, _recv_q, _send_q, local, remote = line
            proto = "UDP"
            connstate = "LISTENING"

        connections.append((proto, split_ip_address(local), split_ip_address(remote), connstate))
    return connections


check_info["netstat"] = {
    'parse_function': parse_netstat,
    'check_function': check_netstat_generic,
    'service_description': "TCP Connection %s",
    'group': "tcp_connections",
    'includes': ["netstat.include"],
    'has_perfdata': True,
}
