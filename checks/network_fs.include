#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# <<<...mounts>>>
# /foobar hanging 0 0 0 0
# /with spaces ok 217492 123563 112515 524288
# /with spaces Permission denied


def parse_network_fs_mounts(info):
    parsed = {}
    for line in info:
        if " ".join(line[-2:]) == "Permission denied":
            parsed.setdefault(" ".join(line[:-2]), {"state": "Permission denied"})

        else:
            parsed.setdefault(" ".join(line[:-5]), {
                "state": line[-5],
                "data": line[-4:],
            })

    return parsed


def inventory_network_fs_mounts(parsed):
    for mp in parsed:
        yield mp, {}


def check_network_fs_mounts(item, params, parsed):
    attrs = parsed.get(item)
    if not attrs:
        return 3, "%s not mounted" % item

    state = attrs["state"]
    if state == "Permission denied":
        return 2, "Permission denied"
    elif state == "hanging":
        return 2, "Server not responding"
    elif state != 'ok':
        return 2, "Unknown state"

    data = attrs["data"]
    if data == ['-', '-', '-', '-']:
        return 0, "Mount seems OK"
    size_blocks, _, free_blocks, blocksize = map(int, data)

    # According to the mount.cifs manpage th maximum blocksize is not allowed
    # to be greater than 16MB.
    if size_blocks <= 0 or free_blocks < 0 or blocksize > 16 * 1024 * 1024:
        return 2, "Stale fs handle"

    size_bytes = size_blocks * blocksize
    free_bytes = free_blocks * blocksize
    used_bytes = size_bytes - free_bytes
    used_perc = 100.0 * used_bytes / size_bytes

    perfdata = None
    if params is not None and params.get("has_perfdata"):
        perfdata = [("fs_size", size_bytes), ("fs_used", used_bytes)]

    infotext = "%.1f%% used (%s of %s)" % (used_perc, get_bytes_human_readable(used_bytes),
                                           get_bytes_human_readable(size_bytes))
    return 0, infotext, perfdata
