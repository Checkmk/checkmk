#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

factory_settings["nimble_latency_default_levels"] = {
    "0.1": (0, 20),
    "0.2": (0, 20),
    "0.5": (0, 20),
    "1": (0, 20),
    "2": (0, 20),
    "5": (0, 20),
    "10": (1, 20),
    "20": (1, 20),
    "50": (1, 20),
    "100": (2, 20),
    "200": (2, 20),
    "500": (2, 20),
    "1000": (2, 20),
}

NimbleReadsType = "read"
NimbleWritesType = "write"


def parse_nimble_read_latency(info):
    parsed = {}
    for line in info:
        vol_name = line[0]
        for ty, start_idx in [
            (NimbleReadsType, 1),
            (NimbleWritesType, 15),
        ]:
            values = line[start_idx:start_idx + 14]
            for key, title, value_str in zip([
                    "total",
                    "0.1",
                    "0.2",
                    "0.5",
                    "1",
                    "2",
                    "5",
                    "10",
                    "20",
                    "50",
                    "100",
                    "200",
                    "500",
                    "1000",
            ], [
                    "Total",
                    "0-0.1 ms",
                    "0.1-0.2 ms",
                    "0.2-0.5 ms",
                    "0.5-1.0 ms",
                    "1-2 ms",
                    "2-5 ms",
                    "5-10 ms",
                    "10-20 ms",
                    "20-50 ms",
                    "50-100 ms",
                    "100-200 ms",
                    "200-500 ms",
                    "500+ ms",
            ], values):
                try:
                    value = int(value_str) * 1000.0
                except ValueError:
                    continue
                inst = parsed.setdefault(vol_name, {}).setdefault(ty, {})
                inst[(key, title)] = value
    return parsed


def inventory_nimble_latency(parsed, ty):
    for vol_name, vol_attrs in parsed.items():
        if ty in vol_attrs:
            yield vol_name, {}


def _check_nimble_latency(item, params, data, ty):
    ty_data = data.get(ty)
    if ty_data is None:
        return

    timestamp = time.time()
    for (key, title), value in ty_data.items():
        rate = get_rate("nimble_%s_latency.%s.%s" % (ty, item, key), timestamp, value)

        yield 0, None, [("nimble_%s_latency_%s" % (ty, key.replace(".", "")), rate)]

        rate_readable = get_age_human_readable(rate)
        if key == "total":
            yield 0, '%s: %s' % (title, rate_readable)
            continue

        state, state_count = params[key]
        if rate > state_count:
            level_info = ""
            if state:
                level_info = " (level at %s)" % get_age_human_readable(state_count)
            yield state, "%s: %s%s" % (title, rate_readable, level_info)
        else:
            continue


@get_parsed_item_data
def check_nimble_latency_reads(item, params, data):
    return _check_nimble_latency(item, params, data, NimbleReadsType)


check_info['nimble_latency'] = {
    'parse_function': parse_nimble_read_latency,
    'inventory_function': lambda parsed: inventory_nimble_latency(parsed, NimbleReadsType),
    'check_function': check_nimble_latency_reads,
    'service_description': 'Volume %s Read IO',
    'snmp_info': (
        '.1.3.6.1.4.1.37447.1.2.1',
        [
            "3",  # NIMBLE-MIB::volName
            "13",  # NIMBLE-MIB::volIoReads
            "21",  # NIMBLE-MIB::volIoReadLatency0uTo100u
            "22",  # NIMBLE-MIB::volIoReadLatency100uTo200u
            "23",  # NIMBLE-MIB::volIoReadLatency200uTo500u
            "24",  # NIMBLE-MIB::volIoReadLatency500uTo1m
            "25",  # NIMBLE-MIB::volIoReadLatency1mTo2m
            "26",  # NIMBLE-MIB::volIoReadLatency2mTo5m
            "27",  # NIMBLE-MIB::volIoReadLatency5mTo10m
            "28",  # NIMBLE-MIB::volIoReadLatency10mTo20m
            "29",  # NIMBLE-MIB::volIoReadLatency20mTo50m
            "30",  # NIMBLE-MIB::volIoReadLatency50mTo100m
            "31",  # NIMBLE-MIB::volIoReadLatency100mTo200m
            "32",  # NIMBLE-MIB::volIoReadLatency200mTo500m
            "33",  # NIMBLE-MIB::volIoReadLatency500mTomax
            "34",  # NIMBLE-MIB::volIoWrites
            "39",  # NIMBLE-MIB::volIoWriteLatency0uTo100u
            "40",  # NIMBLE-MIB::volIoWriteLatency100uTo200u
            "41",  # NIMBLE-MIB::volIoWriteLatency200uTo500u
            "42",  # NIMBLE-MIB::volIoWriteLatency500uTo1m
            "43",  # NIMBLE-MIB::volIoWriteLatency1mTo2m
            "44",  # NIMBLE-MIB::volIoWriteLatency2mTo5m
            "45",  # NIMBLE-MIB::volIoWriteLatency5mTo10m
            "46",  # NIMBLE-MIB::volIoWriteLatency10mTo20m
            "47",  # NIMBLE-MIB::volIoWriteLatency20mTo50m
            "48",  # NIMBLE-MIB::volIoWriteLatency50mTo100m
            "49",  # NIMBLE-MIB::volIoWriteLatency100mTo200m
            "50",  # NIMBLE-MIB::volIoWriteLatency200mTo500m
            "51",  # NIMBLE-MIB::volIoWriteLatency500mTomax
        ]),
    'snmp_scan_function': lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.37447.3.1"
                                                                          ),
    'group': "nimble_latency",
    'default_levels_variable': "nimble_latency_default_levels",
    'has_perfdata': True,
}


@get_parsed_item_data
def check_nimble_latency_writes(item, params, data):
    return _check_nimble_latency(item, params, data, NimbleWritesType)


check_info['nimble_latency.write'] = {
    'inventory_function': lambda parsed: inventory_nimble_latency(parsed, NimbleWritesType),
    'check_function': check_nimble_latency_writes,
    'service_description': 'Volume %s Write IO',
    'group': "nimble_latency",
    'default_levels_variable': "nimble_latency_default_levels",
    'has_perfdata': True,
}
