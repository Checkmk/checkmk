#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 Checkmk GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables from the check-context which are necessary for
# resolving legacy discovery results such as [("SUMMARY", "diskstat_default_levels")]. Furthermore,
# it might also remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.time import *  # pylint: disable=wildcard-import,unused-wildcard-import
import cmk.base.plugins.agent_based.ntp as ntp
import cmk.base.plugins.agent_based.agent_based_api.v1.render as render

NTP_CHECK_DEFAULT_PARAMETERS = {
    "ntp_levels": (10, 200.0, 500.0),  # stratum, ms offset
    "alert_delay": (300, 3600),
}

factory_settings["ntp_time_default_levels"] = NTP_CHECK_DEFAULT_PARAMETERS

# Example output from agent:
# <<<ntp>>>
# - 42.202.61.100   .INIT.          16 u    - 1024    0    0.000    0.000   0.000
# * 42.202.62.100   .PPS.            1 u  143  256  377    0.763   -1.424   0.404
# % 42.202.61.14    42.202.62.100    2 u  160  256  357    0.058   -1.532   1.181
# % 42.202.62.14    42.202.62.100    2 u  194  256  357    0.131   -1.364   0.598
# % 42.202.61.10    .INIT.          16 u    - 1024    0    0.000    0.000   0.000
# % 42.202.62.10    .INIT.          16 u    - 1024    0    0.000    0.000   0.000
# + 42.202.61.15    42.202.62.100    2 u  196  256  356    0.058    0.574   0.204
# + 42.202.62.15    42.202.62.100    2 u  186  256  276    0.088    0.716   0.165
# % 127.127.1.0     .LOCL.          10 l   40   64  377    0.000    0.000   0.001

ntp_state_codes = {
    'x': "falsetick",
    '.': "excess",
    '-': "outlyer",
    '+': "candidat",
    '#': "selected",
    '*': "sys.peer",
    'o': "pps.peer",
    '%': "discarded",
}

ntp_discovery = []


def _get_params() -> str:
    return host_extra_conf_merged(
        host_name(),
        ntp_discovery,
    )


# We monitor all servers we have reached at least once
def discover_ntp(parsed):
    params = _get_params()
    if params.get("mode", "summary") not in ("detailed", "both"):
        return

    for peer in parsed.values():
        if peer.reach != "0" and peer.refid != '.LOCL.':
            yield peer.name, {}


def discover_ntp_summary(parsed):
    params = _get_params()
    if params.get("mode", "summary") in ("summary", "both") and parsed:
        yield None, {}


def check_ntp(item: str, params, parsed: ntp.Section):
    peer = parsed.get(item)
    if peer is None:
        return
    if peer.reach == "0":
        yield 3, f"Peer {peer.name} is unreachable"
        return

    crit_stratum, warn, crit = params["ntp_levels"]
    yield check_levels(
        peer.offset,
        "offset",
        (warn, crit, -warn, -crit),
        human_readable_func=lambda f: "%.4f ms" % f,
        infoname="Offset",
    )

    if peer.when > 0:
        yield 0, "Time since last sync: %s" % render.timespan(peer.when)

    state = ntp_state_codes.get(peer.statecode, "unknown")
    yield 2 if state == "falsetick" else 0, f"\nState: {state}"

    yield check_levels(
        peer.jitter,
        "jitter",
        None,
        human_readable_func=lambda f: "%.4f ms" % f,
        infoname="\nJitter",
    )

    yield check_levels(
        peer.stratum,
        None,
        (crit_stratum, crit_stratum),
        human_readable_func=int,
        infoname="\nStratum",
    )


def check_ntp_summary(_no_item, params, parsed):
    # We only are interested in our system peer or pulse per second source (pps)
    peer = parsed.get(None)
    if peer is None:
        if parsed:
            yield 0, "Found %d peers, but none is suitable" % len(parsed)
        yield from tolerance_check(
            set_sync_time=None,
            levels=params.get("alert_delay"),
            notice_only=False,
        )
        return

    yield from check_ntp(peer.name, params, parsed)
    yield from tolerance_check(
        set_sync_time=time.time(),
        levels=params.get("alert_delay"),
        notice_only=True,
    )
    yield 0, f"\nSynchronized on {peer.name}"


check_info["ntp"] = {
    # there's a section against the new API defined!
    'check_function': check_ntp,
    'inventory_function': discover_ntp,
    'service_description': 'NTP Peer %s',
    'has_perfdata': True,
    'group': 'ntp_peer',
    'default_levels_variable': "ntp_time_default_levels",
}

check_info["ntp.time"] = {
    # there's a section against the new API defined!
    'check_function': check_ntp_summary,
    'inventory_function': discover_ntp_summary,
    'service_description': 'NTP Time',
    'has_perfdata': True,
    'group': 'ntp_time',
    'default_levels_variable': "ntp_time_default_levels",
}
