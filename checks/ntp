#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

ntp_default_levels = (10, 200.0, 500.0)  # stratum, ms offset

factory_settings["ntp_time_default_levels"] = {
    "ntp_levels": ntp_default_levels,
    "alert_delay": (300, 3600),
}

# Example output from agent:
# <<<ntp>>>
# - 42.202.61.100   .INIT.          16 u    - 1024    0    0.000    0.000   0.000
# * 42.202.62.100   .PPS.            1 u  143  256  377    0.763   -1.424   0.404
# % 42.202.61.14    42.202.62.100    2 u  160  256  357    0.058   -1.532   1.181
# % 42.202.62.14    42.202.62.100    2 u  194  256  357    0.131   -1.364   0.598
# % 42.202.61.10    .INIT.          16 u    - 1024    0    0.000    0.000   0.000
# % 42.202.62.10    .INIT.          16 u    - 1024    0    0.000    0.000   0.000
# + 42.202.61.15    42.202.62.100    2 u  196  256  356    0.058    0.574   0.204
# + 42.202.62.15    42.202.62.100    2 u  186  256  276    0.088    0.716   0.165
# % 127.127.1.0     .LOCL.          10 l   40   64  377    0.000    0.000   0.001

ntp_state_codes = {
    'x': "falsetick",
    '.': "excess",
    '-': "outlyer",
    '+': "candidat",
    '#': "selected",
    '*': "sys.peer",
    'o': "pps.peer",
    '%': "discarded",
}

# possible values: "summary", "detailed", "both", None
ntp_inventory_mode = "summary"


# We monitor all servers we have reached at least once
def inventory_ntp(info):
    if ntp_inventory_mode not in ["detailed", "both"]:
        return []
    inventory = []
    for _statecode, peer, refid, _stratum, _t, _when, _poll, reach, _delay, _offset, _jitter in info:
        if reach != "0" and refid != '.LOCL.':
            inventory.append((peer, "ntp_default_levels"))
    return inventory


def inventory_ntp_summary(info):
    if ntp_inventory_mode not in ["summary", "both"]:
        return []
    if len(info) > 0:
        return [(None, {})]


def ntp_fmt_time(t):
    if t == '-':
        return 0
    elif t[-1] == "m":
        return int(t[:-1]) * 60
    elif t[-1] == "h":
        return int(t[:-1]) * 60 * 60
    elif t[-1] == "d":
        return int(t[:-1]) * 60 * 60 * 24
    return int(t)


# Helper function that parses the information about one
# peer and returns a tuple of
# 0. Nagios state (0, 1, 2 or 3)
# 1. Nagios check output text
# 2. The offset (only if state != 3)
# 3. The jitter (only if state != 3)
def check_ntp_server_state(line, params):
    statecode, _peer, _refid, stratum, _t, when, poll, reach, _delay, offset, jitter = line
    if reach == "0":
        return (3, "peer is unreachable")

    offset = float(offset)
    jitter = float(jitter)

    when = ntp_fmt_time(when)
    poll = ntp_fmt_time(poll)
    stratum = int(stratum)
    state = ntp_state_codes.get(statecode, "unknown")
    infotext = "%s - stratum %d, offset %.2f ms, jitter %.2f ms" % (state, stratum, offset, jitter)
    if when > 0:
        infotext += ", last reached %d secs ago" % when

    crit_stratum, warn, crit = params
    if abs(offset) >= crit:
        return (2, "critical offset" + " " + infotext, offset, jitter)
    elif state in ["falsetick"]:
        return (2, infotext, offset, jitter)
    elif stratum >= crit_stratum:
        return (2,
                infotext + (", stratum is too high (max allowed is %d)(!!)" % (crit_stratum - 1)))

    # The following check in some cases produces false alarms. The poll interval can
    # switch back to a low value while 'when' still being at a high value. While
    # this happens only for a short time, it will make the check alarm. So we
    # rather switch this condition off:
    # elif when > 2*poll and when > 128: # when can exceed poll for small polling values
    #     return (3, "response due since %d secs%s" % (when - poll, infotext), offset, jitter)

    elif abs(offset) >= warn:
        return (1, "offset too high" + " " + infotext, offset, jitter)
    return (0, infotext, offset, jitter)


def check_ntp(item, params, info):
    for line in info:
        if line[1] == item and len(line) == 11:
            state = check_ntp_server_state(line, params)
            if len(state) == 4:
                state, text, offset, jitter = state  # pylint: disable=unbalanced-tuple-unpacking
                _crit_stratum, warn, crit = params
                perfdata = [("offset", offset, warn, crit, 0, None),
                            ("jitter", jitter, warn, crit, 0, None)]
            else:
                state, text = state
                perfdata = []
            return (state, text, perfdata)

    return 3, "peer not found", []


def _get_suitable_line(info):
    index = None
    for idx, line in enumerate(info):
        if line[0] in ('*', 'o'):
            index = idx
            break
    return index


def check_ntp_summary(_no_item, params, info):
    if isinstance(params, tuple):
        params = {
            "ntp_levels": params,
            "alert_delay": (300, 3600),
        }
    # No information at all? NTP daemon not running or timeout in ntpq -p
    if len(info) == 0:
        yield 3, "no information from NTP: timeout in ntpq -p or NTP daemon not running"
        return

    # We only are interested in our system peer or pulse per second source (pps)
    index = _get_suitable_line(info)
    if index is None:
        yield 0, "found %d peers, but none is suitable" % len(info)
    else:
        state, text, perfdata = check_ntp(info[index][1], params["ntp_levels"], [info[index]])
        text += " (synchronized on %s)" % info[index][1]
        yield state, text, perfdata

    for subresult in tolerance_check(params, None if index is None else time.time()):
        yield subresult


check_info["ntp"] = {
    'check_function': check_ntp,
    'inventory_function': inventory_ntp,
    'service_description': 'NTP Peer %s',
    'has_perfdata': True,
    'group': 'ntp_peer',
}

check_info["ntp.time"] = {
    'check_function': check_ntp_summary,
    'inventory_function': inventory_ntp_summary,
    'service_description': 'NTP Time',
    'has_perfdata': True,
    'group': 'ntp_time',
    'default_levels_variable': "ntp_time_default_levels",
    'includes': ["time.include"]
}
