#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

pdu_gude_default_levels = {
    "V": (220, 210),  # Volt
    "A": (15, 16),  # Ampere
    "W": (3500, 3600),  # Watt
}


def inventory_pdu_gude(info):
    if len(info) > 0:
        return [(x + 1, "pdu_gude_default_levels") for x in range(len(info))]


def check_pdu_gude(item, params, info):
    try:
        values = info[item - 1]
    except ValueError:
        yield 3, "No phase %d found in agent output" % item
        return

    units = {
        0: ("kWh", 1000),
        1: ("W", False),
        2: ("A", 1000),
        3: ("V", False),
        4: ("VA", False),
    }

    for pos, (unit, div) in units.items():
        value = float(values[pos])
        if div:
            value = value / div  # fixed: true-division
        infotext = "%.2f %s" % (value, unit)

        warn, crit = params.get(unit, (None, None))
        perfdata = [(unit, value, warn, crit)]
        status = 0

        if warn > crit:
            if value < crit:
                status = 2
            elif value < warn:
                status = 1

        else:
            if crit is not None and value > crit:
                status = 2
            elif warn is not None and value > warn:
                status = 1

        yield status, infotext, perfdata
