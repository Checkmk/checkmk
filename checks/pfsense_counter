#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

factory_settings["pfsense_counter_default_levels"] = {
    "badoffset": (100.0, 10000.0),
    "short": (100.0, 10000.0),
    "memdrop": (100.0, 10000.0),
    "normalized": (100.0, 10000.0),
    "fragment": (100.0, 10000.0),
    "average": 3,
}


def parse_pfsense_counter(info):
    names = {
        "1.0": "matched",
        "2.0": "badoffset",
        "3.0": "fragment",
        "4.0": "short",
        "5.0": "normalized",
        "6.0": "memdrop",
    }

    parsed = {}
    for end_oid, counter_text in info:
        parsed[names[end_oid]] = int(counter_text)
    return parsed


def inventory_pfsense_counter(parsed):
    return [(None, {})]


def check_pfsense_counter(_no_item, params, parsed):

    namestoinfo = {
        "matched": "Packets that matched a rule",
        "badoffset": "Packets with bad offset",
        "fragment": "Fragmented packets",
        "short": "Short packets",
        "normalized": "Normalized packets",
        "memdrop": "Packets dropped due to memory limitations",
    }

    this_time = time.time()

    if params.get("average"):
        backlog_minutes = params["average"]
        yield 0, "Values averaged over %d min" % params["average"]
    else:
        backlog_minutes = None

    for what in parsed:
        rate = get_rate("pfsense_counter-%s" % what, this_time, parsed[what])
        perfrate = ("fw_packets_" + what, rate)

        if backlog_minutes:
            avgrate = get_average("pfsense_counter-%srate" % what, this_time, rate, backlog_minutes)
            check_against = avgrate
            perfavg = ("fw_avg_packets_" + what, avgrate)
        else:
            perfavg = None
            check_against = rate
        infotext = "%s: %.2f pkts/s" % (namestoinfo[what], check_against)

        status = 0
        if params.get(what):
            warn, crit = params[what]
            perfrate += params[what]
            if perfavg:
                perfavg += params[what]
            levelstext = " (warn/crit at %.2f/%.2f pkts/s)" % (warn, crit)
            if crit and check_against >= crit:
                status = 2
                infotext += levelstext
            elif warn and check_against >= warn:
                status = 1
                infotext += levelstext

        perfdata = [perfrate]
        if perfavg:
            perfdata.append(perfavg)

        yield status, infotext, perfdata


check_info["pfsense_counter"] = {
    "default_levels_variable": "pfsense_counter_default_levels",
    "parse_function": parse_pfsense_counter,
    "inventory_function": inventory_pfsense_counter,
    "check_function": check_pfsense_counter,
    "service_description": "pfSense Firewall Packet Rates",
    "has_perfdata": True,
    "snmp_info": (".1.3.6.1.4.1.12325.1.200.1", [OID_END, 2]),
    "snmp_scan_function": lambda oid: "pfsense" in oid(".1.3.6.1.2.1.1.1.0").lower(),
    "group": "pfsense_counter",
}
