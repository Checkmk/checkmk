#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2019             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at https://checkmk.com/.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

poe_default_levels = (90.0, 95.0)


#  constants for operational status of poe interface
class PoeStatus(enum.IntEnum):
    ON = 1
    OFF = 2
    FAULTY = 3


# PoE data
PoeValues = collections.namedtuple('PoeValues', 'poe_max poe_used poe_status poe_status_detail')


def check_poe_data(params, poe_data):
    # data sanity-check
    if poe_data.poe_max < 0 or poe_data.poe_used < 0 or poe_data.poe_status not in range(1, 4):
        return 3, "Device returned faulty data: nominal power: %s, power consumption: %s, operational status: %s" % (
            str(poe_data.poe_max),
            str(poe_data.poe_used),
            str(poe_data.poe_status),
        )

    # PoE on device is turned ON
    if poe_data.poe_status == PoeStatus.ON:

        # calculate percentage of power consumption
        poe_used_percentage = ((float(poe_data.poe_used) / float(poe_data.poe_max)) *
                               100) if poe_data.poe_max > 0 else 0

        return check_levels(poe_used_percentage,
                            "power_usage_percentage",
                            params.get("levels", poe_default_levels),
                            human_readable_func=get_percent_human_readable,
                            infoname="POE usage (%sW/%sW): " %
                            (poe_data.poe_used, poe_data.poe_max))

    # PoE on device is turned OFF
    if poe_data.poe_status == PoeStatus.OFF:
        return 0, "Operational status of the PSE is OFF"

    # PoE on device is FAULTY
    if poe_data.poe_status == PoeStatus.FAULTY:
        fault_detail = ""
        if poe_data.poe_status_detail:
            # optionally concat fault detail string
            fault_detail = " (%s)" % poe_data.poe_status_detail
        return 2, "Operational status of the PSE is FAULTY" + fault_detail
