#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# <<<postgres_connections>>>
# [databases_start]
# postgres
# zweitedb
# datenbank
# [databases_end]
# datenbank;0;100
# postgres;2;100
# template0;0;100
# template1;0;100

# instances
# <<<postgres_bloat>>>
# [[[foobar]]]
# [databases_start]
# postgres
# testdb
# [databases_end]
# ...

factory_settings["postgres_connections_default_levels"] = {
    'levels_perc': (80.0, 90.0),  # Levels at 80%/90% of maximum
}


def inventory_postgres_connections(parsed):
    return [(db, {}) for db in parsed]


def check_postgres_connections(item, params, parsed):
    if item not in parsed:
        # In case of missing information we assume that the login into
        # the database has failed and we simply skip this check. It won't
        # switch to UNKNOWN, but will get stale.
        raise MKCounterWrapped("Login into database failed")

    database = parsed[item]
    warn, crit = params.get("levels_abs", (0, 0))
    if database == []:
        yield 0, "No active query", [("connections", 0, warn, crit, 0, 0)]
        return

    current = float(database[0]["current"])
    maximum = float(database[0]["mc"])
    used_perc = current / maximum * 100

    state = 0
    extra_info = ""
    if "levels_abs" in params:
        warn, crit = params["levels_abs"]
        if current >= crit:
            state = 2
        elif current >= warn:
            state = 1
        if state:
            extra_info = " (Levels at %s/%s)" % (warn, crit)
    yield state, "Used connections %d%s" % (current, extra_info),\
                    [("connections", current, warn, crit, 0, maximum)]

    state = 0
    extra_info = ""
    warn, crit = params["levels_perc"]
    if used_perc >= crit:
        state = 2
    elif used_perc >= warn:
        state = 1
    if state:
        extra_info = " (Levels at %s%%/%s%%)" % (warn, crit)
    yield state, "Used percentage %.0f%%%s" % (used_perc, extra_info)


check_info['postgres_connections'] = {
    "parse_function": parse_postgres_dbs,
    "check_function": check_postgres_connections,
    "inventory_function": inventory_postgres_connections,
    "service_description": "PostgreSQL Connections %s",
    "group": "db_connections",
    "has_perfdata": True,
    "default_levels_variable": "postgres_connections_default_levels",
    "includes": ["postgres.include"]
}
