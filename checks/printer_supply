#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# In some cases the name of the part is not uniq. e.g. for c5900
# devices. In this cases add the color from the dedicated OID to
# the item name.
#
# Example output for this case:
#
#['Toner Cartridge OKI DATA CORP', '100', '30', 'black']
#['Toner Cartridge OKI DATA CORP', '100', '10', 'cyan']
#['Toner Cartridge OKI DATA CORP', '100', '10', 'magenta']
#['Toner Cartridge OKI DATA CORP', '100', '40', 'yellow']
#['Image Drum Unit OKI DATA CORP', '20000', '-409', '']
#['Image Drum Unit OKI DATA CORP', '20000', '7969', '']
#['Image Drum Unit OKI DATA CORP', '20000', '11597', '']
#['Image Drum Unit OKI DATA CORP', '20000', '4621', '']
#['Belt Unit OKI DATA CORP', '60000', '47371', '']
#['Fuser Unit OKI DATA CORP', '60000', '26174', '']
#['Waste Toner box OKI DATA CORP', '1', '-2', '']

# Warn/Crit/upturn current
factory_settings["printer_supply_default_levels"] = {
    "levels": (20.0, 10.0),
}

# When the printer reports -3 as fill threshold the toner
# might be empty or might have some small remaining capacities
# the exact amount is unknown. This makes the nagios state reported
# in this state configurable
printer_supply_some_remaining_status = 1

# TODO: This variable is deprecated. Remove it in future
check_config_variables.append("printer_supply_some_remaining_status")

# Workaround for toners and drum units in c5900 devices
# which have equal names for the single parts.
# Add the color description to that item
# Fix name for toners in DELL devices that have serial
# numbers in item name

# Additional unit info; scale to canonical values?
map_unit = {
    "1": "other",
    "2": "unknown",
    "3": "ten thousandths of inches",
    "4": "micrometers",
    "7": "impressions",
    "8": "sheets",
    "11": "hours",
    "12": "thousandths of ounces",
    "13": "tenths of grams",
    "14": "hundreths of fluid ounces",
    "15": "tenths of milliliters",
    "16": "feet",
    "17": "meters",
    "18": "items",
    "19": "%",
}


def _get_oid_end_last_index(oid_end):
    # return last number of OID_END
    return oid_end.split('.')[-1]


def parse_printer_supply(info):
    if len(info) < 2:
        return {}

    parsed = []
    colors = []

    color_mapping = {_get_oid_end_last_index(oid_end): value for oid_end, value in info[0]}

    for index, (description, unit_info, max_capacity, level, class_,
                color_id) in enumerate(info[1]):
        # give chance for latin1->utf8 decoding
        line_0 = description

        color = color_mapping.get(color_id, '')
        # For toners or drum units add the color (if available)
        if line_0.startswith('Toner Cartridge') \
           or line_0.startswith('Image Drum Unit'):
            if color:
                colors += [color]
            elif color == '' and colors:
                color = colors[index - len(colors)]
            else:
                color = None
            if color:
                line_0 = '%s %s' % (color.title(), line_0)

        if " S/N:" in line_0:
            line_0 = line_0[:line_0.find(" S/N:")]

        parsed.append([line_0, unit_info, max_capacity, level, class_, color_id, color])
    return parsed


def inventory_printer_supply(parsed):
    # Ignore devices which show -2 for current value and -2 for max value -> useless
    # Also fix trailing zero bytes (seen on HP Jetdirect 143)
    return [
        (description.rstrip('\0'), {})
        for description, _unit_info, max_capacity, level, _class, _color_id, color in parsed
        # ignore useless devices
        if not (max_capacity == '-2' and level == '-2') and level and len(max_capacity) > 0
    ]


def check_printer_supply(item, params, parsed):
    if isinstance(params, tuple):
        if len(params) == 2:
            params = {"levels": params}
        else:
            params = {
                "levels": params[:2],
                "upturn_toner": params[2],
            }

    for description, unit_info, max_capacity, level, class_, color_id, color in parsed:
        if description.rstrip('\0') == item:
            max_capacity = int(max_capacity)
            level = saveint(level)

            color_info = ""
            if color and color.lower() not in item.lower():
                color_info = "[%s] " % color

            # Assume 100% as maximum when 0 is reported
            # Saw some toner cartridge reporting value=0 and max_capacity=0 on empty toner
            if max_capacity == 0:
                max_capacity = 100

            warn, crit = params["levels"]
            # Levels are in percent, SuppliesMaxCapacity and SuppliesLevel have different units:
            # see Printer-MIB::prtMarkerSuppliesSupplyUnit::PrtMarkerSuppliesSupplyUnitTC
            perfdata = [("pages", level, 0.01 * warn * max_capacity, 0.01 * crit * max_capacity, 0,
                         max_capacity)]

            # handle cases with partial data
            if max_capacity == -2 or level in [-3, -2, -1]:  # no percentage possible
                if level == -1 or max_capacity == -1:
                    return 0, "%sThere are no restrictions on this supply" % color_info
                elif level == -3:
                    return params.get("some_remaining", printer_supply_some_remaining_status),\
                            "%sSome remaining" % color_info, perfdata
                elif level == -2:
                    return 3, "%s Unknown level" % color_info
                elif max_capacity == -2:
                    # no percentage possible. We compare directly against levels
                    return 0, "%sLevel: %d" % (color_info, level), [("pages", level)]

            leftperc = 100.0 * float(level) / max_capacity
            # When unit type is
            # 1 = other
            # 3 = supplyThatIsConsumed
            # 4 = supplyThatIsFilled
            # the value is contains the current level if this supply is a container
            # but when the remaining space if this supply is a receptacle
            #
            # This table can be missing on some devices. Assume type 3 in this case.
            if class_ == '4':
                leftperc = 100 - leftperc

            # Some printers handle the used / remaining material differently
            # With the upturn option we can toggle the point of view (again)
            if params.get("upturn_toner", False):
                leftperc = 100 - leftperc

            infotext = "%sRemaining: %.0f%%" % (color_info, leftperc)
            state = 0
            if leftperc <= crit:
                state = 2
            elif leftperc <= warn:
                state = 1
            if state:
                infotext += " (warn/crit at %.0f%%/%.0f%%)" % (warn, crit)

            unit = map_unit.get(unit_info)
            if unit in (None, "other", "unknown"):
                unit = ""
            elif unit == "%":
                # No space in between
                pass
            else:
                unit = " %s" % unit
            infotext += ", Supply: %s of max. %s%s" % (level, max_capacity, unit)
            return state, infotext, perfdata


check_info["printer_supply"] = {
    'parse_function': parse_printer_supply,
    'inventory_function': inventory_printer_supply,
    'check_function': check_printer_supply,
    'service_description': 'Supply %s',
    'snmp_info': [
        (
            '.1.3.6.1.2.1.43.12.1.1',
            [
                OID_END,
                '4',  # Printer-MIB::prtMarkerColorantValue
            ]),
        (
            '.1.3.6.1.2.1.43.11.1.1',
            [
                '6',  # Printer-MIB::prtMarkerSuppliesDescription
                '7',  # Printer-MIB::prtMarkerSuppliesUnit
                '8',  # Printer-MIB::prtMarkerSuppliesMaxCapacity
                '9',  # Printer-MIB::prtMarkerSuppliesLevel
                '4',  # Printer-MIB::prtMarkerSuppliesClass
                '3',  # Printer-MIB:prtMarkerSuppliesColorantIndex
            ]),
    ],
    'snmp_scan_function': lambda oid: (oid(".1.3.6.1.2.1.43.11.1.1.6.1.1") is not None and oid(
        ".1.3.6.1.2.1.1.2.0") != ".1.3.6.1.4.1.367.1.1"),  # exclude ricoh printer
    'has_perfdata': True,
    'group': 'printer_supply',
    'default_levels_variable': 'printer_supply_default_levels',
}
