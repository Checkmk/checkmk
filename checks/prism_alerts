#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# <<<prism_alerts:sep(9)>>>
# timestamp       message severity
# 1456749413164951        DIMM fault detected on host 172.25.209.110. The node is running with 384 GB whereas 512 GB was installed.       kCritical
# 1456748512334905        DIMM fault detected on host 172.25.209.110. The node is running with 384 GB whereas 512 GB was installed.       kCritical


def inventory_prism_alerts(parsed):
    yield None, None


def check_prism_alerts(__no_item, __no_params, parsed):
    def severity(name):
        # first value is for sorting second is the nagios status codes
        return {'kInfo': (0, 0), 'kWarning': (1, 1), 'kCritical': (3, 2)}.get(name, (2, 3))

    if len(parsed) == 0:
        yield 0, "No alerts"
        return

    # sort messages by severity, then timestamp, both reversed
    # this way the first element should be the newest among those
    # with the highest severity
    row_sorted = sorted(parsed,
                        key=lambda x: (severity(x['severity'][0]), x['timestamp']),
                        reverse=True)
    sever = row_sorted[0]
    time_str = time.strftime("%c", time.localtime(int(int(sever['timestamp']) / 1000000.0)))
    yield severity(sever['severity'])[1], "%d alerts" % len(row_sorted)

    message = sever['message']
    if "has the following problems" in message:
        state = 1
    else:
        state = 0
    yield state, "Last worst on %s: \"%s\"" % (time_str, message)


check_info['prism_alerts'] = {
    'check_function': check_prism_alerts,
    'inventory_function': inventory_prism_alerts,
    'parse_function': parse_prism,
    'has_perfdata': True,
    'service_description': "Prism Alerts",
    'includes': ["prism.include"],
}
