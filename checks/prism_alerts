#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2016             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# <<<prism_alerts:sep(9)>>>
# timestamp       message severity
# 1456749413164951        DIMM fault detected on host 172.25.209.110. The node is running with 384 GB whereas 512 GB was installed.       kCritical
# 1456748512334905        DIMM fault detected on host 172.25.209.110. The node is running with 384 GB whereas 512 GB was installed.       kCritical


def inventory_prism_alerts(parsed):
    yield None, None


def check_prism_alerts(__no_item, __no_params, parsed):
    def severity(name):
        # first value is for sorting second is the nagios status codes
        return {'kInfo': (0, 0), 'kWarning': (1, 1), 'kCritical': (3, 2)}.get(name, (2, 3))

    if len(parsed) == 0:
        yield 0, "No alerts"
        return

    # sort messages by severity, then timestamp, both reversed
    # this way the first element should be the newest among those
    # with the highest severity
    row_sorted = sorted(parsed,
                        key=lambda x: (severity(x['severity'][0]), x['timestamp']),
                        reverse=True)
    sever = row_sorted[0]
    time_str = time.strftime("%c", time.localtime(int(sever['timestamp']) / 1000000))
    yield severity(sever['severity'])[1], "%d alerts" % len(row_sorted)

    message = sever['message']
    if "has the following problems" in message:
        state = 1
    else:
        state = 0
    yield state, "Last worst on %s: \"%s\"" % (time_str, message)


check_info['prism_alerts'] = {
    'check_function': check_prism_alerts,
    'inventory_function': inventory_prism_alerts,
    'parse_function': parse_prism,
    'has_perfdata': True,
    'service_description': "Prism Alerts",
    'includes': ["prism.include"],
}
