#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from cmk.base.check_legacy_includes.proxmox import *  # pylint: disable=wildcard-import,unused-wildcard-import
import datetime

factory_settings["proxmox_vm_backup_status"] = {
    "age_levels_upper": (
        60 * 60 * 26,
        60 * 60 * 50,
    )
}


def check_proxmox_vm_backup_status(item, params, parsed):
    """If conditions provided calculate and compare age of last backup agains provided
    levels and define result status accordingly"""
    age_levels_upper = params.get("age_levels_upper")
    last_backup = parsed.get("last_backup")
    if last_backup is None:
        yield (2, "No backup found") if age_levels_upper else (0, "No backup found and none needed")
        return
    if "error" in last_backup:
        yield 2, "Last backup failed with message '%s'" % last_backup["error"]
        return
    started_time = (datetime.datetime.strptime(last_backup.get("started_time"), "%Y-%m-%d %H:%M:%S")
                    if last_backup is not None else None)
    # Proxmox logs only provide time stamps w/o time zone so we have to hope the Proxmox node
    # is located close to us
    backup_age = ((datetime.datetime.now() - started_time).total_seconds()  #
                  if started_time is not None else None)
    transfer_size = last_backup.get("transfer_size", last_backup.get("archive_size", 0))
    yield check_levels(
        backup_age,
        "age",
        age_levels_upper,
        human_readable_func=get_age_human_readable,
        infoname="Age",
    )
    yield (0, "Time: %s" % last_backup.get("started_time"))
    yield (0, "Size: %s" % get_bytes_human_readable(last_backup["archive_size"]))
    yield (0, "Bandwidth: %s/s" %
           (get_bytes_human_readable(transfer_size / last_backup["transfer_time"])))


check_info["proxmox_vm_backup_status"] = {  # mypy: ignore
    "parse_function": parse_proxmox,
    "inventory_function": discover_single,
    "check_function": check_proxmox_vm_backup_status,
    "service_description": "Proxmox VM Backup Status",
    "default_levels_variable": "proxmox_vm_backup_status",
    "group": "proxmox_vm_backup_status",
}
