#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2019             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at https://checkmk.com/.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# We fetch the following columns from SNMP:
# 2 pethMainPsePower (The nominal power of the PSE expressed in Watts)
# 3 pethMainPseOperStatus (The operational status of the main PSE) (on(1), off(2), faulty(3))
# 4 pethMainPseConsumptionPower (Measured usage power expressed in Watts)

factory_settings["pse_poe_default_levels"] = {"levels": (90.0, 95.0)}


#  constants for operational status
class Status(enum.IntEnum):
    ON = 1
    OFF = 2
    FAULTY = 3


# PSE/PoE data
PseData = collections.namedtuple('PseValues', 'poe_max poe_used pse_op_status')


def parse_pse_poe(info):
    """
    parse info data and create dictionary with namedtuples for each OID.

    {
       oid_end : PseData(poe_max, poe_used, pse_op_status)
    }

    :param info: parsed snmp data
    :return: dictionary
    """
    poe_dict = {}
    for oid_end, poe_max, pse_op_status, poe_used in info:
        poe_dict[str(oid_end)] = PseData(poe_max=int(poe_max),
                                         poe_used=int(poe_used),
                                         pse_op_status=int(pse_op_status))
    return poe_dict


def inventory_pse_poe(parsed):
    return [(oid_end, {}) for oid_end in parsed]


@get_parsed_item_data
def check_pse_poe(item, params, pse_data):
    # data sanity-check
    if pse_data.poe_max < 0 or pse_data.poe_used < 0 or pse_data.pse_op_status not in range(1, 4):
        return 3, "Device returned faulty data: nominal power: %s, power consumption: %s, operational status: %s" % (
            str(pse_data.poe_max), str(pse_data.poe_used), str(pse_data.pse_op_status))

    # PoE on device is turned ON
    if pse_data.pse_op_status == Status.ON:

        # calculate percentage of power consumption
        poe_used_percentage = ((float(pse_data.poe_used) / float(pse_data.poe_max)) *
                               100) if pse_data.poe_max > 0 else 0

        return check_levels(poe_used_percentage,
                            "power_usage_percentage",
                            params["levels"],
                            human_readable_func=get_percent_human_readable,
                            infoname="POE usage (%sW/%sW): " %
                            (pse_data.poe_used, pse_data.poe_max))

    # PoE on device is turned OFF
    if pse_data.pse_op_status == Status.OFF:
        return 0, "Operational status of the main PSE is OFF"

    # PoE on device is FAULTY
    if pse_data.pse_op_status == Status.FAULTY:
        return 2, "Operational status of the main PSE is FAULTY"


check_info["pse_poe"] = {
    "default_levels_variable": "pse_poe_default_levels",
    "parse_function": parse_pse_poe,
    "check_function": check_pse_poe,
    "inventory_function": inventory_pse_poe,
    "service_description": "POE%s consumption ",
    "has_perfdata": True,
    "snmp_scan_function": lambda oid: oid(".1.3.6.1.2.1.105.1.3.1.1.*"),
    "snmp_info": (".1.3.6.1.2.1.105.1.3.1.1", [OID_END, "2", "3", "4"])
}
