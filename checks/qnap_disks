#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from cmk.base.check_legacy_includes import qnap


def inventory_qnap_disks(info):
    return [(x[0], None) for x in info if x[2] != "-5"]


def check_qnap_disks(item, _no_params, info):
    map_states = {
        "0": (0, "ready"),
        "-4": (2, "unknown"),
        "-5": (2, "no disk"),
        "-6": (2, "invalid"),
        "-9": (2, "read write error"),
    }

    for desc, temp, status, model, size, cond in info:
        if desc == item:
            state, state_readable = map_states.get(status, (3, "unknown"))
            yield state, "Status: %s (%s)" % (state_readable, cond)

            if "--" in cond:
                yield 1, "SMART Information missing"
            elif cond != "GOOD":
                yield 1, "SMART Warnings"

            yield 0 , "Model: %s, Temperature: %s, Size: %s" % \
                      (model, temp, size)


check_info["qnap_disks"] = {
    "check_function": check_qnap_disks,
    "inventory_function": inventory_qnap_disks,
    "service_description": "Disk %s",
    "snmp_info": (
        ".1.3.6.1.4.1.24681.1.2.11.1",
        [
            2,  # Description
            3,  # Temperature
            4,  # Disk Status (-5 = missing)
            5,  # Disk Model
            6,  # Disk Size
            7,  # Status Text
        ],
    ),
    "snmp_scan_function": qnap.scan,
}
