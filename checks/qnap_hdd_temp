#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2019             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

factory_settings["qnap_hdd_temp_default_levels"] = {
    "levels": (40, 45),
}


def parse_qnap_hdd_temp(info):
    parsed = {}
    for hdd, status, temp, model in info:
        parsed[hdd] = (status, temp, model)
    return parsed


@get_parsed_item_data
def check_qqnap_hdd_temp(item, params, data):
    status, temp, model = data
    good_states = ["good", "normal"]
    if status.lower() in good_states:
        yield 0, "State is " + status
    else:
        yield 2, "State is " + status

    if model:
        yield 0, "HDD-model: " + model.split()[0]
    value = float(temp.split()[0])
    state, info_txt, perf = check_temperature(reading=value, unique_name=item, params=params)
    yield state, "Temperature: " + info_txt, perf


check_info["qnap_hdd_temp"] = {
    "inventory_function": discover(),
    "parse_function": parse_qnap_hdd_temp,
    "check_function": check_qqnap_hdd_temp,
    "service_description": "QNAP %s Temperature",
    "snmp_info": (".1.3.6.1.4.1.24681.1.2", ["11.1.2", "11.1.7", "11.1.3", "11.1.5"]),
    "snmp_scan_function": lambda oid: "QNAP Systems" in oid('.1.3.6.1.2.1.47.1.1.1.1.12.1'),
    "has_perfdata": True,
    "default_levels_variable": "qnap_hdd_temp_default_levels",
    "group": "temperature",
    "includes": ["temperature.include"],
}
