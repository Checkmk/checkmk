#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2020             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Checkmk.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# <<<rabbitmq_vhosts>>>
# {"fd_total": 1098576, "sockets_total": 973629, "mem_limit": 6808874700,
# "mem_alarm": false, "disk_free_limit": 70000000, "disk_free_alarm": false,
# "proc_total": 1088576, "run_queue": 1, "name": "rabbit@my-rabbit", "type":
# "disc", "running": true, "mem_used": 108834752, "fd_used": 35,
# "sockets_used": 0, "proc_used": 429, "gc_num": 70927, "gc_bytes_reclaimed":
# 1586846120, "io_file_handle_open_attempt_count": 13, "cluster_links":
# []}
# {"fd_total": 1048576, "sockets_total": 943629, "mem_limit": 6608874700,
# "mem_alarm": false, "disk_free_limit": 50000000, "disk_free_alarm": false,
# "proc_total": 1048576, "run_queue": 1, "name": "rabbit2@my-rabbit", "type":
# "disc", "running": true, "mem_used": 101834752, "fd_used": 33,
# "sockets_used": 0, "proc_used": 426, "gc_num": 70827, "gc_bytes_reclaimed":
# 1556846120, "io_file_handle_open_attempt_count": 11, "cluster_links":
# []}

import json


def parse_rabbitmq_vhosts(info):
    parsed = {}

    for vhosts in info:
        for vhost_json in vhosts:
            vhost = json.loads(vhost_json)

            vhost_name = vhost.get("name")
            if vhost_name is None:
                continue

            parsed.setdefault(
                vhost_name, {
                    "description": vhost.get("description"),
                    "messages": vhost.get("messages"),
                    "messages_ready": vhost.get("messages_ready"),
                    "messages_unacknowledged": vhost.get("messages_unacknowledged"),
                    "message_publish": vhost.get("message_stats", {}).get("publish"),
                    "message_publish_rate": vhost.get("message_stats", {}).get(
                        "publish_details", {}).get("rate"),
                    "message_deliver": vhost.get("message_stats", {}).get("deliver_get"),
                    "message_deliver_rate": vhost.get("message_stats", {}).get(
                        "deliver_get_details", {}).get("rate"),
                })

    return parsed


@get_parsed_item_data
def check_rabbitmq_vhosts(item, params, parsed):
    if not parsed:
        return

    vhost_desc = parsed.get("description")
    if vhost_desc is not None:
        yield 0, "Description: %s" % vhost_desc

    for msg_key, msg_infotext, hr_func, param_key in [
        ("messages", "Total number of messages", int, "msg"),
        ("messages_ready", "Ready messages", int, "msg_ready"),
        ("messages_unacknowledged", "Unacknowledged messages", int, "msg_unack"),
        ("message_publish", "Published messages", int, "msg_publish"),
        ("message_publish_rate", "Rate", float, "msg_publish_rate"),
        ("message_deliver", "Delivered messages", int, "msg_deliver"),
        ("message_deliver_rate", "Rate", float, "msg_deliver_rate"),
    ]:

        msg_value = parsed.get(msg_key)
        if msg_value is None:
            continue

        unit = ""
        if "rate" in msg_key:
            unit = "1/s"

        msg_levels_upper = params.get('%s_upper' % param_key, (None, None))
        msg_levels_lower = params.get('%s_lower' % param_key, (None, None))

        yield check_levels(
            msg_value,
            msg_key,
            msg_levels_upper + msg_levels_lower,
            human_readable_func=hr_func,
            unit=unit,
            infoname=msg_infotext,
        )


check_info["rabbitmq_vhosts"] = {
    "parse_function": parse_rabbitmq_vhosts,
    "check_function": check_rabbitmq_vhosts,
    "inventory_function": discover(),
    "service_description": "RabbitMQ Vhost %s",
    "has_perfdata": True,
    "group": "rabbitmq_vhosts",
}
