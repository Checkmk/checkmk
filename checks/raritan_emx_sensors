#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from cmk.base.check_legacy_includes.raritan import *  # pylint: disable=wildcard-import,unused-wildcard-import
from cmk.base.check_legacy_includes.temperature import *  # pylint: disable=wildcard-import,unused-wildcard-import
#   .--binary--------------------------------------------------------------.
#   |                   _     _                                            |
#   |                  | |__ (_)_ __   __ _ _ __ _   _                     |
#   |                  | '_ \| | '_ \ / _` | '__| | | |                    |
#   |                  | |_) | | | | | (_| | |  | |_| |                    |
#   |                  |_.__/|_|_| |_|\__,_|_|   \__, |                    |
#   |                                            |___/                     |
#   +----------------------------------------------------------------------+
#   |                             main check                               |
#   '----------------------------------------------------------------------'

check_info['raritan_emx_sensors'] = {
    'parse_function': parse_raritan_sensors,
    'inventory_function': lambda parsed: inventory_raritan_sensors(parsed, 'binary' or ''),
    'check_function': check_raritan_sensors_binary,
    'service_description': 'Contact %s',
    'snmp_info': (
        ".1.3.6.1.4.1.13742.8",
        [
            "2.1.1.1.1",  # measurementsExternalSensorIsAvailable -> True/False (1/0)
            OID_END,  # sensor nr.
            "1.2.1.1.5",  # sensorDescription
            "1.2.1.1.2",  # externalSensorType
            "2.1.1.1.2",  # measurementsExternalSensorState
            "1.2.1.1.11",  # externalSensorUnits
            "1.2.1.1.12",  # externalSensorDecimalDigits -> for scaling the values
            "2.1.1.1.3",  # measurementsExternalSensorValue
            "1.2.1.1.20",  # externalSensorLowerCriticalThreshold
            "1.2.1.1.21",  # externalSensorLowerWarningThreshold
            "1.2.1.1.22",  # externalSensorUpperCriticalThreshold
            "1.2.1.1.23",  # externalSensorUpperWarningThreshold
        ]),
    'snmp_scan_function': lambda oid: oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.13742.8",
}

#.
#   .--temperature---------------------------------------------------------.
#   |      _                                      _                        |
#   |     | |_ ___ _ __ ___  _ __   ___ _ __ __ _| |_ _   _ _ __ ___       |
#   |     | __/ _ \ '_ ` _ \| '_ \ / _ \ '__/ _` | __| | | | '__/ _ \      |
#   |     | ||  __/ | | | | | |_) |  __/ | | (_| | |_| |_| | | |  __/      |
#   |      \__\___|_| |_| |_| .__/ \___|_|  \__,_|\__|\__,_|_|  \___|      |
#   |                       |_|                                            |
#   +----------------------------------------------------------------------+

check_info['raritan_emx_sensors.temp'] = {
    'inventory_function': lambda parsed: inventory_raritan_sensors_temp(parsed, 'temp'),
    'check_function': check_raritan_sensors_temp,
    'service_description': 'Temperature %s',
    'has_perfdata': True,
    'group': "temperature",
}

#.
#   .--airflow-------------------------------------------------------------.
#   |                        _       __ _                                  |
#   |                   __ _(_)_ __ / _| | _____      __                   |
#   |                  / _` | | '__| |_| |/ _ \ \ /\ / /                   |
#   |                 | (_| | | |  |  _| | (_) \ V  V /                    |
#   |                  \__,_|_|_|  |_| |_|\___/ \_/\_/                     |
#   |                                                                      |
#   +----------------------------------------------------------------------+

check_info['raritan_emx_sensors.airflow'] = {
    'inventory_function': lambda parsed: inventory_raritan_sensors(parsed, 'airflow'),
    'check_function': check_raritan_sensors,
    'service_description': 'Air flow %s',
    'has_perfdata': True,
}

#.
#   .--humidity------------------------------------------------------------.
#   |              _                     _     _ _ _                       |
#   |             | |__  _   _ _ __ ___ (_) __| (_) |_ _   _               |
#   |             | '_ \| | | | '_ ` _ \| |/ _` | | __| | | |              |
#   |             | | | | |_| | | | | | | | (_| | | |_| |_| |              |
#   |             |_| |_|\__,_|_| |_| |_|_|\__,_|_|\__|\__, |              |
#   |                                                  |___/               |
#   +----------------------------------------------------------------------+

check_info['raritan_emx_sensors.humidity'] = {
    'inventory_function': lambda parsed: inventory_raritan_sensors(parsed, 'humidity'),
    'check_function': check_raritan_sensors,
    'service_description': 'Humidity %s',
    'has_perfdata': True,
}

#.
#   .--pressure------------------------------------------------------------.
#   |                                                                      |
#   |               _ __  _ __ ___  ___ ___ _   _ _ __ ___                 |
#   |              | '_ \| '__/ _ \/ __/ __| | | | '__/ _ \                |
#   |              | |_) | | |  __/\__ \__ \ |_| | | |  __/                |
#   |              | .__/|_|  \___||___/___/\__,_|_|  \___|                |
#   |              |_|                                                     |
#   +----------------------------------------------------------------------+

check_info['raritan_emx_sensors.pressure'] = {
    'inventory_function': lambda parsed: inventory_raritan_sensors(parsed, 'pressure'),
    'check_function': check_raritan_sensors,
    'service_description': 'Pressure %s',
    'has_perfdata': True,
}
