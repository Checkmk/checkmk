#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from cmk.base.check_legacy_includes.elphase import *  # pylint: disable=wildcard-import,unused-wildcard-import
from cmk.base.check_legacy_includes.raritan import *  # pylint: disable=wildcard-import,unused-wildcard-import


def parse_raritan_pdu_inlet(info):
    precisions = dict([(oid_end, int(decimals)) for oid_end, decimals in info[0]])
    parsed = {}
    for oid_end, availability, sensor_state, value in info[1]:
        if availability == '1':
            phase_id, sensor_type = oid_end.split('.')[2:4]
            phase = "Phase " + phase_id
            if sensor_type in raritan_map_type:
                parsed.setdefault(phase, {})
                key, _key_info = raritan_map_type[sensor_type]  # get key for elphase.include
                value = float(value) / 10**precisions[oid_end]
                state, state_info = raritan_map_state[sensor_state]

                if state > 0:
                    parsed[phase][key] = (value, (state, state_info))
                else:
                    parsed[phase][key] = (value, None)
    return parsed


def check_raritan_pdu_inlet(item, params, info):
    if not item.startswith("Phase"):
        item = "Phase %s" % item
    for res in check_elphase(item, params, info):
        yield res


check_info['raritan_pdu_inlet'] = {
    "parse_function": parse_raritan_pdu_inlet,
    "inventory_function": inventory_elphase,
    "check_function": check_raritan_pdu_inlet,
    "service_description": "Input %s",
    "has_perfdata": True,
    "group": "el_inphase",
    "snmp_info": [
        (
            ".1.3.6.1.4.1.13742.6.3.3.6.1",
            [
                OID_END,
                "7",  # inletPoleSensorDecimalDigits
            ]),
        (
            ".1.3.6.1.4.1.13742.6.5.2.4.1",
            [
                OID_END,
                2,  # availability
                3,  # state
                4,  # value
            ])
    ],
    "snmp_scan_function": lambda oid: oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.13742.6",
}
