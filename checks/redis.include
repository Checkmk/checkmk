#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2019             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def parse_redis_info(info):
    parsed = {}
    instance = {}
    inst_section = {}
    for line in info:
        if line[0].startswith("[[[") and line[0].endswith("]]]"):
            name, host, port = line[0][3:-3].split("|")
            instance = parsed.setdefault(name, {
                "host": host,
                "port": port,
            })
            continue

        if not instance:
            continue

        if line[0].startswith("#"):
            inst_section = instance.setdefault(line[0].split()[-1], {})
            continue

        raw_value = ":".join(line[1:])
        try:
            value = int(raw_value)
        except ValueError:
            pass
        else:
            inst_section[line[0]] = value
            continue

        try:
            value = float(raw_value)
        except ValueError:
            pass
        else:
            inst_section[line[0]] = value
            continue

        inst_section[line[0]] = raw_value

    return parsed
