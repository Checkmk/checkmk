#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2019             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# <<<redis_info>>>
# [[[MY_FIRST_REDIS|127.0.0.1|6380]]]
# Server
# redis_version:4.0.9
# redis_git_sha1:00000000
# redis_git_dirty:0
# redis_build_id:9435c3c2879311f3
# redis_mode:standalone
# os:Linux 4.15.0-1065-oem x86_64
# arch_bits:64
# multiplexing_api:epoll
# atomicvar_api:atomic-builtin
# gcc_version:7.4.0
# process_id:1029
# run_id:27bb4e37e85094b590b4693d6c6e11d07cd6400a
# tcp_port:6380
# uptime_in_seconds:29349
# uptime_in_days:0
# hz:10
# lru_clock:15193378
# executable:/usr/bin/redis-server
# config_file:/etc/redis/redis2.conf
#
# Description of possible output of info command:
# redis_version: Version of the Redis server
# redis_git_sha1: Git SHA1
# redis_git_dirty: Git dirty flag
# redis_build_id: The build id
# redis_mode: The server's mode ("standalone", "sentinel" or "cluster")
# os: Operating system hosting the Redis server
# arch_bits: Architecture (32 or 64 bits)
# multiplexing_api: Event loop mechanism used by Redis
# atomicvar_api: Atomicvar API used by Redis
# gcc_version: Version of the GCC compiler used to compile the Redis server
# process_id: PID of the server process
# run_id: Random value identifying the Redis server (to be used by Sentinel and Cluster)
# tcp_port: TCP/IP listen port
# uptime_in_seconds: Number of seconds since Redis server start
# uptime_in_days: Same value expressed in days
# hz: The server's frequency setting
# lru_clock: Clock incrementing every minute, for LRU management
# executable: The path to the server's executable
# config_file: The path to the config file


@get_parsed_item_data
def check_redis_info(item, params, item_data):
    server_data = item_data.get("Server")
    if server_data is None:
        return

    server_mode = server_data.get("redis_mode")
    if server_mode is not None:
        mode_state = 0
        infotext = "Mode: %s" % server_mode.title()
        mode_params = params.get("expected_mode")
        if mode_params is not None:
            if mode_params != server_mode:
                mode_state = 1
                infotext += " (expected: %s)" % mode_params.title()

        yield mode_state, infotext

    server_uptime = server_data.get("uptime_in_seconds")
    if server_uptime is not None:
        yield check_uptime_seconds(params, server_uptime)

    for key, infotext in [
        ("redis_version", "Version"),
        ("gcc_version", "GCC compiler version"),
        ("process_id", "PID"),
    ]:

        value = server_data.get(key)
        if value is not None:
            yield 0, "%s: %s" % (infotext, value)

    host_data = item_data.get("host")
    if host_data is not None:
        yield 0, "IP: %s" % host_data

    port_data = item_data.get("port")
    if port_data is not None:
        yield 0, "Port: %s" % port_data


check_info["redis_info"] = {
    "parse_function": parse_redis_info,
    "check_function": check_redis_info,
    "inventory_function": discover(),
    "service_description": "Redis %s Server Info",
    "has_perfdata": True,
    "group": "redis_info",
    "includes": ["redis.include", "uptime.include"],
}
