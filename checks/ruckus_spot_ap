#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# <<<ruckus_spot_ap:sep(9)>>>
# [band]  1
# 1-28    1
# 1-25    1
# 1-2 1
# [band]  2
# 1-28    1
# 1-16    1
# 1-9     1

ruckus_spot_ap_bands = {
    "1": "2.4 GHz",
    "2": "5 GHz",
}
ruckus_spot_ap_default_levels = ((None, None), (None, None))


def parse_ruckus_spot_ap(info):
    import json
    data = json.loads(info[0][0])
    bands = {}
    for band_info in data:
        band_id = str(band_info["band"])
        bands.setdefault(band_id, [])
        for ap_dict in band_info.get("access_points"):
            bands[band_id].append([ap_dict["name"], ap_dict["status"]])

    return bands


def inventory_ruckus_spot_ap(parsed):
    for band in parsed:
        if band in ruckus_spot_ap_bands:
            yield ruckus_spot_ap_bands[band], "ruckus_spot_ap_default_levels"


def check_ruckus_spot_ap(item, params, parsed):
    inverse_map = {v: k for k, v in ruckus_spot_ap_bands.items()}
    band = parsed.get(inverse_map.get(item))
    if not band:
        return

    (drift_warn, drift_crit), (down_warn, down_crit) = params
    state = 0
    info = 0
    perfdata = [("ap_devices_total", len(band))]

    extra_info = []
    for what, ap_state, warn, crit in [("drifted", 2, drift_warn, drift_crit),
                                       ("not responding", 0, down_warn, down_crit)]:
        problems = len([x for x in band if x[1] == ap_state])
        if crit and problems >= crit:
            state = 2
        elif warn and problems >= warn:
            state = 1

        if problems:
            extra_info.append("%d %s%s" % (problems, what, state_markers[state]))
        perfdata.append(("ap_devices_%s" % what.replace(" ", "_"), problems, warn, crit))

    info = "%d devices" % len(band)
    if extra_info:
        info += " (%s)" % " / ".join(extra_info)

    yield state, info, perfdata


check_info["ruckus_spot_ap"] = {
    "parse_function": parse_ruckus_spot_ap,
    "inventory_function": inventory_ruckus_spot_ap,
    "check_function": check_ruckus_spot_ap,
    "service_description": "Ruckus Spot Access Points %s",
    "group": "ruckus_ap",
    "has_perfdata": True
}
