#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

factory_settings['sap_hana_backup'] = {
    'backup_age': (24 * 60 * 60, 2 * 24 * 60 * 60),
}


def _get_sap_hana_backup_timestamp(backup_time_readable):
    try:
        t_struct = time.strptime(backup_time_readable, "%Y-%m-%d %H:%M:%S")
    except ValueError:
        return None
    return time.mktime(t_struct)


def parse_sap_hana_backup(info):
    parsed = {}
    for (sid_instance, node), lines in parse_sap_hana_cluster_aware(info).items():
        for line in lines:
            if len(line) < 5:
                continue

            backup_time_readable = line[1].rsplit(".", 1)[0]
            backup_time_stamp = _get_sap_hana_backup_timestamp(backup_time_readable)
            parsed.setdefault("%s - %s" % (sid_instance, line[0]), {}).setdefault(
                node, {
                    "sys_end_time": backup_time_stamp,
                    "backup_time_readable": backup_time_readable,
                    "state_name": line[2],
                    "comment": line[3],
                    "message": line[4],
                })
    return parsed


def inventory_sap_hana_backup(parsed):
    for sid in parsed:
        yield sid, {}


@get_parsed_item_data
def check_sap_hana_backup(item, params, node_data):
    now = time.time()

    nodes = [n for n in node_data if n]
    if nodes:
        yield 0, 'Nodes: %s' % ", ".join(nodes)

    for data in node_data.values():
        state_name = data['state_name']
        if state_name == 'failed':
            state = 2
        elif state_name in ['cancel pending', 'canceled']:
            state = 1
        elif state_name in ['ok', 'successful', 'running']:
            state = 0
        else:
            state = 3
        yield state, "Status: %s" % state_name

        sys_end_time = data.get('sys_end_time')
        if sys_end_time is not None:
            yield 0, "Last: %s" % data['backup_time_readable']
            yield check_levels(now - sys_end_time,
                               "backup_age",
                               params['backup_age'],
                               human_readable_func=get_age_human_readable,
                               infoname="Age")

        comment = data["comment"]
        if comment:
            yield 0, "Comment: %s" % comment

        message = data["message"]
        if message:
            yield 0, "Message: %s" % message

        # It ONE physical device and at least two nodes.
        # Thus we only need to check the first one.
        return


check_info['sap_hana_backup'] = {
    'parse_function': parse_sap_hana_backup,
    'inventory_function': inventory_sap_hana_backup,
    'check_function': check_sap_hana_backup,
    'service_description': 'SAP HANA Backup %s',
    'includes': ['sap_hana.include'],
    "node_info": True,
    "has_perfdata": True,
    'group': 'sap_hana_backup',
    'default_levels_variable': 'sap_hana_backup',
}
