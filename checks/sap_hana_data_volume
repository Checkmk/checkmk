#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.


def parse_sap_hana_data_volume(info):
    parsed = {}
    for (sid_instance, node), lines in parse_sap_hana_cluster_aware(info).items():
        for line in lines:
            if len(line) < 8:
                continue

            inst = parsed.setdefault("%s - %s %s" % (sid_instance, line[0], line[2]),
                                     {}).setdefault(node, {
                                         "service": line[1],
                                         "path": line[3],
                                     })
            for key, index in [
                ("size", 7),
                ("used", 6),
            ]:
                try:
                    inst[key] = float(line[index]) / 1048576.0
                except ValueError:
                    pass

            inst = parsed.setdefault("%s - %s %s Disk" % (sid_instance, line[0], line[2]),
                                     {}).setdefault(node, {})
            for key, index in [
                ("size", 5),
                ("used", 4),
            ]:
                try:
                    inst[key] = float(line[index]) / 1048576.0
                except ValueError:
                    pass

            inst = parsed.setdefault("%s - %s %s Disk Net Data" % (sid_instance, line[0], line[2]),
                                     {}).setdefault(node, {})

            for key, index in [
                ("size", 5),
                ("used", 6),
            ]:
                try:
                    inst[key] = float(line[index]) / 1048576.0
                except ValueError:
                    pass

    return parsed


def inventory_sap_hana_data_volume(parsed):
    for item in parsed:
        yield item, {}


@get_parsed_item_data
def check_sap_hana_data_volume(item, params, node_data):
    nodes = [n for n in node_data if n]
    if nodes:
        yield 0, 'Nodes: %s' % ", ".join(nodes)

    for data in node_data.values():
        size = data['size']
        used = data['used']
        avail = size - used
        yield df_check_filesystem_list(item, params, [(item, size, avail, 0)])

        service = data.get('service')
        if service:
            yield 0, 'Service: %s' % service
        path = data.get('path')
        if path:
            yield 0, 'Path: %s' % path

        # It ONE physical device and at least two nodes.
        # Thus we only need to check the first one.
        return


check_info['sap_hana_data_volume'] = {
    'parse_function': parse_sap_hana_data_volume,
    'inventory_function': inventory_sap_hana_data_volume,
    'check_function': check_sap_hana_data_volume,
    'service_description': 'SAP HANA Volume %s',
    'includes': ['sap_hana.include', 'size_trend.include', 'df.include'],
    "node_info": True,
    "has_perfdata": True,
    'default_levels_variable': 'filesystem_default_levels',
    'group': 'filesystem',
}
