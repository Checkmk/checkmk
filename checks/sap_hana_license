#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

factory_settings['sap_hana_license_default_levels'] = {
    'license_usage_perc': (80.0, 90.0),
}

SAP_HANA_MAYBE = collections.namedtuple("SAP_HANA_MAYBE", ["bool", "value"])


def parse_sap_hana_license(info):
    parsed = {}
    for (sid_instance, node), lines in parse_sap_hana_cluster_aware(info).items():
        for line in lines:
            if len(line) < 7:
                continue

            inst = parsed.setdefault(sid_instance, {}).setdefault(node, {})
            for index, key, in [
                (0, "enforced"),
                (1, "permanent"),
                (2, "locked"),
                (5, "valid"),
            ]:
                value = line[index]
                inst[key] = SAP_HANA_MAYBE(_parse_maybe_bool(value), value)

            for index, key, in [
                (3, "size"),
                (4, "limit"),
            ]:
                try:
                    inst[key] = int(line[index])
                except ValueError:
                    pass
            inst["expiration_date"] = line[6]
    return parsed


def _parse_maybe_bool(value):
    if value.lower() == "true":
        return True
    elif value.lower() == "false":
        return False
    return


def inventory_sap_hana_license(parsed):
    for item in parsed:
        yield item, {}


@get_parsed_item_data
def check_sap_hana_license(item, params, node_data):
    nodes = [n for n in node_data if n]
    if nodes:
        yield 0, 'Nodes: %s' % ", ".join(nodes)

    for data in node_data.values():
        enforced = data['enforced']
        if enforced.bool:
            yield _check_product_usage(data['size'], data['limit'], params)
        elif enforced.bool is None:
            yield 3, "Status: unknown[%s]" % enforced.value
        else:
            yield 0, "Status: unlimited"

        permanent = data["permanent"]
        if permanent.bool:
            yield 0, 'License: %s' % permanent.value
        else:
            yield 1, 'License: not %s' % permanent.value

        valid = data["valid"]
        if not valid.bool:
            yield 1, 'not %s' % valid.value

        expiration_date = data["expiration_date"]
        if expiration_date != "?":
            yield 1, 'Expiration date: %s' % expiration_date

        # It ONE physical device and at least two nodes.
        # Thus we only need to check the first one.
        return


def _check_product_usage(size, limit, params):
    yield check_levels(size,
                       "license_size",
                       params.get('license_size', (None, None)),
                       human_readable_func=get_bytes_human_readable,
                       infoname="Size")

    try:
        usage_perc = 100.0 * size / limit
    except ZeroDivisionError:
        yield 1, 'Usage: cannot calculate'
    else:
        yield check_levels(usage_perc,
                           "license_usage_perc",
                           params.get('license_usage_perc', (None, None)),
                           human_readable_func=get_percent_human_readable,
                           infoname="Usage")


check_info['sap_hana_license'] = {
    'parse_function': parse_sap_hana_license,
    'inventory_function': inventory_sap_hana_license,
    'check_function': check_sap_hana_license,
    'service_description': 'SAP HANA License %s',
    'includes': ['sap_hana.include'],
    "has_perfdata": True,
    'node_info': True,
    'default_levels_variable': 'sap_hana_license_default_levels',
    'group': 'sap_hana_license',
}
