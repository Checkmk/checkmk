#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from cmk.base.check_legacy_includes.df import *  # pylint: disable=wildcard-import,unused-wildcard-import
from cmk.base.check_legacy_includes.scaleio import *  # pylint: disable=wildcard-import,unused-wildcard-import
from cmk.base.check_legacy_includes.size_trend import *  # pylint: disable=wildcard-import,unused-wildcard-import
#<<<scaleio_pd>>>
#PROTECTION_DOMAIN 91ebcf4500000000:
#        ID                                                 91ebcf4500000000
#        NAME                                               domain01
#        STATE                                              PROTECTION_DOMAIN_ACTIVE
#        MAX_CAPACITY_IN_KB                                 65.5 TB (67059 GB)
#        UNUSED_CAPACITY_IN_KB                              17.2 TB (17635 GB)


def inventory_scaleio_pd(parsed):
    for entry in parsed:
        yield entry, {}


def check_scaleio_pd(item, params, parsed):
    data = get_scaleio_data(item, parsed)
    if not data:
        return

    # How will the data be represented? It's magic and the only
    # indication is the unit. We need to handle this!
    unit = data["MAX_CAPACITY_IN_KB"][3].strip(")")
    total = convert_scaleio_space(unit, int(data["MAX_CAPACITY_IN_KB"][2].strip("(")))
    free = convert_scaleio_space(unit, int(data["UNUSED_CAPACITY_IN_KB"][2].strip("(")))

    yield df_check_filesystem_list(item, params, [(item, total, free, 0)])


check_info['scaleio_pd'] = {
    'parse_function': lambda info: parse_scaleio(info, "PROTECTION_DOMAIN"),
    'inventory_function': inventory_scaleio_pd,
    'check_function': check_scaleio_pd,
    'service_description': 'ScaleIO PD capacity %s',
    'has_perfdata': True,
    'group': "filesystem",
}


def inventory_scaleio_pd_status(parsed):
    for entry in parsed:
        yield entry, None


def check_scaleio_pd_status(item, _no_params, parsed):
    data = get_scaleio_data(item, parsed)
    if not data:
        return

    status = data["STATE"][0].replace("PROTECTION_DOMAIN_", "")
    state = 0 if status == "ACTIVE" else 2
    name = data["NAME"][0]

    yield state, "Name: %s, State: %s" % (name, status)


check_info['scaleio_pd.status'] = {
    'inventory_function': inventory_scaleio_pd_status,
    'check_function': check_scaleio_pd_status,
    'service_description': 'ScaleIO PD status %s',
}
