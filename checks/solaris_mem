#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# <<<solaris_mem>>>
# Memory: 256G real, 54G free, 257G swap in use, 86G swap free

# <<<solaris_mem>>>
# Memory: 512M phys mem, 353M free mem, 2000M total swap, 2000M free swap

# <<<solaris_mem>>>
# Memory: 10G phys mem, 1905M free mem, 8002M total swap, 8002M free swap

# <<<solaris_mem>>>
# Memory: 640M real, 10M free, 293M swap in use, 349M swap free

# <<<solaris_mem>>>
# Memory: 2048M real, 913M free, 723M swap in use, 2863M swap free


def parse_solaris_mem(info):
    # The 1.2.4 agent seems to create an empty section under some circumstances
    if not info:
        return {}

    values = []
    mem_tokens = " ".join(info[0][1:]).split(",")
    is_total_swap = False
    for token in mem_tokens:
        if "total swap" in token:
            is_total_swap = True
        values.append(solaris_mem_to_kbytes(token.split()[0]))

    # convert swap-in-use to swap-total, as expected by check_memory()
    if not is_total_swap:
        values[2] = values[2] + values[3]

    keys = ['MemTotal', 'MemFree', 'SwapTotal', 'SwapFree']
    return dict(zip(keys, values))


def solaris_mem_to_kbytes(s):
    if s[-1] == 'G':
        return int(s[:-1]) * 1024 * 1024
    elif s[-1] == 'M':
        return int(s[:-1]) * 1024
    elif s[-1] == 'K':
        return int(s[:-1])
    else:
        raise Exception("Could not parse value %s" % s)


def inventory_solaris_mem_used(parsed):
    if parsed:
        return [(None, {})]


def check_solaris_mem_used(_no_item, params, parsed):
    for subresult in check_memory(params, parsed):
        yield subresult


check_info['solaris_mem'] = {
    "parse_function": parse_solaris_mem,
    "check_function": check_solaris_mem_used,
    "inventory_function": inventory_solaris_mem_used,
    "service_description": "Memory",
    "has_perfdata": True,
    "group": "memory",
    "default_levels_variable": "memory_default_levels",
    "includes": ["mem.include"],
}
