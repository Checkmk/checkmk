#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from cmk.base.check_legacy_includes.diskstat import *  # pylint: disable=wildcard-import,unused-wildcard-import
# <<<statgrab_disk>>>
# 1/md0.disk_name 1/md0
# 1/md0.read_bytes 611352576
# 1/md0.systime 1471423620
# 1/md0.write_bytes 39462400
# 1/md1.disk_name 1/md1
# 1/md1.read_bytes 611352576
# 1/md1.systime 1471423620
# 1/md1.write_bytes 39462400
# 1/md2.disk_name 1/md2
# 1/md2.read_bytes 611351552


def parse_statgrab_disk(info):
    parsed = {}
    now = time.time()
    for line in info:
        disk_name = line[0].split(".")[0]
        parsed.setdefault(disk_name, {})

        if line[0].endswith('read_bytes'):
            parsed[disk_name]["read_throughput"] = get_rate("statgrab_disk.read.%s" % disk_name,
                                                            now, int(line[1]))

        elif line[0].endswith('write_bytes'):
            parsed[disk_name]["write_throughput"] = get_rate("statgrab_disk.write.%s" % disk_name,
                                                             now, int(line[1]))

        elif line[0].endswith("systime"):
            parsed[disk_name]["systime"] = int(line[1])

    return parsed


def inventory_statgrab_disk(parsed):
    return inventory_diskstat_generic([[None, item] for item in parsed])


def check_statgrab_disk(item, params, parsed):
    return check_diskstat_dict(item, params, parsed)


check_info["statgrab_disk"] = {
    'parse_function': parse_statgrab_disk,
    'inventory_function': inventory_statgrab_disk,
    'check_function': check_statgrab_disk,
    'service_description': 'Disk IO %s',
    'has_perfdata': True,
    'group': 'diskstat',
}
