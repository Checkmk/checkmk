#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

memused_default_levels = (150.0, 200.0)


def parse_statgrab_mem(info):
    parsed = {}
    for var, value in info:
        try:
            parsed.setdefault(var, int(value) // 1024)
        except ValueError:
            pass

    try:
        totalmem_kb = parsed['mem.total']
        memused_kb = parsed['mem.used']
        totalswap_kb = parsed['swap.total']
        swapused_kb = parsed['swap.used']
    except KeyError:
        return {}

    instance = {
        "MemTotal": totalmem_kb,
        "MemFree": totalmem_kb - memused_kb,
        "SwapTotal": totalswap_kb,
        "SwapFree": totalswap_kb - swapused_kb,
    }

    if 'mem.cache' in parsed:
        instance["Cached"] = parsed['mem.cache']

    return instance


def inventory_statgrab_mem(parsed):
    if parsed:
        yield None, 'memused_default_levels'


def check_statgrab_mem(_no_item, params, parsed):
    for subresult in check_memory(params, parsed):
        yield subresult


check_info["statgrab_mem"] = {
    'parse_function': parse_statgrab_mem,
    'inventory_function': inventory_statgrab_mem,
    "check_function": check_statgrab_mem,
    'service_description': 'Memory',
    'has_perfdata': True,
    'group': "memory",
    'includes': ["mem.include"],
}
