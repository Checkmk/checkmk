#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

memused_default_levels = (150.0, 200.0)


def parse_statgrab_mem(info):
    parsed = {}
    for var, value in info:
        try:
            parsed.setdefault(var, int(value) // 1024)
        except ValueError:
            pass

    try:
        totalmem_kb = parsed['mem.total']
        memused_kb = parsed['mem.used']
        totalswap_kb = parsed['swap.total']
        swapused_kb = parsed['swap.used']
    except KeyError:
        return {}

    instance = {
        "MemTotal": totalmem_kb,
        "MemFree": totalmem_kb - memused_kb,
        "SwapTotal": totalswap_kb,
        "SwapFree": totalswap_kb - swapused_kb,
    }

    if 'mem.cache' in parsed:
        instance["Cached"] = parsed['mem.cache']

    return instance


def inventory_statgrab_mem(parsed):
    if parsed:
        yield None, 'memused_default_levels'


def check_statgrab_mem(_no_item, params, parsed):
    for subresult in check_memory(params, parsed):
        yield subresult


check_info["statgrab_mem"] = {
    'parse_function': parse_statgrab_mem,
    'inventory_function': inventory_statgrab_mem,
    "check_function": check_statgrab_mem,
    'service_description': 'Memory',
    'has_perfdata': True,
    'group': "memory",
    'includes': ["mem.include"],
}
