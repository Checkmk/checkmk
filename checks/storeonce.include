#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2017             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def parse_storeonce_clusterinfo(info):
    parsed = {}
    for line in info:
        parsed[line[0]] = line[1]
    return parsed


def parse_storeonce_servicesets(info):
    parsed = {}
    for line in info:
        if line[0].startswith('['):
            item = line[0]
            parsed[item] = {}
        else:
            parsed[item][line[0]] = line[1]
    return parsed


def translate_storeonce_status(status):
    translate_state = {
        '0': 3,  # Unknown
        '1': 0,  # OK
        '2': 0,  # Information
        '3': 1,  # Warning
        '4': 2,  # Critical
    }
    return translate_state[status]


def _get_storeonce_space_values(values, type_):
    key = "%s in bytes" % type_
    if key in values:
        return float(values[key]), 0, 0

    # combined(total) = local + cloud
    type_ = type_.replace(" Space", "")
    combined_key = "combined%sBytes" % type_
    cloud_key = "cloud%sBytes" % type_
    local_key = "local%sBytes" % type_
    return float(values.get(combined_key, 0)),\
           float(values.get(cloud_key, 0)),\
           float(values.get(local_key, 0))


def check_storeonce_space(item, params, values):
    total_bytes, cloud_bytes, local_bytes = _get_storeonce_space_values(values, "Capacity")
    free_bytes, free_cloud_bytes, free_local_bytes = _get_storeonce_space_values(
        values, "Free Space")
    factor = 1024 * 2
    yield df_check_filesystem_list(
        item, params,
        [(item, total_bytes / factor, free_bytes / factor, 0)])  # fixed: true-division

    if cloud_bytes and local_bytes:
        yield 0, "Total cloud: %s, Total local: %s" % (get_bytes_human_readable(cloud_bytes),
                                                       get_bytes_human_readable(local_bytes))

    if free_cloud_bytes and free_local_bytes:
        yield 0, "Free cloud: %s, Free local: %s" % (get_bytes_human_readable(free_cloud_bytes),
                                                     get_bytes_human_readable(free_local_bytes))

    dedupl_ratio_str = values.get('Deduplication Ratio')
    if dedupl_ratio_str is not None:
        yield 0, "Dedup ratio: %.2f" % float(dedupl_ratio_str)
