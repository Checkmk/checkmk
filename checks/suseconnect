#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# <<<suse_connect:sep(58)>>>
# identifier: SLES
# version: 12.1
# arch: x86_64
# status: Registered
# regcode: 987498234zGDTS
# starts_at: 2015-12-01 00:00:00 UTC
# expires_at: 2019-12-31 00:00:00 UTC
# subscription_status: ACTIVE
# typeXXX: full
#
# Note: the typeXXX above is actually type, but this would confuse mypy.

factory_settings['sles_license_default_levels'] = {
    'status': 'Registered',
    'subscription_status': 'ACTIVE',
    'days_left': (14, 7),
}


def parse_suseconnect(info):
    parsed = {}
    used_keys = {'status', 'regcode', 'starts_at', 'expires_at', 'subscription_status', 'type'}

    is_sles = False
    for item in info:
        # a value may contain the sep ':' as well
        key, value = item[0], ":".join(item[1:]).strip()
        if key == 'identifier':
            is_sles = True if value == 'SLES' else False

        if is_sles and key in used_keys:
            parsed[key] = value

    return parsed


def inventory_suseconnect(parsed):
    return [(None, {})]


def check_suseconnect(_no_item, params, parsed):
    # we assume here that the parsed data contains all required keys

    if not parsed:
        yield 3, 'No license information found'
        return

    state, infotext = 0, 'Status: %(status)s' % parsed
    if params['status'] != 'Ignore' and params['status'] != parsed['status']:
        state = 2
    yield state, infotext

    state, infotext = 0, ', Subscription: %(subscription_status)s' % parsed
    if (params['subscription_status'] != 'Ignore' and
            params['subscription_status'] != parsed['subscription_status']):
        state = 2
    yield state, infotext

    yield 0, (', Subscription type: %(type)s, Registration code: %(regcode)s, '
              'Starts at: %(starts_at)s, Expires at: %(expires_at)s') % parsed

    expiration_date = time.strptime(parsed['expires_at'], '%Y-%m-%d %H:%M:%S %Z')
    expiration_time = time.mktime(expiration_date) - time.time()

    if expiration_time > 0:
        warn, crit = params['days_left']
        days2seconds = 24 * 60 * 60

        if expiration_time <= crit * days2seconds:
            state = 2
        elif expiration_time <= warn * days2seconds:
            state = 1
        else:
            state = 0

        infotext = ', Expires in: %s' % get_age_human_readable(expiration_time)
        if state:
            infotext += ' (warn/crit at %d/%d days)' % (warn, crit)

        yield state, infotext
    else:
        yield 2, ', Expired since: %s' % get_age_human_readable(-1.0 * expiration_time)


check_info['suseconnect'] = {
    'service_description': 'SLES license',
    'parse_function': parse_suseconnect,
    'inventory_function': inventory_suseconnect,
    'check_function': check_suseconnect,
    'group': 'sles_license',
    'default_levels_variable': 'sles_license_default_levels',
}
