#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2019             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at https://checkmk.com/.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def parse_tcw241_digital(info):
    """
    parse info data and create list of namedtuples for 4 digital sensors.

    expected info structure:
        list of digital sensor descriptions and states:
            [description1, description2, description3, description4]
            [input state1, input state2, input state3, input state4]

    converted to dictionary:
        {
            1: { description1: state1 }
            ...
            4: { description4: state4 }
        }

    :param info: parsed snmp data
    :return: list of namedtuples for digital sensors
    """
    try:
        descriptions, states = info[0][0], info[1][0]
    except IndexError:
        return {}

    info_dict = {}
    for index, (description, state) in enumerate(zip(descriptions, states)):

        # if state is '1', the sensor is 'open'
        sensor_state = "open" if state == "1" else "closed"

        info_dict[str(index + 1)] = {"description": description, "state": sensor_state}
    return info_dict


@get_parsed_item_data
def check_tcw241_digital(item, params, info_dict):
    """
    Check sensor if it is open or closed

    :param item: sensor number
    :param params: <not used>
    :param info_dict: dictionary with digital sensor description and state (open/close)
    :return: status
    """
    return 0 if info_dict.get("state") == "open" else 2, "[%s] is %s" % \
           (info_dict.get("description"), info_dict.get("state"))


check_info["teracom_tcw241_digital"] = {
    "parse_function": parse_tcw241_digital,
    "check_function": check_tcw241_digital,
    "inventory_function": discover(),
    "service_description": "Digital Sensor %s",
    "has_perfdata": False,
    'snmp_scan_function': lambda oid: "Teracom" in oid(".1.3.6.1.2.1.1.1.0"),
    'snmp_info': [
        (
            ".1.3.6.1.4.1.38783.3.2.2.3",
            [
                "1.0",  # Digital Input 1 description
                "2.0",  # Digital Input 2 description
                "3.0",  # Digital Input 3 description
                "4.0"  # Digital Input 4 description
            ]),
        (
            ".1.3.6.1.4.1.38783.3.3.3",
            [
                "1.0",  # Digital 1 Input State
                "2.0",  # Digital 2 Input State
                "3.0",  # Digital 3 Input State
                "4.0"  # Digital 4 Input State
            ])
    ]
}
