#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2019             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def inventory_tplink_mem(info):
    if len(info) >= 1:
        return [(None, {})]


def check_tplink_mem(_no_item, params, info):
    num_units = 0
    mem_used = 0
    for line in info:
        unit_used = int(line[0])
        mem_used += unit_used
        num_units += 1

    if num_units == 0:
        return

    mem_used = float(mem_used) / num_units

    return check_levels(mem_used,
                        "mem_used_percent",
                        params.get('levels', (None, None)),
                        infoname="Usage",
                        human_readable_func=get_percent_human_readable)


check_info["tplink_mem"] = {
    'check_function': check_tplink_mem,
    'inventory_function': inventory_tplink_mem,
    'service_description': 'Memory',
    'has_perfdata': True,
    'snmp_info': (".1.3.6.1.4.1.11863.6.4.1.2.1.1", [2]),
    'snmp_scan_function': lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.11863.5"),
    'group': 'memory_percentage_used',
}
