#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2019             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Maps poe power status to faulty status detail string.
# See tpPoePowerStatus in TPLINK-POWER-OVER-ETHERNET-MIB
poe_faulty_status_to_string = {
    '3': 'overload',
    '4': 'short',
    '5': 'nonstandard-pd',
    '6': 'voltage-high',
    '7': 'voltage-low',
    '8': 'hardware-fault',
    '9': 'overtemperature',
}


def _deci_watt_to_watt(deci_watt):
    """ Convert from deci watt to watt"""
    return float(deci_watt) / 10


def parse_tplink_poe(info):
    """
    parse info data and create dictionary with namedtuples for each item.

    {
       item : PoeData(poe_max, poe_used, pse_op_status)
    }

    :param info: parsed snmp data
    :return: dictionary
    """
    interface_list, poe_info = info

    poe_dict = {}
    for port_index, poe_port_status, poe_max, poe_used, poe_power_status in poe_info:
        try:
            # port_index is the 1 based port number not the interface index.
            # But we can use this number to index the list of interfaces.
            interface_index = int(port_index) - 1
            item = interface_list[interface_index][0]
            poe_status = PoeStatus.FAULTY
            poe_status_detail = None

            if poe_port_status == '1':
                # poe feature enabled for port
                if poe_power_status == '0':  # status: off
                    poe_status = PoeStatus.OFF
                elif poe_power_status == '1':  # status: turning-on
                    poe_status = PoeStatus.OFF
                elif poe_power_status == '2':  # status: on
                    poe_status = PoeStatus.ON
                else:
                    # Some faulty status. Try to map status detail string
                    poe_status_detail = poe_faulty_status_to_string.get(poe_power_status, None)
            else:
                # poe feature disabled for port
                continue

            poe_dict[item] = PoeValues(poe_max=_deci_watt_to_watt(poe_max),
                                       poe_used=_deci_watt_to_watt(poe_used),
                                       poe_status=poe_status,
                                       poe_status_detail=poe_status_detail)
        except (ValueError, IndexError):
            pass
    return poe_dict


def inventory_tplink_poe(parsed):
    return [(item, {}) for item in parsed]


@get_parsed_item_data
def check_tplink_poe(item, params, poe_data):
    return check_poe_data(params, poe_data)


check_info["tplink_poe"] = {
    'parse_function': parse_tplink_poe,
    'check_function': check_tplink_poe,
    'inventory_function': inventory_tplink_poe,
    'service_description': 'POE%s consumption',
    'has_perfdata': True,
    'snmp_info': [(".1.3.6.1.2.1.2.2.1", ["1"]),
                  (".1.3.6.1.4.1.11863.6.56.1.1.2.1.1", ["1", "2", "4", "7", "11"])],
    'snmp_scan_function': lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.11863.5"),
    'includes': ["poe.include"],
}
