#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Example output from agent:
# Put here the example output from your TCP-Based agent. If the
# check is SNMP-Based, then remove this section

tsm_scratch_default_levels = (5, 7)


def inventory_tsm_scratch(info):
    inventory = []

    for line in info:
        if len(line) != 3:
            continue
        inst, _tapes, library = line
        if inst != 'default':
            item = "%s / %s" % (inst, library)
        else:
            item = library
        inventory.append((item, "tsm_scratch_default_levels"))

    return inventory


def check_tsm_scratch(item, params, info):
    crit, warn = params
    for inst, tapes, library in info:
        if inst != 'default':
            found_item = "%s / %s" % (inst, library)
        else:
            found_item = library

        if found_item == item:
            tapes = saveint(tapes)
            state = 0
            if tapes <= crit:
                state = 2
            elif tapes <= warn:
                state = 1

            return state, "Found %d tapes" % tapes, \
                        [ ("tapes_free", tapes, warn, crit) ]

    return 3, "UNKNOWN - Check no implemented"


check_info["tsm_scratch"] = {
    "inventory_function": inventory_tsm_scratch,
    "check_function": check_tsm_scratch,
    "service_description": "Scratch Pool %s",
    "has_perfdata": True,
}
