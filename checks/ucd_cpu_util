#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

#    UCD-SNMP-MIB::ssCpuRawUser.0 = Counter32: 219998591
#    UCD-SNMP-MIB::ssCpuRawNice.0 = Counter32: 0
#    UCD-SNMP-MIB::ssCpuRawSystem.0 = Counter32: 98206536
#    UCD-SNMP-MIB::ssCpuRawIdle.0 = Counter32: 3896034232
#    UCD-SNMP-MIB::ssCpuRawWait.0 = Counter32: 325152257
#    UCD-SNMP-MIB::ssCpuRawKernel.0 = Counter32: 96265777
#    UCD-SNMP-MIB::ssCpuRawInterrupt.0 = Counter32: 1940759


def inventory_ucd_cpu_util(info):
    if info:
        yield None, {}


def check_ucd_cpu_util(item, params, info):
    # ancient iowait tuple rule
    # and legacy None default prior to 1.6
    params = transform_cpu_iowait(params)

    counters = map(saveint, info[0])
    this_time = time.time()
    rates = [
        get_rate("cpu.util.%d" % index, this_time, counter)
        for index, counter in enumerate(counters)
    ]

    total = sum(rates)
    if total == 0:
        raise MKCounterWrapped("Rates have not changed since last interval")

    parts = [r / total for r in rates]
    user = 100 * (parts[0] + parts[1])
    system = 100 * (parts[2] + parts[5] + parts[6])
    wait = 100 * (parts[4])
    util = user + system + wait

    yield check_levels(user,
                       "user",
                       None,
                       human_readable_func=get_percent_human_readable,
                       infoname="User")
    yield check_levels(system,
                       "system",
                       None,
                       human_readable_func=get_percent_human_readable,
                       infoname="System")
    yield check_levels(wait,
                       "wait",
                       params.get("iowait"),
                       human_readable_func=get_percent_human_readable,
                       infoname="Wait")

    for util_result in check_cpu_util(util, params):
        yield util_result


check_info["ucd_cpu_util"] = {
    'inventory_function': inventory_ucd_cpu_util,
    'check_function': check_ucd_cpu_util,
    'service_description': 'CPU utilization',
    'has_perfdata': True,
    'snmp_info': ('.1.3.6.1.4.1.2021.11', [50, 51, 52, 53, 54, 55, 56]),
    'snmp_scan_function': prefer_hr_else_ucd,
    'includes': ["ucd_hr.include", "transforms.include", "cpu_util.include"],
    'group': 'cpu_iowait',
}
