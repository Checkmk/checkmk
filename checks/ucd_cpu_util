#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

#    UCD-SNMP-MIB::ssCpuRawUser.0 = Counter32: 219998591
#    UCD-SNMP-MIB::ssCpuRawNice.0 = Counter32: 0
#    UCD-SNMP-MIB::ssCpuRawSystem.0 = Counter32: 98206536
#    UCD-SNMP-MIB::ssCpuRawIdle.0 = Counter32: 3896034232
#    UCD-SNMP-MIB::ssCpuRawWait.0 = Counter32: 325152257
#    UCD-SNMP-MIB::ssCpuRawKernel.0 = Counter32: 96265777
#    UCD-SNMP-MIB::ssCpuRawInterrupt.0 = Counter32: 1940759

# Although this variable is no longer used we keep it for backwards
# compatibility so that old configs in automation calls autocheck do not
# crash.
kernel_util_default_levels = None


def inventory_ucd_cpu_util(info):
    if info:
        yield None, {}


def check_ucd_cpu_util(item, params, info):
    # ancient iowait tuple rule
    # and legacy None default prior to 1.6
    params = transform_cpu_iowait(params)

    counters = map(saveint, info[0])
    this_time = time.time()
    rates = [
        get_rate("cpu.util.%d" % index, this_time, counter)
        for index, counter in enumerate(counters)
    ]

    total = sum(rates)
    if total == 0:
        raise MKCounterWrapped("Rates have not changed since last interval")

    parts = [r / total for r in rates]  # fixed: true-division
    user = 100 * (parts[0] + parts[1])
    system = 100 * (parts[2] + parts[5] + parts[6])
    wait = 100 * (parts[4])
    util = user + system + wait

    yield check_levels(user,
                       "user",
                       None,
                       human_readable_func=get_percent_human_readable,
                       infoname="User")
    yield check_levels(system,
                       "system",
                       None,
                       human_readable_func=get_percent_human_readable,
                       infoname="System")
    yield check_levels(wait,
                       "wait",
                       params.get("iowait"),
                       human_readable_func=get_percent_human_readable,
                       infoname="Wait")

    for util_result in check_cpu_util(util, params):
        yield util_result


check_info["ucd_cpu_util"] = {
    'inventory_function': inventory_ucd_cpu_util,
    'check_function': check_ucd_cpu_util,
    'service_description': 'CPU utilization',
    'has_perfdata': True,
    'snmp_info': ('.1.3.6.1.4.1.2021.11', [50, 51, 52, 53, 54, 55, 56]),
    'snmp_scan_function': prefer_hr_else_ucd,
    'includes': ["ucd_hr.include", "transforms.include", "cpu_util.include"],
    'group': 'cpu_iowait',
}
