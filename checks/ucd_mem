#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# FIXME
# The WATO group 'memory_simple' needs an item and the service_description should
# have a '%s'.  At the moment the current empty item '' and 'Memory' without '%s'
# works but is not consistent.  This will be fixed in the future.
# If we change this we loose history and parameter sets have to be adapted.

# .1.3.6.1.4.1.2021.4.5.0 4003584 --> UCD-SNMP-MIB::memTotalReal.0
# .1.3.6.1.4.1.2021.4.6.0 188296  --> UCD-SNMP-MIB::memAvailReal.0
# .1.3.6.1.4.1.2021.4.14.0 100    --> UCD-SNMP-MIB::memBuffer.0
# .1.3.6.1.4.1.2021.4.15.0 200    --> UCD-SNMP-MIB::memCached.0

# suggested by cutomer
factory_settings["ucd_mem_default_levels"] = {"levels": ("perc_used", (80.0, 90.0))}

BUFFER_CACHE_KEYS = ['memBuffer', 'memCached']


def _info_str_to_bytes(info_str):
    return int(info_str.replace("kB", "").strip()) * 1024


def parse_ucd_mem(info):

    if not info:
        return {}

    # memTotal and memAvailable are mandatory
    try:
        parsed_mem = {
            "memTotal": _info_str_to_bytes(info[0][0]),
            "memAvail": _info_str_to_bytes(info[0][1])
        }
    except ValueError:
        return {}

    # memTotal and memAvailable are optional
    for key, val in zip(BUFFER_CACHE_KEYS, info[0][2:]):
        try:
            parsed_mem[key] = _info_str_to_bytes(val)
        except ValueError:
            pass

    return parsed_mem


def inventory_ucd_mem(parsed):
    return [("", {})] if parsed else []


def check_ucd_mem(item, params, parsed):

    mem_used_bytes = parsed["memTotal"] - parsed["memAvail"]

    # buffer and cache count as free memory
    for key in BUFFER_CACHE_KEYS:
        mem_used_bytes -= parsed.get(key, 0)

    return check_memory_element(
        "Usage",
        mem_used_bytes,
        parsed["memTotal"],
        params.get("levels"),
        metric_name="memory_used",
    )


check_info['ucd_mem'] = {
    'parse_function': parse_ucd_mem,
    'inventory_function': inventory_ucd_mem,
    'check_function': check_ucd_mem,
    'service_description': 'Memory',
    'has_perfdata': True,
    'snmp_info': (
        ".1.3.6.1.4.1.2021.4",
        [
            "5",  # memTotal     -> kB
            "6",  # memAvailable -> kB
            "14",  # memBuffer    -> kB
            "15",  # memCached    -> kB
        ]),
    # Some devices are reporting wrong data on
    # HOST-RESOURCES-MIB. Use UCD-MIB in these
    # cases instead
    'snmp_scan_function': is_ucd_mem,
    'default_levels_variable': 'ucd_mem_default_levels',
    'group': 'memory_simple',
    'includes': ["ucd_hr.include", "mem.include"],
}
