#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def check_ups_capacity(_item, params, info):
    # To support inventories with the old version
    if isinstance(params, tuple):  # old format with 2 params in tuple
        warn, crit = params
        cap_warn, cap_crit = (95, 90)
    elif isinstance(params, dict):  # new dict format
        warn, crit = params.get('battime', (0, 0))
        cap_warn, cap_crit = params.get('capacity', (95, 90))
    else:
        warn, crit = (0, 0)
        cap_warn, cap_crit = (95, 90)

    minutes_on_bat, minutes_left, percent_fuel = (
        int(num) if num.strip() else None  #
        for num in info[0])

    on_battery = minutes_left is not None and minutes_on_bat
    if not on_battery:
        yield 0, "On mains"

    # Check time left on battery
    # `minutes_left` can be 0 which not always means that there's no time left but the device might
    # also just be on main power supply
    if minutes_left is not None:
        ignore_levels = minutes_left == 0 and not on_battery
        yield check_levels(
            minutes_left,
            "capacity",
            None if ignore_levels else (None, None, warn, crit),
            human_readable_func=lambda x: get_age_human_readable(x * 60),
            infoname="Time left",
        )

    # Check percentual capacity - note that capacity will only be checked on battery
    if percent_fuel is not None:
        yield check_levels(
            percent_fuel,
            "percent",
            (None, None, cap_warn, cap_crit) if on_battery else None,
            human_readable_func=get_percent_human_readable,
            infoname="Percent",
        )

    # Output time on battery
    if minutes_on_bat is not None and minutes_on_bat > 0:
        yield 0, "Time running on battery: %s" % get_age_human_readable(minutes_on_bat * 60)
