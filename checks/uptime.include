#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def parse_snmp_uptime(ticks):
    try:
        if len(ticks) < 3:
            return 0
        return int(ticks[:-2])
    except Exception:
        days, h, m, s = ticks.split(":")
        return (int(days) * 86400) + (int(h) * 3600) + (int(m) * 60) + int(float(s))


# Example for params:
# {
#    "min" : ( 7200, 3600 ),            # Minimum required uptime (warn, crit)
#    "max" : ( 86400 * 7, 86400 * 14),  # Maximum required uptime (warn, crit)
# }


def check_uptime_seconds(params, uptime_sec):
    seconds = uptime_sec % 60
    rem = uptime_sec // 60
    minutes = rem % 60
    hours = (rem % 1440) // 60
    days = rem // 1440
    since = time.strftime("%c", time.localtime(time.time() - uptime_sec))

    state = 0
    infotext = "Up since %s (%dd %02d:%02d:%02d)" % \
                (since, days, hours, minutes, seconds)

    if params is None:  # legacy: support older versions of parameters
        params = {}

    if "min" in params:
        warn, crit = params["min"]
        if uptime_sec < crit:
            state = 2
        elif uptime_sec < warn:
            state = max(state, 1)

        if state:
            infotext += ", not up long enough!"

    if "max" in params:
        warn, crit = params["max"]
        if uptime_sec > crit:
            state = 2
        elif uptime_sec > warn:
            state = max(state, 1)

        if uptime_sec > warn:
            infotext += ", up too long!"

    return (state, infotext, [("uptime", uptime_sec)])


#   .--snmp----------------------------------------------------------------.
#   |                                                                      |
#   |                      ___ _ __  _ __ ___  _ __                        |
#   |                     / __| '_ \| '_ ` _ \| '_ \                       |
#   |                     \__ \ | | | | | | | | |_) |                      |
#   |                     |___/_| |_|_| |_| |_| .__/                       |
#   |                                         |_|                          |
#   '----------------------------------------------------------------------'

# On Linux appliances: .1.3.6.1.2.1.1.3.0    means uptime of snmpd
#                      .1.3.6.1.2.1.25.1.1.0 means system uptime
snmp_uptime_info = (
    '.1.3.6.1.2.1',
    [
        '1.3',  # DISMAN-EVENT-MIB::sysUpTime
        '25.1.1',  # HOST-RESOURCES-MIB::hrSystemUptime
    ])


def snmp_scan_uptime(oid):
    return oid(".1.3.6.1.2.1.1.1.0") is not None


def inventory_snmp_uptime(info):
    if len(info) > 0 and len(info[0]) >= 1:
        return [(None, {})]


def check_snmp_uptime(checktype, params, info):
    if info[0][1]:
        uptime = parse_snmp_uptime(info[0][1])
    else:
        uptime = parse_snmp_uptime(info[0][0])
    return check_uptime_seconds(params, uptime)
