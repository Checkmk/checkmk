#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def check_viprinet_router(_no_item, params, info):
    router_mode_map = {
        "0": "Node",
        "1": "Hub",
        "2": "Hub running as HotSpare",
        "3": "Hotspare-Hub replacing another router"
    }
    current_mode = info[0][0][0]
    mode = router_mode_map.get(current_mode)

    expect_mode = params.get("expect_mode")
    if expect_mode:
        # Requires mode found on inventory
        if expect_mode == "inv":
            expect_mode = params.get("mode_inv")
        if expect_mode in router_mode_map:
            if expect_mode != current_mode:
                return (2, "Mode '%s' differs from expected mode '%s'" %
                        (mode, router_mode_map.get(expect_mode)))

    if mode:
        return (0, mode)
    return (3, "Undefined Mode")


check_info["viprinet_router"] = {
    'check_function': check_viprinet_router,
    'inventory_function': lambda info: len(info) > 0 and [(None, {
        "mode_inv": info[0][0][0]
    })] or [],
    'service_description': "Router Mode",
    'group': "viprinet_router",
    'snmp_info': (".1.3.6.1.4.1.35424.1.1", [5]),
    'snmp_scan_function': lambda oid: oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.35424",
}
