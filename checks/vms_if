#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def convert_vms_if(info):
    # Due to signed 32-bit arithmetics we sometimes get negative values. Those
    # must be converted to positive ones.
    def wrap_negative(c):
        if c < 0:
            return c + 2**32
        return c

    new_info = []
    ifIndex = 0
    for line in info:
        ifDescr = line[0]
        ifInOctets, ifInUcastPkts, ifInMulticastPkts, ifInBroadcastPkts, \
        ifInDiscards, ifInErrors, ifOutOctets, ifOutUcastPkts, \
        ifOutMulticastPkts, ifOutBroadcastPkts, ifOutDiscards, ifOutErrors = \
            map(wrap_negative, line[1:13])

        ifIndex += 1
        new_info.append((
            str(ifIndex),
            ifDescr,
            '6',  # ifType = Ethernet
            '1000000000',  # ifHighSpeed
            '1',  # ifOperStatus
            ifInOctets,
            ifInUcastPkts,
            ifInMulticastPkts,
            ifInBroadcastPkts,
            ifInDiscards,
            ifInErrors,
            ifOutOctets,
            ifOutUcastPkts,
            ifOutMulticastPkts,
            ifOutBroadcastPkts,
            ifOutDiscards,
            ifOutErrors,
            '0',  # ifOutQLen
            ifDescr,
            '',  # ifPhysAddress
        ))
    return new_info


def inventory_vms_if(info):
    return inventory_if_common(convert_vms_if(info))


def check_vms_if(item, params, info):
    return check_if_common(item, params, convert_vms_if(info))


check_info['vms_if'] = {
    "check_function": check_vms_if,
    "inventory_function": inventory_vms_if,
    "service_description": 'Interface %s',
    "has_perfdata": True,
    "includes": ["if.include"],
    "group": "if",
    "default_levels_variable": "if_default_levels",
}
