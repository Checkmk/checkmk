#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

factory_settings['if_default_levels'] = IF_CHECK_DEFAULT_PARAMETERS


def convert_vms_if(info):
    # Due to signed 32-bit arithmetics we sometimes get negative values. Those
    # must be converted to positive ones.
    def wrap_negative(c):
        if c < 0:
            return c + 2**32
        return c

    new_info = []
    ifIndex = 0
    for line in info:
        ifDescr = line[0]
        ifInOctets, ifInUcastPkts, ifInMulticastPkts, ifInBroadcastPkts, \
        ifInDiscards, ifInErrors, ifOutOctets, ifOutUcastPkts, \
        ifOutMulticastPkts, ifOutBroadcastPkts, ifOutDiscards, ifOutErrors = \
            map(wrap_negative, line[1:13])

        ifIndex += 1
        new_info.append((
            str(ifIndex),
            ifDescr,
            '6',  # ifType = Ethernet
            '1000000000',  # ifHighSpeed
            '1',  # ifOperStatus
            ifInOctets,
            ifInUcastPkts,
            ifInMulticastPkts,
            ifInBroadcastPkts,
            ifInDiscards,
            ifInErrors,
            ifOutOctets,
            ifOutUcastPkts,
            ifOutMulticastPkts,
            ifOutBroadcastPkts,
            ifOutDiscards,
            ifOutErrors,
            '0',  # ifOutQLen
            ifDescr,
            '',  # ifPhysAddress
        ))
    return new_info


def inventory_vms_if(info):
    return inventory_if_common(convert_vms_if(info))


def check_vms_if(item, params, info):
    return check_if_common(item, params, convert_vms_if(info))


check_info['vms_if'] = {
    "check_function": check_vms_if,
    "inventory_function": inventory_vms_if,
    "service_description": 'Interface %s',
    "has_perfdata": True,
    "includes": ["if.include"],
    "group": "if",
    "default_levels_variable": "if_default_levels",
}
