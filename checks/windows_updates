#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

import time

from cmk.base.plugins.agent_based.windows_updates import Section

windows_updates_default_params = (0, 0, 0, 0, 604800, 172800, True)


def inventory_windows_updates(section: Section):
    yield None, "windows_updates_default_params"


def check_windows_updates(_no_item, params, section: Section):
    imp_warn, imp_crit, opt_warn, opt_crit = params[0:4]
    if len(params) == 7:
        force_warn, force_crit, verbose = params[4:7]
    else:
        force_warn = 604800
        force_crit = 172800
        verbose = True

    yield check_levels(
        len(section.important_updates),
        "important",
        (imp_warn, imp_crit),
        human_readable_func=lambda x: f"{int(x)}",
        infoname="Important",
    )
    if section.important_updates and verbose:
        yield 0, f"({'; '.join(section.important_updates)})"  # improve this in new API!

    yield check_levels(
        len(section.optional_updates),
        "optional",
        (opt_warn, opt_crit),
        human_readable_func=lambda x: f"{int(x)}",
        infoname="Optional",
    )

    if section.reboot_required:
        yield 1, "Reboot required to finish updates"

    if not section.forced_reboot or (delta := section.forced_reboot - time.time()) < 0:
        return

    yield check_levels(
        delta,
        None,
        (force_warn, force_crit),
        human_readable_func=get_age_human_readable,
        infoname="Time to enforced reboot to finish updates",
    )


check_info["windows_updates"] = {
    "check_function": check_windows_updates,
    "inventory_function": inventory_windows_updates,
    "service_description": "System Updates",
    "group": "windows_updates",
    "has_perfdata": True,
}
