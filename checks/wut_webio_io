#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

#SNMP Data for the port that is labeled as "0" on the device and
# in the web interface, but "1" in the tables.
#  .1.3.6.1.4.1.5040.1.2.4.1.3.1.4.1  1                << this is the index
#  .1.3.6.1.4.1.5040.1.2.4.3.1.5.2.1.1.1  1            << this is the state
#  .1.3.6.1.4.1.5040.1.2.4.3.2.1.1.1.1  "Stoerung USV" << this is the user descr.

webio_state_names = {
    0: "Off",
    1: "On",
}


# Parser for the snmp data, hands back a dict with fugded
# item name and the state of all ports.
# fix the port index. it is off by one. alternatively you could just
# fix the nagios state text at check time.
# Also do padding with 0, this means we need to handle it as "str"
# tbh, there is a way in if.include but it is beyond me how that works.
# The max model has 24 ports, so this will work for the current product
# range.
def parse_webio_io_inputs(info):
    wut_info = {}
    for line in info:
        input_index, input_desc, state = line
        state = int(state)
        input_index = str(int(input_index) - 1)
        if len(input_index) < 2:
            input_index = "0" + input_index

        if input_desc.startswith("Input"):
            input_desc = input_index
        else:
            input_desc = input_index + " " + input_desc
        wut_info.update({input_index: (input_desc, state)})

    return wut_info


def inventory_wut_webio_io_inputs(info):
    # inventorize the err, things as the parser returned them.
    return [(val[0], val[1]) for val in parse_webio_io_inputs(info).values()]


def check_wut_webio_io_inputs(item, params, info):
    for val in parse_webio_io_inputs(info).values():
        if val[0] == item:
            state = val[1]

            # Compare to the state of the IO port at inventory.
            if state != params:
                return (2, "state should be %s but is %s (!!)" %
                        (webio_state_names[params], webio_state_names[state]))
            return (0, "state is %s" % webio_state_names[state])

    return (3, "Item not found in agent output")


check_info['wut_webio_io.inputs'] = {
    "check_function"     : check_wut_webio_io_inputs,
    "inventory_function" : inventory_wut_webio_io_inputs,
    "service_description": "INPUT %s",
    "snmp_info"          : (".1.3.6.1.4.1.5040.1.2.4", [
         "3.1.5.2.1.1",    # io port index. (bugged)
         "3.2.1.1.1",      # user defined description.
         "1.3.1.4",        # the low/high state.
    ]),
    # first check we have a vendor mib from W&T, then check for the model in their MIB.
    "snmp_scan_function" : lambda oid:  \
         ".1.3.6.1.4.1.5040" in oid(".1.3.6.1.2.1.1.2.0") and \
         oid(".1.3.6.1.4.1.5040.1.2.4.3.3.5.0") and \
         oid(".1.3.6.1.4.1.5040.1.2.4.3.3.5.0").lower().startswith("web-io"),
}
