#!/bin/bash
#VERSION=$(sed -rn 's/^VERSION[[:space:]]*:= *([0-9]+\.[0-9]+\.[0-9a-z]+).*/\1/p' < ~/git/check_mk/defines.make)
CRE_LICENSE_NAME="GNU General Public License v2"
CEE_LICENSE_NAME="Check_MK Enterprise License"

header ()
{
  echo "Copyright (C) 2019 tribe29 GmbH - License: $@"
  echo "This file is part of Checkmk (https://checkmk.com). It is subject to the terms and"
  echo "conditions defined in the file COPYING, which is part of this source code package."
}

headrify ()
{
  if [[ ! -f "$file" || -L "$file" ]]; then
      echo "Skipping $file. It's not a file / It is a symlink."
      return
  fi

  if [[ "${file##*/}" =~ ^[A-Z]+$ ]]; then
      echo "Skipping $file. It's a documentation file."
      return
  fi

  suffix="${file##*.}"
  if ! [[ $suffix == "py" || $suffix == "h" || $suffix == "c" || $suffix == "cc" || \
      $suffix == "js" || $suffix == "scss" || $suffix == "css" || $file == *"Makefile" ]] ;
  then
      echo "Skipping $file. It's not a source code file in Python, C/C++, JS or (S)CSS nor a Makefile."
      return
  fi

  TMP=$(mktemp .headrify.new.XXXXXX)
  headline="$(head -n1 $file)"
  if [ "${headline:0:9}" = "#!/bin/sh" ] ; then
      comment="# "
      bangpath="#!/bin/sh"
  elif [ "${headline:0:16}" = "#!/usr/bin/ksh93" ] ; then
      comment="# "
      bangpath="#!/usr/bin/ksh93"
  elif [ "${headline:0:14}" = "#!/usr/bin/ksh" ] ; then
      comment="# "
      bangpath="#!/usr/bin/ksh"
  elif [ "${headline:0:11}" = "#!/bin/bash" ] ; then
      comment="# "
      bangpath="#!/bin/bash"
  elif [ "${headline:0:15}" = "#!/usr/bin/bash" ] ; then
      comment="# "
      bangpath="#!/usr/bin/bash"
  elif [ "${headline:0:14}" = "#!/usr/bin/php" ] ; then
      comment="# "
      bangpath="#!/usr/bin/php"
  elif [ "${headline:0:22}" = "#!/usr/bin/env python3" ] ; then
      comment="# "
      bangpath="#!/usr/bin/env python3
# -*- coding: utf-8 -*-"
  elif [ "${headline:0:21}" = "#!/usr/bin/env python" ] ; then
      comment="# "
      bangpath="#!/usr/bin/env python2
# -*- coding: utf-8 -*-"
  else
      bangpath=""
      case "${file##*/}" in
          *.openvms) comment='$!# ' ;;
          *.php)    comment="# " ; bangpath="<?php" ;;
          *.scss|*.css)    comment="// " ;  bangpath="@charset \"UTF-8\";" ;;
          *.h|*.c|*.cc|*.h.in|*.js) comment="// " ;;
          *.conf|*.cfg)   comment="# " ;;
          *.spec|Makefile*) comment="# " ;;
          *.py|*)     comment="# "  ; bangpath="#!/usr/bin/env python2
# -*- coding: utf-8 -*-"; ;;
      esac
  fi

  figletline="---------------------------------------------------"
  up2dateline="Copyright (C) 2019 tribe29 GmbH - License"
  endline='.*(Boston, MA 02110-1301 USA.|address provided at www.mathias-kettner.de|which is part of this source code package.)'

  : > $TMP
  if [ -n "$bangpath" ]; then echo "$bangpath" > $TMP ; fi
  if [[ $file == "enterprise/"* || $file == "managed/"* ]]; then
      header $CEE_LICENSE_NAME | sed "s@^@$comment@" | sed 's/ *$//' >> $TMP
  else
      header $CRE_LICENSE_NAME | sed "s@^@$comment@" | sed 's/ *$//' >> $TMP
  fi
  echo >> $TMP
  count=0
  tmpwritten=false
  while read line; do
    if [[ "$line" == *"$up2dateline"* || "$line" == *"$figletline"* ]]; then
      # Delete all lines until and including $endline, then also remove all
      # leading # blank lines as well as a possible multiline comment ending
      # tag '*/' from the beginning of $file and append the result to $TMP
      sed -r '0,/^'"$endline"'$/Id' $file | sed '/./,$!d' | sed '1{/^\*\/$/d}' | sed '/./,$!d' >> $TMP
      tmpwritten=true
      break
    elif [[ "$(echo "$line" | sed -n '/tribe29/ !p' | sed -n '/copyright/I p')" ]]; then
      echo "Skipping $file because it seems to hold a non tribe29 copyright notice already."
      rm -f $TMP
      return
    fi

    if [ $count -gt 4 ]; then
      break
    fi
    let count=count+1
  done <$file

  if [ "$tmpwritten" = false ]; then
    cat $file >> $TMP
  fi
  echo "$file..."
  mv $TMP $file || rm -f $TMP
}

if [ "$#" -gt 0 ] ; then
  #echo "Headrifying to version $VERSION"
  for file in "$@"
  do
    headrify "$file"
  done
else
  echo "Provide at least one file as an argument."
fi
sleep 0.1
wait
