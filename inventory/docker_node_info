#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.


def _try_set(node, nkey, data, dkey):
    if dkey in data:
        node[nkey] = data[dkey]


def inv_docker_node_info(parsed, inventory_tree, status_data_tree):
    if not parsed:
        return

    node = inventory_tree.get_dict("software.applications.docker.")
    _try_set(node, "version", parsed, u"ServerVersion")
    _try_set(node, "registry", parsed, "IndexServerAddress")
    # {"NodeID":"","NodeAddr":"","LocalNodeState":"inactive","ControlAvailable":false,"Error":"","RemoteManagers":null}
    swarm_data = parsed.get("Swarm", {})
    _try_set(node, "swarm_state", swarm_data, "LocalNodeState")
    _try_set(node, "swarm_node_id", swarm_data, "NodeID")

    if swarm_data.get("RemoteManagers"):
        swarm_manager = inventory_tree.get_list("software.applications.docker.swarm_manager:")
        swarm_manager += swarm_data["RemoteManagers"]

    labels = parsed.get(u"Labels")
    if labels:
        node_labels = inventory_tree.get_list("software.applications.docker.node_labels:")
        node_labels += [{"label": label} for label in labels]

    status_node = status_data_tree.get_dict("software.applications.docker.")
    _try_set(status_node, "num_containers_total", parsed, "Containers")
    _try_set(status_node, "num_containers_running", parsed, "ContainersRunning")
    _try_set(status_node, "num_containers_paused", parsed, "ContainersPaused")
    _try_set(status_node, "num_containers_stopped", parsed, "ContainersStopped")
    _try_set(status_node, "num_images", parsed, "Images")


inv_info['docker_node_info'] = {
    'inv_function': inv_docker_node_info,
    'has_status_data': True,
}
