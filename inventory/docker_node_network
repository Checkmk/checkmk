#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.
import cmk.base.plugins.agent_based.utils.docker as docker


def parse_docker_network(info):
    version = docker.get_version(info)

    if version is None:
        networks = parse_legacy_docker_network_inspect(info)
        return DeprecatedDict((n["Id"], n) for n in networks)

    networks = (docker.json_get_obj(line) for line in info[1:])
    return {n["Id"]: n for n in networks if n is not None}


def inv_docker_node_network_networks(info, inventory_tree, status_data_tree):
    parsed = parse_docker_network(info)

    for network_id, network in parsed.items():

        sorted_container_items = sorted(network["Containers"].items())

        containers = [{
            "name": container["Name"],
            "id": docker.get_short_id(container_id),
            "ipv4_address": container["IPv4Address"],
            "ipv6_address": container["IPv6Address"],
            "mac_address": container["MacAddress"],
        } for container_id, container in sorted_container_items]

        network_name = network["Name"]
        path = "software.applications.docker.networks.%s." % network_name
        inventory_network = inventory_tree.get_dict(path)
        status_network = status_data_tree.get_dict(path)

        status_network.update({
            "name": network_name,
            "containers": containers,
        })

        inventory_network.update({
            "name": network_name,
            "network_id": docker.get_short_id(network_id),
            "scope": network["Scope"],
        })

        try:
            inventory_network["host_ifname"] = network["Options"]["com.docker.network.bridge.name"]
        except KeyError:
            pass

        labels = docker.format_labels(network)
        if labels:
            inventory_network["labels"] = labels


inv_info["docker_node_network.networks"] = {
    "includes": ['legacy_docker.include'],
    "inv_function": inv_docker_node_network_networks,
}
