#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# Example output from agent:
# <<<lnx_sysctl:persist(1592223569)>>>
# abi.vsyscall32 = 1
# debug.exception-trace = 1
# debug.kprobes-optimization = 1
# dev.cdrom.autoclose = 1
# dev.cdrom.autoeject = 0
# dev.cdrom.check_media = 0
# dev.cdrom.debug = 0
# dev.cdrom.info = CD-ROM information, Id: cdrom.c 3.20 2003/12/17
# dev.cdrom.info =
# dev.cdrom.info = drive name:
# dev.cdrom.info = drive speed:
# dev.cdrom.info = drive # of slots:
# dev.cdrom.info = Can close tray:
# dev.cdrom.info = Can open tray:
# dev.cdrom.info = Can lock tray:
# dev.cdrom.info = Can change speed:
# dev.cdrom.info = Can select disk:


def _evaluate_patterns(par_name, include_patterns, exclude_patterns):
    return (not any(re.match(pattern, par_name) for pattern in exclude_patterns)) and \
           any(re.match(pattern, par_name) for pattern in include_patterns)


def inv_lnx_sysctl(info, params, inventory_tree):

    include_patterns = params.get("include_patterns")
    if not include_patterns:
        return
    exclude_patterns = params.get("exclude_patterns", [])

    kernel_config = {}
    for line in info:
        par_name = line[0]
        if par_name in kernel_config or _evaluate_patterns(
                par_name,
                include_patterns,
                exclude_patterns,
        ):
            kernel_config.setdefault(par_name, []).append(' '.join(line[2:]))

    inventory_table = []
    for par, values in sorted(kernel_config.items()):

        # if there are non-empty values, we keep only these ones, otherwise we write a single empty line to show that
        # the parameter exists
        values = [val for val in values if val]
        if not values:
            values = ['']

        for value in values:
            inventory_table.append({'parameter': par, 'value': value})

    inventory_tree.get_list("software.kernel_config:").extend(inventory_table)


inv_info['lnx_sysctl'] = {
    "inv_function": inv_lnx_sysctl,
}
