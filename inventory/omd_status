#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

import cmk


def _service_status(status, service_name):
    if not status:
        return "unknown"
    if service_name not in status['existing']:
        return "not existent"
    if service_name in status['stopped']:
        return "stopped"
    return "running"


def _overall_status_to_num(overall):
    if overall == 'running':
        return 1
    elif overall == 'partially':
        return 2
    elif overall == 'stopped':
        return 3
    return 4  # unknown


# We use this function to merge the status data of this inventory plugin with the one
# from "livestatus_status" and we don't know the order in which the plugins are executed
def _append_or_merge(list_node, data, key):
    for entry in list_node:
        if entry[key] == data[key]:
            entry.update(data)
            return
    list_node.append(data)


def inv_omd_status(info, inventory_tree, status_data_tree):
    status_info = info[0]
    status_node = status_data_tree.get_list("software.applications.check_mk.sites:")

    if cmk.is_raw_edition():
        services = [
            "nagios",
            "npcd",
        ]
    else:
        services = [
            "cmc",
            "dcd",
            "liveproxyd",
            "mknotifyd",
        ]

    services += [
        "apache",
        "crontab",
        "mkeventd",
        "rrdcached",
        "stunnel",
        "xinetd",
    ]

    for site, status_per_node in status_info.items():
        best_status = None
        for status in status_per_node.values():
            if (not best_status or _overall_status_to_num(status['overall']) <
                    _overall_status_to_num(best_status['overall'])):
                best_status = status

        line = {
            'site': site,
        }
        # create a column for each service
        for service in services:
            line[service] = _service_status(best_status, service)

        _append_or_merge(status_node, line, 'site')


inv_info['omd_status'] = {
    'inv_function': inv_omd_status,
    'has_status_data': True,
}
