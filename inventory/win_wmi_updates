#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# Example output
#<<<win_wmi_updates:sep(44):cached(1494868004,3600)>>>
#Node,Description,HotFixID,InstalledOn^M
#S050MWSIZ001,Update,KB2849697,5/10/2017^M
#S050MWSIZ001,Update,KB2849697,5/10/2017^M
#S050MWSIZ001,Update,KB2849696,5/10/2017^M
#S050MWSIZ001,Update,KB2849696,5/10/2017^M
#S050MWSIZ001,Update,KB2841134,5/10/2017^M
# Microsoft Office Professional Plus 2010|Microsoft Corporation|14.0.7015.1000

# InstalledOn may have different formats, see
# https://docs.microsoft.com/de-de/windows/desktop/CIMWin32Prov/win32-quickfixengineering
# Examples:
# - 20170523
# - 23-10-2013
# - 5/23/2017
# - 01ce83596afd20a7


def _parse_install_date(install_date_str):
    for format_ in ["%Y%m%d", "%m/%d/%Y", "%d-%m-%Y"]:
        try:
            return time.mktime(time.strptime(install_date_str, format_))
        except ValueError:
            pass
    # However, some systems may return a 64-bit hexidecimal value in the Win32
    # FILETIME format:
    # Contains a 64-bit value representing the number of 100-nanosecond intervals
    # since January 1, 1601 (UTC).
    try:
        return 1.0 * int(install_date_str, 16) / 10**7
    except ValueError:
        pass
    return


def inv_win_wmi_updates(info):
    parsed_packages = []
    for line in info:
        if len(line) != 4 or line == ["Node", "Description", "HotFixID", "InstalledOn"]:
            continue

        _id, description, knowledge_base, install_date_str = line
        parsed_packages.append({
            "name": "Windows Update " + knowledge_base,
            "version": knowledge_base,
            "vendor": "Microsoft " + description,
            "install_date": _parse_install_date(install_date_str),
            "package_type": "wmi",
        })

    paclist = inv_tree_list("software.packages:")
    paclist.extend(sorted(parsed_packages, key=lambda r: r.get('name')))


inv_info['win_wmi_updates'] = {
    "inv_function": inv_win_wmi_updates,
}
