# Default include mappings for Checkmk
[
  { ref: gcc.libc.imp },
  { ref: gcc.symbols.imp },
  { ref: gcc.stl.headers.imp },
  { ref: stl.c.headers.imp },
  { ref: asio.imp },
  { include: ["<bits/align.h>", private, "<memory>", public ] },
  { include: ["<bits/atomic_timed_wait.h>", private, "<atomic>", public ] },
  { include: ["<bits/atomic_wait.h>", private, "<atomic>", public ] },
  { include: ["<bits/chrono.h>", private, "<chrono>", public ] },
  { include: ["<bits/cow_string.h>", private, "<string>", public ] },
  { include: ["<bits/exception.h>", private, "<exception>", public ] },
  { include: ["<bits/getopt_core.h>", private, "<getopt.h>", public ] },
  { include: ["<bits/max_size_type.h>", private, "<iterator>", public ] },
  { include: ["<bits/mofunc_impl.h>", private, "<functional>", public ] },
  { include: ["<bits/move_only_function.h>", private, "<functional>", public ] },
  { include: ["<bits/new_allocator.h>", private, "<memory>", public ] },
  { include: ["<bits/range_cmp.h>", private, "<functional>", public ] },
  { include: ["<bits/ranges_base.h>", private, "<ranges>", public ] },
  { include: ["<bits/ranges_cmp.h>", private, "<functional>", public ] },
  { include: ["<bits/ranges_util.h>", private, "<ranges>", public ] },
  { include: ["<bits/semaphore_base.h>", private, "<semaphore>", public ] },
  { include: ["<bits/std_abs.h>", private, "<cstdlib>", public ] },
  { include: ["<bits/std_abs.h>", private, "<cmath>", public ] },
  { include: ["<bits/std_thread.h>", private, "<thread>", public ] },
  { include: ["<bits/struct_stat.h>", private, "<sys/stat.h>", public ] },
  { include: ["<bits/this_thread_sleep.h>", private, "<thread>", public ] },
  { include: ["<bits/types/struct_iovec.h>", private, "<sys/uio.h>", public ] },
  { include: ["<bits/types/struct_tm.h>", private, "<time.h>", public ] },
  { include: ["<bits/uses_allocator_args.h>", private, "<memory>", public ] },
  { include: ["<bits/utility.h>", private, "<tuple>", public ] },
  { include: ["<bits/utility.h>", private, "<utility>", public ] },
  { include: ["<linux/if_ether.h>", private, "<netinet/if_ether.h>", public ] },
  { include: ["<pcap/bpf.h>", private, "<pcap.h>", public ] },
  { include: ["<pcap/dlt.h>", private, "<pcap.h>", public ] },
  { include: ["<pcap/pcap.h>", private, "<pcap.h>", public ] },
  { include: ['@"gmock/.*"', private, '"gmock/gmock.h"', public ] },
  { include: ["@<gmock/.*>", private, "<gmock/gmock.h>", public ] },
  { include: ['@"gtest/.*"', private, '"gtest/gtest.h"', public ] },
  { include: ["@<gtest/.*>", private, "<gtest/gtest.h>", public ] },
  { symbol: ["std::filesystem", private, "<filesystem>", public ] },
  { symbol: ["std::hash", private, "<functional>", public ] },
  { symbol: ["std::__tuple_element_t", private, "<tuple>", public ] },
]
