#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

from typing import Dict
import os
import subprocess
import sys


def update_po_file(lang):
    cmd = ["make", "update-%s" % lang]
    p = subprocess.Popen(cmd, stdout=open("/dev/null", "w", encoding="utf-8"), encoding="utf-8")
    if p.wait() != 0:
        raise Exception("Command failed: %s" % " ".join(cmd))


def cleanup_po_file(lang):
    cmd = ["make", "cleanup-%s" % lang]
    p = subprocess.Popen(cmd, stdout=open("/dev/null", "w", encoding="utf-8"), encoding="utf-8")
    if p.wait() != 0:
        raise Exception("Command failed: %s" % " ".join(cmd))


def get_untranslated(po_file):
    output = get_localizations_of_type_raw(po_file, "untranslated")
    output += get_localizations_of_type_raw(po_file, "only-fuzzy")

    untranslated = {}
    locations = []

    for line in output.split("\n"):
        if line.startswith("#: "):
            locs = [occ.rsplit(":", 1) for occ in line[3:].split()]
            locations.extend([(code_path[6:], int(code_line)) for code_path, code_line in locs])

        elif line.startswith("msgid "):
            msg_id = line[7:-1]
            untranslated[msg_id] = {
                "locations": locations,
            }
            locations = []

    try:
        del untranslated[""]
    except KeyError:
        pass

    return untranslated


def get_localizations_of_type_raw(po_file, ty):
    p = subprocess.Popen(
        ["msgattrib", "--%s" % ty, "--no-obsolete", "--no-wrap", po_file],
        stdout=subprocess.PIPE,
        stderr=open("/dev/null", "w", encoding="utf-8"),
        encoding="utf-8")
    stdout = p.communicate()[0]
    if p.returncode != 0:
        raise Exception("Command failed!")

    return stdout


def base_path():
    return os.path.dirname(os.path.realpath(__file__))


def repo_path():
    return os.path.dirname(base_path())


def add_last_commits(untranslated):
    for msg_id, infos in untranslated.items():

        for rel_path, line in infos["locations"]:
            path = os.path.realpath(os.path.join(base_path(), rel_path))

            try:
                commit = get_last_commit_of(repo_path(), path, line)
            except Exception:
                print(msg_id, infos)
                raise

            commits = infos.setdefault("commits", set([]))
            commits.add(commit)


def get_last_commit_of(repo_base_path, path, line):
    env = os.environ.copy()
    env["GIT_DIR"] = repo_base_path + "/.git"
    env["GIT_WORK_TREE"] = repo_base_path

    cmd = ["git", "blame", "-p", "-L%d,+1" % line, path]

    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, env=env, encoding="utf-8")
    stdout = p.communicate()[0]
    if p.returncode != 0:
        raise Exception("Command failed: %s" % " ".join(cmd))

    commit_id = stdout.split("\n",)[0].split(" ", 1)[0]

    msg, name, mail = None, None, None
    for ln in stdout.split("\n"):
        if ln.startswith("summary "):
            msg = ln.split(" ", 1)[1].strip()
        elif ln.startswith("author "):
            name = ln.split(" ", 1)[1].strip()
        elif ln.startswith("author-mail "):
            mail = ln.split(" ", 1)[1].strip("<>\n")

    return commit_id, name, mail, msg


def blame_output(untranslated):
    untranslated_of_dev: Dict[str, Dict] = {}
    for msg_id, infos in untranslated.items():
        for commit in infos["commits"]:
            name = commit[1]
            todos = untranslated_of_dev.setdefault(name, {})
            todos[msg_id] = infos

    print("Found %d untranslated strings in total.\n" % len(untranslated))
    print("")
    print("Scoreboard:")
    print("")

    for rank, (dev_name, todo) in enumerate(
            sorted(untranslated_of_dev.items(), key=lambda e: len(e[1]), reverse=True)):
        print("%2d %-25s %4d" % (rank + 1, dev_name, len(todo)))

    print("")
    print("-" * 80)

    for dev_name, todo in sorted(untranslated_of_dev.items()):
        print("")
        print("************* %s" % dev_name)
        print("")

        entries = []
        for msg_id, infos in todo.items():
            for rel_path, line in sorted(infos["locations"]):
                # Convert to paths relative to git base
                path = os.path.realpath(os.path.join(base_path(), rel_path))
                path = path[len(repo_path()) + 1:]

                entries.append((path, line, msg_id))

        for entry in sorted(entries):
            print("%s:%d: [E0001(untranslated), ] %s" % entry)


def main():
    try:
        lang = sys.argv[1]
    except IndexError:
        raise Exception("Call it like this: ./blame [LANG]")

    po_file = "%s/LC_MESSAGES/multisite.po" % lang
    if not os.path.exists(po_file):
        raise Exception("Language file does not exist: %s" % po_file)

    update_po_file(lang)
    untranslated = get_untranslated(po_file)
    cleanup_po_file(lang)

    add_last_commits(untranslated)

    if len(untranslated) == 0:
        print("Did not find any untranslated text. Nice!")
        sys.exit(0)
    else:
        blame_output(untranslated)
        sys.exit(1)


main()
