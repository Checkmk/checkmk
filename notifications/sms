#!/usr/bin/env python
# SMS (using smstools)

# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Notification via sms using the sms tools
# Note: You have to add the side user to the sendsms group
# and restart the site

import os
import sys
import shutil
import tempfile

send_path = None
for binary in ['sendsms', 'smssend']:
    if os.system('which %s >/dev/null 2>/dev/null' % binary) == 0:  # nosec
        send_path = binary

smsd_user = 'smsd'
spool_dir = '/var/spool/sms/outgoing'
if not os.path.exists(spool_dir):
    spool_dir = None

if not send_path and not spool_dir:
    sys.stderr.write(
        'Error: SMS Tools binaries (sendsms or smssend) not found and spool dir does not exists.\n')
    sys.exit(2)  # Fatal error, no retry

recipient = os.environ['NOTIFY_CONTACTPAGER'].replace(" ", "")
if not recipient:
    contactname = os.environ['NOTIFY_CONTACTNAME']
    sys.stderr.write('Error: Pager Number of %s not set\n' % contactname)
    sys.exit(2)  # Fatal error, no retry

max_len = 160
message = os.environ['NOTIFY_HOSTNAME'] + " "

notification_type = os.environ["NOTIFY_NOTIFICATIONTYPE"]

# Prepare Default information and Type PROBLEM, RECOVERY
if os.environ['NOTIFY_WHAT'] == 'SERVICE':
    if notification_type in ["PROBLEM", "RECOVERY"]:
        message += os.environ['NOTIFY_SERVICESTATE'][:2] + " "
        avail_len = max_len - len(message)
        message += os.environ['NOTIFY_SERVICEDESC'][:avail_len] + " "
        avail_len = max_len - len(message)
        message += os.environ['NOTIFY_SERVICEOUTPUT'][:avail_len]
    else:
        message += os.environ['NOTIFY_SERVICEDESC']

else:
    if notification_type in ["PROBLEM", "RECOVERY"]:
        message += "is " + os.environ['NOTIFY_HOSTSTATE']

# Ouput the other State
if notification_type.startswith("FLAP"):
    if "START" in notification_type:
        message += " Started Flapping"
    else:
        message += " Stopped Flapping"

elif notification_type.startswith("DOWNTIME"):
    what = notification_type[8:].title()
    message += " Downtime " + what
    message += " " + os.environ['NOTIFY_NOTIFICATIONCOMMENT']

elif notification_type == "ACKNOWLEDGEMENT":
    message += " Acknowledged"
    message += " " + os.environ['NOTIFY_NOTIFICATIONCOMMENT']

elif notification_type == "CUSTOM":
    message += " Custom Notification"
    message += " " + os.environ['NOTIFY_NOTIFICATIONCOMMENT']


def quote_message(msg, max_length=None):
    if max_length:
        return "'" + msg.replace("'", "'\"'\"'")[:max_length - 2] + "'"
    return "'" + msg.replace("'", "'\"'\"'") + "'"


if send_path:
    if os.system(  # nosec
            "%s %s %s" % (send_path, recipient, quote_message(message, 160))) >> 8 != 0:
        sys.exit(1)
elif spool_dir:
    # On some distros, like debian, smstools does not ship with the sendsms/smssend helper
    # script. On this distro, simply drop the SMS in the outgoing spool directory.
    fd, path = tempfile.mkstemp(prefix='cmk_sms_')
    os.write(fd, 'To: %s\n\n%s' % (recipient, quote_message(message)))
    os.close(fd)
    os.chmod(path, 0o660)
    filename = path.split('/')[-1]
    shutil.move(path, spool_dir + '/' + filename)
