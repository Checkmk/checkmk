include ../../Makefile.omd

# The tar file for snapshots can be generated by cloning https://github.com/google/googletest and doing:
# ( VERSION=0048647619; git archive --prefix=googletest-$VERSION/ -o ~/git/check_mk/omd/packages/googletest/googletest-$VERSION.tar.gz $VERSION )

NAME      := googletest
VERSION   := release-1.10.0
DIR       := $(NAME)-$(VERSION)
BUILD_DIR := build

.PHONY: build install skel clean

build: $(DIR)/CMakeLists.txt
# NOTE: We have to use a recent C++ compiler, otherwise we will get linker
# errors later when we use the libraries we compile here. For some (sad)
# background, see e.g.:
#
#    https://gcc.gnu.org/onlinedocs/libstdc++/manual/using_dual_abi.html
#    https://developers.redhat.com/blog/2015/02/05/gcc5-and-the-c11-abi/
#
#basically what part of AC_PROC_CXX does
	@CXX="" ; \
	for PROG in g++-9 clang++-8 g++-8 clang++-7 g++-7 clang++-6.0 clang++-5.0 g++ clang++; do \
	    echo -n "checking for $$PROG... "; SAVED_IFS=$$IFS; IFS=: ; \
	    for DIR in $$PATH; do \
	        IFS=$$SAVED_IFS ; \
	        test -z "$$DIR" && DIR=. ; \
	        ABS_PROG="$$DIR/$$PROG" ; \
	        test -x "$$ABS_PROG" && { CXX="$$ABS_PROG"; echo "$$CXX"; break 2; } ; \
	    done ; \
	    echo "no"; IFS=$$SAVED_IFS ; \
	done ; \
	test -z "$$CXX" && { echo "error: no C++ compiler found" >&2 ; exit 1; } ; \
	cmake -D CMAKE_CXX_COMPILER="$$CXX" -D CMAKE_INSTALL_PREFIX="$(PACKAGE_GOOGLETEST_DESTDIR)" -S $(DIR) -B $(BUILD_DIR)
# We do not ship the headers and libraries, we just need them at a known
# location for testing.
	cmake --build $(BUILD_DIR) --target install -j 4

$(DIR)/CMakeLists.txt: $(DIR).tar.gz
	$(RM) -r $(DIR)
	tar xzf $<
	touch $@

install:

skel:

clean:
	rm -rf $(DIR) $(BUILD_DIR) $(PACKAGE_GOOGLETEST_DESTDIR)
