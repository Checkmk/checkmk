--- a/plugins/check_snmp.c	2021-04-10 14:13:41.000000000 +0200
+++ b/plugins/check_snmp.c	2022-04-04 15:54:22.705840165 +0200
@@ -299,9 +299,11 @@
 		snmpcmd = strdup (PATH_TO_SNMPGET);
 	}

+	char *absolute_snmpcmd_path= get_absolute_snmp_cmd_path(snmpcmd);
+
 	/* 10 arguments to pass before context and authpriv options + 1 for host and numoids. Add one for terminating NULL */
 	command_line = calloc (10 + numcontext + numauthpriv + 1 + numoids + 1, sizeof (char *));
-	command_line[0] = snmpcmd;
+	command_line[0] = absolute_snmpcmd_path;
 	command_line[1] = strdup ("-Le");
 	command_line[2] = strdup ("-t");
 	xasprintf (&command_line[3], "%d", timeout_interval);
@@ -324,7 +326,7 @@

 	/* This is just for display purposes, so it can remain a string */
 	xasprintf(&cl_hidden_auth, "%s -Le -t %d -r %d -m %s -v %s %s %s %s:%s",
-		snmpcmd, timeout_interval, retries, strlen(miblist) ? miblist : "''", proto, "[context]", "[authpriv]",
+		absolute_snmpcmd_path, timeout_interval, retries, strlen(miblist) ? miblist : "''", proto, "[context]", "[authpriv]",
 		server_address, port);

 	for (i = 0; i < numoids; i++) {
--- a/plugins/check_hpjd.c	2022-10-19 12:50:27.000000000 +0000
+++ b/plugins/check_hpjd.c	2023-01-13 12:09:34.120943312 +0000
@@ -37,6 +37,7 @@
 #include "popen.h"
 #include "utils.h"
 #include "netutils.h"
+#include "utils_cmd.h"

 #define DEFAULT_COMMUNITY "public"
 #define DEFAULT_PORT "161"
@@ -121,12 +122,9 @@
 		 HPJD_GD_DOOR_OPEN, HPJD_GD_PAPER_OUTPUT, HPJD_GD_STATUS_DISPLAY);

 	/* get the command to run */
-	sprintf (command_line, "%s -OQa -m : -v 1 -c %s %s:%u %s",
-			PATH_TO_SNMPGET,
-			community,
-			address,
-			port,
-			query_string);
+	char * absolute_cmd_path = get_absolute_snmp_cmd_path(PATH_TO_SNMPGET);
+	sprintf (command_line, "%s -OQa -m : -v 1 -c %s %s:%hd %s", absolute_cmd_path, community,
+ 									address, port, query_string);

 	/* run the command */
 	child_process = spopen (command_line);
--- a/lib/utils_cmd.h	2021-04-10 14:13:41.000000000 +0200
+++ b/lib/utils_cmd.h	2022-04-04 15:45:58.801463952 +0200
@@ -23,6 +23,7 @@
 int cmd_run (const char *, output *, output *, int);
 int cmd_run_array (char *const *, output *, output *, int);
 int cmd_file_read (char *, output *, int);
+char * get_absolute_snmp_cmd_path(char*);

 /* only multi-threaded plugins need to bother with this */
 void cmd_init (void);
--- a/lib/utils_cmd.c	2021-04-10 14:13:41.000000000 +0200
+++ b/lib/utils_cmd.c	2022-04-04 15:45:58.801463952 +0200
@@ -383,6 +383,22 @@
        return 0;
 }

+char * get_absolute_snmp_cmd_path(char* relativ_snmp_cmd)
+{
+        // We need to dynamically get the OMD_ROOT env variable as we do not know it during compile time:
+        // We're caching the compiled monitoring-plugins and reusing it for multiple versions of checkmk
+        char *omd_root = getenv("OMD_ROOT");
+        if (omd_root == NULL) {
+            die(STATE_UNKNOWN, _("OMD_ROOT not set"));
+        }
+
+        char * absolute_snmpcmd_path = malloc(strlen(omd_root) + strlen(relativ_snmp_cmd) + 1);
+        strcat(absolute_snmpcmd_path, omd_root);
+        strcat(absolute_snmpcmd_path, relativ_snmp_cmd);
+
+        return absolute_snmpcmd_path;
+}
+
 void
 timeout_alarm_handler (int signo)
 {
