diff -Nur net-snmp-0b32548.orig/python/netsnmp/client_intf.c net-snmp-0b32548/python/netsnmp/client_intf.c
--- net-snmp-0b32548.orig/python/netsnmp/client_intf.c	2020-02-20 22:38:37.269792334 +0100
+++ net-snmp-0b32548/python/netsnmp/client_intf.c	2020-02-20 22:44:03.618662582 +0100
@@ -1,11 +1,5 @@
 #include <Python.h>
 
-#if PY_VERSION_HEX < 0x02050000
-typedef int Py_ssize_t;
-#define PY_SSIZE_T_MAX INT_MAX
-#define PY_SSIZE_T_MIN INT_MIN
-#endif
-
 #include <net-snmp/net-snmp-config.h>
 #include <net-snmp/net-snmp-includes.h>
 #include <sys/types.h>
@@ -996,8 +990,40 @@
   if (obj && attr_name && PyObject_HasAttrString(obj, attr_name)) {
     PyObject *attr = PyObject_GetAttrString(obj, attr_name);
     if (attr) {
+      *val = PyUnicode_AsUTF8AndSize(attr, len);
+      Py_DECREF(attr);
+      return 0;
+    }
+  }
+
+  return -1;
+}
+
+static int
+py_netsnmp_attr_set_bytes(PyObject *obj, char *attr_name,
+         char *val, size_t len)
+{
+  int ret = -1;
+  if (obj && attr_name) {
+    PyObject* val_obj =  (val ?
+        PyBytes_FromStringAndSize(val, len) :
+        Py_BuildValue(""));
+    ret = PyObject_SetAttrString(obj, attr_name, val_obj);
+    Py_DECREF(val_obj);
+  }
+  return ret;
+}
+
+static int
+py_netsnmp_attr_bytes(PyObject *obj, char * attr_name, char **val,
+    Py_ssize_t *len)
+{
+  *val = NULL;
+  if (obj && attr_name && PyObject_HasAttrString(obj, attr_name)) {
+    PyObject *attr = PyObject_GetAttrString(obj, attr_name);
+    if (attr) {
       int retval;
-      retval = PyString_AsStringAndSize(attr, val, len);
+      retval = PyBytes_AsStringAndSize(attr, val, len);
       Py_DECREF(attr);
       return retval;
     }
@@ -1014,7 +1040,7 @@
   if (obj && attr_name  && PyObject_HasAttrString(obj, attr_name)) {
     PyObject *attr = PyObject_GetAttrString(obj, attr_name);
     if (attr) {
-      val = PyInt_AsLong(attr);
+      val = PyLong_AsLong(attr);
       Py_DECREF(attr);
     }
   }
@@ -1099,13 +1125,13 @@
 
     py_netsnmp_attr_set_string(session, "ErrorStr", err_str, STRLEN(err_str));
 
-    tmp_for_conversion = PyInt_FromLong(err_num);
+    tmp_for_conversion = PyLong_FromLong(err_num);
     if (!tmp_for_conversion)
         return; /* nothing better to do? */
     PyObject_SetAttrString(session, "ErrorNum", tmp_for_conversion);
     Py_DECREF(tmp_for_conversion);
 
-    tmp_for_conversion = PyInt_FromLong(err_ind);
+    tmp_for_conversion = PyLong_FromLong(err_ind);
     if (!tmp_for_conversion)
         return; /* nothing better to do? */
     PyObject_SetAttrString(session, "ErrorInd", tmp_for_conversion);
@@ -2155,7 +2181,7 @@
                                         vars,tp,type,sprintval_flag);
                   str_buf[len] = '\0';
 
-                  py_netsnmp_attr_set_string(varbind, "val", (char *) str_buf,
+                  py_netsnmp_attr_set_bytes(varbind, "val", (char *) str_buf,
                                              len);
             
                   /* push the varbind onto the return varbinds */
@@ -2546,7 +2572,7 @@
 	  }
 	}
 
-	if (py_netsnmp_attr_string(varbind, "val", &val, &tmplen) < 0) {
+	if (py_netsnmp_attr_bytes(varbind, "val", &val, &tmplen) < 0) {
 	  snmp_free_pdu(pdu);
 	  goto done;
 	}
@@ -2626,10 +2652,23 @@
   {NULL, NULL, 0, NULL}        /* Sentinel */
 };
 
+static struct PyModuleDef ModuleDefinition = {
+  PyModuleDef_HEAD_INIT,
+  "client_intf",
+  NULL,
+  -1,
+  ClientMethods,
+  NULL,
+  NULL,
+  NULL,
+  NULL
+};
+
 PyMODINIT_FUNC
-initclient_intf(void)
+PyInit_client_intf(void)
 {
-    (void) Py_InitModule("client_intf", ClientMethods);
+    PyObject *module = PyModule_Create(&ModuleDefinition);
+    return module;
 }
 
 
diff -Nur net-snmp-0b32548.orig/python/netsnmp/client.py net-snmp-0b32548/python/netsnmp/client.py
--- net-snmp-0b32548.orig/python/netsnmp/client.py	2020-02-20 22:38:37.277792045 +0100
+++ net-snmp-0b32548/python/netsnmp/client.py	2020-02-20 22:45:38.955546365 +0100
@@ -35,25 +35,25 @@
         'TheirHostname':'',
         'TrustCert':''
         }
-    keys = kargs.keys()
+    keys = list(kargs.keys())
     for key in keys:
-        if sessArgs.has_key(key):
+        if key in sessArgs:
             sessArgs[key] = kargs[key]
         else:
-            print >>stderr, "ERROR: unknown key", key
+            print("ERROR: unknown key", key, file=stderr)
     return sessArgs
 
 def STR(obj):
     if obj != None:
         obj = str(obj)
     return obj
-    
+
 
 class Varbind(object):
     def __init__(self, tag=None, iid=None, val=None, type=None):
         self.tag = STR(tag)
         self.iid = STR(iid)
-        self.val = STR(val)
+        self.val = val
         self.type = STR(type)
         # parse iid out of tag if needed
         if iid == None and tag != None:
@@ -63,7 +63,10 @@
                 (self.tag, self.iid) = match.group(1,2)
 
     def __setattr__(self, name, val):
-        self.__dict__[name] = STR(val)
+        if name == 'val':
+            self.__dict__[name] = val
+        else:
+            self.__dict__[name] = STR(val)
 
     def print_str(self):
         return self.tag, self.iid, self.val, self.type
@@ -81,7 +84,7 @@
 
     def __len__(self):
         return len(self.varbinds)
-    
+
     def __getitem__(self, index):
         return self.varbinds[index]
 
@@ -109,7 +112,7 @@
                 self.varbinds.append(var)
             else:
                 raise TypeError
-       
+
 
 
 class Session(object):
@@ -125,13 +128,13 @@
         self.ErrorNum = 0
         self.ErrorInd = 0
         self.Version = None
-    
+
         sess_args = _parse_session_args(args)
 
-        for k,v in sess_args.items():
+        for k,v in list(sess_args.items()):
             self.__dict__[k] = v
 
-            
+
         # check for transports that may be tunneled
         transportCheck = re.compile('^(tls|dtls|ssh)');
         match = transportCheck.match(sess_args['DestHost'])
@@ -178,7 +181,7 @@
                 sess_args['LocalPort'],
                 sess_args['Retries'],
                 sess_args['Timeout'])
-        
+
     def get(self, varlist):
         res = client_intf.get(self, varlist)
         return res
@@ -186,7 +189,7 @@
     def set(self, varlist):
         res = client_intf.set(self, varlist)
         return res
-    
+
     def getnext(self, varlist):
         res = client_intf.getnext(self, varlist)
         return res
@@ -214,7 +217,7 @@
 
 
 import netsnmp
-        
+
 def snmpget(*args, **kargs):
     sess = Session(**kargs)
     var_list = VarList()
@@ -272,4 +275,4 @@
                 var_list.append(Varbind(arg))
     res = sess.walk(var_list)
     return res
-    
+
diff -Nur net-snmp-0b32548.orig/python/netsnmp/__init__.py net-snmp-0b32548/python/netsnmp/__init__.py
--- net-snmp-0b32548.orig/python/netsnmp/__init__.py	2016-11-19 19:00:50.000000000 +0100
+++ net-snmp-0b32548/python/netsnmp/__init__.py	2020-02-20 22:45:45.751325950 +0100
@@ -1 +1 @@
-from client import *
+from .client import *
diff -Nur net-snmp-0b32548.orig/python/setup.py net-snmp-0b32548/python/setup.py
--- net-snmp-0b32548.orig/python/setup.py	2020-02-20 22:38:37.249793056 +0100
+++ net-snmp-0b32548/python/setup.py	2020-02-20 22:46:24.838062238 +0100
@@ -12,9 +12,9 @@
 
 args = sys.argv[:]
 for arg in args:
-    if string.find(arg,'--basedir=') == 0:
-        basedir = string.split(arg,'=')[1]
-	sys.argv.remove(arg)
+    if arg.find('--basedir=') == 0:
+        basedir = arg.split('=')[1]
+        sys.argv.remove(arg) #tabs
         intree=1
 
 if intree:
diff -Nur net-snmp-0b32548.orig/python/netsnmp/client.py net-snmp-0b32548/python/netsnmp/client.py
--- net-snmp-0b32548.orig/python/netsnmp/client.py	2020-02-20 22:50:21.246541663 +0100
+++ net-snmp-0b32548/python/netsnmp/client.py	2020-02-20 22:50:40.485937270 +0100
@@ -1,4 +1,4 @@
-import client_intf
+from . import client_intf
 import string
 import re
 import types
diff -Nur net-snmp-0b32548.orig/python/netsnmp/client_intf.c net-snmp-0b32548/python/netsnmp/client_intf.c
--- net-snmp-0b32548.orig/python/netsnmp/client_intf.c	2020-02-20 22:51:30.148381490 +0100
+++ net-snmp-0b32548/python/netsnmp/client_intf.c	2020-02-20 22:53:54.319895903 +0100
@@ -2438,7 +2438,7 @@
 				  vars, tp, type, sprintval_flag);
 	    str_buf[len] = '\0';
 
-	    py_netsnmp_attr_set_string(varbind, "val", (char *) str_buf, len);
+	    py_netsnmp_attr_set_bytes(varbind, "val", (char *) str_buf, len);
 
 	    /* push varbind onto varbinds */
 	    PyList_Append(varbinds, varbind);
diff -Nur net-snmp-0b32548.orig/python/netsnmp/client_intf.c net-snmp-0b32548/python/netsnmp/client_intf.c
--- net-snmp-0b32548.orig/python/netsnmp/client_intf.c	2020-02-20 22:51:30.148381490 +0100
+++ net-snmp-0b32548/python/netsnmp/client_intf.c	2020-02-20 23:02:13.232868561 +0100
@@ -1646,7 +1646,7 @@
 	len = __snprint_value((char *) str_buf, sizeof(str_buf) - 1,
                               vars, tp, type, sprintval_flag);
 	str_buf[len] = '\0';
-	py_netsnmp_attr_set_string(varbind, "val", (char *) str_buf, len);
+	py_netsnmp_attr_set_bytes(varbind, "val", (char *) str_buf, len);
 
 	/* save in return tuple as well */
 	if ((type == SNMP_ENDOFMIBVIEW) ||
--- net-snmp-0b32548.orig/python/netsnmp/client_intf.c	2020-02-20 22:51:30.148381490 +0100
+++ net-snmp-0b32548/python/netsnmp/client_intf.c	2020-02-20 23:22:55.924185471 +0100
@@ -1671,6 +1671,14 @@
 		       NETSNMP_DS_LIB_OID_OUTPUT_FORMAT,
 		       old_format);
 
+    if (PyErr_Occurred()) {
+      /* propagate error */
+      if (verbose)
+        printf("error: get: unknown python error");
+      snmp_free_pdu(pdu);
+      goto done;
+    }
+
     if (response) snmp_free_pdu(response);
   }
 
diff -Nur net-snmp-0b32548.orig/python/netsnmp/client_intf.c net-snmp-0b32548/python/netsnmp/client_intf.c
--- net-snmp-0b32548.orig/python/netsnmp/client_intf.c	2020-02-20 23:51:34.300885619 +0100
+++ net-snmp-0b32548/python/netsnmp/client_intf.c	2020-02-20 23:52:56.930394038 +0100
@@ -1657,7 +1657,7 @@
 			Py_BuildValue(""));
 	} else {
 		PyTuple_SetItem(val_tuple, varlist_ind,
-			Py_BuildValue("s#", str_buf, len));
+			Py_BuildValue("y#", str_buf, len));
 	}
 	Py_DECREF(varbind);
       } else {
@@ -1874,7 +1874,7 @@
                               vars, tp, type, sprintval_flag);
 	str_buf[len] = '\0';
 
-	py_netsnmp_attr_set_string(varbind, "val", (char *) str_buf, len);
+	py_netsnmp_attr_set_bytes(varbind, "val", (char *) str_buf, len);
 
 	/* save in return tuple as well */
 	if ((type == SNMP_ENDOFMIBVIEW) ||
@@ -1885,7 +1885,7 @@
 			Py_BuildValue(""));
 	} else {
 		PyTuple_SetItem(val_tuple, varlist_ind,
-			Py_BuildValue("s#", str_buf, len));
+			Py_BuildValue("y#", str_buf, len));
 	}
 	Py_DECREF(varbind);
       } else {
@@ -2199,7 +2199,7 @@
                   /* save in return tuple as well - steals ref */
                   _PyTuple_Resize(&val_tuple, result_count+1);
                   PyTuple_SetItem(val_tuple, result_count++, 
-                                  Py_BuildValue("s#", str_buf, len));
+                                  Py_BuildValue("y#", str_buf, len));
               } else {
                   /* Return None for this variable. */
                   _PyTuple_Resize(&val_tuple, result_count+1);
@@ -2454,7 +2454,7 @@
 	    /* save in return tuple as well - steals ref */
 	    _PyTuple_Resize(&val_tuple, varbind_ind+1);
 	    PyTuple_SetItem(val_tuple, varbind_ind, 
-			       Py_BuildValue("s#", str_buf, len));
+			       Py_BuildValue("y#", str_buf, len));
 
 	    Py_DECREF(varbind);
 
