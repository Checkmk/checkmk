#!/bin/bash
# Copyright (C) 2024 Checkmk GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

PIDFILE="${OMD_ROOT}/tmp/run/rabbitmq.pid"
RABBITMQ_NODENAME="rabbit-${OMD_SITE}@localhost"
RABBITMQ_LOG_BASE="${OMD_ROOT}/var/log/rabbitmq"
RABBITMQ_MNESIA_BASE="${OMD_ROOT}/var/rabbitmq/mnesia"
RABBITMQ_CONFIG_FILES="${OMD_ROOT}/etc/rabbitmq/conf.d"
RABBITMQ_ADVANCED_CONFIG_FILE="${OMD_ROOT}/etc/rabbitmq/advanced_conf.d/00-advanced.conf"
RABBITMQ_ENABLED_PLUGINS_FILE="${OMD_ROOT}/etc/rabbitmq/enabled_plugins"
RABBITMQ_DIST_PORT="${CONFIG_RABBITMQ_DIST_PORT:?}"
RABBITMQ_DIAGNOSTICS="${OMD_ROOT}/lib/rabbitmq/sbin/rabbitmq-diagnostics"
RABBITMQCTL="${OMD_ROOT}/lib/rabbitmq/sbin/rabbitmqctl"
BROKER_CERTIFICATES=$OMD_ROOT/bin/message-broker-certs
EXECUTE="${OMD_ROOT}/lib/rabbitmq/sbin/rabbitmq-server"
ERL_EPMD_ADDRESS="::1"
INITLOG="${RABBITMQ_LOG_BASE}/init.log"

getpid() {
    cat "${PIDFILE}" 2>/dev/null
}

process_is_running() {
    # when the process is killed, and the pidfile already removed
    # the process can still run for a short time.
    kill -0 "$1" 2>/dev/null
}

await_process_stop() {
    max=$(("${1}" * 10))
    for N in $(seq "${max}"); do
        process_is_running "$2" || return 0
        [ $((N % 10)) -eq 0 ] && printf "."
        sleep 0.1
    done
    return 1
}

rabbitmq_accepting_connections() {
    "${RABBITMQ_DIAGNOSTICS}" check_port_connectivity --node "${RABBITMQ_NODENAME}"
}

await_process_start() {
    max=$(("${1}" * 10))
    # If the PIDFILE gets filled, rabbitmq started
    for N in $(seq "${max}"); do
        [ -s "${PIDFILE}" ] && rabbitmq_accepting_connections && {
            date +"%F %T.%N RabbitMQ considered ready"
            return 0
        }
        [ -e "${PIDFILE}" ] || {
            date +"%F %T.%N RabbitMQ failed to start (pidfile vanished)"
            return 1
        }
        [ $((N % 10)) -eq 0 ] && printf "."
        sleep 0.1
    done

    date +"%F %T.%N RabbitMQ failed to start (giving up after timeout)"
    return 1
}

force_kill() {
    printf "sending SIGKILL."
    kill -9 "${1}"
}

exit_successfully() {
    printf "%s\n" "${1}"
    exit 0
}

exit_failure() {
    printf "%s\n" "${1}"
    exit 1
}

ensure_broker_certs() {
    printf "Ensuring broker certificates presence...\n"
    if [ ! -f "${OMD_ROOT}/etc/rabbitmq/ssl/cert.pem" ]; then
        printf "Creating broker certificates...\n"
        "${BROKER_CERTIFICATES}" "${OMD_ROOT}" "${OMD_SITE}"
    fi
}

stop_process() {
    "${RABBITMQCTL}" -n "${RABBITMQ_NODENAME}" stop_app &>/dev/null
    "${RABBITMQCTL}" -n "${RABBITMQ_NODENAME}" reset &>/dev/null

    printf "killing %s..." "${1}"
    kill "${1}" 2>/dev/null
}

case "$1" in

    start-blocking)
        ensure_broker_certs

        RABBITMQ_NODENAME="${RABBITMQ_NODENAME}" \
            RABBITMQ_ENABLED_PLUGINS_FILE="${RABBITMQ_ENABLED_PLUGINS_FILE}" \
            RABBITMQ_CONFIG_FILES="${RABBITMQ_CONFIG_FILES}" \
            RABBITMQ_ADVANCED_CONFIG_FILE="${RABBITMQ_ADVANCED_CONFIG_FILE}" \
            RABBITMQ_LOG_BASE="${RABBITMQ_LOG_BASE}" \
            RABBITMQ_PID_FILE="${PIDFILE}" \
            RABBITMQ_MNESIA_BASE="${RABBITMQ_MNESIA_BASE}" \
            RABBITMQ_DIST_PORT="${RABBITMQ_DIST_PORT}" \
            ERL_EPMD_ADDRESS="${ERL_EPMD_ADDRESS}" \
            flock "${PIDFILE}" --command "${EXECUTE}"
        rm --force "${PIDFILE}" # should be removed by rabbitmq itself
        ;;

    start)
        printf "Starting rabbitmq..."
        if ! flock --nonblock "${PIDFILE}" --command :; then
            exit_successfully 'already running'
        fi

        touch "${PIDFILE}"
        mkdir -p "${RABBITMQ_LOG_BASE}"

        nohup "${0}" "start-blocking" &>"${INITLOG}" &

        # try for one minute to interpret the outcome
        await_process_start 60 &>>"${INITLOG}" && exit_successfully "OK"

        # Give up
        exit_failure "failed"
        ;;

    stop)
        printf "Stopping rabbitmq..."
        PID="$(getpid "${PIDFILE}")"

        if [ -z "${PID}" ]; then
            exit_successfully "not running"
        fi

        if ! kill -0 "${PID}" >/dev/null 2>&1; then
            rm "${PIDFILE}"
            exit_successfully "not running (PID file orphaned)"
        fi

        stop_process "${PID}"

        # signal could be sent. Patiently wait for max 1 minute.
        if await_process_stop 60 "${PID}"; then
            exit_successfully "OK"
        fi

        # We insist...
        force_kill "${PID}"
        if await_process_stop 10 "${PID}"; then
            exit_successfully "OK"
        fi
        # Give up
        exit_failure "failed"
        ;;

    reload)
        $0 stop
        $0 start
        ;;

    status)
        printf "Checking status of rabbitmq..."
        PID="$(getpid "${PIDFILE}")"

        if [ -z "${PID}" ]; then
            exit_failure "not running"
        fi

        if ! kill -0 "${PID}" 2>/dev/null; then
            exit_failure "not running (PID file orphaned)"
        fi
        exit_successfully "running"
        ;;
    *)
        exit_failure "Usage: rabbitmq {start|stop|restart|reload|status}"
        ;;

esac
