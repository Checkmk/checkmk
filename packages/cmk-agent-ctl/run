#!/bin/bash
# Copyright (C) 2022 Checkmk GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

set -e

failure() {
    test ${#@} -eq 0 || echo "$(basename "$0"):" "$@" >&2
    exit 1
}

usage() {
    echo "usage: $(basename "$0") [OPTION]..."
    echo "Run the CI pipeline or parts of it."
    echo
    echo "  -e, --setup-environment  setup environment"
    echo "  -c, --clean              remove artifacts first"
    echo "  -F, --check-format       check for correct formatting"
    echo "  -b, --build              build agent controller"
    echo "  -U, --build-unit-tests   build unit tests"
    echo "  -u, --unit-tests         run unit tests"
    echo "  -C, --clippy             run clippy linter"
    echo "  -a, --all                shortcut for -F -b -U -u -C"
    echo "  -A, --build-all          shortcut for -b -U"
    echo "  -f, --format             format sources"
    echo "  -D, --documentation      generate documentation"
    echo "  -h, --help               show this help"
}

parse_options() {
    # Yes, all those option variables are global.
    RUN_SETUP_ENVIRONMENT=no
    RUN_CLEAN=no
    RUN_CHECK_FORMAT=no
    RUN_BUILD=no
    RUN_BUILD_UNIT_TESTS=no
    RUN_UNIT_TESTS=no
    RUN_CLIPPY=no
    RUN_FORMAT=no
    RUN_DOCUMENTATION=no

    if ! OPTIONS=$(getopt --options 'ecFbUuCaAfDh' --long 'setup-environment,clean,check-format,build,build-unit-tests,unit-tests,clippy,all,build-all,format,documentation,help' --name "$(basename "$0")" -- "$@"); then
        usage >&2
        failure
    fi
    eval set -- "$OPTIONS"
    unset OPTIONS

    while true; do
        case "$1" in
            '-e' | '--setup-environment')
                RUN_SETUP_ENVIRONMENT=yes
                shift
                continue
                ;;
            '-c' | '--clean')
                RUN_CLEAN=yes
                shift
                continue
                ;;
            '-F' | '--check-format')
                RUN_CHECK_FORMAT=yes
                shift
                continue
                ;;
            '-b' | '--build')
                RUN_BUILD=yes
                shift
                continue
                ;;
            '-U' | '--build-unit-tests')
                RUN_BUILD_UNIT_TESTS=yes
                shift
                continue
                ;;
            '-u' | '--unit-tests')
                RUN_UNIT_TESTS=yes
                shift
                continue
                ;;
            '-C' | '--clippy')
                RUN_CLIPPY=yes
                shift
                continue
                ;;
            '-a' | '--all')
                RUN_CHECK_FORMAT=yes
                RUN_BUILD=yes
                RUN_UNIT_TESTS=yes
                RUN_CLIPPY=yes
                shift
                continue
                ;;
            '-A' | '--build-all')
                RUN_BUILD=yes
                RUN_BUILD_UNIT_TESTS=yes
                shift
                continue
                ;;
            '-f' | '--format')
                RUN_FORMAT=yes
                shift
                continue
                ;;
            '-D' | '--documentation')
                RUN_DOCUMENTATION=yes
                shift
                continue
                ;;
            '-h' | '--help')
                usage
                exit 0
                ;;
            '--')
                shift
                test ${#@} -eq 0 || failure "extra arguments:" "$@"
                break
                ;;
            *) failure "internal error" ;;
        esac
    done

    readonly RUN_SETUP_ENVIRONMENT RUN_CLEAN RUN_CHECK_FORMAT RUN_BUILD RUN_BUILD_UNIT_TESTS RUN_UNIT_TESTS RUN_CLIPPY RUN_FORMAT RUN_DOCUMENTATION
}

# TODO: This needs some serious massaging, some stuff probably don't even belong
# here, it should probably live in some Gerrit/Jenkins scripts and/or Makefiles.
run_setup_environment() {
    REPO_DIR="$(realpath ../..)"

    # When executed via "make deb", e.g. during local builds, these are set and
    # confuse cargo.
    unset MAKEFLAGS DESTDIR

    if [ -e "/opt/rust/rustup" ]; then
        RUSTUP_HOME="/opt/rust/rustup"
        export RUSTUP_HOME
        # Make sure we don't use "$HOME/.cargo" accidentally (expands to
        # /.cargo, if HOME is not set). On a jenkins node, .cargo should be
        # created under /home/jenkins/shared_cargo_folder in order to reuse it
        # between workspaces, see run-in-docker.sh.
        : "${CARGO_HOME:="${REPO_DIR}/shared_cargo_folder/.cargo"}"
        export CARGO_HOME
    fi

    export CARGO_BUILD_TARGET="x86_64-unknown-linux-musl"
    RUSTFLAGS="
$RUSTFLAGS \
--remap-path-prefix=${REPO_DIR}=/builddir \
--remap-path-prefix=${CARGO_HOME:-$HOME/.cargo}=/cargo-home"
    export RUSTFLAGS
}

main() {
    # Change to the directory where this script resides, it makes many things easier
    # and we can call this script from everywhere.
    cd -- "${BASH_SOURCE%/*}"
    parse_options "$@"
    test ${RUN_SETUP_ENVIRONMENT} = yes && run_setup_environment
    test ${RUN_CLEAN} = yes && cargo clean
    test ${RUN_CHECK_FORMAT} = yes && cargo fmt -- --check
    # TODO: Re-evaluate usage of --all-targets below
    test ${RUN_BUILD} = yes && cargo build --release --all-targets
    test ${RUN_BUILD_UNIT_TESTS} = yes && cargo test --release --all-targets --no-run
    test ${RUN_UNIT_TESTS} = yes && RUST_BACKTRACE=1 cargo test --release --all-targets
    test ${RUN_CLIPPY} = yes && cargo clippy --release --all-targets -- --deny warnings
    test ${RUN_FORMAT} = yes && cargo fmt
    test ${RUN_DOCUMENTATION} = yes && cargo doc --release --lib --bin --examples
    true
}

main "$@"
