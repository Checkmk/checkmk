#!/bin/bash
# Copyright (C) 2024 Checkmk GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

set -e

failure() {
    test ${#@} -eq 0 || echo "$(basename "$0"):" "$@" >&2
    exit 1
}

usage() {
    echo "usage: $(basename "$0") [OPTION]..."
    echo "Run the CI pipeline or parts of it."
    echo
    echo "  -b, --build                build"
    echo "  -B, --build-demo           build demo"
    echo "  -d, --build-dev            build in dev mode"
    echo "  -t, --tests                run tests"
    echo "  -F, --check-format         run format check"
    echo "  -T, --tsc                  run type checker"
    echo "  -E, --eslint               run linter"
    echo "  -S, --stylelint            run stylelint"
    echo "  -f, --format               format sources"
    echo "  -a, --all                  shortcut for -b -B -t -F -T -E -d"
    echo "  -h, --help                 show this help"
}

parse_options() {
    # Yes, all those option variables are global.
    RUN_BUILD=no
    RUN_BUILD_DEMO=no
    RUN_BUILD_DEV=no
    RUN_TESTS=no
    RUN_CHECK_FORMAT=no
    RUN_TSC=no
    RUN_ESLINT=no
    RUN_STYLELINT=no
    RUN_FORMAT=no

    if ! OPTIONS=$(getopt --options 'bBtdFTEafhS' --long 'build,build-dev,tests,check-format,tsc,stylelint,eslint,all,format,help' --name "$(basename "$0")" -- "$@"); then
        usage >&2
        failure
    fi
    eval set -- "$OPTIONS"
    unset OPTIONS

    while true; do
        case "$1" in
            '-b' | '--build')
                RUN_BUILD=yes
                shift
                continue
                ;;
            '-B' | '--build-demo')
                RUN_BUILD_DEMO=yes
                shift
                continue
                ;;
            '-d' | '--build-dev')
                RUN_BUILD_DEV=yes
                shift
                continue
                ;;
            '-t' | '--tests')
                RUN_TESTS=yes
                shift
                continue
                ;;
            '-F' | '--check-format')
                RUN_CHECK_FORMAT=yes
                shift
                continue
                ;;
            '-T' | '--tsc')
                RUN_TSC=yes
                shift
                continue
                ;;
            '-E' | '--eslint')
                RUN_ESLINT=yes
                shift
                continue
                ;;
            '-S' | '--stylelint')
                RUN_STYLELINT=yes
                shift
                continue
                ;;
            '-a' | '--all')
                RUN_BUILD=yes
                RUN_BUILD_DEMO=yes
                RUN_BUILD_DEV=yes
                RUN_TESTS=yes
                RUN_CHECK_FORMAT=yes
                RUN_TSC=yes
                RUN_STYLELINT=yes
                RUN_ESLINT=yes
                shift
                continue
                ;;
            '-f' | '--format')
                RUN_FORMAT=yes
                shift
                continue
                ;;
            '-h' | '--help')
                usage
                exit 0
                ;;
            '--')
                shift
                test ${#@} -eq 0 || failure "extra arguments:" "$@"
                break
                ;;
            *) failure "internal error" ;;
        esac
    done

    readonly RUN_BUILD RUN_BUILD_DEMO RUN_TESTS RUN_CHECK_FORMAT RUN_TSC RUN_ESLINT RUN_STYLELINT RUN_FORMAT
}

setup_venv() {
    test "${SETUP_VENV_RAN}" = "yes" && return
    # TODO: Let rules_uv know about our toolchain... https://github.com/theoremlp/rules_uv/issues/163
    # Further: uv seems to fall back to clang, see https://github.com/astral-sh/uv/issues/8036
    CC="gcc" bazel run //:create_venv
    # shellcheck source=/dev/null
    source "$(bazel info workspace)"/.venv/bin/activate
    SETUP_VENV_RAN=yes
}

run_build() {
    # will run `vite build`
    bazel build :dist
}

run_build_dev() {
    bazel run vite -- build --mode=dev --outDir=dist-dev
}

run_build_demo() {
    bazel run vite -- build --config=vite.config.demo.ts --mode=dev --outDir=dist-demo
}

run_check_format() {
    bazel lint \
        --aspect:interactive=false \
        --aspect:config="$(bazel info workspace)"/.aspect/cli/config.yaml \
        --diff \
        --quiet \
        :all
    bazel run :format.check "$(pwd)"
    # this should be a `bazel run` target which can operate on the workspace
    # but since we don't have any dependencies here and test_license_headers.py
    # is subject to vanish system-python3 is ok here
    setup_venv
    python3 scripts/test_license_headers.py
}

run_tsc() {
    bazel test :type-check
}

run_eslint() {
    bazel test :eslint
}

run_stylelint() {
    bazel test :stylelint
}

run_format() {
    bazel lint \
        --aspect:interactive=false \
        --aspect:config="$(bazel info workspace)"/.aspect/cli/config.yaml \
        --fix \
        :all
    bazel run :format "$(pwd)"
}

run_tests() {
    bazel test :unit-test
}

main() {
    # Change to the directory where this script resides, it makes many things easier
    # and we can call this script from everywhere.
    cd -- "${BASH_SOURCE%/*}"
    parse_options "$@"
    test ${RUN_BUILD} = yes && run_build
    test ${RUN_BUILD_DEMO} = yes && run_build_demo
    test ${RUN_TESTS} = yes && run_tests
    test ${RUN_TSC} = yes && run_tsc
    test ${RUN_ESLINT} = yes && run_eslint
    test ${RUN_STYLELINT} = yes && run_stylelint
    test ${RUN_FORMAT} = yes && run_format
    test ${RUN_BUILD_DEV} = yes && run_build_dev
    test ${RUN_CHECK_FORMAT} = yes && run_check_format
    true
}

main "$@"
