/**
 * Copyright (C) 2025 Checkmk GmbH - License: GNU General Public License v2
 * This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
 * conditions defined in the file COPYING, which is part of this source code package.
 */

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/domain-types/acknowledge/actions/delete/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Remove acknowledgement on host or service problems.
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Acknowledge (`action.acknowledge`): Acknowledge host and service problems and remove acknowledgements
     *
     */
    post: operations['cmk.gui.openapi.endpoints.acknowledgement.delete_acknowledgement']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/acknowledge/collections/host': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Set acknowledgement on related hosts
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Acknowledge (`action.acknowledge`): Acknowledge host and service problems and remove acknowledgements
     *
     */
    post: operations['cmk.gui.openapi.endpoints.acknowledgement.set_acknowledgement_on_hosts']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/acknowledge/collections/service': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Set acknowledgement on related services
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Acknowledge (`action.acknowledge`): Acknowledge host and service problems and remove acknowledgements
     *
     */
    post: operations['cmk.gui.openapi.endpoints.acknowledgement.set_acknowledgement_on_services']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/activation_run/collections/pending_changes': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show all pending changes
     * @description
     *
     *     This endpoint requires the following permissions:
     *
     */
    get: operations['cmk.gui.openapi.endpoints.activate_changes.list_pending_changes']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/activation_run/collections/running': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show all currently running activations
     * @description
     *
     *     This endpoint requires the following permissions:
     *
     */
    get: operations['cmk.gui.openapi.endpoints.activate_changes.list_activations']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/activation_run/{activation_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show the activation status
     * @description If the activation is still running a link to the wait-for-completion resource for the activation job is included.This endpoint requires the following permissions:
     *      * Activate configuration (`wato.activate`): This permission is needed for activating the current configuration (and thus rewriting the monitoring configuration and restart the monitoring daemon.)
     *
     */
    get: operations['cmk.gui.openapi.endpoints.activate_changes.show_activation']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/activation_run/{activation_id}/actions/wait-for-completion/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Wait for activation completion
     * @description This endpoint will periodically redirect on itself to prevent timeouts.This endpoint requires the following permissions:
     *      * Activate configuration (`wato.activate`): This permission is needed for activating the current configuration (and thus rewriting the monitoring configuration and restart the monitoring daemon.)
     *
     */
    get: operations['cmk.gui.openapi.endpoints.activate_changes.activate_changes_wait_for_completion']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/activation_run/actions/activate-changes/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Activate pending changes
     * @description This endpoint will start an asynchronous background job that will activate all pending changes.
     *     It will either return a response immediately (when redirect=False) which includes the ID for
     *     the just triggered activation run or will redirect (when redirect=True) to the "Wait for
     *     completion" endpoint and only return a response when the background job is completed.
     *     The relevant ETag for the current set of pending changes can be obtained from the 'Show all
     *     pending changes' endpoint. However, if there are alterations to the list of pending changes, a
     *     new query to the endpoint will be needed to acquire the updated ETag.This endpoint requires the following permissions:
     *      * All of:
     *        * Activate configuration (`wato.activate`): This permission is needed for activating the current configuration (and thus rewriting the monitoring configuration and restart the monitoring daemon.)
     *        * Optionally:
     *          * Activate foreign changes (`wato.activateforeign`): When several users work in parallel with Setup then several pending changes of different users might pile up before changes are activated. Only with this permission a user will be allowed to activate the current configuration if this situation appears.
     *
     */
    post: operations['cmk.gui.openapi.endpoints.activate_changes.activate_changes']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/agent/actions/automatic-deployment/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show the status of the automatic deployment system
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Manage monitoring agents (`wato.agents`): Manage customized packaged monitoring agents for Linux, Windows and other operating systems
     *
     */
    get: operations['cmk.gui.cee.agent_bakery._openapi.automatic_deployment_status']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/agent/actions/baking_status/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show the baking status
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Manage monitoring agents (`wato.agents`): Manage customized packaged monitoring agents for Linux, Windows and other operating systems
     *
     */
    get: operations['cmk.gui.cee.agent_bakery._openapi.baking_status']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/agent/actions/download/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Download agents shipped with Checkmk */
    get: operations['cmk.gui.openapi.endpoints.agent.download_agent']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/agent/actions/download_by_hash/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Download an agent by agent hash and operating system
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Manage monitoring agents (`wato.agents`): Manage customized packaged monitoring agents for Linux, Windows and other operating systems
     *        * Optionally:
     *          * Register host & download monitoring agents of your hosts (`wato.download_agents`): Register hosts that you are a contact for and then download monitoring agents that have been created with the Agent Bakery for these hosts. Please note that these agents might contain confidential information such as passwords.
     *        * Optionally:
     *          * Register all hosts & download all monitoring agents (`wato.download_all_agents`): Register all hosts with the Agent Bakery and download all monitoring agents that have been created with the Agent Bakery, even if you are not a contact for the host in question. Please note that these agents might contain confidential information such as passwords.
     *
     */
    get: operations['cmk.gui.cee.agent_bakery._openapi.download_agent_by_hash']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/agent/actions/download_by_host/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Download an agent by host or folder name and operating system
     * @description To download the vanilla agent (factory defaults) set `agent_type` to `"vanilla"`
     *     and omit the fields `host_name` and `folder_name`.
     *
     *     To download the agent of a specific host, set `agent_type` to `"host_name"`
     *     and set `host_name` to the name of the host (omitting `folder_name`).
     *
     *     To download the generic agent of a specific folder, set `agent_type` to `"generic"`.
     *     You can then either omit the `folder_name` (defaulting to the root folder), or specify
     *     the path of a specific folder *on disk*, starting from the root folder
     *     (e.g. to download the agent for the folder shown as "Main / My-Folder" in the GUI,
     *     specify "/My_Folder/").
     *     The correct folder can be found in the agents downloads page.
     *     The field `host_name` should be omitted.This endpoint requires the following permissions:
     *      * All of:
     *        * Manage monitoring agents (`wato.agents`): Manage customized packaged monitoring agents for Linux, Windows and other operating systems
     *        * Optionally:
     *          * Register host & download monitoring agents of your hosts (`wato.download_agents`): Register hosts that you are a contact for and then download monitoring agents that have been created with the Agent Bakery for these hosts. Please note that these agents might contain confidential information such as passwords.
     *        * Optionally:
     *          * Register all hosts & download all monitoring agents (`wato.download_all_agents`): Register all hosts with the Agent Bakery and download all monitoring agents that have been created with the Agent Bakery, even if you are not a contact for the host in question. Please note that these agents might contain confidential information such as passwords.
     *
     */
    get: operations['cmk.gui.cee.agent_bakery._openapi.download_agent_by_host']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/agent/collections/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show all agents
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Manage monitoring agents (`wato.agents`): Manage customized packaged monitoring agents for Linux, Windows and other operating systems
     *
     */
    get: operations['cmk.gui.cee.agent_bakery._openapi.list_agents']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/agent/{agent_hash}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Show Configuration of a single agent */
    get: operations['cmk.gui.cee.agent_bakery._openapi.show_agent_information']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/agent/actions/bake/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Bake all agents
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Manage monitoring agents (`wato.agents`): Manage customized packaged monitoring agents for Linux, Windows and other operating systems
     *        * Bake agents (`wato.bake_agents`): Bake new agent packages for Linux, Windows and other operating systems
     *
     */
    post: operations['cmk.gui.cee.agent_bakery._openapi.bake_all_agents']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/agent/actions/bake_and_sign/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Bake and sign all agents
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Manage monitoring agents (`wato.agents`): Manage customized packaged monitoring agents for Linux, Windows and other operating systems
     *        * Bake agents (`wato.bake_agents`): Bake new agent packages for Linux, Windows and other operating systems
     *        * Configuration of agent updates (`wato.agent_deployment`): This permissions allows full control of the automatic agent updates.
     *        * Sign agents (`wato.sign_agents`): Sign baked agent packages for Linux, Windows and other operating systems
     *
     */
    post: operations['cmk.gui.cee.agent_bakery._openapi.bake_and_sign_all_agents']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/agent/actions/sign/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Sign all agents
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Configuration of agent updates (`wato.agent_deployment`): This permissions allows full control of the automatic agent updates.
     *        * Sign agents (`wato.sign_agents`): Sign baked agent packages for Linux, Windows and other operating systems
     *
     */
    post: operations['cmk.gui.cee.agent_bakery._openapi.sign_agents']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/audit_log/collections/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all audit log entries
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Audit log (`wato.auditlog`): Access to the historic audit log. The currently pending changes can be seen by all users with access to Setup.
     *
     */
    get: operations['cmk.gui.openapi.endpoints.audit_log.get_all']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/audit_log/actions/archive/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Move audit log entries to archive
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Audit log (`wato.auditlog`): Access to the historic audit log. The currently pending changes can be seen by all users with access to Setup.
     *        * Archive audit log (`wato.clear_auditlog`): Archive the entries of the audit log. To be able to archive the audit log a user needs the generic Setup permission "Make changes, perform actions", the "View audit log" and this permission.
     *
     */
    post: operations['cmk.gui.openapi.endpoints.audit_log.archive_logs']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/autocomplete/{autocomplete_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Call the autocompleter specified in the url */
    post: operations['cmk.gui.openapi.endpoints.autocomplete.show']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/aux_tag/collections/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show Auxiliary Tags
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Manage tags (`wato.hosttags`): Create, remove and edit tags. Removing tags also might remove rules, so this permission should not be available to normal users.
     *
     */
    get: operations['cmk.gui.openapi.endpoints.aux_tags.show_aux_tags']
    put?: never
    /**
     * Create an Auxiliary Tag
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Optionally:
     *          * Write access to all hosts and folders (`wato.all_folders`): Without this permission, operations on folders can only be done by users that are members of one of the folders contact groups. This permission grants full access to all folders and hosts.
     *        * Manage tags (`wato.hosttags`): Create, remove and edit tags. Removing tags also might remove rules, so this permission should not be available to normal users.
     *
     */
    post: operations['cmk.gui.openapi.endpoints.aux_tags.create_aux_tag']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/aux_tag/{aux_tag_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show an Auxiliary Tag
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Manage tags (`wato.hosttags`): Create, remove and edit tags. Removing tags also might remove rules, so this permission should not be available to normal users.
     *
     */
    get: operations['cmk.gui.openapi.endpoints.aux_tags.show_aux_tag']
    /**
     * Update an aux tag
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Optionally:
     *          * Write access to all hosts and folders (`wato.all_folders`): Without this permission, operations on folders can only be done by users that are members of one of the folders contact groups. This permission grants full access to all folders and hosts.
     *        * Manage tags (`wato.hosttags`): Create, remove and edit tags. Removing tags also might remove rules, so this permission should not be available to normal users.
     *
     */
    put: operations['cmk.gui.openapi.endpoints.aux_tags.put_aux_tag']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/aux_tag/{aux_tag_id}/actions/delete/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Delete an Auxiliary Tag
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Optionally:
     *          * Write access to all hosts and folders (`wato.all_folders`): Without this permission, operations on folders can only be done by users that are members of one of the folders contact groups. This permission grants full access to all folders and hosts.
     *        * Manage tags (`wato.hosttags`): Create, remove and edit tags. Removing tags also might remove rules, so this permission should not be available to normal users.
     *
     */
    post: operations['cmk.gui.openapi.endpoints.aux_tags.delete_aux_tag']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/background_job/{job_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Show the last status of a background job */
    get: operations['cmk.gui.openapi.endpoints.background_job.show_background_job_snapshot']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/broker_connection/collections/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show all peer to peer broker connections
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Site management (`wato.sites`): Access to the module for managing connections to remote monitoring sites.
     *
     */
    get: operations['cmk.gui.openapi.endpoints.broker_connection.show_broker_connections']
    put?: never
    /**
     * Create a peer to peer broker connection
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Site management (`wato.sites`): Access to the module for managing connections to remote monitoring sites.
     *
     */
    post: operations['cmk.gui.openapi.endpoints.broker_connection.create_broker_connection']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/broker_connection/{connection_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show a peer to peer broker connection
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Site management (`wato.sites`): Access to the module for managing connections to remote monitoring sites.
     *
     */
    get: operations['cmk.gui.openapi.endpoints.broker_connection.show_broker_connection']
    /**
     * Edit a peer to peer broker connection
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Site management (`wato.sites`): Access to the module for managing connections to remote monitoring sites.
     *
     */
    put: operations['cmk.gui.openapi.endpoints.broker_connection.edit_broker_connection']
    post?: never
    /**
     * Delete a peer to peer broker connection
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Site management (`wato.sites`): Access to the module for managing connections to remote monitoring sites.
     *
     */
    delete: operations['cmk.gui.openapi.endpoints.broker_connection.delete_broker_connection']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/bi_aggregation/actions/aggregation_state/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get the state of BI aggregations
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Business Intelligence rules and aggregations (`wato.bi_rules`): Use the Setup BI module, create, modify and delete BI rules and aggregations in packs that you are a contact of.
     *
     */
    get: operations['cmk.gui.bi._openapi.bi_aggregation_state_get']
    put?: never
    /**
     * Get the state of BI aggregations
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Business Intelligence rules and aggregations (`wato.bi_rules`): Use the Setup BI module, create, modify and delete BI rules and aggregations in packs that you are a contact of.
     *
     */
    post: operations['cmk.gui.bi._openapi.bi_aggregation_state_post']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/bi_pack/collections/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show all BI packs
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Business Intelligence rules and aggregations (`wato.bi_rules`): Use the Setup BI module, create, modify and delete BI rules and aggregations in packs that you are a contact of.
     *
     */
    get: operations['cmk.gui.bi._openapi.get_bi_packs']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/bi_aggregation/{aggregation_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a BI aggregation
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Business Intelligence rules and aggregations (`wato.bi_rules`): Use the Setup BI module, create, modify and delete BI rules and aggregations in packs that you are a contact of.
     *
     */
    get: operations['cmk.gui.bi._openapi.get_bi_aggregation']
    /**
     * Update an existing BI aggregation
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Business Intelligence rules and aggregations (`wato.bi_rules`): Use the Setup BI module, create, modify and delete BI rules and aggregations in packs that you are a contact of.
     *
     */
    put: operations['cmk.gui.bi._openapi.put_bi_aggregation']
    /**
     * Create a BI aggregation
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Business Intelligence rules and aggregations (`wato.bi_rules`): Use the Setup BI module, create, modify and delete BI rules and aggregations in packs that you are a contact of.
     *
     */
    post: operations['cmk.gui.bi._openapi.post_bi_aggregation']
    /**
     * Delete a BI aggregation
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Business Intelligence rules and aggregations (`wato.bi_rules`): Use the Setup BI module, create, modify and delete BI rules and aggregations in packs that you are a contact of.
     *
     */
    delete: operations['cmk.gui.bi._openapi.delete_bi_aggregation']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/bi_pack/{pack_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a BI pack and its rules and aggregations
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Business Intelligence rules and aggregations (`wato.bi_rules`): Use the Setup BI module, create, modify and delete BI rules and aggregations in packs that you are a contact of.
     *
     */
    get: operations['cmk.gui.bi._openapi.get_bi_pack']
    /**
     * Update an existing BI pack
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Business Intelligence rules and aggregations (`wato.bi_rules`): Use the Setup BI module, create, modify and delete BI rules and aggregations in packs that you are a contact of.
     *        * Business Intelligence administration (`wato.bi_admin`): Edit all rules and aggregations for Business Intelligence, create, modify and delete rule packs.
     *
     */
    put: operations['cmk.gui.bi._openapi.put_bi_pack']
    /**
     * Create a new BI pack
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Business Intelligence rules and aggregations (`wato.bi_rules`): Use the Setup BI module, create, modify and delete BI rules and aggregations in packs that you are a contact of.
     *        * Business Intelligence administration (`wato.bi_admin`): Edit all rules and aggregations for Business Intelligence, create, modify and delete rule packs.
     *
     */
    post: operations['cmk.gui.bi._openapi.post_bi_pack']
    /**
     * Delete BI pack
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Business Intelligence rules and aggregations (`wato.bi_rules`): Use the Setup BI module, create, modify and delete BI rules and aggregations in packs that you are a contact of.
     *        * Business Intelligence administration (`wato.bi_admin`): Edit all rules and aggregations for Business Intelligence, create, modify and delete rule packs.
     *
     */
    delete: operations['cmk.gui.bi._openapi.delete_bi_pack']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/bi_rule/{rule_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show a BI rule
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Business Intelligence rules and aggregations (`wato.bi_rules`): Use the Setup BI module, create, modify and delete BI rules and aggregations in packs that you are a contact of.
     *
     */
    get: operations['cmk.gui.bi._openapi.get_bi_rule']
    /**
     * Update an existing BI rule
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Business Intelligence rules and aggregations (`wato.bi_rules`): Use the Setup BI module, create, modify and delete BI rules and aggregations in packs that you are a contact of.
     *
     */
    put: operations['cmk.gui.bi._openapi.put_bi_rule']
    /**
     * Create a new BI rule
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Business Intelligence rules and aggregations (`wato.bi_rules`): Use the Setup BI module, create, modify and delete BI rules and aggregations in packs that you are a contact of.
     *
     */
    post: operations['cmk.gui.bi._openapi.post_bi_rule']
    /**
     * Delete BI rule
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Business Intelligence rules and aggregations (`wato.bi_rules`): Use the Setup BI module, create, modify and delete BI rules and aggregations in packs that you are a contact of.
     *
     */
    delete: operations['cmk.gui.bi._openapi.delete_bi_rule']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/agent_controller_certificates_settings': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show agent controller certificate settings
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Any of:
     *        * Read access to all modules (`wato.seeall`): When this permission is set then the user sees also such modules he has no explicit access to (see below).
     *        * Global settings (`wato.global`): Access to the module <i>Global settings</i>
     *
     */
    get: operations['cmk.gui.openapi.endpoints.cert.agent_controller_certificates_settings']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/root_cert': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * X.509 PEM-encoded root certificate
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Agent pairing (`general.agent_pairing`): Only relevant for the agent controller shipped with Checkmk 2.1. Pairing of Checkmk agents with the monitoring site. This step establishes trust between the agent and the monitoring site.
     *
     */
    get: operations['cmk.gui.openapi.endpoints.cert.root_cert']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/csr': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * X.509 PEM-encoded Certificate Signing Requests (CSRs)
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Agent pairing (`general.agent_pairing`): Only relevant for the agent controller shipped with Checkmk 2.1. Pairing of Checkmk agents with the monitoring site. This step establishes trust between the agent and the monitoring site.
     *
     */
    post: operations['cmk.gui.openapi.endpoints.cert.make_certificate']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/comment/collections/{collection_name}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Show comments */
    get: operations['cmk.gui.openapi.endpoints.comment.show_comments']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/comment/{comment_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Show a comment */
    get: operations['cmk.gui.openapi.endpoints.comment.show_comment']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/comment/actions/delete/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Delete comments
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Add comments (`action.addcomment`): Add comments to hosts or services, and remove comments
     *
     */
    post: operations['cmk.gui.openapi.endpoints.comment.delete_comments']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/comment/collections/host': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create a host comment
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Add comments (`action.addcomment`): Add comments to hosts or services, and remove comments
     *
     */
    post: operations['cmk.gui.openapi.endpoints.comment.create_host_comment']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/comment/collections/service': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create a service comment
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Add comments (`action.addcomment`): Add comments to hosts or services, and remove comments
     *
     */
    post: operations['cmk.gui.openapi.endpoints.comment.create_service_comment']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/form_spec/collections/{entity_type}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get a configuration entity form spec schema */
    get: operations['cmk.gui.openapi.endpoints.configuration_entity._get_configuration_entity_form_spec_schema']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/configuration_entity/actions/edit-single-entity/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Update an existing configuration entity */
    put: operations['cmk.gui.openapi.endpoints.configuration_entity._update_configuration_entity']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/configuration_entity/collections/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Create a configuration entity */
    post: operations['cmk.gui.openapi.endpoints.configuration_entity._create_configuration_entity']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/folder/collections/{entity_type_specifier}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List existing folder */
    get: operations['cmk.gui.openapi.endpoints.configuration_entity.folder._list_folder']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/notification_parameter/collections/{entity_type_specifier}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List existing notification parameters */
    get: operations['cmk.gui.openapi.endpoints.configuration_entity.notification_parameter._list_notification_parameters']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/notification_parameter/{entity_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get a notification parameter */
    get: operations['cmk.gui.openapi.endpoints.configuration_entity.notification_parameter._get_notification_parameter']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/contact_group_config/collections/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show all contact groups
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * User management (`wato.users`): This permission is needed for the modules <b>Users</b>, <b>Roles</b> and <b>Contact groups</b>
     *
     */
    get: operations['cmk.gui.openapi.endpoints.contact_group_config.list_group']
    put?: never
    /**
     * Create a contact group
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * User management (`wato.users`): This permission is needed for the modules <b>Users</b>, <b>Roles</b> and <b>Contact groups</b>
     *
     */
    post: operations['cmk.gui.openapi.endpoints.contact_group_config.create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/contact_group_config/{name}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show a contact group
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * User management (`wato.users`): This permission is needed for the modules <b>Users</b>, <b>Roles</b> and <b>Contact groups</b>
     *
     */
    get: operations['cmk.gui.openapi.endpoints.contact_group_config.show']
    /**
     * Update a contact group
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * User management (`wato.users`): This permission is needed for the modules <b>Users</b>, <b>Roles</b> and <b>Contact groups</b>
     *
     */
    put: operations['cmk.gui.openapi.endpoints.contact_group_config.update']
    post?: never
    /**
     * Delete a contact group
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * User management (`wato.users`): This permission is needed for the modules <b>Users</b>, <b>Roles</b> and <b>Contact groups</b>
     *
     */
    delete: operations['cmk.gui.openapi.endpoints.contact_group_config.delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/contact_group_config/actions/bulk-update/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Bulk update contact groups
     * @description Please be aware that when doing bulk updates, it is not possible to prevent the
     *     [Updating Values]("lost update problem"), which is normally prevented by the ETag locking
     *     mechanism. Use at your own risk.This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * User management (`wato.users`): This permission is needed for the modules <b>Users</b>, <b>Roles</b> and <b>Contact groups</b>
     *
     */
    put: operations['cmk.gui.openapi.endpoints.contact_group_config.bulk_update']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/contact_group_config/actions/bulk-create/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Bulk create contact groups
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * User management (`wato.users`): This permission is needed for the modules <b>Users</b>, <b>Roles</b> and <b>Contact groups</b>
     *
     */
    post: operations['cmk.gui.openapi.endpoints.contact_group_config.bulk_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/contact_group_config/actions/bulk-delete/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Bulk delete contact groups
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * User management (`wato.users`): This permission is needed for the modules <b>Users</b>, <b>Roles</b> and <b>Contact groups</b>
     *
     */
    post: operations['cmk.gui.openapi.endpoints.contact_group_config.bulk_delete']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/dashboard_metadata/collections/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List permitted dashboard metadata.
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Customize dashboards and use them (`general.edit_dashboards`): Allows to create own dashboards, customize built-in dashboards and use them.
     *        * Optionally:
     *          * Modify built-in dashboards (`general.force_dashboards`): Make own published dashboards override built-in dashboards for all users.
     *        * Optionally:
     *          * See user dashboards (`general.see_user_dashboards`): Is needed for seeing dashboards that other users have created.
     *        * Optionally:
     *          * See packaged dashboards (`general.see_packaged_dashboards`): Is needed for seeing dashboards that are provided via extension packages.
     *        * Optionally:
     *          * All of:
     *            * See user topics (`general.see_user_pagetype_topic`): Is needed for seeing topics that other users have created.
     *            * Some permissions starting with `pagetype_topic`:
     *        * Some permissions starting with `dashboard`:
     *        * Optionally:
     *          * All of:
     *            * Customize views and use them (`general.edit_views`): Allows to create own views, customize built-in views and use them.
     *            * See user views (`general.see_user_views`): Is needed for seeing views that other users have created.
     *            * See packaged views (`general.see_packaged_views`): Is needed for seeing views that are provided via extension packages.
     *            * Some permissions starting with `view`:
     *
     */
    get: operations['Dashboards.list_dashboard_metadata_v1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/constant/dashboard': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Show the dashboard constraints */
    get: operations['Dashboards.show_dashboard_constants_v1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/dashboard_relative_grid/{dashboard_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show a dashboard.
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Customize dashboards and use them (`general.edit_dashboards`): Allows to create own dashboards, customize built-in dashboards and use them.
     *        * Optionally:
     *          * Modify built-in dashboards (`general.force_dashboards`): Make own published dashboards override built-in dashboards for all users.
     *        * Optionally:
     *          * See user dashboards (`general.see_user_dashboards`): Is needed for seeing dashboards that other users have created.
     *        * Optionally:
     *          * See packaged dashboards (`general.see_packaged_dashboards`): Is needed for seeing dashboards that are provided via extension packages.
     *        * Optionally:
     *          * All of:
     *            * See user topics (`general.see_user_pagetype_topic`): Is needed for seeing topics that other users have created.
     *            * Some permissions starting with `pagetype_topic`:
     *        * Some permissions starting with `dashboard`:
     *        * Optionally:
     *          * All of:
     *            * Customize views and use them (`general.edit_views`): Allows to create own views, customize built-in views and use them.
     *            * See user views (`general.see_user_views`): Is needed for seeing views that other users have created.
     *            * See packaged views (`general.see_packaged_views`): Is needed for seeing views that are provided via extension packages.
     *            * Some permissions starting with `view`:
     *
     */
    get: operations['Dashboards.show_relative_grid_dashboard_v1']
    /**
     * Edit a dashboard.
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Customize dashboards and use them (`general.edit_dashboards`): Allows to create own dashboards, customize built-in dashboards and use them.
     *        * Optionally:
     *          * Modify built-in dashboards (`general.force_dashboards`): Make own published dashboards override built-in dashboards for all users.
     *        * Optionally:
     *          * See user dashboards (`general.see_user_dashboards`): Is needed for seeing dashboards that other users have created.
     *        * Optionally:
     *          * See packaged dashboards (`general.see_packaged_dashboards`): Is needed for seeing dashboards that are provided via extension packages.
     *        * Optionally:
     *          * All of:
     *            * See user topics (`general.see_user_pagetype_topic`): Is needed for seeing topics that other users have created.
     *            * Some permissions starting with `pagetype_topic`:
     *        * Some permissions starting with `dashboard`:
     *        * Optionally:
     *          * All of:
     *            * Customize views and use them (`general.edit_views`): Allows to create own views, customize built-in views and use them.
     *            * See user views (`general.see_user_views`): Is needed for seeing views that other users have created.
     *            * See packaged views (`general.see_packaged_views`): Is needed for seeing views that are provided via extension packages.
     *            * Some permissions starting with `view`:
     *
     */
    put: operations['Dashboards.edit_relative_grid_dashboard_v1']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/dashboard_responsive_grid/{dashboard_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show a dashboard.
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Customize dashboards and use them (`general.edit_dashboards`): Allows to create own dashboards, customize built-in dashboards and use them.
     *        * Optionally:
     *          * Modify built-in dashboards (`general.force_dashboards`): Make own published dashboards override built-in dashboards for all users.
     *        * Optionally:
     *          * See user dashboards (`general.see_user_dashboards`): Is needed for seeing dashboards that other users have created.
     *        * Optionally:
     *          * See packaged dashboards (`general.see_packaged_dashboards`): Is needed for seeing dashboards that are provided via extension packages.
     *        * Optionally:
     *          * All of:
     *            * See user topics (`general.see_user_pagetype_topic`): Is needed for seeing topics that other users have created.
     *            * Some permissions starting with `pagetype_topic`:
     *        * Some permissions starting with `dashboard`:
     *        * Optionally:
     *          * All of:
     *            * Customize views and use them (`general.edit_views`): Allows to create own views, customize built-in views and use them.
     *            * See user views (`general.see_user_views`): Is needed for seeing views that other users have created.
     *            * See packaged views (`general.see_packaged_views`): Is needed for seeing views that are provided via extension packages.
     *            * Some permissions starting with `view`:
     *
     */
    get: operations['Dashboards.show_responsive_grid_dashboard_v1']
    /**
     * Edit a dashboard.
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Customize dashboards and use them (`general.edit_dashboards`): Allows to create own dashboards, customize built-in dashboards and use them.
     *        * Optionally:
     *          * Modify built-in dashboards (`general.force_dashboards`): Make own published dashboards override built-in dashboards for all users.
     *        * Optionally:
     *          * See user dashboards (`general.see_user_dashboards`): Is needed for seeing dashboards that other users have created.
     *        * Optionally:
     *          * See packaged dashboards (`general.see_packaged_dashboards`): Is needed for seeing dashboards that are provided via extension packages.
     *        * Optionally:
     *          * All of:
     *            * See user topics (`general.see_user_pagetype_topic`): Is needed for seeing topics that other users have created.
     *            * Some permissions starting with `pagetype_topic`:
     *        * Some permissions starting with `dashboard`:
     *        * Optionally:
     *          * All of:
     *            * Customize views and use them (`general.edit_views`): Allows to create own views, customize built-in views and use them.
     *            * See user views (`general.see_user_views`): Is needed for seeing views that other users have created.
     *            * See packaged views (`general.see_packaged_views`): Is needed for seeing views that are provided via extension packages.
     *            * Some permissions starting with `view`:
     *
     */
    put: operations['Dashboards.edit_responsive_grid_dashboard_v1']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/dashboard/actions/compute-widget-attributes/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Compute widget specification attributes
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Customize dashboards and use them (`general.edit_dashboards`): Allows to create own dashboards, customize built-in dashboards and use them.
     *        * Optionally:
     *          * Modify built-in dashboards (`general.force_dashboards`): Make own published dashboards override built-in dashboards for all users.
     *        * Optionally:
     *          * See user dashboards (`general.see_user_dashboards`): Is needed for seeing dashboards that other users have created.
     *        * Optionally:
     *          * See packaged dashboards (`general.see_packaged_dashboards`): Is needed for seeing dashboards that are provided via extension packages.
     *        * Optionally:
     *          * All of:
     *            * See user topics (`general.see_user_pagetype_topic`): Is needed for seeing topics that other users have created.
     *            * Some permissions starting with `pagetype_topic`:
     *        * Some permissions starting with `dashboard`:
     *        * Optionally:
     *          * All of:
     *            * Customize views and use them (`general.edit_views`): Allows to create own views, customize built-in views and use them.
     *            * See user views (`general.see_user_views`): Is needed for seeing views that other users have created.
     *            * See packaged views (`general.see_packaged_views`): Is needed for seeing views that are provided via extension packages.
     *            * Some permissions starting with `view`:
     *
     */
    post: operations['Dashboards.compute_widget_attributes_v1']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/dashboard_relative_grid/collections/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create a dashboard.
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Customize dashboards and use them (`general.edit_dashboards`): Allows to create own dashboards, customize built-in dashboards and use them.
     *        * Optionally:
     *          * Modify built-in dashboards (`general.force_dashboards`): Make own published dashboards override built-in dashboards for all users.
     *        * Optionally:
     *          * See user dashboards (`general.see_user_dashboards`): Is needed for seeing dashboards that other users have created.
     *        * Optionally:
     *          * See packaged dashboards (`general.see_packaged_dashboards`): Is needed for seeing dashboards that are provided via extension packages.
     *        * Optionally:
     *          * All of:
     *            * See user topics (`general.see_user_pagetype_topic`): Is needed for seeing topics that other users have created.
     *            * Some permissions starting with `pagetype_topic`:
     *        * Some permissions starting with `dashboard`:
     *        * Optionally:
     *          * All of:
     *            * Customize views and use them (`general.edit_views`): Allows to create own views, customize built-in views and use them.
     *            * See user views (`general.see_user_views`): Is needed for seeing views that other users have created.
     *            * See packaged views (`general.see_packaged_views`): Is needed for seeing views that are provided via extension packages.
     *            * Some permissions starting with `view`:
     *
     */
    post: operations['Dashboards.create_relative_grid_dashboard_v1']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/dashboard_responsive_grid/collections/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create a dashboard.
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Customize dashboards and use them (`general.edit_dashboards`): Allows to create own dashboards, customize built-in dashboards and use them.
     *        * Optionally:
     *          * Modify built-in dashboards (`general.force_dashboards`): Make own published dashboards override built-in dashboards for all users.
     *        * Optionally:
     *          * See user dashboards (`general.see_user_dashboards`): Is needed for seeing dashboards that other users have created.
     *        * Optionally:
     *          * See packaged dashboards (`general.see_packaged_dashboards`): Is needed for seeing dashboards that are provided via extension packages.
     *        * Optionally:
     *          * All of:
     *            * See user topics (`general.see_user_pagetype_topic`): Is needed for seeing topics that other users have created.
     *            * Some permissions starting with `pagetype_topic`:
     *        * Some permissions starting with `dashboard`:
     *        * Optionally:
     *          * All of:
     *            * Customize views and use them (`general.edit_views`): Allows to create own views, customize built-in views and use them.
     *            * See user views (`general.see_user_views`): Is needed for seeing views that other users have created.
     *            * See packaged views (`general.see_packaged_views`): Is needed for seeing views that are provided via extension packages.
     *            * Some permissions starting with `view`:
     *
     */
    post: operations['Dashboards.create_responsive_grid_dashboard_v1']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/dashboard/{dashboard_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Delete a dashboard.
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Customize dashboards and use them (`general.edit_dashboards`): Allows to create own dashboards, customize built-in dashboards and use them.
     *        * Optionally:
     *          * Modify built-in dashboards (`general.force_dashboards`): Make own published dashboards override built-in dashboards for all users.
     *        * Optionally:
     *          * See user dashboards (`general.see_user_dashboards`): Is needed for seeing dashboards that other users have created.
     *        * Optionally:
     *          * See packaged dashboards (`general.see_packaged_dashboards`): Is needed for seeing dashboards that are provided via extension packages.
     *        * Optionally:
     *          * All of:
     *            * See user topics (`general.see_user_pagetype_topic`): Is needed for seeing topics that other users have created.
     *            * Some permissions starting with `pagetype_topic`:
     *        * Some permissions starting with `dashboard`:
     *        * Optionally:
     *          * All of:
     *            * Customize views and use them (`general.edit_views`): Allows to create own views, customize built-in views and use them.
     *            * See user views (`general.see_user_views`): Is needed for seeing views that other users have created.
     *            * See packaged views (`general.see_packaged_views`): Is needed for seeing views that are provided via extension packages.
     *            * Some permissions starting with `view`:
     *
     */
    delete: operations['Dashboards.delete_dashboard_v1']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/downtime/collections/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show all scheduled downtimes
     * @description
     *
     *     This endpoint requires the following permissions:
     *
     */
    get: operations['cmk.gui.openapi.endpoints.downtime.show_downtimes']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/downtime/{downtime_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show downtime
     * @description
     *
     *     This endpoint requires the following permissions:
     *
     */
    get: operations['cmk.gui.openapi.endpoints.downtime.show_downtime']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/downtime/actions/modify/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Modify a scheduled downtime
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Set/remove downtimes (`action.downtimes`): Schedule and remove downtimes on hosts and services
     *
     */
    put: operations['cmk.gui.openapi.endpoints.downtime.modify_host_downtime']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/downtime/actions/delete/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Delete a scheduled downtime
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Set/remove downtimes (`action.downtimes`): Schedule and remove downtimes on hosts and services
     *
     */
    post: operations['cmk.gui.openapi.endpoints.downtime.delete_downtime']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/downtime/collections/host': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create a host related scheduled downtime
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Set/remove downtimes (`action.downtimes`): Schedule and remove downtimes on hosts and services
     *
     */
    post: operations['cmk.gui.openapi.endpoints.downtime.create_host_related_downtime']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/downtime/collections/service': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create a service related scheduled downtime
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Set/remove downtimes (`action.downtimes`): Schedule and remove downtimes on hosts and services
     *
     */
    post: operations['cmk.gui.openapi.endpoints.downtime.create_service_related_downtime']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/dcd/{dcd_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show a dynamic host configuration
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Manage dynamic configuration (`wato.dcd_connections`): Manage the Dynamic configuration connections
     *
     */
    get: operations['cmk.gui.cee.dcd._openapi.show_rule']
    put?: never
    post?: never
    /**
     * Delete a dynamic host configuration
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Manage dynamic configuration (`wato.dcd_connections`): Manage the Dynamic configuration connections
     *
     */
    delete: operations['cmk.gui.cee.dcd._openapi.delete_rule']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/dcd/actions/fetch_phase_one/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Fetch Phase 1 Result
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Manage dynamic configuration (`wato.dcd_connections`): Manage the Dynamic configuration connections
     *
     */
    post: operations['cmk.gui.cee.dcd._openapi.fetch_phase1_result']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/dcd/collections/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create a dynamic host configuration
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Manage dynamic configuration (`wato.dcd_connections`): Manage the Dynamic configuration connections
     *
     */
    post: operations['cmk.gui.cee.dcd._openapi.create_rule']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/event_console/collections/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Show events */
    get: operations['cmk.gui.mkeventd._openapi.show_events']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/event_console/{event_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Show an event */
    get: operations['cmk.gui.mkeventd._openapi.show_event']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/event_console/actions/change_state/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Change multiple event states
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Change event state (`mkeventd.changestate`): This permission allows to change the state classification of an event (e.g. from CRIT to WARN).
     *
     */
    post: operations['cmk.gui.mkeventd._openapi.change_multiple_event_states']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/event_console/actions/delete/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Archive events
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Archive an event (`mkeventd.delete`): Finally archive an event without any further action
     *
     */
    post: operations['cmk.gui.mkeventd._openapi.archive_events_with_filter']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/event_console/actions/update_and_acknowledge/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Update and acknowledge events
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Update an event (`mkeventd.update`): Needed for acknowledging and changing the comment and contact of an event
     *        * Update an event: change comment (`mkeventd.update_comment`): Needed for changing a comment when updating an event
     *        * Update an event: change contact (`mkeventd.update_contact`): Needed for changing a contact when updating an event
     *
     */
    post: operations['cmk.gui.mkeventd._openapi.update_and_acknowledge_multiple_events']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/event_console/{event_id}/actions/change_state/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Change event state
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Change event state (`mkeventd.changestate`): This permission allows to change the state classification of an event (e.g. from CRIT to WARN).
     *
     */
    post: operations['cmk.gui.mkeventd._openapi.change_event_state']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/event_console/{event_id}/actions/update_and_acknowledge/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Update and acknowledge an event
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Update an event (`mkeventd.update`): Needed for acknowledging and changing the comment and contact of an event
     *        * Update an event: change comment (`mkeventd.update_comment`): Needed for changing a comment when updating an event
     *        * Update an event: change contact (`mkeventd.update_contact`): Needed for changing a contact when updating an event
     *
     */
    post: operations['cmk.gui.mkeventd._openapi.update_and_acknowledge_event']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/folder_config/collections/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show all folders
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Optionally:
     *        * Read access to all hosts and folders (`wato.see_all_folders`): Users without this permissions can only see folders with a contact group they are in.
     *
     */
    get: operations['cmk.gui.openapi.endpoints.folder_config.list_folders']
    put?: never
    /**
     * Create a folder
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Add & remove folders (`wato.manage_folders`): Add new folders and delete existing folders. If a folder to be deleted contains hosts then the permission to delete hosts is also required.
     *        * Optionally:
     *          * Add & remove hosts (`wato.manage_hosts`): Add hosts to the monitoring and remove hosts from the monitoring. Please also add the permission <i>Modify existing hosts</i>.
     *        * Optionally:
     *          * Write access to all hosts and folders (`wato.all_folders`): Without this permission, operations on folders can only be done by users that are members of one of the folders contact groups. This permission grants full access to all folders and hosts.
     *
     */
    post: operations['cmk.gui.openapi.endpoints.folder_config.create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/folder_config/{folder}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show a folder
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Optionally:
     *        * Read access to all hosts and folders (`wato.see_all_folders`): Users without this permissions can only see folders with a contact group they are in.
     *
     */
    get: operations['cmk.gui.openapi.endpoints.folder_config.show_folder']
    /**
     * Update a folder
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Modify existing folders (`wato.edit_folders`): Modify the properties of existing folders.
     *        * Optionally:
     *          * Write access to all hosts and folders (`wato.all_folders`): Without this permission, operations on folders can only be done by users that are members of one of the folders contact groups. This permission grants full access to all folders and hosts.
     *
     */
    put: operations['cmk.gui.openapi.endpoints.folder_config.update']
    post?: never
    /**
     * Delete a folder
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Add & remove folders (`wato.manage_folders`): Add new folders and delete existing folders. If a folder to be deleted contains hosts then the permission to delete hosts is also required.
     *        * Optionally:
     *          * Add & remove hosts (`wato.manage_hosts`): Add hosts to the monitoring and remove hosts from the monitoring. Please also add the permission <i>Modify existing hosts</i>.
     *        * Optionally:
     *          * Write access to all hosts and folders (`wato.all_folders`): Without this permission, operations on folders can only be done by users that are members of one of the folders contact groups. This permission grants full access to all folders and hosts.
     *
     */
    delete: operations['cmk.gui.openapi.endpoints.folder_config.delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/folder_config/{folder}/collections/hosts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show all hosts in a folder
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Optionally:
     *        * Read access to all hosts and folders (`wato.see_all_folders`): Users without this permissions can only see folders with a contact group they are in.
     *
     */
    get: operations['cmk.gui.openapi.endpoints.folder_config.hosts_of_folder']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/folder_config/actions/bulk-update/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Bulk update folders
     * @description Please be aware that when doing bulk updates, it is not possible to prevent the
     *     [Updating Values]("lost update problem"), which is normally prevented by the ETag locking
     *     mechanism. Use at your own riskThis endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Modify existing folders (`wato.edit_folders`): Modify the properties of existing folders.
     *        * Optionally:
     *          * Write access to all hosts and folders (`wato.all_folders`): Without this permission, operations on folders can only be done by users that are members of one of the folders contact groups. This permission grants full access to all folders and hosts.
     *
     */
    put: operations['cmk.gui.openapi.endpoints.folder_config.bulk_update']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/folder_config/{folder}/actions/move/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Move a folder
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Add & remove folders (`wato.manage_folders`): Add new folders and delete existing folders. If a folder to be deleted contains hosts then the permission to delete hosts is also required.
     *        * Optionally:
     *          * Add & remove hosts (`wato.manage_hosts`): Add hosts to the monitoring and remove hosts from the monitoring. Please also add the permission <i>Modify existing hosts</i>.
     *        * Optionally:
     *          * Write access to all hosts and folders (`wato.all_folders`): Without this permission, operations on folders can only be done by users that are members of one of the folders contact groups. This permission grants full access to all folders and hosts.
     *
     */
    post: operations['cmk.gui.openapi.endpoints.folder_config.move']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/graph_timerange/collections/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List all graph timeranges
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *
     */
    get: operations['Graph Timeranges.list_graph_timerange_v1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/graph_timerange/{index}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show graph timetrange entry
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *
     */
    get: operations['Graph Timeranges.show_graph_timerange_v1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/inventory/collections/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get the HW/SW Inventory trees of given hosts.
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Any of:
     *        * See all hosts and services (`bi.see_all`): With this permission set, the BI aggregation rules are applied to all hosts and services - not only those the user is a contact for. If you remove this permissions then the user will see incomplete aggregation trees with status based only on those items.
     *        * See all events (`mkeventd.seeall`): If a user lacks this permission then he/she can see only those events that originate from a host that he/she is a contact for.
     *        * See all host and services (`general.see_all`): See all objects regardless of contacts and contact groups. If combined with 'perform commands' then commands may be done on all objects.
     *        * Read access to all hosts and folders (`wato.see_all_folders`): Users without this permissions can only see folders with a contact group they are in.
     *
     */
    get: operations['HW/SW Inventory.get_inventory_trees']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/host_group_config/collections/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show all host groups
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Host & service groups (`wato.groups`): Access to the modules for managing host and service groups.
     *
     */
    get: operations['cmk.gui.openapi.endpoints.host_group_config.list_groups']
    put?: never
    /**
     * Create a host group
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Host & service groups (`wato.groups`): Access to the modules for managing host and service groups.
     *
     */
    post: operations['cmk.gui.openapi.endpoints.host_group_config.create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/host_group_config/{name}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show a host group
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Host & service groups (`wato.groups`): Access to the modules for managing host and service groups.
     *
     */
    get: operations['cmk.gui.openapi.endpoints.host_group_config.get']
    /**
     * Update a host group
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Host & service groups (`wato.groups`): Access to the modules for managing host and service groups.
     *
     */
    put: operations['cmk.gui.openapi.endpoints.host_group_config.update']
    post?: never
    /**
     * Delete a host group
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Host & service groups (`wato.groups`): Access to the modules for managing host and service groups.
     *
     */
    delete: operations['cmk.gui.openapi.endpoints.host_group_config.delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/host_group_config/actions/bulk-update/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Bulk update host groups
     * @description Please be aware that when doing bulk updates, it is not possible to prevent the
     *     [Updating Values]("lost update problem"), which is normally prevented by the ETag locking
     *     mechanism. Use at your own riskThis endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Host & service groups (`wato.groups`): Access to the modules for managing host and service groups.
     *
     */
    put: operations['cmk.gui.openapi.endpoints.host_group_config.bulk_update']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/host_group_config/actions/bulk-create/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Bulk create host groups
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Host & service groups (`wato.groups`): Access to the modules for managing host and service groups.
     *
     */
    post: operations['cmk.gui.openapi.endpoints.host_group_config.bulk_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/host_group_config/actions/bulk-delete/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Bulk delete host groups
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Host & service groups (`wato.groups`): Access to the modules for managing host and service groups.
     *
     */
    post: operations['cmk.gui.openapi.endpoints.host_group_config.bulk_delete']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/host/collections/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show hosts of specific condition
     * @deprecated
     * @description `WARNING`: This URL is deprecated, see [Werk 17003](https://checkmk.com/werk/17003) for more details.
     *
     *     This endpoint requires the following permissions:
     *
     */
    get: operations['cmk.gui.openapi.endpoints.host.list_hosts_deprecated-17003']
    put?: never
    /**
     * Show hosts of specific condition
     * @description
     *
     *     This endpoint requires the following permissions:
     *
     */
    post: operations['cmk.gui.openapi.endpoints.host.list_hosts']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/host/{host_name}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show host
     * @description
     *
     *     This endpoint requires the following permissions:
     *
     */
    get: operations['cmk.gui.openapi.endpoints.host.show_host']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/host_tag_group/collections/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show all host tag groups
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Manage tags (`wato.hosttags`): Create, remove and edit tags. Removing tags also might remove rules, so this permission should not be available to normal users.
     *        * Optionally:
     *          * Write access to all hosts and folders (`wato.all_folders`): Without this permission, operations on folders can only be done by users that are members of one of the folders contact groups. This permission grants full access to all folders and hosts.
     *
     */
    get: operations['cmk.gui.openapi.endpoints.host_tag_group.list_host_tag_groups']
    put?: never
    /**
     * Create a host tag group
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Manage tags (`wato.hosttags`): Create, remove and edit tags. Removing tags also might remove rules, so this permission should not be available to normal users.
     *        * Optionally:
     *          * Write access to all hosts and folders (`wato.all_folders`): Without this permission, operations on folders can only be done by users that are members of one of the folders contact groups. This permission grants full access to all folders and hosts.
     *
     */
    post: operations['cmk.gui.openapi.endpoints.host_tag_group.create_host_tag_group']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/host_tag_group/{name}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show a host tag group
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Manage tags (`wato.hosttags`): Create, remove and edit tags. Removing tags also might remove rules, so this permission should not be available to normal users.
     *        * Optionally:
     *          * Write access to all hosts and folders (`wato.all_folders`): Without this permission, operations on folders can only be done by users that are members of one of the folders contact groups. This permission grants full access to all folders and hosts.
     *
     */
    get: operations['cmk.gui.openapi.endpoints.host_tag_group.show_host_tag_group']
    /**
     * Update a host tag group
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Manage tags (`wato.hosttags`): Create, remove and edit tags. Removing tags also might remove rules, so this permission should not be available to normal users.
     *        * Optionally:
     *          * Write access to all hosts and folders (`wato.all_folders`): Without this permission, operations on folders can only be done by users that are members of one of the folders contact groups. This permission grants full access to all folders and hosts.
     *
     */
    put: operations['cmk.gui.openapi.endpoints.host_tag_group.update_host_tag_group']
    post?: never
    /**
     * Delete a host tag group
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Manage tags (`wato.hosttags`): Create, remove and edit tags. Removing tags also might remove rules, so this permission should not be available to normal users.
     *        * Optionally:
     *          * Write access to all hosts and folders (`wato.all_folders`): Without this permission, operations on folders can only be done by users that are members of one of the folders contact groups. This permission grants full access to all folders and hosts.
     *
     */
    delete: operations['cmk.gui.openapi.endpoints.host_tag_group.delete_host_tag_group']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/host_config/actions/wait-for-completion/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Wait for renaming process completion
     * @description This endpoint will redirect on itself to prevent timeouts.
     */
    get: operations['cmk.gui.openapi.endpoints.host_config.renaming_job_wait_for_completion']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/host_config/collections/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show all hosts
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Optionally:
     *        * Read access to all hosts and folders (`wato.see_all_folders`): Users without this permissions can only see folders with a contact group they are in.
     *
     */
    get: operations['Hosts.list_hosts_v1']
    put?: never
    /**
     * Create a hosts.
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Add & remove hosts (`wato.manage_hosts`): Add hosts to the monitoring and remove hosts from the monitoring. Please also add the permission <i>Modify existing hosts</i>.
     *        * Optionally:
     *          * Write access to all hosts and folders (`wato.all_folders`): Without this permission, operations on folders can only be done by users that are members of one of the folders contact groups. This permission grants full access to all folders and hosts.
     *
     */
    post: operations['Hosts.create_host_v1']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/host_config/{host_name}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show a host.
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Optionally:
     *        * Read access to all hosts and folders (`wato.see_all_folders`): Users without this permissions can only see folders with a contact group they are in.
     *
     */
    get: operations['Hosts.show_host_v1']
    /**
     * Update a host
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Modify existing hosts (`wato.edit_hosts`): Modify the properties of existing hosts. Please note: for the management of services (inventory) there is a separate permission (see below)
     *        * Optionally:
     *          * Write access to all hosts and folders (`wato.all_folders`): Without this permission, operations on folders can only be done by users that are members of one of the folders contact groups. This permission grants full access to all folders and hosts.
     *
     */
    put: operations['cmk.gui.openapi.endpoints.host_config.update_host']
    post?: never
    /**
     * Delete a host
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Add & remove hosts (`wato.manage_hosts`): Add hosts to the monitoring and remove hosts from the monitoring. Please also add the permission <i>Modify existing hosts</i>.
     *        * Optionally:
     *          * Write access to all hosts and folders (`wato.all_folders`): Without this permission, operations on folders can only be done by users that are members of one of the folders contact groups. This permission grants full access to all folders and hosts.
     *
     */
    delete: operations['cmk.gui.openapi.endpoints.host_config.delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/host_config/actions/bulk-update/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Bulk update hosts
     * @description Please be aware that when doing bulk updates, it is not possible to prevent the
     *     [Updating Values]("lost update problem"), which is normally prevented by the ETag locking
     *     mechanism. Use at your own risk.This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Modify existing hosts (`wato.edit_hosts`): Modify the properties of existing hosts. Please note: for the management of services (inventory) there is a separate permission (see below)
     *        * Optionally:
     *          * Write access to all hosts and folders (`wato.all_folders`): Without this permission, operations on folders can only be done by users that are members of one of the folders contact groups. This permission grants full access to all folders and hosts.
     *
     */
    put: operations['cmk.gui.openapi.endpoints.host_config.bulk_update_hosts']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/host_config/{host_name}/actions/rename/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Rename a host
     * @description This endpoint will start a background job to rename the host. Only one rename background job
     *     can run at a time.This endpoint requires the following permissions:
     *      * All of:
     *        * Write access to all hosts and folders (`wato.all_folders`): Without this permission, operations on folders can only be done by users that are members of one of the folders contact groups. This permission grants full access to all folders and hosts.
     *        * Modify existing hosts (`wato.edit_hosts`): Modify the properties of existing hosts. Please note: for the management of services (inventory) there is a separate permission (see below)
     *        * Rename existing hosts (`wato.rename_hosts`): Rename existing hosts. Please also add the permission <i>Modify existing hosts</i>.
     *        * Read access to all hosts and folders (`wato.see_all_folders`): Users without this permissions can only see folders with a contact group they are in.
     *
     */
    put: operations['cmk.gui.openapi.endpoints.host_config.rename_host']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/host_config/{host_name}/properties/nodes': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update the nodes of a cluster host
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Modify existing hosts (`wato.edit_hosts`): Modify the properties of existing hosts. Please note: for the management of services (inventory) there is a separate permission (see below)
     *        * Optionally:
     *          * Write access to all hosts and folders (`wato.all_folders`): Without this permission, operations on folders can only be done by users that are members of one of the folders contact groups. This permission grants full access to all folders and hosts.
     *
     */
    put: operations['cmk.gui.openapi.endpoints.host_config.update_nodes']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/host_config/actions/bulk-create/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Bulk create hosts
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Optionally:
     *          * Add & remove hosts (`wato.manage_hosts`): Add hosts to the monitoring and remove hosts from the monitoring. Please also add the permission <i>Modify existing hosts</i>.
     *        * Optionally:
     *          * Write access to all hosts and folders (`wato.all_folders`): Without this permission, operations on folders can only be done by users that are members of one of the folders contact groups. This permission grants full access to all folders and hosts.
     *
     */
    post: operations['cmk.gui.openapi.endpoints.host_config.bulk_create_hosts']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/host_config/actions/bulk-delete/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Bulk delete hosts
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Add & remove hosts (`wato.manage_hosts`): Add hosts to the monitoring and remove hosts from the monitoring. Please also add the permission <i>Modify existing hosts</i>.
     *        * Optionally:
     *          * Write access to all hosts and folders (`wato.all_folders`): Without this permission, operations on folders can only be done by users that are members of one of the folders contact groups. This permission grants full access to all folders and hosts.
     *
     */
    post: operations['cmk.gui.openapi.endpoints.host_config.bulk_delete']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/host_config/collections/clusters': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create a cluster host
     * @description A cluster host groups many hosts (called nodes in this context) into a conceptual cluster.
     *     All the services of the individual nodes will be collated on the cluster host.This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Add & remove hosts (`wato.manage_hosts`): Add hosts to the monitoring and remove hosts from the monitoring. Please also add the permission <i>Modify existing hosts</i>.
     *        * Optionally:
     *          * Write access to all hosts and folders (`wato.all_folders`): Without this permission, operations on folders can only be done by users that are members of one of the folders contact groups. This permission grants full access to all folders and hosts.
     *
     */
    post: operations['cmk.gui.openapi.endpoints.host_config.create_cluster_host']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/host_config/{host_name}/actions/move/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Move a host to another folder
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Modify existing hosts (`wato.edit_hosts`): Modify the properties of existing hosts. Please note: for the management of services (inventory) there is a separate permission (see below)
     *        * Move existing hosts (`wato.move_hosts`): Move existing hosts to other folders. Please also add the permission <i>Modify existing hosts</i>.
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Add & remove hosts (`wato.manage_hosts`): Add hosts to the monitoring and remove hosts from the monitoring. Please also add the permission <i>Modify existing hosts</i>.
     *        * Optionally:
     *          * Write access to all hosts and folders (`wato.all_folders`): Without this permission, operations on folders can only be done by users that are members of one of the folders contact groups. This permission grants full access to all folders and hosts.
     *
     */
    post: operations['cmk.gui.openapi.endpoints.host_config.move']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/host_config_internal/{host_name}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show a host
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Optionally:
     *        * Read access to all hosts and folders (`wato.see_all_folders`): Users without this permissions can only see folders with a contact group they are in.
     *
     */
    get: operations['cmk.gui.openapi.endpoints.host_internal.show_host']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/host_config_internal/{host_name}/actions/link_uuid/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Link a host to a UUID
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Any of:
     *        * Write access to all hosts and folders (`wato.all_folders`): Without this permission, operations on folders can only be done by users that are members of one of the folders contact groups. This permission grants full access to all folders and hosts.
     *        * Modify existing hosts (`wato.edit_hosts`): Modify the properties of existing hosts. Please note: for the management of services (inventory) there is a separate permission (see below)
     *
     */
    put: operations['cmk.gui.openapi.endpoints.host_internal.link_with_uuid']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/host_config_internal/{host_name}/actions/register/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Register an existing host, ie. link it to a UUID
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Any of:
     *        * Register any existing host (`agent_registration.register_any_existing_host`): This permission allows the registration of any existing host.
     *        * Register managed existing host (`agent_registration.register_managed_existing_host`): This permission allows the registration of any existing host the user is a contact of.
     *        * All of:
     *          * Optionally:
     *            * Read access to all hosts and folders (`wato.see_all_folders`): Users without this permissions can only see folders with a contact group they are in.
     *          * Any of:
     *            * Write access to all hosts and folders (`wato.all_folders`): Without this permission, operations on folders can only be done by users that are members of one of the folders contact groups. This permission grants full access to all folders and hosts.
     *            * Modify existing hosts (`wato.edit_hosts`): Modify the properties of existing hosts. Please note: for the management of services (inventory) there is a separate permission (see below)
     *
     */
    put: operations['cmk.gui.openapi.endpoints.host_internal.register_host']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/ldap_connection/collections/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show all LDAP connections
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Read access to all modules (`wato.seeall`): When this permission is set then the user sees also such modules he has no explicit access to (see below).
     *        * User management (`wato.users`): This permission is needed for the modules <b>Users</b>, <b>Roles</b> and <b>Contact groups</b>
     *
     */
    get: operations['cmk.gui.ldap._openapi.show_ldap_connections']
    put?: never
    /**
     * Create an LDAP connection
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * All of:
     *          * Read access to all modules (`wato.seeall`): When this permission is set then the user sees also such modules he has no explicit access to (see below).
     *          * User management (`wato.users`): This permission is needed for the modules <b>Users</b>, <b>Roles</b> and <b>Contact groups</b>
     *
     */
    post: operations['cmk.gui.ldap._openapi.create_ldap_connection']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/ldap_connection/{ldap_connection_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show an LDAP connection
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Read access to all modules (`wato.seeall`): When this permission is set then the user sees also such modules he has no explicit access to (see below).
     *        * User management (`wato.users`): This permission is needed for the modules <b>Users</b>, <b>Roles</b> and <b>Contact groups</b>
     *
     */
    get: operations['cmk.gui.ldap._openapi.show_ldap_connection']
    /**
     * Update an ldap connection
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * All of:
     *          * Read access to all modules (`wato.seeall`): When this permission is set then the user sees also such modules he has no explicit access to (see below).
     *          * User management (`wato.users`): This permission is needed for the modules <b>Users</b>, <b>Roles</b> and <b>Contact groups</b>
     *
     */
    put: operations['cmk.gui.ldap._openapi.edit_ldap_connection']
    post?: never
    /**
     * Delete an LDAP connection
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * All of:
     *          * Read access to all modules (`wato.seeall`): When this permission is set then the user sees also such modules he has no explicit access to (see below).
     *          * User management (`wato.users`): This permission is needed for the modules <b>Users</b>, <b>Roles</b> and <b>Contact groups</b>
     *
     */
    delete: operations['cmk.gui.ldap._openapi.delete_ldap_connection']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/license_request/actions/download/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Download a license request for offline verification
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Access the licensing mode (`wato.licensing`): All related information or settings of licensing of Checkmk sites.
     *
     */
    get: operations['cmk.gui.cse.licensing._openapi.download_license_request']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/license_usage/actions/download/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Download the license usage of Checkmk
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Access the license usage mode (`wato.license_usage`): Show license usage information of Checkmk sites.
     *
     */
    get: operations['cmk.gui.cee.licensing._openapi.download_license_usage']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/licensing/actions/configure/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Configure the licensing settings
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Access the licensing mode (`wato.licensing`): All related information or settings of licensing of Checkmk sites.
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *
     */
    put: operations['cmk.gui.cee.licensing._openapi.configure_licensing_settings']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/license_response/actions/upload/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Trigger the offline license verification and receive its results
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Access the licensing mode (`wato.licensing`): All related information or settings of licensing of Checkmk sites.
     *
     */
    post: operations['cmk.gui.cee.licensing._openapi.verify_offline']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/licensing/actions/verify/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Trigger the license verification and receive its results
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Access the licensing mode (`wato.licensing`): All related information or settings of licensing of Checkmk sites.
     *
     */
    post: operations['cmk.gui.cee.licensing._openapi.verify_online']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/metric/actions/filter/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Get metrics using filters
     * @description Select a site, filter for a host and a service to obtain a graph
     *     (consisting of multiple metrics) or a single metric.
     *     You can also aggregate the result.
     *     This endpoint is internal and may change at any point, without notice.
     *     For a simpler and supported interface see "Get a graph".
     */
    post: operations['cmk.gui.cee.openapi.endpoints.metric.internal.get_graph_using_filters']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/metric/actions/get/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Get metrics
     * @description This endpoint retrieves a predefined graph (consisting of multiple metrics) or a single metric.
     */
    post: operations['cmk.gui.openapi.endpoints.metric.get_graph']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/version': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Display some version information */
    get: operations['cmk.gui.openapi.endpoints.version.search']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/notification_rule/collections/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show all notification rules
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Edit personal notification settings (`general.edit_notifications`): This allows a user to edit his personal notification settings. You also need the permission <i>Edit the user profile</i> in order to do this.
     *
     */
    get: operations['cmk.gui.openapi.endpoints.notification_rules.show_rules']
    put?: never
    /**
     * Create a notification rule
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Read access to all hosts and folders (`wato.see_all_folders`): Users without this permissions can only see folders with a contact group they are in.
     *        * Edit personal notification settings (`general.edit_notifications`): This allows a user to edit his personal notification settings. You also need the permission <i>Edit the user profile</i> in order to do this.
     *
     */
    post: operations['cmk.gui.openapi.endpoints.notification_rules.post_rule']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/notification_rule/{rule_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show a notification rule
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Edit personal notification settings (`general.edit_notifications`): This allows a user to edit his personal notification settings. You also need the permission <i>Edit the user profile</i> in order to do this.
     *
     */
    get: operations['cmk.gui.openapi.endpoints.notification_rules.show_rule']
    /**
     * Update a notification rule
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Read access to all hosts and folders (`wato.see_all_folders`): Users without this permissions can only see folders with a contact group they are in.
     *        * Edit personal notification settings (`general.edit_notifications`): This allows a user to edit his personal notification settings. You also need the permission <i>Edit the user profile</i> in order to do this.
     *
     */
    put: operations['cmk.gui.openapi.endpoints.notification_rules.put_rule']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/notification_rule/{rule_id}/actions/delete/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Delete a notification rule
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Read access to all hosts and folders (`wato.see_all_folders`): Users without this permissions can only see folders with a contact group they are in.
     *        * Edit personal notification settings (`general.edit_notifications`): This allows a user to edit his personal notification settings. You also need the permission <i>Edit the user profile</i> in order to do this.
     *
     */
    post: operations['cmk.gui.openapi.endpoints.notification_rules.delete_rule']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/onboarding/agent': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get info to download an agent for the onboarding
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Register all hosts & download all monitoring agents (`wato.download_all_agents`): Register all hosts with the Agent Bakery and download all monitoring agents that have been created with the Agent Bakery, even if you are not a contact for the host in question. Please note that these agents might contain confidential information such as passwords.
     *        * Manage monitoring agents (`wato.agents`): Manage customized packaged monitoring agents for Linux, Windows and other operating systems
     *
     */
    get: operations['cmk.gui.cse.onboarding.get_agent_download_info']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/parent_scan/actions/start/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Start the parent scan background job */
    post: operations['cmk.gui.openapi.endpoints.parent_scan.start_parent_scan_background_job']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/password/collections/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show all passwords
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Password management (`wato.passwords`): This permission is needed for the module <i>Passwords</i>.
     *        * Optionally:
     *          * Write access to all passwords (`wato.edit_all_passwords`): Without this permission, users can only edit passwords which are shared with a contact group they are member of. This permission grants full access to all passwords.
     *
     */
    get: operations['Passwords.list_passwords_v1']
    put?: never
    /**
     * Create a password
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Password management (`wato.passwords`): This permission is needed for the module <i>Passwords</i>.
     *        * Optionally:
     *          * Write access to all passwords (`wato.edit_all_passwords`): Without this permission, users can only edit passwords which are shared with a contact group they are member of. This permission grants full access to all passwords.
     *
     */
    post: operations['Passwords.create_password_v1']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/password/{name}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show password store entry
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Password management (`wato.passwords`): This permission is needed for the module <i>Passwords</i>.
     *        * Optionally:
     *          * Write access to all passwords (`wato.edit_all_passwords`): Without this permission, users can only edit passwords which are shared with a contact group they are member of. This permission grants full access to all passwords.
     *
     */
    get: operations['Passwords.show_password_v1']
    /**
     * Update a password
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Password management (`wato.passwords`): This permission is needed for the module <i>Passwords</i>.
     *        * Optionally:
     *          * Write access to all passwords (`wato.edit_all_passwords`): Without this permission, users can only edit passwords which are shared with a contact group they are member of. This permission grants full access to all passwords.
     *
     */
    put: operations['Passwords.update_password_v1']
    post?: never
    /**
     * Delete a password
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Password management (`wato.passwords`): This permission is needed for the module <i>Passwords</i>.
     *        * Optionally:
     *          * Write access to all passwords (`wato.edit_all_passwords`): Without this permission, users can only edit passwords which are shared with a contact group they are member of. This permission grants full access to all passwords.
     *
     */
    delete: operations['Passwords.delete_password_v1']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/quick_setup/{quick_setup_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get guided stages or overview stages */
    get: operations['cmk.gui.openapi.endpoints.quick_setup.get_guided_stages_or_overview_stages']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/quick_setup/{quick_setup_id}/quick_setup_stage/{stage_index}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get a Quick setup stage structure */
    get: operations['cmk.gui.openapi.endpoints.quick_setup.quick_setup_get_stage_structure']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/quick_setup_action_result/{job_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Fetch the Quick action background job result */
    get: operations['cmk.gui.openapi.endpoints.quick_setup.fetch_quick_setup_action_result']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/quick_setup_stage_action_result/{job_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Fetch the Quick setup stage action background job result */
    get: operations['cmk.gui.openapi.endpoints.quick_setup.fetch_quick_setup_stage_action_result']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/quick_setup/{quick_setup_id}/actions/edit/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Edit the quick setup */
    put: operations['cmk.gui.openapi.endpoints.quick_setup.edit_quick_setup_action']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/quick_setup/{quick_setup_id}/actions/run-action/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Run a quick setup action */
    post: operations['cmk.gui.openapi.endpoints.quick_setup.quick_setup_run_action']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/quick_setup/{quick_setup_id}/actions/run-stage-action/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Run a Quick setup stage validation and recap action */
    post: operations['cmk.gui.openapi.endpoints.quick_setup.quicksetup_run_stage_action']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/relay/collections/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Show all relays */
    get: operations['Relays.list_relays_v1']
    put?: never
    /** Create a relay */
    post: operations['Relays.create_relay_v1']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/relay/{relay_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Show a relay */
    get: operations['Relays.show_relay_v1']
    /** Edit a relay */
    put: operations['Relays.edit_relay_v1']
    post?: never
    /** Delete a relay */
    delete: operations['Relays.delete_relay_v1']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/rule/collections/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List rules
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Rulesets (`wato.rulesets`): Access to the module for managing Checkmk rules. Please note that a user can only manage rules in folders he has permissions to.
     *        * Optionally:
     *          * Write access to all hosts and folders (`wato.all_folders`): Without this permission, operations on folders can only be done by users that are members of one of the folders contact groups. This permission grants full access to all folders and hosts.
     *
     */
    get: operations['cmk.gui.openapi.endpoints.rule.list_rules']
    put?: never
    /**
     * Create rule
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Rulesets (`wato.rulesets`): Access to the module for managing Checkmk rules. Please note that a user can only manage rules in folders he has permissions to.
     *        * Optionally:
     *          * Write access to all hosts and folders (`wato.all_folders`): Without this permission, operations on folders can only be done by users that are members of one of the folders contact groups. This permission grants full access to all folders and hosts.
     *
     */
    post: operations['cmk.gui.openapi.endpoints.rule.create_rule']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/rule/{rule_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show a rule
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Rulesets (`wato.rulesets`): Access to the module for managing Checkmk rules. Please note that a user can only manage rules in folders he has permissions to.
     *        * Optionally:
     *          * Write access to all hosts and folders (`wato.all_folders`): Without this permission, operations on folders can only be done by users that are members of one of the folders contact groups. This permission grants full access to all folders and hosts.
     *
     */
    get: operations['cmk.gui.openapi.endpoints.rule.show_rule']
    /**
     * Modify a rule
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Rulesets (`wato.rulesets`): Access to the module for managing Checkmk rules. Please note that a user can only manage rules in folders he has permissions to.
     *        * Optionally:
     *          * Write access to all hosts and folders (`wato.all_folders`): Without this permission, operations on folders can only be done by users that are members of one of the folders contact groups. This permission grants full access to all folders and hosts.
     *
     */
    put: operations['cmk.gui.openapi.endpoints.rule.edit_rule']
    post?: never
    /**
     * Delete a rule
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Rulesets (`wato.rulesets`): Access to the module for managing Checkmk rules. Please note that a user can only manage rules in folders he has permissions to.
     *        * Optionally:
     *          * Write access to all hosts and folders (`wato.all_folders`): Without this permission, operations on folders can only be done by users that are members of one of the folders contact groups. This permission grants full access to all folders and hosts.
     *
     */
    delete: operations['cmk.gui.openapi.endpoints.rule.delete_rule']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/rule/{rule_id}/actions/move/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Move a rule to a specific location
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Rulesets (`wato.rulesets`): Access to the module for managing Checkmk rules. Please note that a user can only manage rules in folders he has permissions to.
     *        * Optionally:
     *          * Write access to all hosts and folders (`wato.all_folders`): Without this permission, operations on folders can only be done by users that are members of one of the folders contact groups. This permission grants full access to all folders and hosts.
     *
     */
    post: operations['cmk.gui.openapi.endpoints.rule.move_rule_to']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/ruleset/collections/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Search rule sets
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Rulesets (`wato.rulesets`): Access to the module for managing Checkmk rules. Please note that a user can only manage rules in folders he has permissions to.
     *        * Optionally:
     *          * Write access to all passwords (`wato.edit_all_passwords`): Without this permission, users can only edit passwords which are shared with a contact group they are member of. This permission grants full access to all passwords.
     *
     */
    get: operations['cmk.gui.openapi.endpoints.ruleset.list_rulesets']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/ruleset/{ruleset_name}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show a ruleset
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Rulesets (`wato.rulesets`): Access to the module for managing Checkmk rules. Please note that a user can only manage rules in folders he has permissions to.
     *
     */
    get: operations['cmk.gui.openapi.endpoints.ruleset.show_ruleset']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/saml_connection/collections/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show all SAML connections
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Global settings (`wato.global`): Access to the module <i>Global settings</i>
     *
     */
    get: operations['cmk.gui.cee.saml2._openapi.show_saml_connections']
    put?: never
    /**
     * Create a SAML connection
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Global settings (`wato.global`): Access to the module <i>Global settings</i>
     *
     */
    post: operations['cmk.gui.cee.saml2._openapi.create_saml_connection']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/saml_connection/{saml_connection_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show a SAML connection
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Global settings (`wato.global`): Access to the module <i>Global settings</i>
     *
     */
    get: operations['cmk.gui.cee.saml2._openapi.show_saml_connection']
    put?: never
    post?: never
    /**
     * Delete a SAML connection
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Global settings (`wato.global`): Access to the module <i>Global settings</i>
     *
     */
    delete: operations['cmk.gui.cee.saml2._openapi.delete_saml_connection']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/sla/actions/compute/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Compute the SLA data */
    post: operations['cmk.gui.cee.sla._openapi.compute_sla_rows']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/service_discovery/{host_name}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Show the current service discovery result */
    get: operations['cmk.gui.openapi.endpoints.service_discovery.show_service_discovery_result']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/service_discovery_run/{host_name}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Show the last service discovery background job on a host */
    get: operations['cmk.gui.openapi.endpoints.service_discovery.show_service_discovery_run']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/service_discovery_run/{host_name}/actions/wait-for-completion/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Wait for service discovery completion
     * @description This endpoint will periodically redirect on itself to prevent timeouts.
     */
    get: operations['cmk.gui.openapi.endpoints.service_discovery.service_discovery_run_wait_for_completion']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/host/{host_name}/actions/update_discovery_phase/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update the phase of a service
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Optionally:
     *        * Any of:
     *          * Service discovery: Move to monitored services (`wato.service_discovery_to_monitored`): Service discovery: Move to monitored services
     *          * Service discovery: Disabled services (`wato.service_discovery_to_ignored`): Service discovery: Disabled services
     *          * Service discovery: Move to undecided services (`wato.service_discovery_to_undecided`): Service discovery: Move to undecided services
     *          * Service discovery: Remove services (`wato.service_discovery_to_removed`): Service discovery: Remove services
     *
     */
    put: operations['cmk.gui.openapi.endpoints.service_discovery.update_service_phase']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/discovery_run/actions/bulk-discovery-start/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Start a bulk discovery job
     * @description This endpoint will start a bulk discovery background job. Only one bulk discovery job can run
     *     at a time. An active bulk discovery job will block other bulk discovery jobs from running until
     *     the active job is finished.
     */
    post: operations['cmk.gui.openapi.endpoints.service_discovery.execute_bulk_discovery']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/service_discovery_run/actions/start/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Execute a service discovery on a host
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Optionally:
     *          * Service discovery: Move to undecided services (`wato.service_discovery_to_undecided`): Service discovery: Move to undecided services
     *        * Optionally:
     *          * Service discovery: Move to monitored services (`wato.service_discovery_to_monitored`): Service discovery: Move to monitored services
     *        * Optionally:
     *          * Service discovery: Disabled services (`wato.service_discovery_to_ignored`): Service discovery: Disabled services
     *        * Optionally:
     *          * Service discovery: Remove services (`wato.service_discovery_to_removed`): Service discovery: Remove services
     *        * Optionally:
     *          * Manage services (`wato.services`): Do inventory and service configuration on existing hosts.
     *
     */
    post: operations['cmk.gui.openapi.endpoints.service_discovery.execute_service_discovery']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/service_group_config/collections/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show all service groups
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Host & service groups (`wato.groups`): Access to the modules for managing host and service groups.
     *
     */
    get: operations['cmk.gui.openapi.endpoints.service_group_config.list_groups']
    put?: never
    /**
     * Create a service group
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Host & service groups (`wato.groups`): Access to the modules for managing host and service groups.
     *
     */
    post: operations['cmk.gui.openapi.endpoints.service_group_config.create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/service_group_config/{name}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show a service group
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Host & service groups (`wato.groups`): Access to the modules for managing host and service groups.
     *
     */
    get: operations['cmk.gui.openapi.endpoints.service_group_config.show_group']
    /**
     * Update a service group
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Host & service groups (`wato.groups`): Access to the modules for managing host and service groups.
     *
     */
    put: operations['cmk.gui.openapi.endpoints.service_group_config.update']
    post?: never
    /**
     * Delete a service group
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Host & service groups (`wato.groups`): Access to the modules for managing host and service groups.
     *
     */
    delete: operations['cmk.gui.openapi.endpoints.service_group_config.delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/service_group_config/actions/bulk-update/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Bulk update service groups
     * @description Please be aware that when doing bulk updates, it is not possible to prevent the
     *     [Updating Values]("lost update problem"), which is normally prevented by the ETag locking
     *     mechanism. Use at your own risk.This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Host & service groups (`wato.groups`): Access to the modules for managing host and service groups.
     *
     */
    put: operations['cmk.gui.openapi.endpoints.service_group_config.bulk_update']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/service_group_config/actions/bulk-create/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Bulk create service groups
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Host & service groups (`wato.groups`): Access to the modules for managing host and service groups.
     *
     */
    post: operations['cmk.gui.openapi.endpoints.service_group_config.bulk_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/service_group_config/actions/bulk-delete/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Bulk delete service groups
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Host & service groups (`wato.groups`): Access to the modules for managing host and service groups.
     *
     */
    post: operations['cmk.gui.openapi.endpoints.service_group_config.bulk_delete']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/service/collections/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show all monitored services
     * @deprecated
     * @description `WARNING`: This URL is deprecated, see [Werk 17512](https://checkmk.com/werk/17512) for more details.
     *
     *     This list is filterable by various parameters.This endpoint requires the following permissions:
     *
     */
    get: operations['cmk.gui.openapi.endpoints.service._list_all_services_deprecated-17512']
    put?: never
    /**
     * Show all monitored services
     * @description This list is filterable by various parameters.This endpoint requires the following permissions:
     *
     */
    post: operations['cmk.gui.openapi.endpoints.service._list_all_services']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/host/{host_name}/actions/show_service/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show a single service of a specific host
     * @description
     *
     *     This endpoint requires the following permissions:
     *
     */
    get: operations['cmk.gui.openapi.endpoints.service.show_service']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/host/{host_name}/collections/services': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show the monitored services of a host
     * @deprecated
     * @description `WARNING`: This URL is deprecated, see [Werk 17512](https://checkmk.com/werk/17512) for more details.
     *
     *     This list is filterable by various parameters.This endpoint requires the following permissions:
     *
     */
    get: operations['cmk.gui.openapi.endpoints.service._list_host_services_deprecated-17512']
    put?: never
    /**
     * Show the monitored services of a host
     * @description This list is filterable by various parameters.This endpoint requires the following permissions:
     *
     */
    post: operations['cmk.gui.openapi.endpoints.service._list_host_services']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/site_connection/collections/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show all site connections
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Site management (`wato.sites`): Access to the module for managing connections to remote monitoring sites.
     *
     */
    get: operations['Site management.list_sites_connections_v1']
    put?: never
    /**
     * Create a site connection
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Site management (`wato.sites`): Access to the module for managing connections to remote monitoring sites.
     *
     */
    post: operations['Site management.create_site_connection_v1']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/site_connection/{site_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show a site connection
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Site management (`wato.sites`): Access to the module for managing connections to remote monitoring sites.
     *
     */
    get: operations['Site management.show_site_connection_v1']
    /**
     * Edit a site connection
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Site management (`wato.sites`): Access to the module for managing connections to remote monitoring sites.
     *
     */
    put: operations['Site management.edit_site_connection_v1']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/site_connection/{site_id}/actions/delete/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Delete a site connection
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Site management (`wato.sites`): Access to the module for managing connections to remote monitoring sites.
     *
     */
    post: operations['Site management.delete_site_connection_v1']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/site_connection/{site_id}/actions/login/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Login to a remote site
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * User management (`wato.users`): This permission is needed for the modules <b>Users</b>, <b>Roles</b> and <b>Contact groups</b>
     *        * Site management (`wato.sites`): Access to the module for managing connections to remote monitoring sites.
     *
     */
    post: operations['Site management.site_connection_login_v1']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/site_connection/{site_id}/actions/logout/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Logout from a remote site
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Site management (`wato.sites`): Access to the module for managing connections to remote monitoring sites.
     *
     */
    post: operations['Site management.site_connection_logout_v1']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/time_period/collections/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show all time periods
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Time periods (`wato.timeperiods`): Access to the module <i>Time periods</i>
     *
     */
    get: operations['cmk.gui.openapi.endpoints.time_periods.list_time_periods']
    put?: never
    /**
     * Create a time period
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Optionally:
     *          * Write access to all passwords (`wato.edit_all_passwords`): Without this permission, users can only edit passwords which are shared with a contact group they are member of. This permission grants full access to all passwords.
     *        * Time periods (`wato.timeperiods`): Access to the module <i>Time periods</i>
     *
     */
    post: operations['cmk.gui.openapi.endpoints.time_periods.create_timeperiod']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/time_period/{name}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show a time period
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Time periods (`wato.timeperiods`): Access to the module <i>Time periods</i>
     *
     */
    get: operations['cmk.gui.openapi.endpoints.time_periods.show_time_period']
    /**
     * Update a time period
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Optionally:
     *          * Write access to all passwords (`wato.edit_all_passwords`): Without this permission, users can only edit passwords which are shared with a contact group they are member of. This permission grants full access to all passwords.
     *        * Time periods (`wato.timeperiods`): Access to the module <i>Time periods</i>
     *
     */
    put: operations['cmk.gui.openapi.endpoints.time_periods.update_timeperiod']
    post?: never
    /**
     * Delete a time period
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * Optionally:
     *          * Write access to all passwords (`wato.edit_all_passwords`): Without this permission, users can only edit passwords which are shared with a contact group they are member of. This permission grants full access to all passwords.
     *        * Time periods (`wato.timeperiods`): Access to the module <i>Time periods</i>
     *
     */
    delete: operations['cmk.gui.openapi.endpoints.time_periods.delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/user_role/collections/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show all user roles
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * User management (`wato.users`): This permission is needed for the modules <b>Users</b>, <b>Roles</b> and <b>Contact groups</b>
     *
     */
    get: operations['User Roles.list_user_roles_v1']
    put?: never
    /**
     * Create a user role
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * User management (`wato.users`): This permission is needed for the modules <b>Users</b>, <b>Roles</b> and <b>Contact groups</b>
     *
     */
    post: operations['User Roles.create_user_role_v1']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/user_role/{role_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show a user role
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * User management (`wato.users`): This permission is needed for the modules <b>Users</b>, <b>Roles</b> and <b>Contact groups</b>
     *
     */
    get: operations['User Roles.show_user_role_v1']
    /**
     * Edit a user role
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * User management (`wato.users`): This permission is needed for the modules <b>Users</b>, <b>Roles</b> and <b>Contact groups</b>
     *
     */
    put: operations['User Roles.edit_user_role_v1']
    post?: never
    /**
     * Delete a user role
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * User management (`wato.users`): This permission is needed for the modules <b>Users</b>, <b>Roles</b> and <b>Contact groups</b>
     *
     */
    delete: operations['User Roles.delete_user_role_v1']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/user_config/collections/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show all users
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * User management (`wato.users`): This permission is needed for the modules <b>Users</b>, <b>Roles</b> and <b>Contact groups</b>
     *
     */
    get: operations['cmk.gui.openapi.endpoints.user_config.list_users']
    put?: never
    /**
     * Create a user
     * @description You can pass custom attributes you defined directly in the top level JSON object of the request.This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * User management (`wato.users`): This permission is needed for the modules <b>Users</b>, <b>Roles</b> and <b>Contact groups</b>
     *        * Optionally:
     *          * Host & service groups (`wato.groups`): Access to the modules for managing host and service groups.
     *
     */
    post: operations['cmk.gui.openapi.endpoints.user_config.create_user']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/user_config/{username}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show a user
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * User management (`wato.users`): This permission is needed for the modules <b>Users</b>, <b>Roles</b> and <b>Contact groups</b>
     *
     */
    get: operations['cmk.gui.openapi.endpoints.user_config.show_user']
    /**
     * Edit a user
     * @description You can pass custom attributes you defined directly in the top level JSON object of the request.This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * User management (`wato.users`): This permission is needed for the modules <b>Users</b>, <b>Roles</b> and <b>Contact groups</b>
     *
     */
    put: operations['cmk.gui.openapi.endpoints.user_config.edit_user']
    post?: never
    /**
     * Delete a user
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * All of:
     *        * Make changes, perform actions (`wato.edit`): This permission is needed in order to make any changes or perform any actions at all. Without this permission, the user is only able to view data, and that only in modules he has explicit permissions for.
     *        * User management (`wato.users`): This permission is needed for the modules <b>Users</b>, <b>Roles</b> and <b>Contact groups</b>
     *
     */
    delete: operations['cmk.gui.openapi.endpoints.user_config.delete_user']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/user_config/actions/dismiss-warning/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Save a warning dismissal for the current user. */
    post: operations['cmk.gui.openapi.endpoints.user_config.dismiss_user_warning']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/visual_filter/collections/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Show all filter configurations.
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Optionally:
     *        * All of:
     *          * See all host and services (`general.see_all`): See all objects regardless of contacts and contact groups. If combined with 'perform commands' then commands may be done on all objects.
     *          * See all hosts and services (`bi.see_all`): With this permission set, the BI aggregation rules are applied to all hosts and services - not only those the user is a contact for. If you remove this permissions then the user will see incomplete aggregation trees with status based only on those items.
     *          * See all events (`mkeventd.seeall`): If a user lacks this permission then he/she can see only those events that originate from a host that he/she is a contact for.
     *
     */
    get: operations['Visual Filters.list_filters_v1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/otel_collector_config/collections/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List all configurations for OpenTelemetry collector
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Manage OpenTelemetry configurations (experimental) (`wato.otel_collector`): Add, edit and delete OpenTelemetry configurations.
     *
     */
    get: operations['open-telemetry.handler_list']
    put?: never
    /**
     * Create a new OpenTelemetry collector configuration
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Manage OpenTelemetry configurations (experimental) (`wato.otel_collector`): Add, edit and delete OpenTelemetry configurations.
     *
     */
    post: operations['open-telemetry.handler_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objects/otel_collector_config/{config_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update an OpenTelemetry collector configuration
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Manage OpenTelemetry configurations (experimental) (`wato.otel_collector`): Add, edit and delete OpenTelemetry configurations.
     *
     */
    put: operations['open-telemetry.handler_update']
    post?: never
    /**
     * Delete an OpenTelemetry collector configuration
     * @description
     *
     *     This endpoint requires the following permissions:
     *      * Manage OpenTelemetry configurations (experimental) (`wato.otel_collector`): Add, edit and delete OpenTelemetry configurations.
     *
     */
    delete: operations['open-telemetry.handler_delete']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/domain-types/metric/actions/get_custom_graph/invoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Get a custom graph
     * @description Custom graphs can be created within Checkmk, see [Checkmk
     *     guide](https://docs.checkmk.com/latest/en/graphing.html#custom_graphs) for
     *     an introduction.
     */
    post: operations['cmk.gui.cee.openapi.endpoints.metric.get_custom_graph']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    ViaSpecificHost: {
      /**
       * @description Select a specific host. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      acknowledge_type: 'host'
      /**
       * @description The name of the host.
       * @example example.com
       */
      host_name: string
    }
    ViaHostGroup: {
      /**
       * @description Select all hosts in a host group. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      acknowledge_type: 'hostgroup'
      /**
       * @description Host group name for which this acknowledgement is for.
       * @example Servers
       */
      hostgroup_name: string
    }
    BinaryExpr: {
      /**
       * @description The operator. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      op:
        | '='
        | '~'
        | '~~'
        | '<'
        | '>'
        | '>='
        | '<='
        | '!='
        | '!~'
        | '!~~'
        | '!<'
        | '!>'
        | '!>='
        | '!<='
      /**
       * @description The LiveStatus column name.
       * @example name
       */
      left?: string
      /** @description The value to compare the column to. */
      right?: string
    }
    Expr:
      | components['schemas']['LogicalExpr']
      | components['schemas']['LogicalExpr']
      | components['schemas']['NotExpr']
      | components['schemas']['BinaryExpr']
      | components['schemas']['BinaryExpr']
      | components['schemas']['BinaryExpr']
      | components['schemas']['BinaryExpr']
      | components['schemas']['BinaryExpr']
      | components['schemas']['BinaryExpr']
      | components['schemas']['BinaryExpr']
      | components['schemas']['BinaryExpr']
      | components['schemas']['BinaryExpr']
      | components['schemas']['BinaryExpr']
      | components['schemas']['BinaryExpr']
      | components['schemas']['BinaryExpr']
      | components['schemas']['BinaryExpr']
      | components['schemas']['BinaryExpr']
    NotExpr: {
      /**
       * @description The operator. In this case `not`. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      op: 'not'
      /** @description The query expression to negate. */
      expr?: components['schemas']['Expr']
    }
    LogicalExpr: {
      /**
       * @description The operator. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      op: 'and' | 'or'
      expr?: components['schemas']['Expr'][]
    }
    ViaHostQuery: {
      /**
       * @description Select hosts with a query. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      acknowledge_type: 'host_by_query'
      /**
       * @description An query expression of the Livestatus 'hosts' table in nested dictionary form. If you want to use multiple expressions, nest them with the AND/OR operators.
       * @example {"op": "and", "expr": [{"op": "=", "left": "name", "right": "example.com"}, {"op": "!=", "left": "state", "right": "0"}]}
       */
      query: components['schemas']['Expr']
    }
    ViaSpecificService: {
      /**
       * @description Select a specific service on a host. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      acknowledge_type: 'service'
      /**
       * @description The name of the host.
       * @example example.com
       */
      host_name: string
      /**
       * @description The acknowledgement process will be applied to all matching service names
       * @example CPU load
       */
      service_description: string
    }
    ViaServiceGroup: {
      /**
       * @description Select all services in a service group. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      acknowledge_type: 'servicegroup'
      /**
       * @description The name of the service group. Any host having a service in this group will be A downtime will be scheduled for all hosts in this group.
       * @example windows
       */
      servicegroup_name: string
    }
    ViaServiceQuery: {
      /**
       * @description Select services with a query. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      acknowledge_type: 'service_by_query'
      /**
       * @description An query expression of the Livestatus 'services' table in nested dictionary form. If you want to use multiple expressions, nest them with the AND/OR operators.
       * @example {"op": "=", "left": "description", "right": "Service description"}
       */
      query: components['schemas']['Expr']
    }
    RemoveProblemAcknowledgement:
      | components['schemas']['ViaSpecificHost']
      | components['schemas']['ViaHostGroup']
      | components['schemas']['ViaHostQuery']
      | components['schemas']['ViaSpecificService']
      | components['schemas']['ViaServiceGroup']
      | components['schemas']['ViaServiceQuery']
    Api406DefaultError: {
      /**
       * @description The HTTP status code.
       * @example 406
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example The requests accept headers can not be satisfied.
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Not Acceptable
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    Api400DefaultError: {
      /**
       * @description The HTTP status code.
       * @example 400
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example Parameter or validation failure.
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Bad Request
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    Api415DefaultError: {
      /**
       * @description The HTTP status code.
       * @example 415
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example The submitted content-type is not supported.
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Unsupported Media Type
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    AcknowledgeHostProblem: {
      /**
       * @description If set, only a state-change to the UP/OK state will discard the acknowledgement. Otherwise, it will be discarded on any state-change.
       * @default true
       * @example false
       */
      sticky: boolean
      /**
       * @description If set, the comment will persist a restart.
       * @default false
       * @example false
       */
      persistent: boolean
      /**
       * @description If set, notifications will be sent out to the configured contacts.
       * @default true
       * @example false
       */
      notify: boolean
      /**
       * @description Comment to be stored alongside the acknowledgement.
       * @example This was expected.
       */
      comment: string
      /**
       * Format: date-time
       * @description If set, the acknowledgement will expire at this time. The timezone will default to UTC.
       * @example 2025-05-20T07:30:00Z
       */
      expire_on?: string
      /**
       * @description Select a specific host. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      acknowledge_type: 'host'
      /**
       * @description The name of the host.
       * @example example.com
       */
      host_name: string
    }
    AcknowledgeHostGroupProblem: {
      /**
       * @description If set, only a state-change to the UP/OK state will discard the acknowledgement. Otherwise, it will be discarded on any state-change.
       * @default true
       * @example false
       */
      sticky: boolean
      /**
       * @description If set, the comment will persist a restart.
       * @default false
       * @example false
       */
      persistent: boolean
      /**
       * @description If set, notifications will be sent out to the configured contacts.
       * @default true
       * @example false
       */
      notify: boolean
      /**
       * @description Comment to be stored alongside the acknowledgement.
       * @example This was expected.
       */
      comment: string
      /**
       * Format: date-time
       * @description If set, the acknowledgement will expire at this time. The timezone will default to UTC.
       * @example 2025-05-20T07:30:00Z
       */
      expire_on?: string
      /**
       * @description Select all hosts in a host group. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      acknowledge_type: 'hostgroup'
      /**
       * @description Host group name for which this acknowledgement is for.
       * @example Servers
       */
      hostgroup_name: string
    }
    AcknowledgeHostQueryProblem: {
      /**
       * @description If set, only a state-change to the UP/OK state will discard the acknowledgement. Otherwise, it will be discarded on any state-change.
       * @default true
       * @example false
       */
      sticky: boolean
      /**
       * @description If set, the comment will persist a restart.
       * @default false
       * @example false
       */
      persistent: boolean
      /**
       * @description If set, notifications will be sent out to the configured contacts.
       * @default true
       * @example false
       */
      notify: boolean
      /**
       * @description Comment to be stored alongside the acknowledgement.
       * @example This was expected.
       */
      comment: string
      /**
       * Format: date-time
       * @description If set, the acknowledgement will expire at this time. The timezone will default to UTC.
       * @example 2025-05-20T07:30:00Z
       */
      expire_on?: string
      /**
       * @description Select hosts with a query. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      acknowledge_type: 'host_by_query'
      /**
       * @description An query expression of the Livestatus 'hosts' table in nested dictionary form. If you want to use multiple expressions, nest them with the AND/OR operators.
       * @example {"op": "and", "expr": [{"op": "=", "left": "name", "right": "example.com"}, {"op": "!=", "left": "state", "right": "0"}]}
       */
      query: components['schemas']['Expr']
    }
    AcknowledgeHostRelatedProblem:
      | components['schemas']['AcknowledgeHostProblem']
      | components['schemas']['AcknowledgeHostGroupProblem']
      | components['schemas']['AcknowledgeHostQueryProblem']
    Api422CustomError: {
      /**
       * @description The HTTP status code.
       * @example 422
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example The query yielded no result.
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Unprocessable Entity
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    AcknowledgeSpecificServiceProblem: {
      /**
       * @description If set, only a state-change to the UP/OK state will discard the acknowledgement. Otherwise, it will be discarded on any state-change.
       * @default true
       * @example false
       */
      sticky: boolean
      /**
       * @description If set, the comment will persist a restart.
       * @default false
       * @example false
       */
      persistent: boolean
      /**
       * @description If set, notifications will be sent out to the configured contacts.
       * @default true
       * @example false
       */
      notify: boolean
      /**
       * @description Comment to be stored alongside the acknowledgement.
       * @example This was expected.
       */
      comment: string
      /**
       * Format: date-time
       * @description If set, the acknowledgement will expire at this time. The timezone will default to UTC.
       * @example 2025-05-20T07:30:00Z
       */
      expire_on?: string
      /**
       * @description Select a specific service on a host. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      acknowledge_type: 'service'
      /**
       * @description The name of the host.
       * @example example.com
       */
      host_name: string
      /**
       * @description The acknowledgement process will be applied to all matching service names
       * @example CPU load
       */
      service_description: string
    }
    AcknowledgeServiceGroupProblem: {
      /**
       * @description If set, only a state-change to the UP/OK state will discard the acknowledgement. Otherwise, it will be discarded on any state-change.
       * @default true
       * @example false
       */
      sticky: boolean
      /**
       * @description If set, the comment will persist a restart.
       * @default false
       * @example false
       */
      persistent: boolean
      /**
       * @description If set, notifications will be sent out to the configured contacts.
       * @default true
       * @example false
       */
      notify: boolean
      /**
       * @description Comment to be stored alongside the acknowledgement.
       * @example This was expected.
       */
      comment: string
      /**
       * Format: date-time
       * @description If set, the acknowledgement will expire at this time. The timezone will default to UTC.
       * @example 2025-05-20T07:30:00Z
       */
      expire_on?: string
      /**
       * @description Select all services in a service group. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      acknowledge_type: 'servicegroup'
      /**
       * @description The name of the service group. Any host having a service in this group will be A downtime will be scheduled for all hosts in this group.
       * @example windows
       */
      servicegroup_name: string
    }
    AcknowledgeServiceQueryProblem: {
      /**
       * @description If set, only a state-change to the UP/OK state will discard the acknowledgement. Otherwise, it will be discarded on any state-change.
       * @default true
       * @example false
       */
      sticky: boolean
      /**
       * @description If set, the comment will persist a restart.
       * @default false
       * @example false
       */
      persistent: boolean
      /**
       * @description If set, notifications will be sent out to the configured contacts.
       * @default true
       * @example false
       */
      notify: boolean
      /**
       * @description Comment to be stored alongside the acknowledgement.
       * @example This was expected.
       */
      comment: string
      /**
       * Format: date-time
       * @description If set, the acknowledgement will expire at this time. The timezone will default to UTC.
       * @example 2025-05-20T07:30:00Z
       */
      expire_on?: string
      /**
       * @description Select services with a query. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      acknowledge_type: 'service_by_query'
      /**
       * @description An query expression of the Livestatus 'services' table in nested dictionary form. If you want to use multiple expressions, nest them with the AND/OR operators.
       * @example {"op": "=", "left": "description", "right": "Service description"}
       */
      query: components['schemas']['Expr']
    }
    AcknowledgeServiceRelatedProblem:
      | components['schemas']['AcknowledgeSpecificServiceProblem']
      | components['schemas']['AcknowledgeServiceGroupProblem']
      | components['schemas']['AcknowledgeServiceQueryProblem']
    Api422CustomError1: {
      /**
       * @description The HTTP status code.
       * @example 422
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example Service was not in a problem state.
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Unprocessable Entity
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    Api403DefaultError: {
      /**
       * @description The HTTP status code.
       * @example 403
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example Configuration via Setup is disabled.
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Forbidden
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    Link: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      domainType: 'link'
      /**
       * @description Indicates the nature of the relationship of the related resource to the resource that generated this representation
       * @example self
       */
      rel: string
      /**
       * @description The (absolute) address of the related resource. Any characters that are invalid in URLs must be URL encoded.
       * @example https://.../api_resource
       */
      href: string
      /**
       * @description The HTTP method to use to traverse the link (get, post, put or delete)
       * @example GET
       * @enum {string}
       */
      method: 'GET' | 'PUT' | 'POST' | 'DELETE'
      /**
       * @description The content-type that the linked resource will return
       * @example application/json
       */
      type: string
      /**
       * @description string that the consuming application may use to render the link without having to traverse the link in advance
       * @example The object itself
       */
      title?: string | null
      /** @description A map of values that shall be sent in the request body. If this is present,the request has to be sent with a content-type of 'application/json'. */
      body_params?: {
        [key: string]: unknown
      }
    }
    ChangesFields: {
      /**
       * Format: uuid
       * @description The change identifier
       * @example ad9c9b13-52f2-4fb8-8f4f-7b2ae48c7984
       */
      id?: string
      /**
       * @description The user who made the change
       * @example cmkadmin
       */
      user_id?: string | null
      /**
       * @description The action carried out
       * @example edit-host
       */
      action_name?: string
      /** @example Modified host heute. */
      text?: string
      /**
       * Format: date-time
       * @description The date and time the change was made.
       * @example 2023-02-21T17:32:28+00:00
       */
      time?: string
    }
    PendingChangesCollection: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The domain type of the objects in the collection.
       * @default activation_run
       */
      domainType: unknown
      /**
       * @description The changes that are pending
       * @example [
       *       {
       *         "id": "da5430a5-6d0a-48ae-9efd-0563482a3b36",
       *         "action_name": "create-host",
       *         "text": "Created new host foobar.",
       *         "user_id": "cmkadmin",
       *         "time": "2023-01-20T16:31:51.362057+00:00"
       *       },
       *       {
       *         "id": "4ba28393-567e-4a9a-9368-e600d28c2a7e",
       *         "action_name": "edit-host",
       *         "text": "Modified host foobar.",
       *         "user_id": "cmkadmin",
       *         "time": "2023-01-20T16:32:12.362057+00:00"
       *       }
       *     ]
       */
      value?: components['schemas']['ChangesFields'][]
      /** @description Additional attributes alongside the collection. */
      extensions?: {
        [key: string]: unknown
      }
    }
    ActivationSiteStatus: {
      /**
       * @description The site affected by this activation
       * @example heute
       */
      site?: string
      /**
       * @description The phase
       * @example done
       * @enum {string|null}
       */
      phase?:
        | 'initialized'
        | 'queued'
        | 'started'
        | 'sync'
        | 'activate'
        | 'finishing'
        | 'done'
        | null
      /**
       * @description The state
       * @example success
       * @enum {string|null}
       */
      state?: 'success' | 'error' | 'warning' | null
      /**
       * @description The status text
       * @example Activating
       */
      status_text?: string | null
      /**
       * @description The status details
       * @example Started at: 15:23:10. Finished at: 15:23:12.
       */
      status_details?: string
      /**
       * Format: date-time
       * @description The date and time the activation started.
       * @example 2025-03-03T17:31:24+00:00
       */
      start_time?: string
      /**
       * Format: date-time
       * @description The date and time the activation ended.
       * @example 2023-03-03T17:31:41+00:00
       */
      end_time?: string | null
    }
    ActivationExtensionStatusFields: {
      /**
       * @description Sites affected by this activation
       * @example [
       *       "site1",
       *       "site2"
       *     ]
       */
      sites?: string[]
      /**
       * @description If the activation is still running
       * @example false
       */
      is_running?: boolean
      /**
       * @description A boolean flag indicating that even changes which do not originate from the user requesting the activation shall be activated
       * @example false
       */
      force_foreign_changes?: boolean
      /**
       * Format: date-time
       * @description The date and time the activation started.
       * @example 2023-02-21T17:34:12+00:00
       */
      time_started?: string
      /** @description The changes in this activation */
      changes?: components['schemas']['ChangesFields'][]
      /**
       * @description A list of sites with their activation status.
       * @example [
       *       {
       *         "site": "heute",
       *         "status_text": "Activating",
       *         "status_details": "Started at: 15:23:09. Finished at: 15:23:13.",
       *         "start_time": "2025-01-20T15:23:09.306846+00:00",
       *         "end_time": "2025-01-20T15:23:13.306846+00:00"
       *       },
       *       {
       *         "site": "morgen",
       *         "status_text": "Activating",
       *         "status_details": "Started at: 12:45:05. Finished at: 12:46:12.",
       *         "start_time": "2025-01-20T12:45:05.306846+00:00",
       *         "end_time": "2025-01-20T12:45:12.306846+00:00"
       *       }
       *     ]
       */
      status_per_site?: components['schemas']['ActivationSiteStatus'][]
    }
    ActivationStatusResponse: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The domain type of the object.
       * @default activation_run
       */
      domainType: unknown
      /**
       * Format: uuid
       * @description The unique identifier for this activation run.
       * @example 84b18e42-355e-4f13-80b6-404bd8f21149
       */
      id?: string
      /**
       * @description The activation run status.
       * @example Activation status: In progress.
       */
      title?: string
      /** @description The container for external resources, like linked foreign objects or actions. */
      members?: {
        [key: string]: unknown
      }
      /**
       * @description The activation run attributes with status.
       * @example {
       *       "changes": [
       *         {
       *           "id": "da5430a5-6d0a-48ae-9efd-0563482a3b36",
       *           "action_name": "edit-host",
       *           "text": "Modified host heute.",
       *           "user_id": "cmkadmin",
       *           "time": "2023-01-20T16:31:51.362057+00:00"
       *         }
       *       ],
       *       "is_running": false,
       *       "activate_foreign": true,
       *       "time_started": "2023-01-20T16:31:54.306846+00:00",
       *       "sites": [
       *         "heute"
       *       ],
       *       "comment": "",
       *       "status_per_site": [
       *         {
       *           "site": "heute",
       *           "status_text": "Activating",
       *           "status_details": "Started at: 15:23:09. Finished at: 15:23:13.",
       *           "start_time": "2025-01-20T15:23:09.306846+00:00",
       *           "end_time": "2025-01-20T15:23:13.306846+00:00"
       *         },
       *         {
       *           "site": "morgen",
       *           "status_text": "Activating",
       *           "status_details": "Started at: 12:45:05. Finished at: 12:46:12.",
       *           "start_time": "2025-01-20T12:45:05.306846+00:00",
       *           "end_time": "2025-01-20T12:45:12.306846+00:00"
       *         }
       *       ]
       *     }
       */
      extensions?: components['schemas']['ActivationExtensionStatusFields']
    }
    ActivationRunCollection: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /** @description The name of this collection. */
      id?: string
      /**
       * @description The domain type of the objects in the collection.
       * @default activation_run
       */
      domainType: unknown
      /**
       * @description A list of activation runs.
       * @example [
       *       {
       *         "links": [
       *           {
       *             "domainType": "link",
       *             "rel": "self",
       *             "href": "http://localhost/heute/check_mk/api/1.0/objects/activation_run/b0a0bf49-ff5f-454b-a5d5-9731cb0fb5fa",
       *             "method": "GET",
       *             "type": "application/json"
       *           }
       *         ],
       *         "domainType": "activation_run",
       *         "id": "b0a0bf49-ff5f-454b-a5d5-9731cb0fb5fa",
       *         "title": "test-title",
       *         "members": {},
       *         "extensions": {
       *           "changes": [
       *             {
       *               "id": "da5430a5-6d0a-48ae-9efd-0563482a3b36",
       *               "action_name": "edit-host",
       *               "text": "Modified host heute.",
       *               "user_id": "cmkadmin",
       *               "time": "2023-01-20T16:31:51.362057+00:00"
       *             }
       *           ],
       *           "is_running": false,
       *           "activate_foreign": true,
       *           "time_started": "2023-01-20T16:31:54.306846+00:00",
       *           "sites": [
       *             "heute"
       *           ],
       *           "comment": "",
       *           "status_per_site": [
       *             {
       *               "site": "heute",
       *               "status_text": "Activating",
       *               "status_details": "Started at: 15:23:09. Finished at: 15:23:13.",
       *               "start_time": "2025-01-20T15:23:09.306846+00:00",
       *               "end_time": "2025-01-20T15:23:13.306846+00:00"
       *             },
       *             {
       *               "site": "morgen",
       *               "status_text": "Activating",
       *               "status_details": "Started at: 12:45:05. Finished at: 12:46:12.",
       *               "start_time": "2025-01-20T12:45:05.306846+00:00",
       *               "end_time": "2025-01-20T12:45:12.306846+00:00"
       *             }
       *           ]
       *         }
       *       }
       *     ]
       */
      value?: components['schemas']['ActivationStatusResponse'][]
      /** @description Additional attributes alongside the collection. */
      extensions?: {
        [key: string]: unknown
      }
    }
    Api404CustomError: {
      /**
       * @description The HTTP status code.
       * @example 404
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example There is no running activation with this activation_id.
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Not Found
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    Api404CustomError1: {
      /**
       * @description The HTTP status code.
       * @example 404
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example There is no running activation with this activation_id.
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Not Found
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    ActivateChanges: {
      /**
       * @description After starting the activation, redirect immediately to the 'Wait for completion' endpoint.
       * @default false
       * @example false
       */
      redirect: boolean
      /**
       * @description The names of the sites on which the configuration shall be activated. An empty list means all sites which have pending changes.
       * @example [
       *       "production"
       *     ]
       */
      sites?: string[]
      /**
       * @description Will activate changes even if the user who made those changes is not the currently logged in user.
       * @default false
       * @example false
       */
      force_foreign_changes: boolean
    }
    Api401CustomError: {
      /**
       * @description The HTTP status code.
       * @example 401
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example The API user may not activate another users changes, or the user may and activation was not forced explicitly.
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Unauthorized
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    Api403CustomError: {
      /**
       * @description The HTTP status code.
       * @example 403
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example Activation not possible because of licensing issues.
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Forbidden
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    Api409CustomError: {
      /**
       * @description The HTTP status code.
       * @example 409
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example Some sites could not be activated.
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Conflict
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    Api412DefaultError: {
      /**
       * @description The HTTP status code.
       * @example 412
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example The value of the If-Match header doesn't match the object's ETag.
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Precondition Failed
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    Api422CustomError2: {
      /**
       * @description The HTTP status code.
       * @example 422
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example There are no changes to be activated.
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Unprocessable Entity
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    Api423CustomError: {
      /**
       * @description The HTTP status code.
       * @example 423
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example There is already an activation running.
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Locked
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    Api428DefaultError: {
      /**
       * @description The HTTP status code.
       * @example 428
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example The required If-Match header is missing.
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Precondition Required
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    ActivationExtensionFields: {
      /**
       * @description Sites affected by this activation
       * @example [
       *       "site1",
       *       "site2"
       *     ]
       */
      sites?: string[]
      /**
       * @description If the activation is still running
       * @example false
       */
      is_running?: boolean
      /**
       * @description A boolean flag indicating that even changes which do not originate from the user requesting the activation shall be activated
       * @example false
       */
      force_foreign_changes?: boolean
      /**
       * Format: date-time
       * @description The date and time the activation started.
       * @example 2023-02-21T17:34:12+00:00
       */
      time_started?: string
      /** @description The changes in this activation */
      changes?: components['schemas']['ChangesFields'][]
    }
    ActivationRunResponse: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The domain type of the object.
       * @default activation_run
       */
      domainType: unknown
      /**
       * Format: uuid
       * @description The unique identifier for this activation run.
       * @example 84b18e42-355e-4f13-80b6-404bd8f21149
       */
      id?: string
      /**
       * @description The activation run status.
       * @example Activation status: In progress.
       */
      title?: string
      /** @description The container for external resources, like linked foreign objects or actions. */
      members?: {
        [key: string]: unknown
      }
      /**
       * @description The activation run attributes.
       * @example {
       *       "changes": [
       *         {
       *           "id": "da5430a5-6d0a-48ae-9efd-0563482a3b36",
       *           "action_name": "edit-host",
       *           "text": "Modified host heute.",
       *           "user_id": "cmkadmin",
       *           "time": "2023-01-20T16:31:51.362057+00:00"
       *         }
       *       ],
       *       "is_running": false,
       *       "activate_foreign": true,
       *       "time_started": "2023-01-20T16:31:54.306846+00:00",
       *       "sites": [
       *         "heute"
       *       ],
       *       "comment": ""
       *     }
       */
      extensions?: components['schemas']['ActivationExtensionFields']
    }
    ActionResultObjectValue: {
      links: components['schemas']['Link'][]
      /** @example {
       *       "duration": "5 seconds."
       *     } */
      value: {
        [key: string]: unknown
      }
    }
    ActionResultObject: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The type of the result.
       * @enum {string}
       */
      resultType?: 'object' | 'scalar'
      /**
       * @description Some attributes alongside the result.
       * @example {
       *       "some": "values"
       *     }
       */
      extensions?: {
        [key: string]: unknown
      }
      /** @description The result of the action. In this case, an object. */
      result?: components['schemas']['ActionResultObjectValue']
    }
    Api404DefaultError: {
      /**
       * @description The HTTP status code.
       * @example 404
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example The requested object has not be found.
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Not Found
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    AgentObject: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The domain type of the object.
       * @default agent
       */
      domainType: unknown
      /** @description The unique identifier for this domain-object type. */
      id?: string
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description The container for external resources, like linked foreign objects or actions. */
      members?: {
        [key: string]: unknown
      }
      /** @description All the attributes of the domain object. */
      extensions?: {
        [key: string]: unknown
      }
    }
    AgentCollection: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The name of this collection.
       * @default all
       */
      id: string
      /**
       * @description The domain type of the objects in the collection.
       * @default agent
       */
      domainType: unknown
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description A list of agent objects. */
      value?: components['schemas']['AgentObject'][]
      /** @description Additional attributes alongside the collection. */
      extensions?: {
        [key: string]: unknown
      }
    }
    DomainObject: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /** @description The "domain-type" of the object. */
      domainType: string
      /** @description The unique identifier for this domain-object type. */
      id?: string
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description The container for external resources, like linked foreign objects or actions. */
      members?: {
        [key: string]: unknown
      }
      /** @description All the attributes of the domain object. */
      extensions?: {
        [key: string]: unknown
      }
    }
    Api409DefaultError: {
      /**
       * @description The HTTP status code.
       * @example 409
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example The request is in conflict with the stored resource.
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Conflict
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    ActionResultScalarValue: {
      links: components['schemas']['Link'][]
      /** @example Done. */
      value: string
    }
    ActionResultScalar: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The type of the result.
       * @enum {string}
       */
      resultType?: 'object' | 'scalar'
      /**
       * @description Some attributes alongside the result.
       * @example {
       *       "some": "values"
       *     }
       */
      extensions?: {
        [key: string]: unknown
      }
      /** @description The scalar result of the action. */
      result?: components['schemas']['ActionResultScalarValue']
    }
    AgentSign: {
      /**
       * @description The id under that the desired agent signature key is stored
       * @example 42
       */
      key_id: number
      /**
       * @description The password to unlock the agent signature key
       * @example sw0rdfish
       */
      passphrase: string
    }
    AuditLogExtension: {
      /** @description Timestamp of when the event occurred */
      time?: number
      /** @description User id of whom provoked the event */
      user_id?: string
      /** @description Action that was performed */
      action?: string
      /** @description Summary of the event */
      summary?: string
      /** @description Details of the event */
      details?: string
      /** @description Object type associated to the event */
      object_type?: string | null
      /** @description Object name associated to the event */
      object_name?: string | null
    }
    AuditLogEntry: {
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description Data and Meta-Data of this audit log entry. */
      extensions?: components['schemas']['AuditLogExtension']
    }
    AuditLogEntryCollection: {
      /** @description A list of audit log objects. */
      value?: components['schemas']['AuditLogEntry'][]
    }
    Params: {
      /**
       * @description Whether to use strict matching
       * @example true
       */
      strict?: unknown
      /**
       * @description The group type
       * @example host
       */
      group_type?: string
      /**
       * @description The group id
       * @example my_group
       */
      group_id?: string
      /**
       * @description World field
       * @example Earth
       */
      world?: string
      /**
       * @description Presentation field
       * @example lines
       */
      presentation?: string
      /**
       * @description Mode field
       * @example template
       */
      mode?: string
      /**
       * @description Datasource field
       * @example services
       */
      datasource?: string
      /**
       * @description Single infos field
       * @example [
       *       "my_info"
       *     ]
       */
      single_infos?: string[]
    } & {
      [key: string]: unknown
    }
    Request: {
      /**
       * @description Value used for filtering autocomplete results
       * @default
       * @example central_site
       */
      value: string
      /**
       * @description Parameters related to the autocompleter being invoked
       * @example {
       *       "strict": false,
       *       "context": {}
       *     }
       */
      parameters?: components['schemas']['Params']
    }
    Choice: {
      /** @description The id of the choice. */
      id?: string
      /** @description The display value of the choice. */
      value?: string
    }
    Response: {
      /** @description A list of choices. */
      choices?: components['schemas']['Choice'][]
    }
    AuxTagAttrsResponse: {
      /**
       * @description Different tags can be grouped in topics to make the visualization and selections in the GUI more comfortable
       * @example Monitoring agents
       */
      topic: string
      /**
       * @description The help of the Auxiliary tag
       * @example AuxTagExampleHelp
       */
      help: string
    }
    AuxTagResponse: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The domain type of the object.
       * @default aux_tag
       */
      domainType: unknown
      /** @description The unique identifier for this domain-object type. */
      id?: string
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description The container for external resources, like linked foreign objects or actions. */
      members?: {
        [key: string]: unknown
      }
      /**
       * @description The Auxiliary Tag attributes.
       * @example {
       *       "id": "snmp",
       *       "title": "Monitoring via SNMP",
       *       "topic": "Monitoring agents",
       *       "help": "Your help text"
       *     }
       */
      extensions?: components['schemas']['AuxTagAttrsResponse']
    }
    AuxTagResponseCollection: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The name of this collection.
       * @default all
       */
      id: string
      /**
       * @description The domain type of the objects in the collection.
       * @default aux_tag
       */
      domainType: unknown
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /**
       * @description A list of site configuration objects.
       * @example [
       *       {
       *         "links": [],
       *         "domainType": "aux_tag",
       *         "id": "snmp",
       *         "title": "Monitoring via SNMP",
       *         "members": {},
       *         "extensions": {
       *           "id": "snmp",
       *           "title": "Monitoring via SNMP",
       *           "topic": "Monitoring agents",
       *           "help": "Your help text"
       *         }
       *       }
       *     ]
       */
      value?: components['schemas']['AuxTagResponse'][]
      /** @description Additional attributes alongside the collection. */
      extensions?: {
        [key: string]: unknown
      }
    }
    AuxTagAttrsUpdate: {
      /**
       * @description Different tags can be grouped in topics to make the visualization and selections in the GUI more comfortable
       * @example Monitoring agents
       */
      topic?: string
      /**
       * @description The title of the Auxiliary tag
       * @example AuxTagExampleTitle
       */
      title?: string
      /**
       * @description The help of the Auxiliary tag
       * @example AuxTagExampleHelp
       */
      help?: string
    }
    AuxTagAttrsCreate: {
      /**
       * @description An auxiliary tag id
       * @example ip-v4
       */
      aux_tag_id: string | null
      /**
       * @description Different tags can be grouped in topics to make the visualization and selections in the GUI more comfortable
       * @example Monitoring agents
       */
      topic: string
      /**
       * @description The title of the Auxiliary tag
       * @example AuxTagExampleTitle
       */
      title: string
      /**
       * @description The help of the Auxiliary tag
       * @default
       * @example AuxTagExampleHelp
       */
      help: string
    }
    StatusLogInfo: {
      /**
       * @description The progress update logs of the background job
       * @example [
       *       "Parsed configuration",
       *       "Saved configuration"
       *     ]
       */
      JobProgressUpdate?: string[]
      /**
       * @description The result logs of the background job
       * @example [
       *       "Job finished"
       *     ]
       */
      JobResult?: string[]
      /**
       * @description The exception logs of the background job
       * @example [
       *       "error_1",
       *       "error_2"
       *     ]
       */
      JobException?: string[]
    }
    BackgroundJobStatus: {
      /**
       * @description The state of the background job
       * @example finished
       */
      state: string
      /**
       * @description The logs of the background job
       * @example {
       *       "JobProgressUpdate": [
       *         "Parsed configuration",
       *         "Saved configuration"
       *       ],
       *       "JobResult": [
       *         "Job finished"
       *       ],
       *       "JobException": [
       *         "error_1",
       *         "error_2"
       *       ]
       *     }
       */
      log_info?: components['schemas']['StatusLogInfo']
    }
    BackgroundJobSnapshot: {
      /**
       * @description The site ID where the background job is located
       * @example foobar
       */
      site_id: string
      /**
       * @description The status of the background job
       * @example {}
       */
      status?: components['schemas']['BackgroundJobStatus']
      /**
       * @description This field indicates if the background job is running.
       * @example true
       */
      active: boolean
    }
    BackgroundJobSnapshotObject: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The domain type of the object
       * @default background_job
       */
      domainType: unknown
      /** @description The unique identifier for this domain-object type. */
      id?: string
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description The container for external resources, like linked foreign objects or actions. */
      members?: {
        [key: string]: unknown
      }
      /** @description The attributes of the background job */
      extensions?: components['schemas']['BackgroundJobSnapshot']
    }
    ConnectedSiteAttributes: {
      /**
       * @description The site id.
       * @example heute_remote_1
       */
      site_id: string
    }
    BrokerConnectionExtension: {
      /** @description The unique identifier of the connection. */
      id?: string
      /**
       * @description The attributes of the site initiating the connection.
       * @example {
       *       "site_id": "heute_remote_1"
       *     }
       */
      connecter?: components['schemas']['ConnectedSiteAttributes']
      /**
       * @description The attributes of the site accepting the connection.
       * @example {
       *       "site_id": "heute_remote_2"
       *     }
       */
      connectee?: components['schemas']['ConnectedSiteAttributes']
    }
    BrokerConnectionResponse: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The domain type of the object.
       * @default broker_connection
       */
      domainType: unknown
      /** @description The unique identifier for this domain-object type. */
      id?: string
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description The container for external resources, like linked foreign objects or actions. */
      members?: {
        [key: string]: unknown
      }
      /**
       * @description The configuration attributes of a broker peer to peer connection.
       * @example {
       *       "domainType": "broker_connection",
       *       "id": "connection_1",
       *       "connecter": {
       *         "site_id": "heute_remote_1"
       *       },
       *       "connectee": {
       *         "site_id": "heute_remote_2"
       *       }
       *     }
       */
      extensions?: components['schemas']['BrokerConnectionExtension']
    }
    BrokerConnectionResponseCollection: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The name of this collection.
       * @default all
       */
      id: string
      /**
       * @description The domain type of the objects in the collection.
       * @default broker_connection
       */
      domainType: unknown
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /**
       * @description A list of broker peer to peer configuration objects.
       * @example [
       *       {
       *         "domainType": "broker_connection",
       *         "id": "connection_1",
       *         "connecter": {
       *           "site_id": "heute_remote_1"
       *         },
       *         "connectee": {
       *           "site_id": "heute_remote_2"
       *         }
       *       }
       *     ]
       */
      value?: components['schemas']['BrokerConnectionResponse'][]
      /** @description Additional attributes alongside the collection. */
      extensions?: {
        [key: string]: unknown
      }
    }
    SiteId: {
      /**
       * @description The site ID.
       * @example prod
       */
      site_id: string
    }
    BrokerConnectionConfig: {
      /**
       * @description The ID of the site initiating the connection.
       * @example {
       *       "site_id": "remote_1"
       *     }
       */
      connecter: components['schemas']['SiteId']
      /**
       * @description The ID of the site accepting the connection.
       * @example {
       *       "site_id": "remote_2"
       *     }
       */
      connectee: components['schemas']['SiteId']
    }
    BrokerConnectionRequestUpdate: {
      /**
       * @description The connection configuration.
       * @example {
       *       "connecter": {
       *         "site_id": "remote_1"
       *       },
       *       "connectee": {
       *         "site_id": "remote_2"
       *       }
       *     }
       */
      connection_config: components['schemas']['BrokerConnectionConfig']
    }
    BrokerConnectionRequestCreate: {
      /**
       * @description An unique connection id for the broker connection
       * @example connection_1
       */
      connection_id: string
      /**
       * @description The connection configuration.
       * @example {
       *       "connecter": {
       *         "site_id": "remote_1"
       *       },
       *       "connectee": {
       *         "site_id": "remote_2"
       *       }
       *     }
       */
      connection_config: components['schemas']['BrokerConnectionConfig']
    }
    BIAggregationStateResponse: {
      /**
       * @description The Aggregation state
       * @example {}
       */
      aggregations?: {
        [key: string]: unknown
      }
      /**
       * @description The missing sites
       * @example [
       *       "beta",
       *       "heute"
       *     ]
       */
      missing_sites?: string[]
      /**
       * @description the missing aggregations
       * @example [
       *       "Host heute"
       *     ]
       */
      missing_aggr?: string[]
    }
    CollectionItem: components['schemas']['Link']
    DomainObjectCollection: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The name of this collection.
       * @default all
       */
      id: string
      /** @description The domain type of the objects in the collection. */
      domainType?: string
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description The collection itself. Each entry in here is part of the collection. */
      value?: components['schemas']['CollectionItem'][]
      /** @description Additional attributes alongside the collection. */
      extensions?: {
        [key: string]: unknown
      }
    }
    BIAggregationGroups: {
      /**
       * @description List of group names.
       * @example [
       *       "group1",
       *       "group2"
       *     ]
       */
      names?: string[]
      /**
       * @description List of group paths.
       * @example [
       *       [
       *         "path",
       *         "of",
       *         "group1"
       *       ]
       *     ]
       */
      paths?: string[][]
    }
    BIEmptySearch: {
      /**
       * @description Empty search. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'empty'
    }
    LabelCondition: {
      /**
       * @description Condition operator.
       * @enum {string}
       */
      operator: 'and' | 'or' | 'not'
      /** @description Label name and value. */
      label: string
    }
    LabelGroupCondition: {
      /**
       * @description Condition operator.
       * @default and
       * @enum {string}
       */
      operator: 'and' | 'or' | 'not'
      /** @description Label conditions. */
      label_group: components['schemas']['LabelCondition'][]
    }
    BIAllHostsChoice: {
      /**
       * @description Select all hosts. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'all_hosts'
    }
    BIHostNameRegexChoice: {
      /**
       * @description Select hosts based on a regex against their host name. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'host_name_regex'
      /**
       * @description Regex pattern.
       * @example testhostn.*
       */
      pattern: string
    }
    BIHostAliasRegexChoice: {
      /**
       * @description Select hosts based on a regex against their alias. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'host_alias_regex'
      /**
       * @description Regex pattern.
       * @example testali.*
       */
      pattern: string
    }
    BIHostChoice:
      | components['schemas']['BIAllHostsChoice']
      | components['schemas']['BIHostNameRegexChoice']
      | components['schemas']['BIHostAliasRegexChoice']
    HostConditions: {
      /**
       * @description Host folder.
       * @example servers/groupA
       */
      host_folder: string
      /**
       * @description Host label conditions. Although all items in this list have a default operator value, the operator value for the the first item in the list does not have any effect.
       * @example [
       *       {
       *         "label_group": [
       *           {
       *             "operator": "and",
       *             "label": "db:mssql"
       *           }
       *         ]
       *       },
       *       {
       *         "operator": "and",
       *         "label_group": [
       *           {
       *             "operator": "and",
       *             "label": "network/primary:yes"
       *           }
       *         ]
       *       }
       *     ]
       */
      host_label_groups: components['schemas']['LabelGroupCondition'][]
      /**
       * @description Host tags.
       * @example {}
       */
      host_tags: {
        [key: string]: unknown
      }
      /**
       * @description Host selection.
       * @example {
       *       "type": "all_hosts"
       *     }
       */
      host_choice: components['schemas']['BIHostChoice']
    }
    Host: {
      /**
       * @description Create nodes from the matched hosts themselves. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'host'
    }
    Parent: {
      /**
       * @description Create nodes for all the parents of matched hosts. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'parent'
    }
    Child: {
      /**
       * @description Create nodes for all the children of matched hosts. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'child'
    }
    ChildWith: {
      /**
       * @description Create nodes for all the children of matched hosts that also match other conditions. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'child_with'
      /** @description Extra conditions for the child. */
      conditions: components['schemas']['HostConditions']
      /**
       * @description Child host selector.
       * @example {
       *       "type": "all_hosts"
       *     }
       */
      host_choice: components['schemas']['BIHostChoice']
    }
    ReferTo:
      | components['schemas']['Host']
      | components['schemas']['Parent']
      | components['schemas']['Child']
      | components['schemas']['ChildWith']
    BIHostSearch: {
      /**
       * @description Host search. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'host_search'
      /** @description Host conditions. */
      conditions: components['schemas']['HostConditions']
      /** @description Create nodes based on the matched hosts, their parents or their children. */
      refer_to: components['schemas']['ReferTo']
    }
    ServiceConditions: {
      /**
       * @description Host folder.
       * @example servers/groupA
       */
      host_folder: string
      /**
       * @description Host label conditions. Although all items in this list have a default operator value, the operator value for the the first item in the list does not have any effect.
       * @example [
       *       {
       *         "label_group": [
       *           {
       *             "operator": "and",
       *             "label": "db:mssql"
       *           }
       *         ]
       *       },
       *       {
       *         "operator": "and",
       *         "label_group": [
       *           {
       *             "operator": "and",
       *             "label": "network/primary:yes"
       *           }
       *         ]
       *       }
       *     ]
       */
      host_label_groups: components['schemas']['LabelGroupCondition'][]
      /**
       * @description Host tags.
       * @example {}
       */
      host_tags: {
        [key: string]: unknown
      }
      /**
       * @description Host selection.
       * @example {
       *       "type": "all_hosts"
       *     }
       */
      host_choice: components['schemas']['BIHostChoice']
      /**
       * @description Service name regex.
       * @example Filesystem.*
       */
      service_regex: string
      /**
       * @description Service label conditions. Although all items in this list have a default operator value, the operator value for the the first item in the list does not have any effect.
       * @example [
       *       {
       *         "label_group": [
       *           {
       *             "operator": "and",
       *             "label": "db:mssql"
       *           }
       *         ]
       *       },
       *       {
       *         "operator": "and",
       *         "label_group": [
       *           {
       *             "operator": "and",
       *             "label": "network/primary:yes"
       *           }
       *         ]
       *       }
       *     ]
       */
      service_label_groups: components['schemas']['LabelGroupCondition'][]
    }
    BIServiceSearch: {
      /**
       * @description Service search. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'service_search'
      /** @description Service conditions. */
      conditions: components['schemas']['ServiceConditions']
    }
    BIFixedArgumentsSearchToken: {
      /** @description Argument name. */
      key: string
      /** @description Argument value. */
      values: string[]
    }
    BIFixedArgumentsSearch: {
      /**
       * @description Fixed search arguments. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'fixed_arguments'
      /** @description Search arguments. */
      arguments: components['schemas']['BIFixedArgumentsSearchToken'][]
    }
    BISearch:
      | components['schemas']['BIEmptySearch']
      | components['schemas']['BIHostSearch']
      | components['schemas']['BIServiceSearch']
      | components['schemas']['BIFixedArgumentsSearch']
    BIParams: {
      /**
       * @description List of arguments.
       * @example [
       *       "testhostParams"
       *     ]
       */
      arguments: string[]
    }
    BICallARuleAction: {
      /**
       * @description Call a BI rule to create nodes. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'call_a_rule'
      /**
       * @description ID of the rule.
       * @example test_rule_1
       */
      rule_id: string
      /**
       * @description Parameters for the rule.
       * @example {
       *       "arguments": []
       *     }
       */
      params: components['schemas']['BIParams']
    }
    BIStateOfHostAction: {
      /**
       * @description Create nodes representing the state of hosts. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'state_of_host'
      /**
       * @description Host name regex.
       * @example testhost
       */
      host_regex: string
    }
    BIStateOfServiceAction: {
      /**
       * @description Create nodes representing the state of services. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'state_of_service'
      /**
       * @description Host name regex.
       * @example testhost
       */
      host_regex: string
      /**
       * @description Service name regex.
       * @example testservice
       */
      service_regex: string
    }
    BIStateOfRemainingServicesAction: {
      /**
       * @description Create nodes for each service that is not contained in any other node of this aggregation. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'state_of_remaining_services'
      /**
       * @description Host name regex.
       * @example testhost
       */
      host_regex: string
    }
    BIAction:
      | components['schemas']['BICallARuleAction']
      | components['schemas']['BIStateOfHostAction']
      | components['schemas']['BIStateOfServiceAction']
      | components['schemas']['BIStateOfRemainingServicesAction']
    BINodeGenerator: {
      /**
       * @description Search criteria.
       * @example {
       *       "type": "empty"
       *     }
       */
      search: components['schemas']['BISearch']
      /**
       * @description Action on search results.
       * @example {
       *       "type": "state_of_host",
       *       "host_regex": ""
       *     }
       */
      action: components['schemas']['BIAction']
    }
    BIAggregationVisualization: {
      /**
       * @description Ignore rule styles.
       * @example false
       */
      ignore_rule_styles: boolean
      /**
       * @description ID of the layout.
       * @example radial_layout2
       */
      layout_id: string
      /**
       * @description Line style to use.
       * @example round
       */
      line_style: string
    }
    BIAggregationComputationOptions: {
      /**
       * @description Enable or disable this computation option.
       * @example false
       */
      disabled: boolean
      /**
       * @description Bases state computation only on hard states instead of hard and soft states.
       * @example false
       */
      use_hard_states: boolean
      /**
       * @description Escalates downtimes based on aggregated WARN state instead of CRIT state.
       * @example false
       */
      escalate_downtimes_as_warn: boolean
      /**
       * @description Generates the aggregations initially, then doesn't update them automatically.
       * @example false
       */
      freeze_aggregations?: boolean
    }
    BIAggregationEndpoint: {
      /**
       * @description The unique aggregation id
       * @example aggr1
       */
      id: string
      /**
       * @description An optional comment that may be used to explain the purpose of this object.
       * @example Rule comment
       */
      comment?: string | null
      /**
       * @description CME Edition only: The customer id for this aggregation.
       * @example customer1
       */
      customer?: string | null
      /**
       * @description Groups.
       * @example {
       *       "names": [
       *         "groupA",
       *         "groupB"
       *       ],
       *       "paths": [
       *         [
       *           "path",
       *           "group",
       *           "a"
       *         ],
       *         [
       *           "path",
       *           "group",
       *           "b"
       *         ]
       *       ]
       *     }
       */
      groups: components['schemas']['BIAggregationGroups']
      /**
       * @description Node generation.
       * @example {
       *       "search": {
       *         "type": "empty"
       *       },
       *       "action": {
       *         "type": "state_of_host",
       *         "host_regex": ""
       *       }
       *     }
       */
      node: components['schemas']['BINodeGenerator']
      /**
       * @description Aggregation visualization options.
       * @example {
       *       "ignore_rule_styles": false,
       *       "layout_id": "builtin_default",
       *       "line_style": "round"
       *     }
       */
      aggregation_visualization: components['schemas']['BIAggregationVisualization']
      /**
       * @description Computation options.
       * @example {
       *       "disabled": false,
       *       "use_hard_states": false,
       *       "escalate_downtimes_as_warn": false,
       *       "freeze_aggregations": false
       *     }
       */
      computation_options: components['schemas']['BIAggregationComputationOptions']
      /**
       * @description The identifier of the BI pack.
       * @example pack1
       */
      pack_id: string
    }
    BINodeVisNoneStyle: {
      /**
       * @description No specific child node visualization. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'none'
      /**
       * @description No configuration options for this style.
       * @default {}
       */
      style_config: unknown
    }
    BINodeVisBlockStyle: {
      /**
       * @description Visualize child nodes as a block. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'block'
      /**
       * @description No configuration options for this style.
       * @default {}
       */
      style_config: unknown
    }
    BINodeVisHierarchyStyleConfig: {
      /**
       * @description Distance between layers.
       * @example 85
       */
      layer_height: number
      /**
       * @description Distance between nodes within the same layer.
       * @example 40
       */
      node_size: number
      /**
       * @description Rotation of the hierarchy, in degrees.
       * @example 180
       */
      rotation: number
    }
    BINodeVisHierarchyStyle: {
      /**
       * @description Visualize child nodes in a hierarchy. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'hierarchy'
      /** @description Configuration options for this style. */
      style_config: components['schemas']['BINodeVisHierarchyStyleConfig']
    }
    BINodeVisRadialStyleConfig: {
      /** @description Limits the child nodes to be within this angle. */
      degree: number
      /** @description Distance between nodes. */
      radius: number
      /** @description Starting point of the angle, in degrees. */
      rotation: number
    }
    BINodeVisRadialStyle: {
      /**
       * @description Visualize child nodes radially. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'radial'
      /** @description Configuration options for this style. */
      style_config: components['schemas']['BINodeVisRadialStyleConfig']
    }
    BINodeVisForceStyle: {
      /**
       * @description Visualize child nodes based on force between them. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'force'
      /**
       * @description No configuration options for this style.
       * @default {}
       */
      style_config: unknown
    }
    BINodeVisLayoutStyle:
      | components['schemas']['BINodeVisNoneStyle']
      | components['schemas']['BINodeVisBlockStyle']
      | components['schemas']['BINodeVisHierarchyStyle']
      | components['schemas']['BINodeVisRadialStyle']
      | components['schemas']['BINodeVisForceStyle']
    BIRuleProperties: {
      /**
       * @description Title of the rule.
       * @example Rule title
       */
      title: string
      /**
       * @description Rule comment.
       * @example Rule comment
       */
      comment: string
      /**
       * @description URL to more documentation.
       * @example Rule documentation
       */
      docu_url: string
      /**
       * @description Icon name for the rule.
       * @example icon1.png
       */
      icon: string
      /**
       * @description State messages.
       * @example {}
       */
      state_messages: {
        [key: string]: unknown
      }
    }
    BIAggregationFunctionBest: {
      /**
       * @description Take the best state from all child nodes. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'best'
      /** @description Take the nth best state. */
      count: number
      /**
       * @description Maximum severity for this node.
       * @enum {integer}
       */
      restrict_state: 0 | 1 | 2
    }
    BIAggregationFunctionWorst: {
      /**
       * @description Take the worst state from all child nodes. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'worst'
      /**
       * @description Take the nth worst state.
       * @example 2
       */
      count: number
      /**
       * @description Maximum severity for this node.
       * @enum {integer}
       */
      restrict_state: 0 | 1 | 2
    }
    BIAggregationFunctionCountSettings: {
      /**
       * @description Explicit number or percentage.
       * @enum {string}
       */
      type: 'count' | 'percentage'
      /** @description Value. */
      value: number
    }
    BIAggregationFunctionCountOK: {
      /**
       * @description Count states from child nodes, defaulting to CRIT if both levels aren't met. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'count_ok'
      /** @description Required number of OK child nodes for total state of OK. */
      levels_ok: components['schemas']['BIAggregationFunctionCountSettings']
      /** @description Required number of OK child nodes for total state of WARN. */
      levels_warn: components['schemas']['BIAggregationFunctionCountSettings']
    }
    BIAggregationFunction:
      | components['schemas']['BIAggregationFunctionBest']
      | components['schemas']['BIAggregationFunctionWorst']
      | components['schemas']['BIAggregationFunctionCountOK']
    BIRuleComputationOptions: {
      /**
       * @description Enable or disable this computation option.
       * @example false
       */
      disabled: boolean
    }
    BIRuleEndpoint: {
      /**
       * @description The unique rule id
       * @example rule1
       */
      id: string
      /**
       * @description A list of nodes for for this rule
       * @example []
       */
      nodes: components['schemas']['BINodeGenerator'][]
      /**
       * @description Parameters.
       * @example {
       *       "arguments": [
       *         "foo",
       *         "bar"
       *       ]
       *     }
       */
      params: components['schemas']['BIParams']
      /**
       * @description Node visualization.
       * @example {
       *       "type": "block",
       *       "style_config": {}
       *     }
       */
      node_visualization: components['schemas']['BINodeVisLayoutStyle']
      /**
       * @description Rule properties.
       * @example {
       *       "title": "",
       *       "comment": "",
       *       "docu_url": "",
       *       "icon": "",
       *       "state_messages": {}
       *     }
       */
      properties: components['schemas']['BIRuleProperties']
      /**
       * @description Aggregation function.
       * @example {
       *       "type": "best",
       *       "count": 1,
       *       "restrict_state": 2
       *     }
       */
      aggregation_function: components['schemas']['BIAggregationFunction']
      /**
       * @description Computation options.
       * @example {
       *       "disabled": false
       *     }
       */
      computation_options: components['schemas']['BIRuleComputationOptions']
      /**
       * @description The identifier of the BI pack.
       * @example pack1
       */
      pack_id: string
    }
    BIPackEndpoint: {
      /**
       * @description The title of the BI pack.
       * @example BI Title
       */
      title: string
      /**
       * @description A list of contact group identifiers.
       * @example [
       *       "contact",
       *       "contactgroup_b"
       *     ]
       */
      contact_groups: string[]
      /**
       * @description Should the BI pack be public or not.
       * @example false
       */
      public: boolean
    }
    BIAggregationStateRequest: {
      /**
       * @description Filter by names
       * @example [
       *       "Host foo"
       *     ]
       */
      filter_names?: string[]
      /**
       * @description Filter by group
       * @example [
       *       "My Group"
       *     ]
       */
      filter_groups?: string[]
    }
    Api403CustomError1: {
      /**
       * @description The HTTP status code.
       * @example 403
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example Unauthorized to read the global settings
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Forbidden
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    AgentControllerCertificateSettings: {
      /**
       * @description Lifetime of agent controller certificates in months
       * @example 60
       */
      lifetime_in_months: number
    }
    Api403CustomError2: {
      /**
       * @description The HTTP status code.
       * @example 403
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example You do not have the permission for agent pairing.
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Forbidden
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    X509PEM: {
      /** @description PEM-encoded X.509 certificate. */
      cert: string
    }
    X509ReqPEMUUID: {
      /**
       * @description PEM-encoded X.509 CSR. The CN must a valid version-4 UUID.
       * @example -----BEGIN CERTIFICATE REQUEST-----
       *     ...
       *     -----END CERTIFICATE REQUEST-----
       *
       */
      csr: string
    }
    Api403CustomError3: {
      /**
       * @description The HTTP status code.
       * @example 403
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example You do not have the permission for agent pairing.
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Forbidden
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    CommentAttributes: {
      /** @description The host name. */
      host_name: string
      /** @description The comment ID */
      id: number
      /** @description The author of the comment */
      author: string
      /** @description The comment itself */
      comment: string
      /** @description If true, the comment will be persisted */
      persistent: boolean
      /** @description The timestamp from when the comment was created. */
      entry_time: string
      /** @description The service name the comment belongs to. */
      service_description?: string
      /** @description True if the comment is from a service or else it's False. */
      is_service: boolean
      /**
       * @description The site id of the downtime.
       * @example production
       */
      site_id: string
    }
    CommentObject: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The domain type of the object.
       * @default comment
       */
      domainType: unknown
      /** @description The unique identifier for this domain-object type. */
      id?: string
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description The container for external resources, like linked foreign objects or actions. */
      members?: {
        [key: string]: unknown
      }
      /** @description The attributes of a service/host comment. */
      extensions?: components['schemas']['CommentAttributes']
    }
    CommentCollection: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The name of this collection.
       * @default all
       */
      id: string
      /**
       * @description The domain type of the objects in the collection.
       * @default comment
       */
      domainType: unknown
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description A list of comment objects. */
      value?: components['schemas']['CommentObject'][]
      /** @description Additional attributes alongside the collection. */
      extensions?: {
        [key: string]: unknown
      }
    }
    DeleteCommentById: {
      /**
       * @description How you would like to delete comments. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      delete_type: 'by_id'
      /**
       * @description An integer representing a comment ID.
       * @example 21
       */
      comment_id?: number
      /**
       * @description The ID of an existing site
       * @example production
       */
      site_id: string
    }
    DeleteCommentsByQuery: {
      /**
       * @description How you would like to delete comments. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      delete_type: 'query'
      /**
       * @description An query expression of the Livestatus 'comments' table in nested dictionary form. If you want to use multiple expressions, nest them with the AND/OR operators.
       * @example {"op": "=", "left": "host_name", "right": "example.com"}
       */
      query?: components['schemas']['Expr']
    }
    DeleteCommentsByParams: {
      /**
       * @description How you would like to delete comments. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      delete_type: 'params'
      /**
       * @description The host name
       * @example example.com
       */
      host_name: string
      /**
       * @description If set, the comments for the listed services of the specified host will be removed. If a service has multiple comments then all will be removed
       * @example [
       *       "CPU load",
       *       "Memory"
       *     ]
       */
      service_descriptions?: string[]
    }
    DeleteComments:
      | components['schemas']['DeleteCommentById']
      | components['schemas']['DeleteCommentsByQuery']
      | components['schemas']['DeleteCommentsByParams']
    CreateHostComment: {
      /**
       * @description The comment which will be stored for the host.
       * @example Windows
       */
      comment: string
      /**
       * @description If set, the comment will persist a restart.
       * @default false
       * @example false
       */
      persistent: boolean
      /**
       * @description How you would like to leave a comment. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      comment_type: 'host'
      /**
       * @description The host name
       * @example example.com
       */
      host_name: string
    }
    CreateHostQueryComment: {
      /**
       * @description The comment which will be stored for the host.
       * @example Windows
       */
      comment: string
      /**
       * @description If set, the comment will persist a restart.
       * @default false
       * @example false
       */
      persistent: boolean
      /**
       * @description How you would like to leave a comment. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      comment_type: 'host_by_query'
      /**
       * @description An query expression of the Livestatus 'hosts' table in nested dictionary form. If you want to use multiple expressions, nest them with the AND/OR operators.
       * @example {"op": "and", "expr": [{"op": "=", "left": "name", "right": "example.com"}, {"op": "!=", "left": "state", "right": "0"}]}
       */
      query?: components['schemas']['Expr']
    }
    CreateHostRelatedComment:
      | components['schemas']['CreateHostComment']
      | components['schemas']['CreateHostQueryComment']
    CreateServiceComment: {
      /**
       * @description The comment which will be stored for the host.
       * @example Windows
       */
      comment: string
      /**
       * @description If set, the comment will persist a restart.
       * @default false
       * @example false
       */
      persistent: boolean
      /**
       * @description How you would like to leave a comment. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      comment_type: 'service'
      /**
       * @description The host name
       * @example example.com
       */
      host_name: string
      /**
       * @description The service name for which the comment is for. No exception is raised when the specified service name does not exist
       * @example Memory
       */
      service_description: string
    }
    CreateServiceQueryComment: {
      /**
       * @description The comment which will be stored for the host.
       * @example Windows
       */
      comment: string
      /**
       * @description If set, the comment will persist a restart.
       * @default false
       * @example false
       */
      persistent: boolean
      /**
       * @description How you would like to leave a comment. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      comment_type: 'service_by_query'
      /**
       * @description An query expression of the Livestatus 'services' table in nested dictionary form. If you want to use multiple expressions, nest them with the AND/OR operators.
       * @example {"op": "=", "left": "description", "right": "Service description"}
       */
      query: components['schemas']['Expr']
    }
    CreateServiceRelatedComment:
      | components['schemas']['CreateServiceComment']
      | components['schemas']['CreateServiceQueryComment']
    UpdateConfigurationEntity: {
      /**
       * @description Type of configuration entity
       * @example notification_parameter
       * @enum {string}
       */
      entity_type: 'notification_parameter' | 'folder'
      /**
       * @description Specifier for the entity type
       * @example mail
       */
      entity_type_specifier: string
      /**
       * @description Object id of the configuration entity
       * @example b43b060b-3b8c-41cf-8405-dddc6dd02575
       */
      entity_id: string
      /**
       * @description The data of the configuration entity
       * @example {}
       */
      data: {
        [key: string]: unknown
      }
    }
    Api422DefaultError: {
      /**
       * @description The HTTP status code.
       * @example 422
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example The request could not be processed.
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Unprocessable Entity
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    ValidationMessage: {
      /**
       * @description Location of the error
       * @example []
       */
      location?: string[]
      /**
       * @description Error message
       * @example
       */
      message?: string
      /**
       * @description Invalid value
       * @example
       */
      replacement_value?: string
    }
    ResponseData: {
      /**
       * @description All form spec validation errors
       * @example []
       */
      validation_errors?: components['schemas']['ValidationMessage'][] | null
    }
    EditConfigurationEntityResponse: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description Domain type of the configuration entity
       * @default configuration_entity
       */
      domainType: unknown
      /** @description The unique identifier for this domain-object type. */
      id?: string
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description The container for external resources, like linked foreign objects or actions. */
      members?: {
        [key: string]: unknown
      }
      /** @description Response data for entity creation */
      extensions?: components['schemas']['ResponseData']
    }
    CreateConfigurationEntity: {
      /**
       * @description Type of configuration entity
       * @example notification_parameter
       * @enum {string}
       */
      entity_type: 'notification_parameter' | 'folder'
      /**
       * @description Specifier for the entity type
       * @example mail
       */
      entity_type_specifier: string
      /**
       * @description The data of the configuration entity
       * @example {}
       */
      data: {
        [key: string]: unknown
      }
    }
    FolderResponse: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The domain type of the object.
       * @default folder
       */
      domainType: unknown
      /** @description The unique identifier for this domain-object type. */
      id?: string
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description The container for external resources, like linked foreign objects or actions. */
      members?: {
        [key: string]: unknown
      }
      /** @description All the attributes of the domain object. */
      extensions?: {
        [key: string]: unknown
      }
    }
    FolderResponseCollection: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The name of this collection.
       * @default all
       */
      id: string
      /**
       * @description The domain type of the objects in the collection.
       * @default folder
       */
      domainType: unknown
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description A list of folder objects. */
      value?: components['schemas']['FolderResponse'][]
      /** @description Additional attributes alongside the collection. */
      extensions?: {
        [key: string]: unknown
      }
    }
    NotificationParamResponse: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The domain type of the object.
       * @default notification_parameter
       */
      domainType: unknown
      /** @description The unique identifier for this domain-object type. */
      id?: string
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description The container for external resources, like linked foreign objects or actions. */
      members?: {
        [key: string]: unknown
      }
      /** @description All the attributes of the domain object. */
      extensions?: {
        [key: string]: unknown
      }
    }
    NotificationParamResponseCollection: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The name of this collection.
       * @default all
       */
      id: string
      /**
       * @description The domain type of the objects in the collection.
       * @default notification_parameter
       */
      domainType: unknown
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description A list of notification parameter objects. */
      value?: components['schemas']['NotificationParamResponse'][]
      /** @description Additional attributes alongside the collection. */
      extensions?: {
        [key: string]: unknown
      }
    }
    InventoryPathAllowAll: {
      /**
       * @description Allowed to see the whole tree. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'allow_all'
    }
    InventoryPathForbidAll: {
      /**
       * @description Forbidden to see the whole tree. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'forbid_all'
    }
    NoRestriction: {
      /**
       * @description No restriction on the path. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'no_restriction'
    }
    RestrictAll: {
      /**
       * @description Restrict all values. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'restrict_all'
    }
    RestrictValues: {
      /**
       * @description Restrict specific values. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'restrict_values'
      /** @description A list of values to be allowed. */
      values: string[]
    }
    PathRestriction:
      | components['schemas']['NoRestriction']
      | components['schemas']['RestrictAll']
      | components['schemas']['RestrictValues']
    InventoryPathSpecificPath: {
      /** @description Path to category. */
      path: string
      /** @description Restrict single values. */
      attributes?: components['schemas']['PathRestriction']
      /** @description Restrict table columns. */
      columns?: components['schemas']['PathRestriction']
      /** @description Restrict subcategories. */
      nodes?: components['schemas']['PathRestriction']
    }
    InventoryPathSpecificPaths: {
      /**
       * @description Allowed to see parts of the tree. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'specific_paths'
      /** @description A list of paths to be allowed. */
      paths: components['schemas']['InventoryPathSpecificPath'][]
    }
    InventoryPaths:
      | components['schemas']['InventoryPathAllowAll']
      | components['schemas']['InventoryPathForbidAll']
      | components['schemas']['InventoryPathSpecificPaths']
    ContactGroupExtensions: {
      /**
       * @description [Managed edition only] The customer for which the object is configured. This field is required for the following editions: Managed.
       * @example provider
       */
      customer?: string
      /** @description Permitted HW/SW Inventory paths. */
      inventory_paths?: components['schemas']['InventoryPaths']
    }
    ContactGroup: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The domain type of the object.
       * @default contact_group_config
       */
      domainType: unknown
      /** @description The unique identifier for this domain-object type. */
      id?: string
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description The container for external resources, like linked foreign objects or actions. */
      members?: {
        [key: string]: unknown
      }
      /** @description All the attributes of the domain object. */
      extensions?: components['schemas']['ContactGroupExtensions']
    }
    ContactGroupCollection: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The name of this collection.
       * @default all
       */
      id: string
      /**
       * @description The domain type of the objects in the collection.
       * @default contact_group_config
       */
      domainType: unknown
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description A list of contact group objects. */
      value?: components['schemas']['ContactGroup'][]
      /** @description Additional attributes alongside the collection. */
      extensions?: {
        [key: string]: unknown
      }
    }
    UpdateContactGroupAttributes: {
      /**
       * @description The name used for displaying in the GUI.
       * @example Example Group
       */
      alias: string
      /**
       * @description Permitted HW/SW Inventory paths.
       * @example {
       *       "type": "allow_all"
       *     }
       */
      inventory_paths?: components['schemas']['InventoryPaths']
      /**
       * @description [Managed edition only] By specifying a customer, you configure on which sites the user object will be available. 'global' will make the object available on all sites.
       * @example provider
       */
      customer?: string
    }
    UpdateContactGroup: {
      /**
       * @description The name of the contact group.
       * @example OnCall
       */
      name: string
      attributes: components['schemas']['UpdateContactGroupAttributes']
    }
    BulkUpdateContactGroup: {
      /**
       * @description A list of contact group entries.
       * @example [
       *       {
       *         "name": "OnCall",
       *         "attributes": {
       *           "alias": "Not on Sundays"
       *         }
       *       }
       *     ]
       */
      entries: components['schemas']['UpdateContactGroup'][]
    }
    InputContactGroup: {
      /**
       * @description The name of the contact group.
       * @example OnCall
       */
      name: string
      /**
       * @description The name used for displaying in the GUI.
       * @example Not on Sundays.
       */
      alias: string
      /**
       * @description Permitted HW/SW Inventory paths.
       * @example {
       *       "type": "allow_all"
       *     }
       */
      inventory_paths?: components['schemas']['InventoryPaths']
      /**
       * @description [Managed edition only] By specifying a customer, you configure on which sites the user object will be available. 'global' will make the object available on all sites. This field is required for the following editions: Managed.
       * @example provider
       */
      customer?: string
    }
    BulkInputContactGroup: {
      /**
       * @description A collection of contact group entries.
       * @example [
       *       {
       *         "name": "OnCall",
       *         "alias": "Not on Sundays"
       *       }
       *     ]
       */
      entries: components['schemas']['InputContactGroup'][]
    }
    BulkDeleteContactGroup: {
      /**
       * @description A list of contract group names.
       * @example [
       *       "windows",
       *       "panels"
       *     ]
       */
      entries: string[]
    }
    /** Api406DefaultErrorBA451644CA746AA5 */
    Api406DefaultErrorBA451644CA746AA5: {
      /**
       * Status
       * @description The HTTP status code.
       * @example 406
       */
      status: number
      /**
       * Title
       * @description A summary of the problem.
       * @example Not Acceptable
       */
      title: string
      /**
       * Detail
       * @description Detailed information on what exactly went wrong.
       * @example The requests accept headers can not be satisfied.
       */
      detail: string
      /**
       * Validation errors
       * @description Detailed error messages on all fields failing validation.
       * @example {
       *       "field": "error message"
       *     }
       */
      fields?: {
        [key: string]: string
      }
      /**
       * Error extensions
       * @description Additional information about the error.
       * @example {
       *       "key": "value"
       *     }
       */
      ext?: {
        [key: string]: string
      }
    }
    /** BreadcrumbItem */
    BreadcrumbItem: {
      /**
       * Title
       * @description The title of the breadcrumb item
       */
      title: string
      /**
       * Link
       * @description The link of the breadcrumb item
       */
      link: string | null
    }
    /** DashboardDisplay */
    DashboardDisplay: {
      /**
       * Title
       * @description The title of the dashboard
       */
      title: string
      /** @description Topic area the dashboard covers */
      topic: components['schemas']['Topic']
      /**
       * Hidden
       * @description Whether the dashboard is hidden from general listings
       */
      hidden: boolean
      /**
       * Sort Index
       * @description Numeric value used for ordering dashboards in lists.
       */
      sort_index: number
    }
    /** @enum {string} */
    DashboardLayoutType: 'relative_grid' | 'responsive_grid'
    /** DashboardMetadata */
    DashboardMetadata: {
      /**
       * Name
       * @description Unique identifier for the dashboard.
       */
      name: string
      /**
       * Owner
       * @description Owner of the dashboard or null if the dashboard is built-in.
       */
      owner: string | null
      /**
       * Is Built In
       * @description Whether the dashboard is a built-in (system) dashboard.
       */
      is_built_in: boolean
      /**
       * Is Editable
       * @description Whether the user can edit the dashboard.
       */
      is_editable: boolean
      /** @description Layout system used: 'relative' for absolute positioning, 'responsive' for adaptive design. */
      layout_type: components['schemas']['DashboardLayoutType']
      /** @description Display and presentation preferences. */
      display: components['schemas']['DashboardDisplay']
    }
    /** DashboardMetadataModel */
    DashboardMetadataModel: {
      /**
       * Links
       * @description List of links to other resources.
       * @example [
       *       {
       *         "href": "https://.../api_resource",
       *         "method": "GET",
       *         "rel": "self",
       *         "type": "application/json"
       *       }
       *     ]
       */
      links: components['schemas']['LinkModel'][]
      /**
       * Domaintype
       * @description The domain type of the object.
       * @constant
       */
      domainType: 'dashboard_metadata'
      /**
       * ID
       * @description The unique identifier for this domain-object type.
       * @example host1
       */
      id?: string
      /**
       * Title
       * @description A human readable title of this object. Can be used for user interfaces.
       * @example My Host
       */
      title?: string
      /** @description The metadata of this dashboard. */
      extensions: components['schemas']['DashboardMetadata']
    }
    /** LinkModel */
    LinkModel: {
      /**
       * Relation
       * @description Indicates the nature of the relationship of the related resource to the resource that generated this representation
       * @example self
       */
      rel: string
      /**
       * URL
       * @description The (absolute) address of the related resource. Any characters that are invalid in URLs must be URL encoded.
       * @example https://.../api_resource
       */
      href: string
      /**
       * Method
       * @description The HTTP method to use to traverse the link (get, post, put or delete)
       * @example GET
       * @enum {string}
       */
      method: 'GET' | 'POST' | 'PUT' | 'DELETE'
      /**
       * Content-Type
       * @description The content-type that the linked resource will return
       * @example application/json
       */
      type: string
      /**
       * Domain Type
       * @description The domain type of the linked resource
       * @constant
       */
      domainType: 'link'
      /**
       * Title
       * @description string that the consuming application may use to render the link without having to traverse the link in advance
       * @example The object itself
       */
      title?: string
      /**
       * Body Parameters
       * @description A map of values that shall be sent in the request body. If this is present, the request has to be sent with a content-type of 'application/json'.
       * @example {
       *       "key": "value"
       *     }
       */
      body_params?: Record<string, never>
    }
    /** Topic */
    Topic: {
      /**
       * Name
       * @description Id of the topic
       */
      name: string
      /**
       * Breadcrumb
       * @description Breadcrumb navigation for the topic.
       */
      breadcrumb: components['schemas']['BreadcrumbItem'][]
    }
    /** DashboardMetadataCollectionModel */
    DashboardMetadataCollectionModel: {
      /**
       * Links
       * @description List of links to other resources.
       * @example [
       *       {
       *         "href": "https://.../api_resource",
       *         "method": "GET",
       *         "rel": "self",
       *         "type": "application/json"
       *       }
       *     ]
       */
      links: components['schemas']['LinkModel'][]
      /**
       * Id
       * @description The name of this collection.
       */
      id: string
      /**
       * Domaintype
       * @description The domain type of the objects in the collection
       * @example dashboard
       * @constant
       */
      domainType: 'dashboard_metadata'
      /**
       * Title
       * @description A human readable title of this object. Can be used for user interfaces.
       */
      title?: string
      /**
       * Value
       * @description A list of host objects
       */
      value: components['schemas']['DashboardMetadataModel'][]
      /**
       * Extensions
       * @description Additional attributes alongside the collection.
       */
      extensions?: Record<string, never>
    }
    AnnotatedInfoName: string
    /** DashboardConstantsResponse */
    DashboardConstantsResponse: {
      /**
       * Widgets
       * @description All widget types and their respective constraints
       */
      widgets: {
        [key: string]: components['schemas']['WidgetConstraints']
      }
      /**
       * Responsive Grid Breakpoints
       * @description The responsive grid breakpoint configuration.
       */
      responsive_grid_breakpoints: {
        [key: string]: components['schemas']['ResponsiveGridBreakpointConfig']
      }
    }
    /** FilterContextConstants */
    FilterContextConstants: {
      /**
       * Restricted To Single
       * @description A list of single infos that this widget content is restricted to. This means that the widget must be filtered to exactly one item for each info name.
       */
      restricted_to_single: components['schemas']['AnnotatedInfoName'][]
    }
    /** LayoutConstraints */
    LayoutConstraints: {
      relative: components['schemas']['RelativeLayoutConstraints']
    }
    /** RelativeLayoutConstraints */
    RelativeLayoutConstraints: {
      /** @description Initial size as (width, height) in relative grid units. */
      initial_size: components['schemas']['WidgetRelativeGridSize']
      /** @description Initial position as (x, y) in relative grid units. */
      initial_position: components['schemas']['WidgetRelativeGridPosition']
      /**
       * Is Resizable
       * @description Whether the widget is resizable.
       */
      is_resizable: boolean
    }
    /** @enum {string} */
    ResponsiveGridBreakpoint: 'XS' | 'S' | 'M' | 'L' | 'XL'
    /** ResponsiveGridBreakpointConfig */
    ResponsiveGridBreakpointConfig: {
      /**
       * Min Width
       * @description Minimum width of the breakpoint in pixels.
       */
      min_width: number
      /**
       * Columns
       * @description Number of columns available at this breakpoint.
       */
      columns: number
    }
    /** WidgetConstraints */
    WidgetConstraints: {
      /** @description Layout constraints for the widget. */
      layout: components['schemas']['LayoutConstraints']
      /** @description Filter context constraints for the widget type. */
      filter_context: components['schemas']['FilterContextConstants']
    }
    /** WidgetRelativeGridPosition */
    WidgetRelativeGridPosition: {
      /**
       * X
       * @description X position of the widget.
       */
      x: number
      /**
       * Y
       * @description Y position of the widget.
       */
      y: number
    }
    /** WidgetRelativeGridSize */
    WidgetRelativeGridSize: {
      /** @description Width of the widget. */
      width: components['schemas']['WidgetSizeValue']
      /** @description Height of the widget. */
      height: components['schemas']['WidgetSizeValue']
    }
    WidgetSizeValue: ('auto' | 'max') | components['schemas']['_PositiveInt']
    _PositiveInt: number
    /** DashboardConstantsObject */
    DashboardConstantsObject: {
      /**
       * Links
       * @description List of links to other resources.
       * @example [
       *       {
       *         "href": "https://.../api_resource",
       *         "method": "GET",
       *         "rel": "self",
       *         "type": "application/json"
       *       }
       *     ]
       */
      links: components['schemas']['LinkModel'][]
      /**
       * Domaintype
       * @description The domain type of the object.
       * @constant
       */
      domainType: 'constant'
      /**
       * ID
       * @description The unique identifier for this domain-object type.
       * @example host1
       */
      id?: string
      /**
       * Title
       * @description A human readable title of this object. Can be used for user interfaces.
       * @example My Host
       */
      title?: string
      /** @description All the constants data of a dashboard. */
      extensions: components['schemas']['DashboardConstantsResponse']
    }
    /** Api404DefaultErrorAB2AA48D05FD212E */
    Api404DefaultErrorAB2AA48D05FD212E: {
      /**
       * Status
       * @description The HTTP status code.
       * @example 404
       */
      status: number
      /**
       * Title
       * @description A summary of the problem.
       * @example Not Found
       */
      title: string
      /**
       * Detail
       * @description Detailed information on what exactly went wrong.
       * @example The requested object has not be found.
       */
      detail: string
      /**
       * Validation errors
       * @description Detailed error messages on all fields failing validation.
       * @example {
       *       "field": "error message"
       *     }
       */
      fields?: {
        [key: string]: string
      }
      /**
       * Error extensions
       * @description Additional information about the error.
       * @example {
       *       "key": "value"
       *     }
       */
      ext?: {
        [key: string]: string
      }
    }
    /** AlertOverviewContent */
    AlertOverviewContent: {
      /**
       * @description Displays hosts and services producing the most notifications (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'alert_overview'
      /** @description The time range for which the alert overview is displayed. */
      time_range: components['schemas']['TimerangeModel']
      /**
       * Limit Objects
       * @description The maximum number of objects to display in the alert overview.
       */
      limit_objects?: number
    }
    /** AlertTimelineContent */
    AlertTimelineContent: {
      /** @description Defines how the timeline should be rendered. */
      render_mode: components['schemas']['RenderMode']
      /**
       * Log Target
       * @description Defines which log target to use for the timeline.
       * @enum {string}
       */
      log_target: 'both' | 'host' | 'service'
      /**
       * @description Displays host and service alerts. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'alert_timeline'
    }
    /** AverageScatterplotContent */
    AverageScatterplotContent: {
      /**
       * Metric
       * @description Name of the metric.
       */
      metric: string
      /**
       * @description Display a scatterplot of average values over time. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'average_scatterplot'
      /** @description Time range to select values from. */
      time_range: components['schemas']['TimerangeModel']
      /** @description Color of the scattered dots. */
      metric_color: components['schemas']['DefaultOrColor']
      /** @description Color of the average. */
      average_color: components['schemas']['DefaultOrColor']
      /** @description Color of the median. */
      median_color: components['schemas']['DefaultOrColor']
    }
    /** BarChartRenderMode */
    BarChartRenderMode: {
      /**
       * @description Renders a bar chart. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'bar_chart'
      /** @description The time range for the bar chart. */
      time_range: components['schemas']['TimerangeModel']
      /** @description Select a time period over which the alerts or notifications are added up */
      time_resolution: components['schemas']['TimeResolution']
    }
    /** BarplotContent */
    BarplotContent: {
      /**
       * Metric
       * @description Name of the metric.
       */
      metric: string
      /**
       * @description Display a single metric as a barplot. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'barplot'
      /** @description Range of values to display. */
      display_range: components['schemas']['MetricDisplayRangeModel']
    }
    ColorHex: string
    /** CombinedGraphContent */
    CombinedGraphContent: {
      /** @description The time range for the graph, e.g. '25h' for last 25 hours. */
      timerange: components['schemas']['TimerangeModel']
      /**
       * Graph Render Options
       * @description Graph render options
       */
      graph_render_options?: components['schemas']['GraphRenderOptions']
      /**
       * @description Displays a combined graph (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'combined_graph'
      /**
       * Graph Template
       * @description The graph template to use for the combined graph.
       */
      graph_template: string
      /**
       * Presentation
       * @description The format of the combined graph.
       * @enum {string}
       */
      presentation: 'lines' | 'stacked' | 'sum' | 'average' | 'min' | 'max'
    }
    /** CustomGraphContent */
    CustomGraphContent: {
      /** @description The time range for the graph, e.g. '25h' for last 25 hours. */
      timerange: components['schemas']['TimerangeModel']
      /**
       * Graph Render Options
       * @description Graph render options
       */
      graph_render_options?: components['schemas']['GraphRenderOptions']
      /**
       * @description Displays a custom graph designed with the graph designer. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'custom_graph'
      /**
       * Custom Graph
       * @description Name of the custom graph.
       */
      custom_graph: string
    }
    /** DashboardFilterContextResponse */
    DashboardFilterContextResponse: {
      /**
       * Restricted To Single
       * @description A list of single infos that this dashboard is restricted to. This means that the dashboard must be filtered to exactly one item for each info name.
       */
      restricted_to_single: components['schemas']['AnnotatedInfoName'][]
      /**
       * Filters
       * @description Active filters in the format filter_id -> (variable -> value)
       */
      filters: {
        [key: string]: {
          [key: string]: string
        }
      }
      /**
       * Mandatory Context Filters
       * @description Filters that are required to use this dashboard.
       */
      mandatory_context_filters: string[]
      /**
       * Uses Infos
       * @description A list of info names that this dashboard uses. This is used to determine the available filters.
       */
      uses_infos: components['schemas']['AnnotatedInfoName'][]
    }
    /** DashboardGeneralSettings */
    DashboardGeneralSettings: {
      /**
       * @description Title settings.
       * @example {
       *       "render": true,
       *       "text": "My Dashboard"
       *     }
       */
      title: components['schemas']['DashboardTitle']
      /**
       * Description
       * @description Description of the dashboard.
       * @example This dashboard shows ...
       */
      description?: string
      /** @description Settings relating to the main menu. */
      menu: components['schemas']['DashboardMenuSettings']
      /** @description Settings relating to the dashboards visibility. */
      visibility: components['schemas']['DashboardVisibility']
    }
    /** DashboardIcon */
    DashboardIcon: {
      /** @description The icon name. */
      name: components['schemas']['IconName']
      /**
       * Emblem
       * @description Additional icon name, that will be displayed as a smaller emblem.
       */
      emblem?: components['schemas']['IconName']
    }
    /** DashboardMenuSettings */
    DashboardMenuSettings: {
      /**
       * Topic
       * @description Which section in the `Monitor` menu this dashboard is displayed under.
       */
      topic: string
      /**
       * Sort Index
       * @description Order of the dashboard within the topic.
       */
      sort_index: number
      /**
       * Icon
       * @description Which icon to display, if the main menu icons are enabled.
       */
      icon?: components['schemas']['DashboardIcon']
      /**
       * Is Show More
       * @description If set, this dashboard will be displayed in the `Show more` section of the `Monitor` menu.
       */
      is_show_more: boolean
      /**
       * Search Terms
       * @description A list of search terms that can be used to find this dashboard in the `Monitor` menu.
       */
      search_terms: string[]
    }
    /** DashboardRelativeGridLayout */
    DashboardRelativeGridLayout: {
      /**
       * Type
       * @description The dashboard is in a relative grid layout.
       * @constant
       */
      type: 'relative_grid'
    }
    DashboardShare: 'no' | components['schemas']['_ShareOptions']
    /** DashboardShareWithAllUsers */
    DashboardShareWithAllUsers: {
      /**
       * @description Share the dashboard with all other users. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'with_all_users'
    }
    /** DashboardShareWithContactGroups */
    DashboardShareWithContactGroups: {
      /**
       * @description Share the dashboard with users of these contact groups. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'with_contact_groups'
      /** Contact Groups */
      contact_groups: string[]
    }
    /** DashboardShareWithSites */
    DashboardShareWithSites: {
      /**
       * @description Share the dashboard with users of these sites. The sites need to activate changes for this to take effect. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'with_sites'
      /** Sites */
      sites: string[]
    }
    /** DashboardTitle */
    DashboardTitle: {
      /**
       * Text
       * @description The title of the dashboard.
       */
      text: string
      /**
       * Render
       * @description Displays the title when viewing the dashboard.
       */
      render: boolean
      /**
       * Include Context
       * @description Include the context in the title.
       */
      include_context: boolean
    }
    /** DashboardVisibility */
    DashboardVisibility: {
      /**
       * Hide In Monitor Menu
       * @description Hide this dashboard in the `Monitor` menu.
       */
      hide_in_monitor_menu: boolean
      /**
       * Hide In Drop Down Menus
       * @description Hide this dashboard in drop down menus.
       */
      hide_in_drop_down_menus: boolean
      /** @description Make this dashboard available to other users. */
      share: components['schemas']['DashboardShare']
    }
    DefaultOrColor: 'default' | components['schemas']['ColorHex']
    /** EmbeddedViewContent */
    EmbeddedViewContent: {
      /**
       * @description Display a view which is fully defined within the dashboard. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'embedded_view'
      /**
       * Embedded Id
       * @description The internal ID of the view. This must exist in the embedded view definitions.
       */
      embedded_id: string
      /**
       * Datasource
       * @description The datasource of the embedded view. Must match the embedded view.
       */
      datasource: string
    }
    /** EventStatsContent */
    EventStatsContent: {
      /**
       * @description Displays statistics about events as a hexagon and a table. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'event_stats'
    }
    /** @enum {string} */
    ForStates: 'all' | 'not_ok'
    /** GaugeContent */
    GaugeContent: {
      /**
       * Metric
       * @description Name of the metric.
       */
      metric: string
      /**
       * @description Display a single value as a gauge. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'gauge'
      /** @description Time range to select values from. */
      time_range: components['schemas']['MetricTimeRangeModel']
      /** @description Range of values to display. */
      display_range: components['schemas']['MetricDisplayRangeFixedModel']
      /**
       * Status Display
       * @description Display the service status.
       */
      status_display?: components['schemas']['MetricStatusDisplayModel']
    }
    /** GraphRenderOptions */
    GraphRenderOptions: {
      /**
       * Font Size Pt
       * @description Font size in points.
       */
      font_size_pt?: number
      /**
       * Show Title
       * @description Whether to show the title of the graph.
       */
      show_title?: boolean | 'inline'
      /**
       * Title Format
       * @description Format of the graph title.
       */
      title_format?: ('plain' | 'add_host_name' | 'add_host_alias' | 'add_service_description')[]
      /**
       * Show Graph Time
       * @description Show the graph time range on top of the graph.
       */
      show_graph_time?: boolean
      /**
       * Show Margin
       * @description Show the margin around the graph.
       */
      show_margin?: boolean
      /**
       * Show Legend
       * @description Show the graph legend.
       */
      show_legend?: boolean
      /**
       * Show Vertical Axis
       * @description Show the graph vertical axis.
       */
      show_vertical_axis?: boolean
      /**
       * Vertical Axis Width
       * @description Width of the vertical axis.
       */
      vertical_axis_width?: 'fixed' | number
      /**
       * Show Time Axis
       * @description Show the graph time axis.
       */
      show_time_axis?: boolean
      /**
       * Show Controls
       * @description Show the graph controls.
       */
      show_controls?: boolean
      /**
       * Show Pin
       * @description Show the pin.
       */
      show_pin?: boolean
      /**
       * Show Time Range Previews
       * @description Show time range previews.
       */
      show_time_range_previews?: boolean
      /**
       * Fixed Timerange
       * @description Do not follow timerange changes of other graphs on the current page.
       */
      fixed_timerange?: boolean
      /**
       * Border Width Mm
       * @description Width of the black border around the whole graph, in millimeters. Enter 0 for no border here.
       */
      border_width_mm?: number
      /**
       * Color Gradient
       * @description Slight gradient in the colors of the colored areas in the graphs. 0% turns off the gradient, 100% makes it the strongest possible.
       */
      color_gradient?: number
    }
    /** @enum {string} */
    HostState: 'UP' | 'DOWN' | 'UNREACHABLE'
    /** HostStateContent */
    HostStateContent: {
      /**
       * Status Display
       * @description Display the status.
       */
      status_display?: components['schemas']['StateStatusDisplayBackground']
      /**
       * Show Summary
       * @description Show a summary of the state.
       * @constant
       */
      show_summary?: 'not_ok'
      /**
       * @description Displays the state of a host. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'host_state'
    }
    /** HostStateSummaryContent */
    HostStateSummaryContent: {
      /**
       * @description Displays amount of hosts in a selected state. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'host_state_summary'
      /** @description The state of the hosts to be displayed. */
      state: components['schemas']['HostState']
    }
    /** HostStatsContent */
    HostStatsContent: {
      /**
       * @description Displays statistics about host states as a hexagon and a table. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'host_stats'
    }
    IconName: string
    /** InventoryContent */
    InventoryContent: {
      /**
       * @description Displays inventory data of a Host. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'inventory'
      /**
       * Path
       * @description The path to the inventory data to display.
       * @example .software.os.type
       */
      path: string
    }
    /** LinkedViewContent */
    LinkedViewContent: {
      /**
       * @description Display an existing view. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'linked_view'
      /**
       * View Name
       * @description The name of the view.
       */
      view_name: string
    }
    /** MetricDisplayRangeFixedModel */
    MetricDisplayRangeFixedModel: {
      /**
       * Type
       * @description Display a fixed range of values.
       * @constant
       */
      type: 'fixed'
      /**
       * Unit
       * @description Unit for the range
       */
      unit: string
      /**
       * Minimum
       * @description Minimum value of the range.
       */
      minimum: number
      /**
       * Maximum
       * @description Maximum value of the range.
       */
      maximum: number
    }
    MetricDisplayRangeModel: 'automatic' | components['schemas']['MetricDisplayRangeFixedModel']
    /** MetricStatusDisplayBackground */
    MetricStatusDisplayBackground: {
      /**
       * @description Show a colored status label and color the metric background. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'background'
      /** @description Which states to show the status label for. */
      for_states: components['schemas']['ForStates']
    }
    MetricStatusDisplayModel:
      | components['schemas']['MetricStatusDisplayText']
      | components['schemas']['MetricStatusDisplayBackground']
    /** MetricStatusDisplayText */
    MetricStatusDisplayText: {
      /**
       * @description Show a colored status label. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'text'
      /** @description Which states to show the status label for. */
      for_states: components['schemas']['ForStates']
    }
    MetricTimeRangeModel: 'current' | components['schemas']['MetricTimeRangeWindow']
    /** MetricTimeRangeWindow */
    MetricTimeRangeWindow: {
      /**
       * Type
       * @description Select values over a range of time.
       * @constant
       */
      type: 'window'
      /** @description Time range to select values from. */
      window: components['schemas']['TimerangeModel']
      /**
       * Consolidation
       * @description How to consolidate the values over the time range.
       * @enum {string}
       */
      consolidation: 'average' | 'minimum' | 'maximum'
    }
    /** @enum {string} */
    MonitoringState: 'OK' | 'WARNING' | 'CRITICAL' | 'UNKNOWN'
    /** NotSupportedContent */
    NotSupportedContent: {
      /**
       * @description Content type that is no longer supported. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'not_supported'
      /**
       * Original Type
       * @description Internal name of the unsupported content type.
       */
      original_type: string
    }
    /** NotificationTimelineContent */
    NotificationTimelineContent: {
      /** @description Defines how the timeline should be rendered. */
      render_mode: components['schemas']['RenderMode']
      /**
       * Log Target
       * @description Defines which log target to use for the timeline.
       * @enum {string}
       */
      log_target: 'both' | 'host' | 'service'
      /**
       * @description Displays host and service notifications. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'notification_timeline'
    }
    /** NtopAlertsContent */
    NtopAlertsContent: {
      /**
       * @description Display Ntop engaged, past and flow alerts. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'ntop_alerts'
    }
    /** NtopFlowsContent */
    NtopFlowsContent: {
      /**
       * @description Display Ntop flow information. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'ntop_flows'
    }
    /** NtopTopTalkersContent */
    NtopTopTalkersContent: {
      /**
       * @description Displays Top Talkers. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'ntop_top_talkers'
    }
    /** PerformanceGraphContent */
    PerformanceGraphContent: {
      /** @description The time range for the graph, e.g. '25h' for last 25 hours. */
      timerange: components['schemas']['TimerangeModel']
      /**
       * Graph Render Options
       * @description Graph render options
       */
      graph_render_options?: components['schemas']['GraphRenderOptions']
      /**
       * @description Displays a performance graph of a host or service. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'performance_graph'
      /**
       * Source
       * @description Graph id or number of the performance graph.
       */
      source: string | number
    }
    /** ProblemGraphContent */
    ProblemGraphContent: {
      /** @description The time range for the graph, e.g. '25h' for last 25 hours. */
      timerange: components['schemas']['TimerangeModel']
      /**
       * Graph Render Options
       * @description Graph render options
       */
      graph_render_options?: components['schemas']['GraphRenderOptions']
      /**
       * @description Shows the percentage of services that are not OK in relation to the total number of services. This widget is not respecting the full filter context of the dashboard, only the 'site' filter. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'problem_graph'
    }
    /** RelativeGridDashboardResponse */
    RelativeGridDashboardResponse: {
      /** @description General settings for the dashboard. */
      general_settings: components['schemas']['DashboardGeneralSettings']
      /** @description Filter context for the dashboard. */
      filter_context: components['schemas']['DashboardFilterContextResponse']
      /**
       * Owner
       * @description The owner of the dashboard.
       * @example admin
       */
      owner: string
      /**
       * Last Modified At
       * Format: date-time
       * @description The last modification time of the dashboard.
       */
      last_modified_at: string
      /** @description The layout the dashboard uses. */
      layout: components['schemas']['DashboardRelativeGridLayout']
      /**
       * Widgets
       * @description All widgets that are part of this dashboard.
       */
      widgets: {
        [key: string]: components['schemas']['RelativeGridWidgetResponse']
      }
    }
    /** RelativeGridWidgetResponse */
    RelativeGridWidgetResponse: {
      /**
       * @description General settings for the widget.
       * @example {
       *       "render_background": true,
       *       "title": {
       *         "render_mode": "with-background",
       *         "text": "My Widget",
       *         "url": "https://example.com"
       *       }
       *     }
       */
      general_settings: components['schemas']['WidgetGeneralSettings']
      /**
       * @description Content of the widget.
       * @example {
       *       "text": "This is a static text widget.",
       *       "type": "static_text"
       *     }
       */
      content: components['schemas']['WidgetContent']
      /** @description The filter context for the widget. */
      filter_context: components['schemas']['WidgetFilterContext']
      /**
       * @description Layout of the widget.
       * @example {
       *       "position": {
       *         "x": 0,
       *         "y": 0
       *       },
       *       "size": {
       *         "height": 1,
       *         "width": 2
       *       },
       *       "type": "relative_grid"
       *     }
       */
      layout: components['schemas']['WidgetRelativeGridLayout']
    }
    RenderMode:
      | components['schemas']['BarChartRenderMode']
      | components['schemas']['SimpleNumberRenderMode']
    /** ServiceStateContent */
    ServiceStateContent: {
      /**
       * Status Display
       * @description Display the status.
       */
      status_display?: components['schemas']['StateStatusDisplayBackground']
      /**
       * Show Summary
       * @description Show a summary of the state.
       * @constant
       */
      show_summary?: 'not_ok'
      /**
       * @description Displays the state of a service. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'service_state'
    }
    /** ServiceStateSummaryContent */
    ServiceStateSummaryContent: {
      /**
       * @description Displays amount of services in a selected state. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'service_state_summary'
      /** @description The state of the services to be displayed. */
      state: components['schemas']['MonitoringState']
    }
    /** ServiceStatsContent */
    ServiceStatsContent: {
      /**
       * @description Displays statistics about service states as a hexagon and a table. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'service_stats'
    }
    /** SidebarElementContent */
    SidebarElementContent: {
      /**
       * @description Allows you to use a sidebar element in the dashboard. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'sidebar_element'
      /**
       * Name
       * @description Identifier of the sidebar element.
       */
      name: string
    }
    /** SimpleNumberRenderMode */
    SimpleNumberRenderMode: {
      /**
       * @description Renders a simple number. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'simple_number'
      /** @description The time range for the simple number. */
      time_range: components['schemas']['TimerangeModel']
    }
    /** SingleMetricContent */
    SingleMetricContent: {
      /**
       * Metric
       * @description Name of the metric.
       */
      metric: string
      /**
       * @description Displays a single metric of a specific host and service. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'single_metric'
      /** @description Time range to select values from. */
      time_range: components['schemas']['MetricTimeRangeModel']
      /**
       * Status Display
       * @description Display the service status.
       */
      status_display?: components['schemas']['MetricStatusDisplayModel']
      /** @description Range of values to display. */
      display_range: components['schemas']['MetricDisplayRangeModel']
      /**
       * Show Display Range Limits
       * @description Display axis labels for the selected/automatic data range.
       */
      show_display_range_limits: boolean
    }
    /** SingleTimeseriesContent */
    SingleTimeseriesContent: {
      /** @description The time range for the graph, e.g. '25h' for last 25 hours. */
      timerange: components['schemas']['TimerangeModel']
      /**
       * Graph Render Options
       * @description Graph render options
       */
      graph_render_options?: components['schemas']['GraphRenderOptions']
      /**
       * @description Displays a timeseries for a single metric of a specific host and service. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'single_timeseries'
      /**
       * Metric
       * @description Name of the metric.
       */
      metric: string
      /**
       * Color
       * @description Color of the timeseries line.
       */
      color: ('default_theme' | 'default_metric') | components['schemas']['ColorHex']
    }
    /** SiteOverviewContent */
    SiteOverviewContent: {
      /**
       * @description Displays either sites and states or hosts and states of a site. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'site_overview'
      /**
       * Dataset
       * @description Defines whether the widget shows sites and their states or hosts and their states. If 'via_context', the dataset is determined by the active filters and site setup.
       * @enum {string}
       */
      dataset: 'via_context' | 'sites' | 'hosts'
      /**
       * Hexagon Size
       * @description Defines the size of the hexagons in the widget.
       * @enum {string}
       */
      hexagon_size: 'default' | 'large'
    }
    /** StateStatusDisplayBackground */
    StateStatusDisplayBackground: {
      /**
       * Type
       * @description Display the state with a background color.
       * @constant
       */
      type: 'background'
      /**
       * For States
       * @description Display all states or only not OK states.
       * @enum {string}
       */
      for_states: 'all' | 'not_ok'
    }
    /** StaticTextContent */
    StaticTextContent: {
      /**
       * @description Displays static text. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'static_text'
      /**
       * Text
       * @description The static text to be displayed.
       */
      text: string
    }
    /** @enum {string} */
    TimeResolution: 'hour' | 'day'
    TimerangeModel:
      | components['schemas']['_TimerangePredefined']
      | components['schemas']['_TimerangeGraph']
      | components['schemas']['_TimerangeAge']
      | components['schemas']['_TimerangeDate']
    /** TopListColumns */
    TopListColumns: {
      /**
       * Show Service Description
       * @description Show the service description in the top list.
       */
      show_service_description: boolean
      /**
       * Show Bar Visualization
       * @description Show a bar visualization for the metric values in the top list.
       */
      show_bar_visualization: boolean
    }
    /** TopListContent */
    TopListContent: {
      /**
       * Metric
       * @description Name of the metric.
       */
      metric: string
      /**
       * @description Display a list of top metrics. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'top_list'
      /** @description Columns to display in the top list. */
      columns: components['schemas']['TopListColumns']
      /** @description Range of values to display. */
      display_range: components['schemas']['MetricDisplayRangeModel']
      /**
       * Ranking Order
       * @description Display highest or lowest values.
       * @enum {string}
       */
      ranking_order: 'high' | 'low'
      /**
       * Limit To
       * @description Limit the number of entries in the top list.
       */
      limit_to: number
    }
    /** URLContent */
    URLContent: {
      /**
       * @description Displays the content of a custom website. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'url'
      /**
       * Url
       * @description URL of the website.
       */
      url: string
    }
    /** UserMessagesContent */
    UserMessagesContent: {
      /**
       * @description Display GUI messages sent to users. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'user_messages'
    }
    WidgetContent:
      | components['schemas']['StaticTextContent']
      | components['schemas']['LinkedViewContent']
      | components['schemas']['EmbeddedViewContent']
      | components['schemas']['ProblemGraphContent']
      | components['schemas']['CombinedGraphContent']
      | components['schemas']['SingleTimeseriesContent']
      | components['schemas']['CustomGraphContent']
      | components['schemas']['PerformanceGraphContent']
      | components['schemas']['BarplotContent']
      | components['schemas']['GaugeContent']
      | components['schemas']['SingleMetricContent']
      | components['schemas']['AverageScatterplotContent']
      | components['schemas']['TopListContent']
      | components['schemas']['HostStateContent']
      | components['schemas']['ServiceStateContent']
      | components['schemas']['HostStateSummaryContent']
      | components['schemas']['ServiceStateSummaryContent']
      | components['schemas']['InventoryContent']
      | components['schemas']['AlertOverviewContent']
      | components['schemas']['SiteOverviewContent']
      | components['schemas']['HostStatsContent']
      | components['schemas']['ServiceStatsContent']
      | components['schemas']['EventStatsContent']
      | components['schemas']['AlertTimelineContent']
      | components['schemas']['NotificationTimelineContent']
      | components['schemas']['UserMessagesContent']
      | components['schemas']['SidebarElementContent']
      | components['schemas']['URLContent']
      | components['schemas']['NtopAlertsContent']
      | components['schemas']['NtopFlowsContent']
      | components['schemas']['NtopTopTalkersContent']
      | components['schemas']['NotSupportedContent']
    /** WidgetFilterContext */
    WidgetFilterContext: {
      /**
       * Uses Infos
       * @description A list of info names that this widget content uses. This is used to determine the available filters for the widget.
       */
      uses_infos: components['schemas']['AnnotatedInfoName'][]
      /**
       * Filters
       * @description Active filters in the format filter_id -> (variable -> value)
       */
      filters: {
        [key: string]: {
          [key: string]: string
        }
      }
    }
    /** WidgetGeneralSettings */
    WidgetGeneralSettings: {
      /**
       * Title
       * @description Title settings for the widget.
       */
      title?: components['schemas']['WidgetTitle']
      /**
       * Render Background
       * @description Whether the widget should render a gray background.
       */
      render_background: boolean
    }
    /** WidgetRelativeGridLayout */
    WidgetRelativeGridLayout: {
      /**
       * Type
       * @description This setting must be in sync with the dashboards layout.
       * @constant
       */
      type: 'relative_grid'
      /** @description Position of the widget. */
      position: components['schemas']['WidgetRelativeGridPosition']
      /** @description Size of the widget. */
      size: components['schemas']['WidgetRelativeGridSize']
    }
    /** WidgetTitle */
    WidgetTitle: {
      /**
       * Text
       * @description The title of the widget.
       */
      text: string
      /**
       * Url
       * @description Optional URL the title should link to.
       */
      url?: string
      /**
       * Render Mode
       * @description How the title should be rendered.
       * @enum {string}
       */
      render_mode: 'hidden' | 'with_background' | 'without_background'
    }
    /** @enum {string} */
    _Predefined:
      | 'last_4_hours'
      | 'last_25_hours'
      | 'last_8_days'
      | 'last_35_days'
      | 'last_400_days'
      | 'today'
      | 'yesterday'
      | '7_days_ago'
      | '8_days_ago'
      | 'this_week'
      | 'last_week'
      | '2_weeks_ago'
      | 'this_month'
      | 'last_month'
      | 'this_year'
      | 'last_year'
    _ShareOptions:
      | components['schemas']['DashboardShareWithAllUsers']
      | components['schemas']['DashboardShareWithContactGroups']
      | components['schemas']['DashboardShareWithSites']
    /** _TimerangeAge */
    _TimerangeAge: {
      /**
       * @description Manually define a relative timerange. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'age'
      /**
       * Days
       * @description The number of days to look back.
       */
      days?: components['schemas']['_ZeroOrPositiveInt']
      /**
       * Hours
       * @description The number of hours to look back.
       */
      hours?: components['schemas']['_ZeroOrPositiveInt']
      /**
       * Minutes
       * @description The number of minutes to look back.
       */
      minutes?: components['schemas']['_ZeroOrPositiveInt']
      /**
       * Seconds
       * @description The number of seconds to look back.
       */
      seconds?: components['schemas']['_ZeroOrPositiveInt']
    }
    /** _TimerangeDate */
    _TimerangeDate: {
      /**
       * @description Manually define a fixed timerange. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'date'
      /**
       * Start
       * Format: date
       * @description The start date in ISO format (YYYY-MM-DD).
       */
      start: string
      /**
       * End
       * Format: date
       * @description The end date in ISO format (YYYY-MM-DD).
       */
      end: string
    }
    /** _TimerangeGraph */
    _TimerangeGraph: {
      /**
       * @description Select a predefined graph timerange. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'graph'
      /**
       * Duration
       * @description The duration in seconds.
       */
      duration: number
    }
    /** _TimerangePredefined */
    _TimerangePredefined: {
      /**
       * @description Select a predefined timerange. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'predefined'
      /** @description The timerange. */
      value: components['schemas']['_Predefined']
    }
    _ZeroOrPositiveInt: number
    /** RelativeGridDashboardDomainObject */
    RelativeGridDashboardDomainObject: {
      /**
       * Links
       * @description List of links to other resources.
       * @example [
       *       {
       *         "href": "https://.../api_resource",
       *         "method": "GET",
       *         "rel": "self",
       *         "type": "application/json"
       *       }
       *     ]
       */
      links: components['schemas']['LinkModel'][]
      /**
       * Domaintype
       * @description The domain type of the object.
       * @constant
       */
      domainType: 'dashboard'
      /**
       * ID
       * @description The unique identifier for this domain-object type.
       * @example host1
       */
      id?: string
      /**
       * Title
       * @description A human readable title of this object. Can be used for user interfaces.
       * @example My Host
       */
      title?: string
      /** @description All the data about this dashboard. */
      extensions: components['schemas']['RelativeGridDashboardResponse']
    }
    /** DashboardResponsiveGridLayout */
    DashboardResponsiveGridLayout: {
      /**
       * Type
       * @description The dashboard is in a responsive grid layout, that changes based on screen size.
       * @constant
       */
      type: 'responsive_grid'
      /**
       * Layouts
       * @description The configured responsive layouts. Every widget must configure it's size and position for every layout and breakpoint defined here.
       */
      layouts: {
        [key: string]: components['schemas']['ResponsiveGridLayoutSettings']
      }
    }
    /** ResponsiveGridDashboardResponse */
    ResponsiveGridDashboardResponse: {
      /** @description General settings for the dashboard. */
      general_settings: components['schemas']['DashboardGeneralSettings']
      /** @description Filter context for the dashboard. */
      filter_context: components['schemas']['DashboardFilterContextResponse']
      /**
       * Owner
       * @description The owner of the dashboard.
       * @example admin
       */
      owner: string
      /**
       * Last Modified At
       * Format: date-time
       * @description The last modification time of the dashboard.
       */
      last_modified_at: string
      /** @description The layout the dashboard uses. */
      layout: components['schemas']['DashboardResponsiveGridLayout']
      /**
       * Widgets
       * @description All widgets that are part of this dashboard.
       */
      widgets: {
        [key: string]: components['schemas']['ResponsiveGridWidgetResponse']
      }
    }
    /** ResponsiveGridLayoutSettings */
    ResponsiveGridLayoutSettings: {
      /**
       * Title
       * @description The display name of the responsive grid layout.
       */
      title: string
      /**
       * Breakpoints
       * @description The allowed/configured breakpoints for the layout.
       */
      breakpoints: components['schemas']['ResponsiveGridBreakpoint'][]
    }
    /** ResponsiveGridWidgetResponse */
    ResponsiveGridWidgetResponse: {
      /**
       * @description General settings for the widget.
       * @example {
       *       "render_background": true,
       *       "title": {
       *         "render_mode": "with-background",
       *         "text": "My Widget",
       *         "url": "https://example.com"
       *       }
       *     }
       */
      general_settings: components['schemas']['WidgetGeneralSettings']
      /**
       * @description Content of the widget.
       * @example {
       *       "text": "This is a static text widget.",
       *       "type": "static_text"
       *     }
       */
      content: components['schemas']['WidgetContent']
      /** @description The filter context for the widget. */
      filter_context: components['schemas']['WidgetFilterContext']
      /**
       * @description Layout of the widget.
       * @example {
       *       "layouts": {
       *         "default": {
       *           "L": {
       *             "position": {
       *               "x": 0,
       *               "y": 0
       *             },
       *             "size": {
       *               "columns": 6,
       *               "rows": 2
       *             }
       *           },
       *           "XL": {
       *             "position": {
       *               "x": 0,
       *               "y": 0
       *             },
       *             "size": {
       *               "columns": 8,
       *               "rows": 2
       *             }
       *           }
       *         }
       *       },
       *       "type": "responsive_grid"
       *     }
       */
      layout: components['schemas']['WidgetResponsiveGridLayouts']
    }
    /** WidgetResponsiveGridLayout */
    WidgetResponsiveGridLayout: {
      /** @description Position of the widget. In case the size is larger than 1, the position is the top-left corner. */
      position: components['schemas']['WidgetResponsiveGridPosition']
      /** @description Size of the widget. Must fit into the available columns. */
      size: components['schemas']['WidgetResponsiveGridSize']
    }
    /** WidgetResponsiveGridLayouts */
    WidgetResponsiveGridLayouts: {
      /**
       * Type
       * @description This setting must be in sync with the dashboards layout.
       * @constant
       */
      type: 'responsive_grid'
      /**
       * Layouts
       * @description Position and size of the widget for each layout and breakpoint.
       */
      layouts: {
        [key: string]: {
          [key: string]: components['schemas']['WidgetResponsiveGridLayout']
        }
      }
    }
    /** WidgetResponsiveGridPosition */
    WidgetResponsiveGridPosition: {
      /**
       * X
       * @description X position of the widget.
       */
      x: number
      /**
       * Y
       * @description Y position of the widget.
       */
      y: number
    }
    /** WidgetResponsiveGridSize */
    WidgetResponsiveGridSize: {
      /**
       * Columns
       * @description Width of the widget in number of columns.
       */
      columns: number
      /**
       * Rows
       * @description Height of the widget in number of rows.
       */
      rows: number
    }
    /** ResponsiveGridDashboardDomainObject */
    ResponsiveGridDashboardDomainObject: {
      /**
       * Links
       * @description List of links to other resources.
       * @example [
       *       {
       *         "href": "https://.../api_resource",
       *         "method": "GET",
       *         "rel": "self",
       *         "type": "application/json"
       *       }
       *     ]
       */
      links: components['schemas']['LinkModel'][]
      /**
       * Domaintype
       * @description The domain type of the object.
       * @constant
       */
      domainType: 'dashboard'
      /**
       * ID
       * @description The unique identifier for this domain-object type.
       * @example host1
       */
      id?: string
      /**
       * Title
       * @description A human readable title of this object. Can be used for user interfaces.
       * @example My Host
       */
      title?: string
      /** @description All the data about this dashboard. */
      extensions: components['schemas']['ResponsiveGridDashboardResponse']
    }
    /** DashboardFilterContext */
    DashboardFilterContext: {
      /**
       * Restricted To Single
       * @description A list of single infos that this dashboard is restricted to. This means that the dashboard must be filtered to exactly one item for each info name.
       */
      restricted_to_single: components['schemas']['AnnotatedInfoName'][]
      /**
       * Filters
       * @description Active filters in the format filter_id -> (variable -> value)
       */
      filters: {
        [key: string]: {
          [key: string]: string
        }
      }
      /**
       * Mandatory Context Filters
       * @description Filters that are required to use this dashboard.
       */
      mandatory_context_filters: string[]
    }
    /** RelativeGridWidgetRequest */
    RelativeGridWidgetRequest: {
      /**
       * @description General settings for the widget.
       * @example {
       *       "render_background": true,
       *       "title": {
       *         "render_mode": "with-background",
       *         "text": "My Widget",
       *         "url": "https://example.com"
       *       }
       *     }
       */
      general_settings: components['schemas']['WidgetGeneralSettings']
      /**
       * @description Content of the widget.
       * @example {
       *       "text": "This is a static text widget.",
       *       "type": "static_text"
       *     }
       */
      content: components['schemas']['WidgetContent']
      /**
       * Filters
       * @description Active filters in the format filter_id -> (variable -> value)
       */
      filters: {
        [key: string]: {
          [key: string]: string
        }
      }
      /**
       * @description Layout of the widget.
       * @example {
       *       "position": {
       *         "x": 0,
       *         "y": 0
       *       },
       *       "size": {
       *         "height": 1,
       *         "width": 2
       *       },
       *       "type": "relative_grid"
       *     }
       */
      layout: components['schemas']['WidgetRelativeGridLayout']
    }
    /** EditDashboardV1 */
    EditDashboardV1: {
      /** @description General settings for the dashboard. */
      general_settings: components['schemas']['DashboardGeneralSettings']
      /** @description Filter context for the dashboard. */
      filter_context: components['schemas']['DashboardFilterContext']
      /** @description The layout the dashboard uses. */
      layout: components['schemas']['DashboardRelativeGridLayout']
      /**
       * Widgets
       * @description All widgets that are part of this dashboard.
       */
      widgets: {
        [key: string]: components['schemas']['RelativeGridWidgetRequest']
      }
    }
    /** Api400DefaultErrorDDACC62852906524 */
    Api400DefaultErrorDDACC62852906524: {
      /**
       * Status
       * @description The HTTP status code.
       * @example 400
       */
      status: number
      /**
       * Title
       * @description A summary of the problem.
       * @example Bad Request
       */
      title: string
      /**
       * Detail
       * @description Detailed information on what exactly went wrong.
       * @example Parameter or validation failure.
       */
      detail: string
      /**
       * Validation errors
       * @description Detailed error messages on all fields failing validation.
       * @example {
       *       "field": "error message"
       *     }
       */
      fields?: {
        [key: string]: string
      }
      /**
       * Error extensions
       * @description Additional information about the error.
       * @example {
       *       "key": "value"
       *     }
       */
      ext?: {
        [key: string]: string
      }
    }
    /** Api415DefaultErrorDC1454384BB8AA8A */
    Api415DefaultErrorDC1454384BB8AA8A: {
      /**
       * Status
       * @description The HTTP status code.
       * @example 415
       */
      status: number
      /**
       * Title
       * @description A summary of the problem.
       * @example Unsupported Media Type
       */
      title: string
      /**
       * Detail
       * @description Detailed information on what exactly went wrong.
       * @example The submitted content-type is not supported.
       */
      detail: string
      /**
       * Validation errors
       * @description Detailed error messages on all fields failing validation.
       * @example {
       *       "field": "error message"
       *     }
       */
      fields?: {
        [key: string]: string
      }
      /**
       * Error extensions
       * @description Additional information about the error.
       * @example {
       *       "key": "value"
       *     }
       */
      ext?: {
        [key: string]: string
      }
    }
    /** ResponsiveGridWidgetRequest */
    ResponsiveGridWidgetRequest: {
      /**
       * @description General settings for the widget.
       * @example {
       *       "render_background": true,
       *       "title": {
       *         "render_mode": "with-background",
       *         "text": "My Widget",
       *         "url": "https://example.com"
       *       }
       *     }
       */
      general_settings: components['schemas']['WidgetGeneralSettings']
      /**
       * @description Content of the widget.
       * @example {
       *       "text": "This is a static text widget.",
       *       "type": "static_text"
       *     }
       */
      content: components['schemas']['WidgetContent']
      /**
       * Filters
       * @description Active filters in the format filter_id -> (variable -> value)
       */
      filters: {
        [key: string]: {
          [key: string]: string
        }
      }
      /**
       * @description Layout of the widget.
       * @example {
       *       "layouts": {
       *         "default": {
       *           "L": {
       *             "position": {
       *               "x": 0,
       *               "y": 0
       *             },
       *             "size": {
       *               "columns": 6,
       *               "rows": 2
       *             }
       *           },
       *           "XL": {
       *             "position": {
       *               "x": 0,
       *               "y": 0
       *             },
       *             "size": {
       *               "columns": 8,
       *               "rows": 2
       *             }
       *           }
       *         }
       *       },
       *       "type": "responsive_grid"
       *     }
       */
      layout: components['schemas']['WidgetResponsiveGridLayouts']
    }
    /** EditResponsiveGridDashboardV1 */
    EditResponsiveGridDashboardV1: {
      /** @description General settings for the dashboard. */
      general_settings: components['schemas']['DashboardGeneralSettings']
      /** @description Filter context for the dashboard. */
      filter_context: components['schemas']['DashboardFilterContext']
      /** @description The layout the dashboard uses. */
      layout: components['schemas']['DashboardResponsiveGridLayout']
      /**
       * Widgets
       * @description All widgets that are part of this dashboard.
       */
      widgets: {
        [key: string]: components['schemas']['ResponsiveGridWidgetRequest']
      }
    }
    /** ComputedWidgetSpecRequest */
    ComputedWidgetSpecRequest: {
      /** @description Widget content to compute attributes for. */
      content: components['schemas']['WidgetContent']
    }
    /** ComputedFilterContext */
    ComputedFilterContext: {
      /**
       * Uses Infos
       * @description A list of info names that the widget content uses. This means that the widget can be filtered by these info names.
       */
      uses_infos: components['schemas']['AnnotatedInfoName'][]
    }
    /** ComputedWidgetSpec */
    ComputedWidgetSpec: {
      /** @description Computed filter context attributes for the widget. */
      filter_context: components['schemas']['ComputedFilterContext']
    }
    /** ComputedWidgetSpecResponse */
    ComputedWidgetSpecResponse: {
      /**
       * Domaintype
       * @description The domain type of the object.
       * @constant
       */
      domainType: 'widget-compute'
      /** @description Computed widget specification attributes */
      value: components['schemas']['ComputedWidgetSpec']
    }
    /** CreateDashboardV1 */
    CreateDashboardV1: {
      /** @description General settings for the dashboard. */
      general_settings: components['schemas']['DashboardGeneralSettings']
      /** @description Filter context for the dashboard. */
      filter_context: components['schemas']['DashboardFilterContext']
      /** @description The layout the dashboard uses. */
      layout: components['schemas']['DashboardRelativeGridLayout']
      /**
       * Widgets
       * @description All widgets that are part of this dashboard.
       */
      widgets: {
        [key: string]: components['schemas']['RelativeGridWidgetRequest']
      }
      /**
       * Id
       * @description Unique identifier for the dashboard.
       * @example custom_dashboard
       */
      id: string
    }
    /** CreateResponsiveGridDashboardV1 */
    CreateResponsiveGridDashboardV1: {
      /** @description General settings for the dashboard. */
      general_settings: components['schemas']['DashboardGeneralSettings']
      /** @description Filter context for the dashboard. */
      filter_context: components['schemas']['DashboardFilterContext']
      /** @description The layout the dashboard uses. */
      layout: components['schemas']['DashboardResponsiveGridLayout']
      /**
       * Widgets
       * @description All widgets that are part of this dashboard.
       */
      widgets: {
        [key: string]: components['schemas']['ResponsiveGridWidgetRequest']
      }
      /**
       * Id
       * @description Unique identifier for the dashboard.
       * @example custom_dashboard
       */
      id: string
    }
    FixedDowntimeMode: {
      /**
       * @description The downtime is fixed to the start and end time. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'fixed'
    }
    FlexibleDowntimeMode: {
      /**
       * @description The downtime starts if the host or service goes down during the specified start and end time window. It will then last for at most the given duration, which can extend past the end time. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'flexible'
      /**
       * @description The flexible duration in minutes.
       * @example 120
       */
      duration_minutes: number
    }
    DowntimeMode:
      | components['schemas']['FixedDowntimeMode']
      | components['schemas']['FlexibleDowntimeMode']
    HostDowntimeAttributes: {
      /**
       * @description The site id of the downtime.
       * @example heute
       */
      site_id: string
      /**
       * @description The host name.
       * @example cmk.abc.ch
       */
      host_name: string
      /**
       * @description The author of the downtime.
       * @example Mr Bojangles
       */
      author: string
      /**
       * Format: date-time
       * @description The start time of the downtime.
       * @example 2023-08-04T08:58:01+00:00
       */
      start_time: string
      /**
       * Format: date-time
       * @description The end time of the downtime.
       * @example 2023-08-04T09:18:01+00:00
       */
      end_time: string
      /**
       * @description Indicates if this downtime is time-repetitive
       * @example true
       */
      recurring: boolean
      /**
       * @description A comment text.
       * @example Down for update
       */
      comment: string
      /**
       * @description The mode of the downtime, either fixed or flexible.
       * @example {
       *       "type": "flexible",
       *       "duration_minutes": 120
       *     }
       */
      mode: components['schemas']['DowntimeMode']
      /**
       * @description Host downtime entry (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      is_service: 'host'
    }
    ServiceDowntimeAttributes: {
      /**
       * @description The site id of the downtime.
       * @example heute
       */
      site_id: string
      /**
       * @description The host name.
       * @example cmk.abc.ch
       */
      host_name: string
      /**
       * @description The author of the downtime.
       * @example Mr Bojangles
       */
      author: string
      /**
       * Format: date-time
       * @description The start time of the downtime.
       * @example 2023-08-04T08:58:01+00:00
       */
      start_time: string
      /**
       * Format: date-time
       * @description The end time of the downtime.
       * @example 2023-08-04T09:18:01+00:00
       */
      end_time: string
      /**
       * @description Indicates if this downtime is time-repetitive
       * @example true
       */
      recurring: boolean
      /**
       * @description A comment text.
       * @example Down for update
       */
      comment: string
      /**
       * @description The mode of the downtime, either fixed or flexible.
       * @example {
       *       "type": "flexible",
       *       "duration_minutes": 120
       *     }
       */
      mode: components['schemas']['DowntimeMode']
      /**
       * @description Service downtime entry (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      is_service: 'service'
      /**
       * @description The service name if the downtime corresponds to a service, otherwise this field is not present.
       * @example CPU Load
       */
      service_description: string
    }
    DowntimeAttributes:
      | components['schemas']['HostDowntimeAttributes']
      | components['schemas']['ServiceDowntimeAttributes']
    DowntimeObject: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The domain type of the object.
       * @default downtime
       */
      domainType: unknown
      /** @description The unique identifier for this domain-object type. */
      id?: string
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description The container for external resources, like linked foreign objects or actions. */
      members?: {
        [key: string]: unknown
      }
      /** @description The attributes of a downtime. */
      extensions?: components['schemas']['DowntimeAttributes']
    }
    DowntimeCollection: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The name of this collection.
       * @default all
       */
      id: string
      /**
       * @description The domain type of the objects in the collection.
       * @default downtime
       */
      domainType: unknown
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description A list of downtime objects. */
      value?: components['schemas']['DowntimeObject'][]
      /** @description Additional attributes alongside the collection. */
      extensions?: {
        [key: string]: unknown
      }
    }
    ModifyEndTimeByDatetime: {
      /**
       * @description How to modify the end time of a downtime. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      modify_type: 'absolute'
      /**
       * Format: iso8601
       * @description The end datetime of the downtime. The format has to conform to the ISO 8601 profile
       * @example 2017-07-21T17:32:28Z
       */
      value: string
    }
    ModifyEndTimeByDelta: {
      /**
       * @description How to modify the end time of a downtime. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      modify_type: 'relative'
      /**
       * @description A positive or negative number representing the amount of minutes to be added to or substracted from the current end time. The value must be non-zero
       * @example 60
       */
      value: number
    }
    ModifyEndTimeType:
      | components['schemas']['ModifyEndTimeByDatetime']
      | components['schemas']['ModifyEndTimeByDelta']
    ModifyDowntimeById: {
      /**
       * @description The option of how to select the downtimes to be targeted by the modification. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      modify_type: 'by_id'
      /**
       * @description The option how to modify the end time of a downtime. If modify_type is set to 'absolute', then the end time will be set to the date time specified in the value field. If modify_type is set to 'relative', then the current end time will be modified by the amount of minutes specified in the value field. If this attribute is not present, then the end time will not be modified.
       * @example {
       *       "modify_type": "absolute",
       *       "value": "2024-03-06T12:00:00Z"
       *     }
       */
      end_time?: components['schemas']['ModifyEndTimeType']
      /**
       * @description The comment for the downtime.
       * @example Security updates
       */
      comment?: string
      /**
       * @description The site from which you want to modify a downtime.
       * @example central
       */
      site_id: string
      /**
       * @description The id of the downtime
       * @example 54
       */
      downtime_id: string
    }
    ModifyDowntimeByName: {
      /**
       * @description The option of how to select the downtimes to be targeted by the modification. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      modify_type: 'params'
      /**
       * @description The option how to modify the end time of a downtime. If modify_type is set to 'absolute', then the end time will be set to the date time specified in the value field. If modify_type is set to 'relative', then the current end time will be modified by the amount of minutes specified in the value field. If this attribute is not present, then the end time will not be modified.
       * @example {
       *       "modify_type": "absolute",
       *       "value": "2024-03-06T12:00:00Z"
       *     }
       */
      end_time?: components['schemas']['ModifyEndTimeType']
      /**
       * @description The comment for the downtime.
       * @example Security updates
       */
      comment?: string
      /**
       * @description If set alone, then all downtimes of the host will be modified.
       * @example example.com
       */
      host_name: string
      /**
       * @description If set, the downtimes of the listed services of the specified host will be modified. If a service has multiple downtimes then all will be modified
       * @example [
       *       "CPU load",
       *       "Memory"
       *     ]
       */
      service_descriptions?: string[]
    }
    ModifyDowntimeByQuery: {
      /**
       * @description The option of how to select the downtimes to be targeted by the modification. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      modify_type: 'query'
      /**
       * @description The option how to modify the end time of a downtime. If modify_type is set to 'absolute', then the end time will be set to the date time specified in the value field. If modify_type is set to 'relative', then the current end time will be modified by the amount of minutes specified in the value field. If this attribute is not present, then the end time will not be modified.
       * @example {
       *       "modify_type": "absolute",
       *       "value": "2024-03-06T12:00:00Z"
       *     }
       */
      end_time?: components['schemas']['ModifyEndTimeType']
      /**
       * @description The comment for the downtime.
       * @example Security updates
       */
      comment?: string
      /**
       * @description An query expression of the Livestatus 'downtimes' table in nested dictionary form. If you want to use multiple expressions, nest them with the AND/OR operators.
       * @example {"op": "=", "left": "host_name", "right": "example.com"}
       */
      query: components['schemas']['Expr']
    }
    ModifyDowntimeByHostGroup: {
      /**
       * @description The option of how to select the downtimes to be targeted by the modification. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      modify_type: 'hostgroup'
      /**
       * @description The option how to modify the end time of a downtime. If modify_type is set to 'absolute', then the end time will be set to the date time specified in the value field. If modify_type is set to 'relative', then the current end time will be modified by the amount of minutes specified in the value field. If this attribute is not present, then the end time will not be modified.
       * @example {
       *       "modify_type": "absolute",
       *       "value": "2024-03-06T12:00:00Z"
       *     }
       */
      end_time?: components['schemas']['ModifyEndTimeType']
      /**
       * @description The comment for the downtime.
       * @example Security updates
       */
      comment?: string
      /**
       * @description Name of a valid hostgroup, all current downtimes for hosts in this group will be modified.
       * @example windows
       */
      hostgroup_name: string
    }
    ModifyDowntimeByServiceGroup: {
      /**
       * @description The option of how to select the downtimes to be targeted by the modification. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      modify_type: 'servicegroup'
      /**
       * @description The option how to modify the end time of a downtime. If modify_type is set to 'absolute', then the end time will be set to the date time specified in the value field. If modify_type is set to 'relative', then the current end time will be modified by the amount of minutes specified in the value field. If this attribute is not present, then the end time will not be modified.
       * @example {
       *       "modify_type": "absolute",
       *       "value": "2024-03-06T12:00:00Z"
       *     }
       */
      end_time?: components['schemas']['ModifyEndTimeType']
      /**
       * @description The comment for the downtime.
       * @example Security updates
       */
      comment?: string
      /**
       * @description Name of a valid servicegroup, all current downtimes for services in this group will be modified.
       * @example windows
       */
      servicegroup_name: string
    }
    ModifyDowntime:
      | components['schemas']['ModifyDowntimeById']
      | components['schemas']['ModifyDowntimeByName']
      | components['schemas']['ModifyDowntimeByQuery']
      | components['schemas']['ModifyDowntimeByHostGroup']
      | components['schemas']['ModifyDowntimeByServiceGroup']
    DeleteDowntimeById: {
      /**
       * @description The option how to delete a downtime. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      delete_type: 'by_id'
      /**
       * @description The site from which you want to delete a downtime.
       * @example heute
       */
      site_id: string
      /**
       * @description The id of the downtime
       * @example 54
       */
      downtime_id: string
    }
    DeleteDowntimeByName: {
      /**
       * @description The option how to delete a downtime. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      delete_type: 'params'
      /**
       * @description If set alone, then all downtimes of the host will be removed.
       * @example example.com
       */
      host_name: string
      /**
       * @description If set, the downtimes of the listed services of the specified host will be removed. If a service has multiple downtimes then all will be removed
       * @example [
       *       "CPU load",
       *       "Memory"
       *     ]
       */
      service_descriptions?: string[]
    }
    DeleteDowntimeByQuery: {
      /**
       * @description The option how to delete a downtime. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      delete_type: 'query'
      /**
       * @description An query expression of the Livestatus 'downtimes' table in nested dictionary form. If you want to use multiple expressions, nest them with the AND/OR operators.
       * @example {"op": "=", "left": "host_name", "right": "example.com"}
       */
      query: components['schemas']['Expr']
    }
    DeleteDowntimeByHostGroup: {
      /**
       * @description The option how to delete a downtime. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      delete_type: 'hostgroup'
      /**
       * @description Name of a valid hostgroup, all current downtimes for hosts in this group will be deleted.
       * @example windows
       */
      hostgroup_name: string
    }
    DeleteDowntimeByServiceGroup: {
      /**
       * @description The option how to delete a downtime. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      delete_type: 'servicegroup'
      /**
       * @description Name of a valid servicegroup, all current downtimes for services in this group will be deleted.
       * @example windows
       */
      servicegroup_name: string
    }
    DeleteDowntime:
      | components['schemas']['DeleteDowntimeById']
      | components['schemas']['DeleteDowntimeByName']
      | components['schemas']['DeleteDowntimeByQuery']
      | components['schemas']['DeleteDowntimeByHostGroup']
      | components['schemas']['DeleteDowntimeByServiceGroup']
    CreateHostDowntime: {
      /**
       * Format: iso8601
       * @description The start datetime of the new downtime. The format has to conform to the ISO 8601 profile
       * @example 2017-07-21T17:32:28Z
       */
      start_time: string
      /**
       * Format: iso8601
       * @description The end datetime of the new downtime. The format has to conform to the ISO 8601 profile
       * @example 2017-07-21T17:32:28Z
       */
      end_time: string
      /**
       * @description The recurring mode of the new downtime. Available modes are:     * fixed     * hour     * day     * week     * second_week     * fourth_week     * weekday_start     * weekday_end     * day_of_month  This only works when using the Enterprise Editions. Defaults to 'fixed'.
       * @default fixed
       * @example hour
       * @enum {string}
       */
      recur:
        | 'fixed'
        | 'hour'
        | 'day'
        | 'week'
        | 'second_week'
        | 'fourth_week'
        | 'weekday_start'
        | 'weekday_end'
        | 'day_of_month'
      /**
       * @description Duration in minutes. When set, the downtime does not begin automatically at a nominated time, but when a real problem status appears for the host. Consequencely, the start_time/end_time is only the time window in which the scheduled downtime can begin.
       * @default 0
       * @example 60
       */
      duration: number
      /** @example Security updates */
      comment?: string
      /**
       * @description The type of downtime to create.
       *
       *     Valid options are:
       *
       *      * `host` - Schedule downtimes for a host identified by host name or IP address
       *      * `hostgroup` - Schedule downtimes for all hosts belonging to the specified hostgroup
       *      * `host_by_query` - Schedule downtimes for all host matching the query
       *      (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      downtime_type: 'host'
      /**
       * @description The host name or IP address itself.
       * @example example.com
       */
      host_name: string
    }
    CreateHostGroupDowntime: {
      /**
       * Format: iso8601
       * @description The start datetime of the new downtime. The format has to conform to the ISO 8601 profile
       * @example 2017-07-21T17:32:28Z
       */
      start_time: string
      /**
       * Format: iso8601
       * @description The end datetime of the new downtime. The format has to conform to the ISO 8601 profile
       * @example 2017-07-21T17:32:28Z
       */
      end_time: string
      /**
       * @description The recurring mode of the new downtime. Available modes are:     * fixed     * hour     * day     * week     * second_week     * fourth_week     * weekday_start     * weekday_end     * day_of_month  This only works when using the Enterprise Editions. Defaults to 'fixed'.
       * @default fixed
       * @example hour
       * @enum {string}
       */
      recur:
        | 'fixed'
        | 'hour'
        | 'day'
        | 'week'
        | 'second_week'
        | 'fourth_week'
        | 'weekday_start'
        | 'weekday_end'
        | 'day_of_month'
      /**
       * @description Duration in minutes. When set, the downtime does not begin automatically at a nominated time, but when a real problem status appears for the host. Consequencely, the start_time/end_time is only the time window in which the scheduled downtime can begin.
       * @default 0
       * @example 60
       */
      duration: number
      /** @example Security updates */
      comment?: string
      /**
       * @description The type of downtime to create.
       *
       *     Valid options are:
       *
       *      * `host` - Schedule downtimes for a host identified by host name or IP address
       *      * `hostgroup` - Schedule downtimes for all hosts belonging to the specified hostgroup
       *      * `host_by_query` - Schedule downtimes for all host matching the query
       *      (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      downtime_type: 'hostgroup'
      /**
       * @description The name of the host group. A downtime will be scheduled for all hosts in this host group.
       * @example windows
       */
      hostgroup_name: string
    }
    CreateHostQueryDowntime: {
      /**
       * Format: iso8601
       * @description The start datetime of the new downtime. The format has to conform to the ISO 8601 profile
       * @example 2017-07-21T17:32:28Z
       */
      start_time: string
      /**
       * Format: iso8601
       * @description The end datetime of the new downtime. The format has to conform to the ISO 8601 profile
       * @example 2017-07-21T17:32:28Z
       */
      end_time: string
      /**
       * @description The recurring mode of the new downtime. Available modes are:     * fixed     * hour     * day     * week     * second_week     * fourth_week     * weekday_start     * weekday_end     * day_of_month  This only works when using the Enterprise Editions. Defaults to 'fixed'.
       * @default fixed
       * @example hour
       * @enum {string}
       */
      recur:
        | 'fixed'
        | 'hour'
        | 'day'
        | 'week'
        | 'second_week'
        | 'fourth_week'
        | 'weekday_start'
        | 'weekday_end'
        | 'day_of_month'
      /**
       * @description Duration in minutes. When set, the downtime does not begin automatically at a nominated time, but when a real problem status appears for the host. Consequencely, the start_time/end_time is only the time window in which the scheduled downtime can begin.
       * @default 0
       * @example 60
       */
      duration: number
      /** @example Security updates */
      comment?: string
      /**
       * @description The type of downtime to create.
       *
       *     Valid options are:
       *
       *      * `host` - Schedule downtimes for a host identified by host name or IP address
       *      * `hostgroup` - Schedule downtimes for all hosts belonging to the specified hostgroup
       *      * `host_by_query` - Schedule downtimes for all host matching the query
       *      (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      downtime_type: 'host_by_query'
      /**
       * @description An query expression of the Livestatus 'hosts' table in nested dictionary form. If you want to use multiple expressions, nest them with the AND/OR operators.
       * @example {"op": "and", "expr": [{"op": "=", "left": "name", "right": "example.com"}, {"op": "!=", "left": "state", "right": "0"}]}
       */
      query: components['schemas']['Expr']
    }
    CreateHostRelatedDowntime:
      | components['schemas']['CreateHostDowntime']
      | components['schemas']['CreateHostGroupDowntime']
      | components['schemas']['CreateHostQueryDowntime']
    CreateServiceDowntime: {
      /**
       * Format: iso8601
       * @description The start datetime of the new downtime. The format has to conform to the ISO 8601 profile
       * @example 2017-07-21T17:32:28Z
       */
      start_time: string
      /**
       * Format: iso8601
       * @description The end datetime of the new downtime. The format has to conform to the ISO 8601 profile
       * @example 2017-07-21T17:32:28Z
       */
      end_time: string
      /**
       * @description The recurring mode of the new downtime. Available modes are:     * fixed     * hour     * day     * week     * second_week     * fourth_week     * weekday_start     * weekday_end     * day_of_month  This only works when using the Enterprise Editions. Defaults to 'fixed'.
       * @default fixed
       * @example hour
       * @enum {string}
       */
      recur:
        | 'fixed'
        | 'hour'
        | 'day'
        | 'week'
        | 'second_week'
        | 'fourth_week'
        | 'weekday_start'
        | 'weekday_end'
        | 'day_of_month'
      /**
       * @description Duration in minutes. When set, the downtime does not begin automatically at a nominated time, but when a real problem status appears for the service. Consequencely, the start_time/end_time is only the time window in which the scheduled downtime can begin.
       * @default 0
       * @example 60
       */
      duration: number
      /** @example Security updates */
      comment?: string
      /**
       * @description The type of downtime to create.
       *
       *     Valid options are:
       *
       *      * `service` - Schedule downtimes for services whose names are listed in service_descriptions and belongs to the host identified by name or IP address in host_name.
       *      * `servicegroup` - Schedule downtimes for all services in a given service group
       *      * `service_by_query` - Schedule downtimes for services matching the query
       *      (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      downtime_type: 'service'
      /** @example example.com */
      host_name: string
      /**
       * @description The service name of the service, whose problems shall be acknowledged.
       * @example [
       *       "CPU utilization",
       *       "Memory"
       *     ]
       */
      service_descriptions: string[]
    }
    CreateServiceGroupDowntime: {
      /**
       * Format: iso8601
       * @description The start datetime of the new downtime. The format has to conform to the ISO 8601 profile
       * @example 2017-07-21T17:32:28Z
       */
      start_time: string
      /**
       * Format: iso8601
       * @description The end datetime of the new downtime. The format has to conform to the ISO 8601 profile
       * @example 2017-07-21T17:32:28Z
       */
      end_time: string
      /**
       * @description The recurring mode of the new downtime. Available modes are:     * fixed     * hour     * day     * week     * second_week     * fourth_week     * weekday_start     * weekday_end     * day_of_month  This only works when using the Enterprise Editions. Defaults to 'fixed'.
       * @default fixed
       * @example hour
       * @enum {string}
       */
      recur:
        | 'fixed'
        | 'hour'
        | 'day'
        | 'week'
        | 'second_week'
        | 'fourth_week'
        | 'weekday_start'
        | 'weekday_end'
        | 'day_of_month'
      /**
       * @description Duration in minutes. When set, the downtime does not begin automatically at a nominated time, but when a real problem status appears for the host. Consequencely, the start_time/end_time is only the time window in which the scheduled downtime can begin.
       * @default 0
       * @example 60
       */
      duration: number
      /** @example Security updates */
      comment?: string
      /**
       * @description The type of downtime to create.
       *
       *     Valid options are:
       *
       *      * `service` - Schedule downtimes for services whose names are listed in service_descriptions and belongs to the host identified by name or IP address in host_name.
       *      * `servicegroup` - Schedule downtimes for all services in a given service group
       *      * `service_by_query` - Schedule downtimes for services matching the query
       *      (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      downtime_type: 'servicegroup'
      /**
       * @description The name of the service group. Any host having a service in this group will be A downtime will be scheduled for all hosts in this group.
       * @example windows
       */
      servicegroup_name: string
    }
    CreateServiceQueryDowntime: {
      /**
       * Format: iso8601
       * @description The start datetime of the new downtime. The format has to conform to the ISO 8601 profile
       * @example 2017-07-21T17:32:28Z
       */
      start_time: string
      /**
       * Format: iso8601
       * @description The end datetime of the new downtime. The format has to conform to the ISO 8601 profile
       * @example 2017-07-21T17:32:28Z
       */
      end_time: string
      /**
       * @description The recurring mode of the new downtime. Available modes are:     * fixed     * hour     * day     * week     * second_week     * fourth_week     * weekday_start     * weekday_end     * day_of_month  This only works when using the Enterprise Editions. Defaults to 'fixed'.
       * @default fixed
       * @example hour
       * @enum {string}
       */
      recur:
        | 'fixed'
        | 'hour'
        | 'day'
        | 'week'
        | 'second_week'
        | 'fourth_week'
        | 'weekday_start'
        | 'weekday_end'
        | 'day_of_month'
      /**
       * @description Duration in minutes. When set, the downtime does not begin automatically at a nominated time, but when a real problem status appears for the service. Consequencely, the start_time/end_time is only the time window in which the scheduled downtime can begin.
       * @default 0
       * @example 60
       */
      duration: number
      /** @example Security updates */
      comment?: string
      /**
       * @description The type of downtime to create.
       *
       *     Valid options are:
       *
       *      * `service` - Schedule downtimes for services whose names are listed in service_descriptions and belongs to the host identified by name or IP address in host_name.
       *      * `servicegroup` - Schedule downtimes for all services in a given service group
       *      * `service_by_query` - Schedule downtimes for services matching the query
       *      (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      downtime_type: 'service_by_query'
      /**
       * @description An query expression of the Livestatus 'services' table in nested dictionary form. If you want to use multiple expressions, nest them with the AND/OR operators.
       * @example {"op": "=", "left": "description", "right": "Service description"}
       */
      query: components['schemas']['Expr']
    }
    CreateServiceRelatedDowntime:
      | components['schemas']['CreateServiceDowntime']
      | components['schemas']['CreateServiceGroupDowntime']
      | components['schemas']['CreateServiceQueryDowntime']
    HostContactGroup: {
      /** @description A list of contact groups. */
      groups: string[]
      /**
       * @description Add these contact groups to the host.
       * @default false
       */
      use: boolean
      /**
       * @description <p>Always add host contact groups also to its services.</p>With this option contact groups that are added to hosts are always being added to services, as well. This only makes a difference if you have assigned other contact groups to services via rules in <i>Host & Service Parameters</i>. As long as you do not have any such rule a service always inherits all contact groups from its host.
       * @default false
       */
      use_for_services: boolean
      /**
       * @description Add these groups as contacts to all hosts in all sub-folders of this folder.
       * @default false
       */
      recurse_use: boolean
      /**
       * @description Give these groups also permission on all sub-folders.
       * @default false
       */
      recurse_perms: boolean
    }
    SNMPCommunity: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: 'v1_v2_community'
      /** @description SNMP community (SNMP Versions 1 and 2c) */
      community: string
    }
    SNMPv3NoAuthNoPrivacy: {
      /**
       * @description The type of credentials to use. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'v3_no_auth_no_privacy'
      /** @description Security name */
      security_name: string
    }
    SNMPv3AuthNoPrivacy: {
      /**
       * @description The type of credentials to use. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'v3_auth_no_privacy'
      /**
       * @description Authentication protocol.
       * @enum {string}
       */
      auth_protocol: 'MD5-96' | 'SHA-1-96' | 'SHA-2-224' | 'SHA-2-256' | 'SHA-2-384' | 'SHA-2-512'
      /** @description Security name */
      security_name: string
      /** @description Authentication pass phrase. */
      auth_password: string
    }
    SNMPv3AuthPrivacy: {
      /**
       * @description SNMPv3 with authentication and privacy. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'v3_auth_privacy'
      /**
       * @description Authentication protocol.
       * @enum {string}
       */
      auth_protocol: 'MD5-96' | 'SHA-1-96' | 'SHA-2-224' | 'SHA-2-256' | 'SHA-2-384' | 'SHA-2-512'
      /** @description Security name */
      security_name: string
      /** @description Authentication pass phrase. */
      auth_password: string
      /**
       * @description The privacy protocol. The only supported values in the Raw Edition are CBC-DES and AES-128. If selected, privacy_password needs to be supplied as well.
       * @enum {string}
       */
      privacy_protocol:
        | 'CBC-DES'
        | 'AES-128'
        | '3DES-EDE'
        | 'AES-192'
        | 'AES-256'
        | 'AES-192-Blumenthal'
        | 'AES-256-Blumenthal'
      /** @description Privacy pass phrase. If filled, privacy_protocol needs to be selected as well. */
      privacy_password: string
    }
    SNMPCredentials:
      | components['schemas']['SNMPCommunity']
      | components['schemas']['SNMPv3NoAuthNoPrivacy']
      | components['schemas']['SNMPv3AuthNoPrivacy']
      | components['schemas']['SNMPv3AuthPrivacy']
    IPAddressRange: {
      /**
       * @description A range of addresses. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'address_range'
      /** @description The first IPv4 address of this range. */
      from_address?: string
      /** @description The last IPv4 address of this range. */
      to_address?: string
    }
    IPNetwork: {
      /**
       * @description A single IPv4 network in CIDR notation. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'network_range'
      /** @description A IPv4 network in CIDR notation. Minimum prefix length is 8 bit, maximum prefix length is 30 bit.
       *
       *     Valid examples:
       *
       *      * `192.168.0.0/24`
       *      * `192.168.0.0/255.255.255.0` */
      network?: string
    }
    IPAddresses: {
      /**
       * @description A list of single IPv4 addresses. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'explicit_addresses'
      addresses?: string[]
    }
    IPRegexp: {
      /**
       * @description IPv4 addresses which match a regexp pattern (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'exclude_by_regexp'
      /** @description A list of regular expressions which are matched against the found IP addresses. The matches will be excluded from the result. */
      regexp_list?: string[]
    }
    IPRangeWithRegexp:
      | components['schemas']['IPAddressRange']
      | components['schemas']['IPNetwork']
      | components['schemas']['IPAddresses']
      | components['schemas']['IPRegexp']
    TimeAllowedRange: {
      /** @description The start time of day. Inclusive. Use ISO8601 format. Seconds are stripped. */
      start: string
      /** @description The end time of day. Inclusive. Use ISO8601 format. Seconds are stripped. */
      end: string
    }
    RegexpRewrites: {
      /** @description The search regexp. May contain match-groups, conditional matches, etc. This follows the Python regular expression syntax.
       *
       *     For details see:
       *
       *      * https://docs.python.org/3/library/re.html */
      search: string
      /** @description The replacement string. Match-groups can only be identified by `\1`, `\2`, etc. Highest supported match group is `\99`. Named lookups are not supported. */
      replace_with: string
    }
    DirectMapping: {
      /** @description The host name to be replaced. */
      hostname: string
      /** @description The replacement string. */
      replace_with: string
    }
    TranslateNames: {
      /**
       * @description Convert all detected host names to upper- or lower-case.
       *
       *      * `nop` - Do not convert anything
       *      * `lower` - Convert all host names to lowercase.
       *      * `upper` - Convert all host names to uppercase.
       * @default nop
       * @enum {string}
       */
      convert_case: 'nop' | 'lower' | 'upper'
      /** @description Drop the rest of the domain, only keep the host name. Will not affect IP addresses.
       *
       *     Examples:
       *
       *      * `192.168.0.1` -> `192.168.0.1`
       *      * `foobar.example.com` -> `foobar`
       *      * `example.com` -> `example`
       *      * `example` -> `example`
       *
       *     This will be executed **after**:
       *
       *      * `convert_case`
       *      */
      drop_domain?: boolean
      /** @description Rewrite discovered host names with multiple regular expressions. The replacements will be done one after another in the order they appear in the list. If not anchored at the end by a `$` character, the regexpwill be anchored at the end implicitly by adding a `$` character.
       *
       *     These will be executed **after**:
       *
       *      * `convert_case`
       *      * `drop_domain`
       *      */
      regexp_rewrites?: components['schemas']['RegexpRewrites'][]
      /** @description Replace one value with another.
       *
       *     These will be executed **after**:
       *
       *      * `convert_case`
       *      * `drop_domain`
       *      * `regexp_rewrites`
       *      */
      hostname_replacement?: components['schemas']['DirectMapping'][]
    }
    NetworkScan: {
      /** @description IPv4 addresses to include. */
      addresses: components['schemas']['IPRangeWithRegexp'][]
      /** @description IPv4 addresses to exclude. */
      exclude_addresses?: components['schemas']['IPRangeWithRegexp'][]
      /**
       * @description Scan interval in seconds. Default is 1 day, minimum is 1 hour.
       * @default 86400
       */
      scan_interval: number
      /** @description Only execute the discovery during this time range each day.. */
      time_allowed: components['schemas']['TimeAllowedRange'][]
      /**
       * @description When set, the found IPv4 address is set on the discovered host.
       * @default true
       */
      set_ip_address: boolean
      /**
       * @description Set the maximum number of concurrent pings sent to target IP addresses.
       * @default 100
       */
      max_parallel_pings: number
      /** @description Execute the network scan in the Checkmk user context of the chosen user. This user needs the permission to add new hosts to this folder. */
      run_as?: string
      /** @description Specify which criticality tag to set on the host created by the network scan. This field is required if the criticality tag group exists, otherwise it as to be omitted. */
      tag_criticality?: string
      translate_names?: components['schemas']['TranslateNames']
    }
    IPMIParameters: {
      username: string
      password: string
    }
    LockedBy: {
      /** @description Site ID */
      site_id: string
      /** @description Program ID */
      program_id: string
      /** @description Instance ID */
      instance_id: string
    }
    NetworkScanResult: {
      /**
       * Format: date-time
       * @description When the scan started
       */
      start?: string | null
      /**
       * Format: date-time
       * @description When the scan finished. Will be Null if not yet run.
       */
      end?: string | null
      /**
       * @description Last scan result
       * @enum {string}
       */
      state?: 'running' | 'succeeded' | 'failed'
      /** @description Short human readable description of what is happening. */
      output?: string
    }
    MetaData: {
      /**
       * Format: date-time
       * @description When has this object been created.
       */
      created_at?: string | null
      /**
       * Format: date-time
       * @description When this object was last changed.
       */
      updated_at?: string | null
      /** @description The user id under which this object has been created. */
      created_by?: string | null
    }
    HostViewAttribute: {
      /**
       * @description The IP address family of the host.
       * @example ip-v4-only
       * @enum {string}
       */
      tag_address_family?: 'ip-v4v6' | 'no-ip' | 'ip-v4-only' | 'ip-v6-only'
      /**
       * @description Agent and API integrations
       * @example cmk-agent
       * @enum {string}
       */
      tag_agent?: 'all-agents' | 'special-agents' | 'cmk-agent' | 'no-agent'
      /**
       * @description The SNMP data source of the host.
       * @example snmp-v2
       * @enum {string}
       */
      tag_snmp_ds?: 'no-snmp' | 'snmp-v1' | 'snmp-v2'
      /**
       * @description Use piggyback data for this host.
       * @example piggyback
       * @enum {string}
       */
      tag_piggyback?: 'piggyback' | 'no-piggyback' | 'auto-piggyback'
      /** @description Add a comment or describe this host */
      alias?: string
      /** @description The site that should monitor this host. */
      site?: string
      /** @description A list of parents of this host. */
      parents?: string[]
      /** @description Only members of the contact groups listed here have Setup permission for the host/folder. Optionally, you can make these contact groups automatically monitor contacts. The assignment of hosts to contact groups can also be defined by <a href='wato.py?mode=edit_ruleset&varname=host_contactgroups'>rules</a>. */
      contactgroups?: components['schemas']['HostContactGroup']
      /** @description An IPv4 address. */
      ipaddress?: string
      /** @description An IPv6 address. */
      ipv6address?: string
      /** @description A list of IPv4 addresses. */
      additional_ipv4addresses?: string[]
      /** @description A list of IPv6 addresses. */
      additional_ipv6addresses?: string[]
      /** @description [Enterprise, Cloud, Saas, Managed editions only] Bake agent packages for this folder even if it is empty. */
      bake_agent_package?: boolean
      /**
       * @description [Cloud, Managed editions only] This configures the communication direction of this host.
       *      * `pull-agent` (default) - The server will try to contact the monitored host and pull the data by initializing a TCP connection
       *      * `push-agent` - the host is expected to send the data to the monitoring server without being triggered
       *
       * @enum {string}
       */
      cmk_agent_connection?: 'pull-agent' | 'push-agent'
      /** @description The SNMP access configuration. A configured SNMP v1/v2 community here will have precedence over any configured SNMP community rule. For this attribute to take effect, the attribute `tag_snmp_ds` needs to be set first. */
      snmp_community?: components['schemas']['SNMPCredentials']
      /** @description Labels allow you to flexibly group your hosts in order to refer to them later at other places in Checkmk, e.g. in rule chains.<br><b>Label format:</b> key:value<br><br>Neither the key nor the value can contain ‘:’. Checkmk does not perform any other validation on the labels you use. */
      labels?: {
        [key: string]: string
      }
      /**
       * @description This indicates that the host is waiting for a bulk discovery. It is set to True once the host is in the queue. It will be removed after the discovery is ended.
       * @example false
       */
      waiting_for_discovery?: boolean
      /** @description Configuration for automatic network scan. Pings will besent to each IP address in the configured ranges to checkif a host is up or down. Each found host will be added tothe folder by it's host name (if possible) or IP address. */
      network_scan?: components['schemas']['NetworkScan']
      /**
       * @description The protocol used to connect to the management board.
       *
       *     Valid options are:
       *
       *      * `none` - No management board
       *      * `snmp` - Connect using SNMP
       *      * `ipmi` - Connect using IPMI
       *
       * @enum {string}
       */
      management_protocol?: 'none' | 'snmp' | 'ipmi'
      /** @description Address (IPv4, IPv6 or host name) under which the management board can be reached. */
      management_address?: string
      /** @description SNMP credentials */
      management_snmp_community?: components['schemas']['SNMPCredentials'] | null
      /** @description IPMI credentials */
      management_ipmi_credentials?: components['schemas']['IPMIParameters'] | null
      /** @description Identity of the entity which locked the locked_attributes. The identity is built out of the Site ID, the program name and the connection ID. */
      locked_by?: components['schemas']['LockedBy']
      /** @description Name of host attributes which are locked in the UI. */
      locked_attributes?: string[]
      /**
       * @description Whether or not the last bulk discovery failed. It is set to True once it fails and unset in case a later discovery succeeds.
       * @example false
       */
      inventory_failed?: boolean
      /** @description [Cloud, Saas, Managed editions only] The name/address of the relay through which this host is monitored, if not empty. */
      relay?: string
      /** @description Read only access to the network scan result */
      network_scan_result?: components['schemas']['NetworkScanResult']
      /** @description Read only access to configured metadata. */
      meta_data?: components['schemas']['MetaData']
    } & {
      [key: string]: string
    }
    CreationRuleAttribute: {
      /**
       * @description Name of the folder the connection creates hosts in. Once created, you can choose to move the host to another folder.
       *
       *     Path delimiters can be either `~`, `/` or `\`. Please use the one most appropriate for your quoting/escaping needs. A good default choice is `~`.
       * @example /folder_1/subfolder_a
       */
      folder_path?: string
      /**
       * @description Attributes to set on the newly created host.
       * @default {}
       * @example {
       *       "ipaddress": "192.168.0.123"
       *     }
       */
      host_attributes: components['schemas']['HostViewAttribute']
      /**
       * @description Delete the hosts created by this connection whose piggyback data is no longer present.
       * @example false
       */
      delete_hosts?: boolean
      /**
       * @description Restrict host creation using regular expressions.
       * @example [
       *       "host1",
       *       "host2",
       *       "regular.+expression"
       *     ]
       */
      matching_hosts?: string[]
    }
    PiggybackConnector: {
      /**
       * @description The type of the connector. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      connector_type: 'piggyback'
      /**
       * @description Only care about hosts that receive piggyback data from hosts which name matches one of these regular expressions.
       * @example [
       *       "host1",
       *       "host2",
       *       "regular.+expression"
       *     ]
       */
      restrict_source_hosts?: string[]
      /**
       * @description The interval in seconds the connection will be executed to check the available piggyback and update the configuration.
       * @example 60
       */
      interval?: number
      /**
       * @description The first matching rule is used. You must specify at least one rule.
       * @example [
       *       {
       *         "folder_path": "/",
       *         "host_attributes": {
       *           "tag_snmp_ds": "no-snmp",
       *           "tag_agent": "no-agent",
       *           "tag_piggyback": "piggyback",
       *           "tag_address_family": "no-ip"
       *         },
       *         "delete_hosts": false
       *       }
       *     ]
       */
      creation_rules?: components['schemas']['CreationRuleAttribute'][]
      /**
       * @description Automatically runs a service discovery on any new hosts created by this connection. This step will add any new services to the monitoring.
       * @example true
       */
      discover_on_creation?: boolean
      /**
       * @description Seconds to prevent host deletion after site startup, e.g. when booting the Checkmk server.
       * @example 600
       */
      no_deletion_time_after_init?: number
      /**
       * @description Seconds to keep hosts when piggyback source only sends piggyback data for other hosts.
       * @example 3600
       */
      max_cache_age?: number
      /**
       * @description Seconds to continue consider outdated piggyback data as valid.
       * @example 60
       */
      validity_period?: number
    }
    OneOfConnector: components['schemas']['PiggybackConnector']
    DCDExtensions: {
      /**
       * @description Name your connection for easy recognition.
       * @example My fancy dynamic host configuration
       */
      title: string
      /**
       * @description Add a comment to your dynamic host configuration
       * @default
       * @example This rule updates the host configuration from Initech cloud provider.
       */
      comment: string
      /**
       * Format: url
       * @description Add a URL linking to a documentation or any other page. You can use either global URLs (starting with http://), absolute local URLs (starting with /) or relative URLs (relative to check_mk/).
       * @default
       * @example https://example.com/doc
       */
      documentation_url: string
      /**
       * @description The dynamic host configuration can be disabled but will remain part of the site.
       * @default false
       * @example false
       */
      disabled: boolean
      /**
       * @description Specify the site where you want this connector to run. Only this site will process the data.
       * @example global
       */
      site: string
      /**
       * @description The unique identifier of the dynamic host configuration.
       * @example MyDcd01
       */
      dcd_id: string
      /** @description The connector configuration. */
      connector: components['schemas']['OneOfConnector']
    }
    ShowDCD: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The domain type of the object.
       * @default dcd
       */
      domainType: unknown
      /** @description The unique identifier for this domain-object type. */
      id?: string
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description The container for external resources, like linked foreign objects or actions. */
      members?: {
        [key: string]: unknown
      }
      /** @description All the data and metadata of this dcd connection. */
      extensions?: components['schemas']['DCDExtensions']
    }
    ConnectionFetchPhaseOne: {
      /**
       * @description The site id
       * @example master
       */
      site_id: string
      /**
       * @description The connection id
       * @example connection_id
       */
      connection_id: string
    }
    HostCreateAttribute: {
      /**
       * @description The IP address family of the host.
       * @example ip-v4-only
       * @enum {string}
       */
      tag_address_family?: 'ip-v4v6' | 'no-ip' | 'ip-v4-only' | 'ip-v6-only'
      /**
       * @description Agent and API integrations
       * @example cmk-agent
       * @enum {string}
       */
      tag_agent?: 'all-agents' | 'special-agents' | 'cmk-agent' | 'no-agent'
      /**
       * @description The SNMP data source of the host.
       * @example snmp-v2
       * @enum {string}
       */
      tag_snmp_ds?: 'no-snmp' | 'snmp-v1' | 'snmp-v2'
      /**
       * @description Use piggyback data for this host.
       * @example piggyback
       * @enum {string}
       */
      tag_piggyback?: 'piggyback' | 'no-piggyback' | 'auto-piggyback'
      /** @description Add a comment or describe this host */
      alias?: string
      /** @description The site that should monitor this host. */
      site?: string
      /** @description A list of parents of this host. */
      parents?: string[]
      /** @description Only members of the contact groups listed here have Setup permission for the host/folder. Optionally, you can make these contact groups automatically monitor contacts. The assignment of hosts to contact groups can also be defined by <a href='wato.py?mode=edit_ruleset&varname=host_contactgroups'>rules</a>. */
      contactgroups?: components['schemas']['HostContactGroup']
      /** @description An IPv4 address. */
      ipaddress?: string
      /** @description An IPv6 address. */
      ipv6address?: string
      /** @description A list of IPv4 addresses. */
      additional_ipv4addresses?: string[]
      /** @description A list of IPv6 addresses. */
      additional_ipv6addresses?: string[]
      /** @description [Enterprise, Cloud, Saas, Managed editions only] Bake agent packages for this folder even if it is empty. */
      bake_agent_package?: boolean
      /**
       * @description [Cloud, Managed editions only] This configures the communication direction of this host.
       *      * `pull-agent` (default) - The server will try to contact the monitored host and pull the data by initializing a TCP connection
       *      * `push-agent` - the host is expected to send the data to the monitoring server without being triggered
       *
       * @enum {string}
       */
      cmk_agent_connection?: 'pull-agent' | 'push-agent'
      /** @description The SNMP access configuration. A configured SNMP v1/v2 community here will have precedence over any configured SNMP community rule. For this attribute to take effect, the attribute `tag_snmp_ds` needs to be set first. */
      snmp_community?: components['schemas']['SNMPCredentials']
      /** @description Labels allow you to flexibly group your hosts in order to refer to them later at other places in Checkmk, e.g. in rule chains.<br><b>Label format:</b> key:value<br><br>Neither the key nor the value can contain ‘:’. Checkmk does not perform any other validation on the labels you use. */
      labels?: {
        [key: string]: string
      }
      /**
       * @description This indicates that the host is waiting for a bulk discovery. It is set to True once the host is in the queue. It will be removed after the discovery is ended.
       * @example false
       */
      waiting_for_discovery?: boolean
      /** @description Configuration for automatic network scan. Pings will besent to each IP address in the configured ranges to checkif a host is up or down. Each found host will be added tothe folder by it's host name (if possible) or IP address. */
      network_scan?: components['schemas']['NetworkScan']
      /**
       * @description The protocol used to connect to the management board.
       *
       *     Valid options are:
       *
       *      * `none` - No management board
       *      * `snmp` - Connect using SNMP
       *      * `ipmi` - Connect using IPMI
       *
       * @enum {string}
       */
      management_protocol?: 'none' | 'snmp' | 'ipmi'
      /** @description Address (IPv4, IPv6 or host name) under which the management board can be reached. */
      management_address?: string
      /** @description SNMP credentials */
      management_snmp_community?: components['schemas']['SNMPCredentials'] | null
      /** @description IPMI credentials */
      management_ipmi_credentials?: components['schemas']['IPMIParameters'] | null
      /** @description Identity of the entity which locked the locked_attributes. The identity is built out of the Site ID, the program name and the connection ID. */
      locked_by?: components['schemas']['LockedBy']
      /** @description Name of host attributes which are locked in the UI. */
      locked_attributes?: string[]
      /**
       * @description Whether or not the last bulk discovery failed. It is set to True once it fails and unset in case a later discovery succeeds.
       * @example false
       */
      inventory_failed?: boolean
      /** @description [Cloud, Saas, Managed editions only] The name/address of the relay through which this host is monitored, if not empty. */
      relay?: string
    } & {
      [key: string]: string
    }
    CreateCreationRuleAttribute: {
      /**
       * @description Name of the folder the connection creates hosts in. Once created, you can choose to move the host to another folder.
       *
       *     Path delimiters can be either `~`, `/` or `\`. Please use the one most appropriate for your quoting/escaping needs. A good default choice is `~`.
       * @default /
       */
      folder_path: string
      /**
       * @description Attributes to set on the newly created host. You can specify custom attributes and tag groups in addition to the built-in ones listed below.
       * @default {
       *       "tag_snmp_ds": "no-snmp",
       *       "tag_agent": "no-agent",
       *       "tag_piggyback": "piggyback",
       *       "tag_address_family": "no-ip"
       *     }
       * @example {
       *       "tag_address_family": "no-ip"
       *     }
       */
      host_attributes: components['schemas']['HostCreateAttribute']
      /**
       * @description Delete the hosts created by this connection whose piggyback data is no longer present.
       * @default false
       */
      delete_hosts: boolean
      /** @description Restrict host creation using regular expressions. */
      matching_hosts?: string[]
    }
    CreatePiggybackDCD: {
      /**
       * @description The name of the plug-in to be used. Currently only piggyback is supported. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      connector_type: 'piggyback'
      /** @description Only care about hosts that receive piggyback data from hosts which name matches one of these regular expressions. */
      restrict_source_hosts?: string[]
      /**
       * @description The interval in seconds the connection will be executed to check the available piggyback and update the configuration.
       * @default 60
       */
      interval: number
      /**
       * @description The first matching rule is used. You must specify at least one rule.
       * @default [
       *       {
       *         "folder_path": "/",
       *         "host_attributes": {
       *           "tag_snmp_ds": "no-snmp",
       *           "tag_agent": "no-agent",
       *           "tag_piggyback": "piggyback",
       *           "tag_address_family": "no-ip"
       *         },
       *         "delete_hosts": false
       *       }
       *     ]
       */
      creation_rules: components['schemas']['CreateCreationRuleAttribute'][]
      /**
       * @description Automatically runs a service discovery on any new hosts created by this connection. This step will add any new services to the monitoring.
       * @default true
       */
      discover_on_creation: boolean
      /**
       * @description Seconds to prevent host deletion after site startup, e.g. when booting the Checkmk server.
       * @default 600
       */
      no_deletion_time_after_init: number
      /**
       * @description Seconds to keep hosts when piggyback source only sends piggyback data for other hosts.
       * @default 3600
       */
      max_cache_age: number
      /**
       * @description Seconds to continue consider outdated piggyback data as valid
       * @default 60
       */
      validity_period: number
    }
    CreateConnector: components['schemas']['CreatePiggybackDCD']
    CreateDCD: {
      /**
       * @description Name your connection for easy recognition.
       * @example My fancy dynamic host configuration
       */
      title: string
      /**
       * @description Add a comment to your dynamic host configuration
       * @default
       * @example This rule updates the host configuration from Initech cloud provider.
       */
      comment: string
      /**
       * Format: url
       * @description Add a URL linking to a documentation or any other page. You can use either global URLs (starting with http://), absolute local URLs (starting with /) or relative URLs (relative to check_mk/).
       * @default
       * @example https://example.com/doc
       */
      documentation_url: string
      /**
       * @description The dynamic host configuration can be disabled but will remain part of the site.
       * @default false
       * @example false
       */
      disabled: boolean
      /**
       * @description Specify the site where you want this connector to run. Only this site will process the data.
       * @example global
       */
      site: string
      /**
       * @description The unique ID of the Piggyback dynamic host configuration to be created.
       * @example MyDcd01
       */
      dcd_id: string
      /**
       * @description The connector configuration.
       * @example {
       *       "connector_type": "piggyback",
       *       "restrict_source_hosts": [
       *         "host1",
       *         "host2",
       *         "regular.+expression"
       *       ],
       *       "interval": 60,
       *       "creation_rules": [
       *         {
       *           "folder_path": "/",
       *           "host_attributes": {
       *             "tag_snmp_ds": "no-snmp",
       *             "tag_agent": "no-agent",
       *             "tag_piggyback": "piggyback",
       *             "tag_address_family": "no-ip"
       *           },
       *           "delete_hosts": false
       *         }
       *       ],
       *       "discover_on_creation": true,
       *       "no_deletion_time_after_init": 600,
       *       "max_cache_age": 3600,
       *       "validity_period": 60
       *     }
       */
      connector: components['schemas']['CreateConnector']
    }
    Api404CustomError2: {
      /**
       * @description The HTTP status code.
       * @example 404
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example The dynamic host configuration was not found.
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Not Found
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    ECEventAttributes: {
      /**
       * @description The site id of the EC event.
       * @example heute
       */
      site_id: string
      /**
       * @description The state
       * @example ok
       * @enum {string}
       */
      state: 'ok' | 'warning' | 'critical' | 'unknown'
      /**
       * @description The service level for this event.
       * @example gold
       * @enum {string}
       */
      service_level: 'no_service_level' | 'silver' | 'gold' | 'platinum'
      /**
       * @description The host name. No exception is raised when the specified host name does not exist
       * @example host_1
       */
      host: string
      /**
       * @description The ID of the rule.
       * @example rule_1
       */
      rule_id: string
      /**
       * @description The syslog tag/application this event originated from.
       * @example app_1
       */
      application: string
      /**
       * @description The event comment.
       * @example Example comment
       */
      comment: string
      /**
       * @description The event contact information.
       * @example Mr Monitor
       */
      contact: string
      /**
       * @description The IP address where the event originated.
       * @example 127.0.0.1
       */
      ipaddress: string
      /**
       * @description The syslog facility.
       * @example kern
       * @enum {string}
       */
      facility:
        | 'kern'
        | 'user'
        | 'mail'
        | 'daemon'
        | 'auth'
        | 'syslog'
        | 'lpr'
        | 'news'
        | 'uucp'
        | 'cron'
        | 'authpriv'
        | 'ftp'
        | 'ntp'
        | 'logaudit'
        | 'logalert'
        | 'clock'
        | 'local0'
        | 'local1'
        | 'local2'
        | 'local3'
        | 'local4'
        | 'local5'
        | 'local6'
        | 'local7'
        | 'logfile'
        | 'snmptrap'
      /**
       * @description The syslog priority.
       * @example warning
       * @enum {string}
       */
      priority: 'emerg' | 'alert' | 'crit' | 'err' | 'warning' | 'notice' | 'info' | 'debug'
      /**
       * @description The event phase, open or ack
       * @example open
       * @enum {string}
       */
      phase: 'open' | 'ack'
      /**
       * Format: date-time
       * @example 2017-11-09T17:32:28Z
       */
      last: string
      /**
       * Format: date-time
       * @example 2022-11-09T16:12:12Z
       */
      first: string
      /**
       * @description The number of occurrences of this event within a period.
       * @example 1
       */
      count: number
      /**
       * @description The event message text
       * @example Sample message text
       */
      text: string
    }
    ECEventResponse: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The domain type of the object.
       * @default event_console
       */
      domainType: unknown
      /** @description The unique identifier for this domain-object type. */
      id?: string
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description The container for external resources, like linked foreign objects or actions. */
      members?: {
        [key: string]: unknown
      }
      /**
       * @description The configuration attributes of a site.
       * @example {
       *       "state": "okay",
       *       "service_level": "gold",
       *       "host": "host_1",
       *       "rule_id": "rule_1",
       *       "application": "app_1",
       *       "comment": "example_comment",
       *       "contact": "Mr Monitor",
       *       "ipaddress": "127.0.0.1",
       *       "facility": "kern",
       *       "priority": "warning",
       *       "phase": "open",
       *       "last": "Oct 21 2022 09:11:12",
       *       "first": "Oct 26 2022 07:51:25",
       *       "count": 1,
       *       "text": "Sample message text."
       *     }
       */
      extensions?: components['schemas']['ECEventAttributes']
    }
    EventConsoleResponseCollection: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The name of this collection.
       * @default all
       */
      id: string
      /**
       * @description The domain type of the objects in the collection.
       * @default event_console
       */
      domainType: unknown
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /**
       * @description A list of site configuration objects.
       * @example [
       *       {
       *         "links": [],
       *         "domainType": "event_console",
       *         "id": "1",
       *         "title": "Sample message text",
       *         "members": {},
       *         "extensions": {
       *           "state": "okay",
       *           "service_level": "gold",
       *           "host": "host_1",
       *           "rule_id": "rule_1",
       *           "application": "app_1",
       *           "comment": "example_comment",
       *           "contact": "Mr Monitor",
       *           "ipaddress": "127.0.0.1",
       *           "facility": "kern",
       *           "priority": "warning",
       *           "phase": "open",
       *           "last": "Oct 21 2022 09:11:12",
       *           "first": "Oct 26 2022 07:51:25",
       *           "count": 1,
       *           "text": "Sample message text"
       *         }
       *       }
       *     ]
       */
      value?: components['schemas']['ECEventResponse'][]
      /** @description Additional attributes alongside the collection. */
      extensions?: {
        [key: string]: unknown
      }
    }
    ChangeStateWithQuery: {
      /**
       * @description The way you would like to filter events. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      filter_type: 'query'
      /**
       * @description An existing site id
       * @example heute
       */
      site_id?: string
      /**
       * @description The state
       * @example ok
       * @enum {string}
       */
      new_state: 'ok' | 'warning' | 'critical' | 'unknown'
      /**
       * @description An query expression of the Livestatus 'eventconsoleevents' table in nested dictionary form. If you want to use multiple expressions, nest them with the AND/OR operators.
       * @example {"op": "=", "left": "eventconsoleevents.event_host", "right": "test_host"}
       */
      query: components['schemas']['Expr']
    }
    FilterParams: {
      /**
       * @description The state
       * @example ok
       * @enum {string}
       */
      state?: 'ok' | 'warning' | 'critical' | 'unknown'
      /**
       * @description The host name. No exception is raised when the specified host name does not exist
       * @example host_1
       */
      host?: string
      /**
       * @description The event phase, open or ack
       * @example open
       * @enum {string}
       */
      phase?: 'open' | 'ack'
      /**
       * @description Show events that originated from this app.
       * @example app_1
       */
      application?: string
    }
    ChangeStateWithParams: {
      /**
       * @description The way you would like to filter events. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      filter_type: 'params'
      /**
       * @description An existing site id
       * @example heute
       */
      site_id?: string
      /**
       * @description The state
       * @example ok
       * @enum {string}
       */
      new_state: 'ok' | 'warning' | 'critical' | 'unknown'
      filters: components['schemas']['FilterParams']
    }
    ChangeEventStateSelector:
      | components['schemas']['ChangeStateWithQuery']
      | components['schemas']['ChangeStateWithParams']
    FilterById: {
      /**
       * @description The way you would like to filter events. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      filter_type: 'by_id'
      /**
       * @description An existing site id
       * @example heute
       */
      site_id: string
      /**
       * @description The event console ID
       * @example 1
       */
      event_id: number
    }
    FilterByQuery: {
      /**
       * @description The way you would like to filter events. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      filter_type: 'query'
      /**
       * @description An query expression of the Livestatus 'eventconsoleevents' table in nested dictionary form. If you want to use multiple expressions, nest them with the AND/OR operators.
       * @example {"op": "=", "left": "eventconsoleevents.event_host", "right": "test_host"}
       */
      query: components['schemas']['Expr']
    }
    FilterByParams: {
      /**
       * @description The way you would like to filter events. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      filter_type: 'params'
      filters: components['schemas']['FilterParams']
    }
    DeleteECEvents:
      | components['schemas']['FilterById']
      | components['schemas']['FilterByQuery']
      | components['schemas']['FilterByParams']
    UpdateAndAcknowledgeWithQuery: {
      /**
       * @description To change the phase of an event
       * @default ack
       * @example ack
       * @enum {string}
       */
      phase: 'ack' | 'open'
      /**
       * @description Event comment.
       * @example Comment now acked
       */
      change_comment?: string
      /**
       * @description Contact information.
       * @example Mr Monitor
       */
      change_contact?: string
      /**
       * @description The way you would like to filter events. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      filter_type: 'query'
      /**
       * @description An existing site id
       * @example heute
       */
      site_id?: string
      /**
       * @description An query expression of the Livestatus 'eventconsoleevents' table in nested dictionary form. If you want to use multiple expressions, nest them with the AND/OR operators.
       * @example {"op": "=", "left": "eventconsoleevents.event_host", "right": "test_host"}
       */
      query: components['schemas']['Expr']
    }
    FilterParamsUpdateAndAcknowledge: {
      /**
       * @description The state
       * @example ok
       * @enum {string}
       */
      state?: 'ok' | 'warning' | 'critical' | 'unknown'
      /**
       * @description The host name. No exception is raised when the specified host name does not exist
       * @example host_1
       */
      host?: string
      /**
       * @description Show events that originated from this app.
       * @example app_1
       */
      application?: string
    }
    UpdateAndAcknowledgeWithParams: {
      /**
       * @description To change the phase of an event
       * @default ack
       * @example ack
       * @enum {string}
       */
      phase: 'ack' | 'open'
      /**
       * @description Event comment.
       * @example Comment now acked
       */
      change_comment?: string
      /**
       * @description Contact information.
       * @example Mr Monitor
       */
      change_contact?: string
      /**
       * @description The way you would like to filter events. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      filter_type: 'params'
      /**
       * @description An existing site id
       * @example heute
       */
      site_id?: string
      filters: components['schemas']['FilterParamsUpdateAndAcknowledge']
    }
    UpdateAndAcknowledgeFilter: {
      /**
       * @description To change the phase of an event
       * @default ack
       * @example ack
       * @enum {string}
       */
      phase: 'ack' | 'open'
      /**
       * @description Event comment.
       * @example Comment now acked
       */
      change_comment?: string
      /**
       * @description Contact information.
       * @example Mr Monitor
       */
      change_contact?: string
      /**
       * @description The way you would like to filter events. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      filter_type: 'all'
      /**
       * @description An existing site id
       * @example heute
       */
      site_id?: string
    }
    UpdateAndAcknowledgeSelector:
      | components['schemas']['UpdateAndAcknowledgeWithQuery']
      | components['schemas']['UpdateAndAcknowledgeWithParams']
      | components['schemas']['UpdateAndAcknowledgeFilter']
    ChangeEventState: {
      /**
       * @description An existing site id
       * @example heute
       */
      site_id: string
      /**
       * @description The state
       * @example ok
       * @enum {string}
       */
      new_state: 'ok' | 'warning' | 'critical' | 'unknown'
    }
    UpdateAndAcknowledeEventSiteIDRequired: {
      /**
       * @description To change the phase of an event
       * @default ack
       * @example ack
       * @enum {string}
       */
      phase: 'ack' | 'open'
      /**
       * @description Event comment.
       * @example Comment now acked
       */
      change_comment?: string
      /**
       * @description Contact information.
       * @example Mr Monitor
       */
      change_contact?: string
      /**
       * @description An existing site id
       * @example heute
       */
      site_id: string
    }
    ObjectCollectionMember: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      id: string
      /** @description Provides the reason (or the literal "disabled") why an object property or collection is un-modifiable, or, in the case of an action, unusable (and hence no links to mutate that member's state, or invoke the action, are provided). */
      disabledReason?: string | null
      /**
       * @description Provides the reason (or the literal "invalid") why a proposed value for a property, collection or action argument is invalid. Appears within an argument representation 2.9 returned as a response.
       * @example invalid
       */
      invalidReason?: string | null
      /** @description Provides the reason why a SET OF proposed values for properties or arguments is invalid. */
      'x-ro-invalidReason'?: string | null
      /** @default collection */
      memberType: unknown
      value?: components['schemas']['Link'][]
      /** @example important_values */
      name?: string
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
    }
    ObjectActionMember: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      id: string
      /** @description Provides the reason (or the literal "disabled") why an object property or collection is un-modifiable, or, in the case of an action, unusable (and hence no links to mutate that member's state, or invoke the action, are provided). */
      disabledReason?: string | null
      /**
       * @description Provides the reason (or the literal "invalid") why a proposed value for a property, collection or action argument is invalid. Appears within an argument representation 2.9 returned as a response.
       * @example invalid
       */
      invalidReason?: string | null
      /** @description Provides the reason why a SET OF proposed values for properties or arguments is invalid. */
      'x-ro-invalidReason'?: string | null
      /** @default action */
      memberType: unknown
      parameters?: {
        [key: string]: unknown
      }
      /** @example frobnicate_foo */
      name?: string
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
    }
    FolderMembers: {
      /** @description A list of links pointing to the actual host-resources. */
      hosts?: components['schemas']['ObjectCollectionMember']
      /** @description An action which triggers the move of this folder to another folder. */
      move?: components['schemas']['ObjectActionMember']
    }
    FolderViewAttribute: {
      /**
       * @description The IP address family of the host.
       * @example ip-v4-only
       * @enum {string}
       */
      tag_address_family?: 'ip-v4v6' | 'no-ip' | 'ip-v4-only' | 'ip-v6-only'
      /**
       * @description Agent and API integrations
       * @example cmk-agent
       * @enum {string}
       */
      tag_agent?: 'all-agents' | 'special-agents' | 'cmk-agent' | 'no-agent'
      /**
       * @description The SNMP data source of the host.
       * @example snmp-v2
       * @enum {string}
       */
      tag_snmp_ds?: 'no-snmp' | 'snmp-v1' | 'snmp-v2'
      /**
       * @description Use piggyback data for this host.
       * @example piggyback
       * @enum {string}
       */
      tag_piggyback?: 'piggyback' | 'no-piggyback' | 'auto-piggyback'
      /** @description The site that should monitor this host. */
      site?: string
      /** @description A list of parents of this host. */
      parents?: string[]
      /** @description Only members of the contact groups listed here have Setup permission for the host/folder. Optionally, you can make these contact groups automatically monitor contacts. The assignment of hosts to contact groups can also be defined by <a href='wato.py?mode=edit_ruleset&varname=host_contactgroups'>rules</a>. */
      contactgroups?: components['schemas']['HostContactGroup']
      /** @description [Enterprise, Cloud, Saas, Managed editions only] Bake agent packages for this folder even if it is empty. */
      bake_agent_package?: boolean
      /** @description The SNMP access configuration. A configured SNMP v1/v2 community here will have precedence over any configured SNMP community rule. For this attribute to take effect, the attribute `tag_snmp_ds` needs to be set first. */
      snmp_community?: components['schemas']['SNMPCredentials']
      /** @description Labels allow you to flexibly group your hosts in order to refer to them later at other places in Checkmk, e.g. in rule chains.<br><b>Label format:</b> key:value<br><br>Neither the key nor the value can contain ‘:’. Checkmk does not perform any other validation on the labels you use. */
      labels?: {
        [key: string]: string
      }
      /** @description Configuration for automatic network scan. Pings will besent to each IP address in the configured ranges to checkif a host is up or down. Each found host will be added tothe folder by it's host name (if possible) or IP address. */
      network_scan?: components['schemas']['NetworkScan']
      /**
       * @description The protocol used to connect to the management board.
       *
       *     Valid options are:
       *
       *      * `none` - No management board
       *      * `snmp` - Connect using SNMP
       *      * `ipmi` - Connect using IPMI
       *
       * @enum {string}
       */
      management_protocol?: 'none' | 'snmp' | 'ipmi'
      /** @description SNMP credentials */
      management_snmp_community?: components['schemas']['SNMPCredentials'] | null
      /** @description IPMI credentials */
      management_ipmi_credentials?: components['schemas']['IPMIParameters'] | null
      /** @description Read only access to the network scan result */
      network_scan_result?: components['schemas']['NetworkScanResult']
      /** @description Read only access to configured metadata. */
      meta_data?: components['schemas']['MetaData']
    } & {
      [key: string]: string
    }
    FolderExtensions: {
      /** @description The full path of this folder, slash delimited. */
      path?: string
      /** @description The folder's attributes. Hosts placed in this folder will inherit these attributes. */
      attributes?: components['schemas']['FolderViewAttribute']
    }
    Folder: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The domain type of the object.
       * @default folder_config
       */
      domainType: unknown
      /** @description The full path of the folder, tilde-separated. */
      id?: string
      /** @description The human readable title for this folder. */
      title?: string
      /** @description Specific collections or actions applicable to this object. */
      members?: components['schemas']['FolderMembers']
      /** @description Data and Meta-Data of this object. */
      extensions?: components['schemas']['FolderExtensions']
    }
    FolderCollection: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The name of this collection.
       * @default all
       */
      id: string
      /**
       * @description The domain type of the objects in the collection.
       * @default folder_config
       */
      domainType: unknown
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description A list of folder objects. */
      value?: components['schemas']['Folder'][]
      /** @description Additional attributes alongside the collection. */
      extensions?: {
        [key: string]: unknown
      }
    }
    HostMembers: {
      /** @description The folder in which this host resides. It is represented by a hexadecimal identifier which is it's 'primary key'. The folder can be accessed via the `self`-link provided in the links array. */
      folder_config?: components['schemas']['Folder']
    }
    HostExtensions: {
      /** @description The folder, in which this host resides.
       *
       *     Path delimiters can be either `~`, `/` or `\`. Please use the one most appropriate for your quoting/escaping needs. A good default choice is `~`. */
      folder?: string
      /**
       * @description Attributes of this host.
       * @example {
       *       "ipaddress": "192.168.0.123"
       *     }
       */
      attributes?: components['schemas']['HostViewAttribute']
      /**
       * @description All attributes of this host and all parent folders.
       * @example {
       *       "tag_snmp_ds": null
       *     }
       */
      effective_attributes?: components['schemas']['HostViewAttribute'] | null
      /** @description If this is a cluster host, i.e. a container for other hosts. */
      is_cluster?: boolean
      /** @description Whether the host is offline */
      is_offline?: boolean
      /**
       * @description In the case this is a cluster host, these are the cluster nodes.
       * @default null
       */
      cluster_nodes: string[] | null
    }
    HostConfig: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The domain type of the object.
       * @default host_config
       */
      domainType: unknown
      /** @description The unique identifier for this domain-object type. */
      id?: string
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description All the members of the host object. */
      members?: components['schemas']['HostMembers']
      /** @description All the data and metadata of this host. */
      extensions?: components['schemas']['HostExtensions']
    }
    HostConfigCollection: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The name of this collection.
       * @default all
       */
      id: string
      /**
       * @description The domain type of the objects in the collection.
       * @default host_config
       */
      domainType: unknown
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description A list of host objects. */
      value?: components['schemas']['HostConfig'][]
      /** @description Additional attributes alongside the collection. */
      extensions?: {
        [key: string]: unknown
      }
    }
    FolderUpdateAttribute: {
      /**
       * @description The IP address family of the host.
       * @example ip-v4-only
       * @enum {string}
       */
      tag_address_family?: 'ip-v4v6' | 'no-ip' | 'ip-v4-only' | 'ip-v6-only'
      /**
       * @description Agent and API integrations
       * @example cmk-agent
       * @enum {string}
       */
      tag_agent?: 'all-agents' | 'special-agents' | 'cmk-agent' | 'no-agent'
      /**
       * @description The SNMP data source of the host.
       * @example snmp-v2
       * @enum {string}
       */
      tag_snmp_ds?: 'no-snmp' | 'snmp-v1' | 'snmp-v2'
      /**
       * @description Use piggyback data for this host.
       * @example piggyback
       * @enum {string}
       */
      tag_piggyback?: 'piggyback' | 'no-piggyback' | 'auto-piggyback'
      /** @description The site that should monitor this host. */
      site?: string
      /** @description A list of parents of this host. */
      parents?: string[]
      /** @description Only members of the contact groups listed here have Setup permission for the host/folder. Optionally, you can make these contact groups automatically monitor contacts. The assignment of hosts to contact groups can also be defined by <a href='wato.py?mode=edit_ruleset&varname=host_contactgroups'>rules</a>. */
      contactgroups?: components['schemas']['HostContactGroup']
      /** @description [Enterprise, Cloud, Saas, Managed editions only] Bake agent packages for this folder even if it is empty. */
      bake_agent_package?: boolean
      /** @description The SNMP access configuration. A configured SNMP v1/v2 community here will have precedence over any configured SNMP community rule. For this attribute to take effect, the attribute `tag_snmp_ds` needs to be set first. */
      snmp_community?: components['schemas']['SNMPCredentials']
      /** @description Labels allow you to flexibly group your hosts in order to refer to them later at other places in Checkmk, e.g. in rule chains.<br><b>Label format:</b> key:value<br><br>Neither the key nor the value can contain ‘:’. Checkmk does not perform any other validation on the labels you use. */
      labels?: {
        [key: string]: string
      }
      /** @description Configuration for automatic network scan. Pings will besent to each IP address in the configured ranges to checkif a host is up or down. Each found host will be added tothe folder by it's host name (if possible) or IP address. */
      network_scan?: components['schemas']['NetworkScan']
      /**
       * @description The protocol used to connect to the management board.
       *
       *     Valid options are:
       *
       *      * `none` - No management board
       *      * `snmp` - Connect using SNMP
       *      * `ipmi` - Connect using IPMI
       *
       * @enum {string}
       */
      management_protocol?: 'none' | 'snmp' | 'ipmi'
      /** @description SNMP credentials */
      management_snmp_community?: components['schemas']['SNMPCredentials'] | null
      /** @description IPMI credentials */
      management_ipmi_credentials?: components['schemas']['IPMIParameters'] | null
    } & {
      [key: string]: string
    }
    UpdateFolderEntry: {
      /**
       * @description The title of the folder. Used in the GUI.
       * @example Virtual Servers.
       */
      title?: string
      /**
       * @description Replace all attributes with the ones given in this field. Already setattributes, not given here, will be removed. Can't be used together with update_attributes or remove_attributes fields.
       * @example {
       *       "tag_networking": "wan"
       *     }
       */
      attributes?: components['schemas']['FolderUpdateAttribute']
      /**
       * @description Just update the folder attributes with these attributes. The previously set attributes will be overwritten. Can't be used together with attributes or remove_attributes fields.
       * @example {
       *       "tag_criticality": "prod"
       *     }
       */
      update_attributes?: components['schemas']['FolderUpdateAttribute']
      /**
       * @description A list of attributes which should be removed. Can't be used together with attributes or update_attributes fields.
       * @example [
       *       "tag_foobar"
       *     ]
       */
      remove_attributes?: string[]
      /**
       * @description The path name of the folder.
       *
       *     Path delimiters can be either `~`, `/` or `\`. Please use the one most appropriate for your quoting/escaping needs. A good default choice is `~`.
       * @example /
       */
      folder: string
    }
    BulkUpdateFolder: {
      /**
       * @description A list of folder entries.
       * @example [
       *       {
       *         "remove_attributes": [
       *           "tag_foobar"
       *         ]
       *       }
       *     ]
       */
      entries: components['schemas']['UpdateFolderEntry'][]
    }
    UpdateFolder: {
      /**
       * @description The title of the folder. Used in the GUI.
       * @example Virtual Servers.
       */
      title?: string
      /**
       * @description Replace all attributes with the ones given in this field. Already setattributes, not given here, will be removed. Can't be used together with update_attributes or remove_attributes fields.
       * @example {
       *       "tag_networking": "wan"
       *     }
       */
      attributes?: components['schemas']['FolderUpdateAttribute']
      /**
       * @description Just update the folder attributes with these attributes. The previously set attributes will be overwritten. Can't be used together with attributes or remove_attributes fields.
       * @example {
       *       "tag_criticality": "prod"
       *     }
       */
      update_attributes?: components['schemas']['FolderUpdateAttribute']
      /**
       * @description A list of attributes which should be removed. Can't be used together with attributes or update_attributes fields.
       * @example [
       *       "tag_foobar"
       *     ]
       */
      remove_attributes?: string[]
    }
    FolderCreateAttribute: {
      /**
       * @description The IP address family of the host.
       * @example ip-v4-only
       * @enum {string}
       */
      tag_address_family?: 'ip-v4v6' | 'no-ip' | 'ip-v4-only' | 'ip-v6-only'
      /**
       * @description Agent and API integrations
       * @example cmk-agent
       * @enum {string}
       */
      tag_agent?: 'all-agents' | 'special-agents' | 'cmk-agent' | 'no-agent'
      /**
       * @description The SNMP data source of the host.
       * @example snmp-v2
       * @enum {string}
       */
      tag_snmp_ds?: 'no-snmp' | 'snmp-v1' | 'snmp-v2'
      /**
       * @description Use piggyback data for this host.
       * @example piggyback
       * @enum {string}
       */
      tag_piggyback?: 'piggyback' | 'no-piggyback' | 'auto-piggyback'
      /** @description The site that should monitor this host. */
      site?: string
      /** @description A list of parents of this host. */
      parents?: string[]
      /** @description Only members of the contact groups listed here have Setup permission for the host/folder. Optionally, you can make these contact groups automatically monitor contacts. The assignment of hosts to contact groups can also be defined by <a href='wato.py?mode=edit_ruleset&varname=host_contactgroups'>rules</a>. */
      contactgroups?: components['schemas']['HostContactGroup']
      /** @description [Enterprise, Cloud, Saas, Managed editions only] Bake agent packages for this folder even if it is empty. */
      bake_agent_package?: boolean
      /** @description The SNMP access configuration. A configured SNMP v1/v2 community here will have precedence over any configured SNMP community rule. For this attribute to take effect, the attribute `tag_snmp_ds` needs to be set first. */
      snmp_community?: components['schemas']['SNMPCredentials']
      /** @description Labels allow you to flexibly group your hosts in order to refer to them later at other places in Checkmk, e.g. in rule chains.<br><b>Label format:</b> key:value<br><br>Neither the key nor the value can contain ‘:’. Checkmk does not perform any other validation on the labels you use. */
      labels?: {
        [key: string]: string
      }
      /** @description Configuration for automatic network scan. Pings will besent to each IP address in the configured ranges to checkif a host is up or down. Each found host will be added tothe folder by it's host name (if possible) or IP address. */
      network_scan?: components['schemas']['NetworkScan']
      /**
       * @description The protocol used to connect to the management board.
       *
       *     Valid options are:
       *
       *      * `none` - No management board
       *      * `snmp` - Connect using SNMP
       *      * `ipmi` - Connect using IPMI
       *
       * @enum {string}
       */
      management_protocol?: 'none' | 'snmp' | 'ipmi'
      /** @description SNMP credentials */
      management_snmp_community?: components['schemas']['SNMPCredentials'] | null
      /** @description IPMI credentials */
      management_ipmi_credentials?: components['schemas']['IPMIParameters'] | null
    } & {
      [key: string]: string
    }
    CreateFolder: {
      /**
       * @description The filesystem directory name (not path!) of the folder. No slashes are allowed.
       * @example production
       */
      name?: string
      /**
       * @description The folder title as displayed in the user interface.
       * @example Production Hosts
       */
      title: string
      /**
       * @description The folder in which the new folder shall be placed in. The root-folder is specified by '/'.
       *
       *     Path delimiters can be either `~`, `/` or `\`. Please use the one most appropriate for your quoting/escaping needs. A good default choice is `~`.
       * @example /
       */
      parent: string
      /**
       * @description Specific attributes to apply for all hosts in this folder (among other things). Built-in and custom attributes and tag groups can be set here.
       * @default {}
       * @example {
       *       "tag_criticality": "prod"
       *     }
       */
      attributes: components['schemas']['FolderCreateAttribute']
    }
    MoveFolder: {
      /**
       * @description Where the folder has to be moved to.
       *
       *     Path delimiters can be either `~`, `/` or `\`. Please use the one most appropriate for your quoting/escaping needs. A good default choice is `~`.
       * @example ~my~fine/folder
       */
      destination: string
    }
    Api401DefaultError: {
      /**
       * @description The HTTP status code.
       * @example 401
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example The user is not authorized to do this request.
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Unauthorized
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    /** GraphTimerangeExtension */
    GraphTimerangeExtension: {
      /**
       * Sort Index
       * @description The index of the graph timerange for sorting multiple entries.
       * @example 1
       */
      sort_index: number
      /**
       * Total Seconds
       * @description The total duration of the graph timerange in seconds.
       * @example 14400
       */
      total_seconds: number
    }
    /** GraphTimerangeObject */
    GraphTimerangeObject: {
      /**
       * Links
       * @description List of links to other resources.
       * @example [
       *       {
       *         "href": "https://.../api_resource",
       *         "method": "GET",
       *         "rel": "self",
       *         "type": "application/json"
       *       }
       *     ]
       */
      links: components['schemas']['LinkModel'][]
      /**
       * Domaintype
       * @description The type of the domain-object.
       * @constant
       */
      domainType: 'graph_timerange'
      /**
       * ID
       * @description The unique identifier for this domain-object type.
       * @example host1
       */
      id?: string
      /**
       * Title
       * @description A human readable title of this object. Can be used for user interfaces.
       * @example My Host
       */
      title?: string
      /** @description All the attributes of the domain object. */
      extensions: components['schemas']['GraphTimerangeExtension']
    }
    /** GraphTimerangeCollection */
    GraphTimerangeCollection: {
      /**
       * Links
       * @description List of links to other resources.
       * @example [
       *       {
       *         "href": "https://.../api_resource",
       *         "method": "GET",
       *         "rel": "self",
       *         "type": "application/json"
       *       }
       *     ]
       */
      links: components['schemas']['LinkModel'][]
      /**
       * Id
       * @description The name of this collection.
       */
      id: string
      /**
       * Domaintype
       * @description The domain type of the objects in the collection.
       * @constant
       */
      domainType: 'graph_timerange'
      /**
       * Title
       * @description A human readable title of this object. Can be used for user interfaces.
       */
      title?: string
      /**
       * Value
       * @description A list of GraphTimerange objects.
       */
      value: components['schemas']['GraphTimerangeObject'][]
      /**
       * Extensions
       * @description Additional attributes alongside the collection.
       */
      extensions?: Record<string, never>
    }
    /** Attributes */
    Attributes: {
      /**
       * Pairs
       * @description Key-value pairs
       */
      pairs: {
        [key: string]: number | string | boolean | null
      }
    }
    /** HostInventoryTree */
    HostInventoryTree: {
      /**
       * Host Name
       * @description The HW/SW Inventory tree of the host
       */
      host_name: string
      /** @description The HW/SW Inventory tree of the host */
      inventory_tree: components['schemas']['Tree']
    }
    /** Table */
    Table: {
      /**
       * Key Columns
       * @description The key columns which are used to identify a row
       */
      key_columns: string[]
      /**
       * Rows
       * @description The rows of an inventory table whereas each row consists of key-value pairs
       */
      rows: {
        [key: string]: number | string | boolean | null
      }[]
    }
    /** Tree */
    Tree: {
      /** @description A collection of key-value pairs */
      attributes: components['schemas']['Attributes']
      /** @description A collection of rows */
      table: components['schemas']['Table']
      /**
       * Nodes
       * @description Sub trees identified by node names
       */
      nodes: {
        [key: string]: components['schemas']['Tree']
      }
    }
    /** InventoryTreesCollectionModel */
    InventoryTreesCollectionModel: {
      /**
       * Links
       * @description List of links to other resources.
       * @example [
       *       {
       *         "href": "https://.../api_resource",
       *         "method": "GET",
       *         "rel": "self",
       *         "type": "application/json"
       *       }
       *     ]
       */
      links: components['schemas']['LinkModel'][]
      /**
       * Id
       * @description The name of this collection.
       */
      id: string
      /**
       * Domaintype
       * @description The domain type of the objects in the collection
       * @example inventory
       * @constant
       */
      domainType: 'inventory'
      /**
       * Title
       * @description A human readable title of this object. Can be used for user interfaces.
       */
      title?: string
      /**
       * Value
       * @description The HW/SW Inventory trees of hosts
       * @example [
       *       {
       *         "host_name": "hostname",
       *         "inventory_tree": {
       *           "attributes": {
       *             "pairs": {
       *               "key": "value"
       *             }
       *           },
       *           "nodes": {
       *             "nodename": {
       *               "attributes": {
       *                 "pairs": {
       *                   "key": "value"
       *                 }
       *               },
       *               "nodes": {},
       *               "table": {
       *                 "key_columns": [
       *                   "column1"
       *                 ],
       *                 "rows": [
       *                   {
       *                     "column1": "value1",
       *                     "column2": "value2"
       *                   }
       *                 ]
       *               }
       *             }
       *           },
       *           "table": {
       *             "key_columns": [
       *               "column1"
       *             ],
       *             "rows": [
       *               {
       *                 "column1": "value1",
       *                 "column2": "value2"
       *               }
       *             ]
       *           }
       *         }
       *       }
       *     ]
       */
      value: components['schemas']['HostInventoryTree'][]
      /**
       * Extensions
       * @description Additional attributes alongside the collection.
       */
      extensions?: Record<string, never>
    }
    HostGroupExtensions: {
      /**
       * @description [Managed edition only] The customer for which the object is configured. This field is required for the following editions: Managed.
       * @example provider
       */
      customer?: string
    }
    HostGroup: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The domain type of the object.
       * @default host_group_config
       */
      domainType: unknown
      /** @description The unique identifier for this domain-object type. */
      id?: string
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description The container for external resources, like linked foreign objects or actions. */
      members?: {
        [key: string]: unknown
      }
      /** @description All the attributes of the domain object. */
      extensions?: components['schemas']['HostGroupExtensions']
    }
    HostGroupCollection: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The name of this collection.
       * @default all
       */
      id: string
      /**
       * @description The domain type of the objects in the collection.
       * @default host_group_config
       */
      domainType: unknown
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description A list of host group objects. */
      value?: components['schemas']['HostGroup'][]
      /** @description Additional attributes alongside the collection. */
      extensions?: {
        [key: string]: unknown
      }
    }
    UpdateHostGroupAttributes: {
      /**
       * @description The name used for displaying in the GUI.
       * @example Example Group
       */
      alias: string
      /**
       * @description [Managed edition only] By specifying a customer, you configure on which sites the user object will be available. 'global' will make the object available on all sites.
       * @example provider
       */
      customer?: string
    }
    UpdateHostGroup: {
      /**
       * @description The name of the host group.
       * @example windows
       */
      name: string
      attributes: components['schemas']['UpdateHostGroupAttributes']
    }
    BulkUpdateHostGroup: {
      /**
       * @description A list of host group entries.
       * @example [
       *       {
       *         "name": "windows",
       *         "attributes": {
       *           "alias": "Windows Servers"
       *         }
       *       }
       *     ]
       */
      entries: components['schemas']['UpdateHostGroup'][]
    }
    InputHostGroup: {
      /**
       * @description [Managed edition only] By specifying a customer, you configure on which sites the user object will be available. 'global' will make the object available on all sites. This field is required for the following editions: Managed.
       * @example provider
       */
      customer?: string
      /**
       * @description A name used as identifier
       * @example windows
       */
      name: string
      /**
       * @description The name used for displaying in the GUI.
       * @example Windows Servers
       */
      alias: string
    }
    BulkInputHostGroup: {
      /**
       * @description A list of host group entries.
       * @example [
       *       {
       *         "name": "windows",
       *         "alias": "Windows Servers"
       *       }
       *     ]
       */
      entries: components['schemas']['InputHostGroup'][]
    }
    BulkDeleteHostGroup: {
      /**
       * @description A list of host group names.
       * @example [
       *       "windows",
       *       "panels"
       *     ]
       */
      entries: string[]
    }
    HostParameters: {
      /**
       * @description Restrict the query to this particular site.
       * @default []
       * @example [
       *       "heute"
       *     ]
       */
      sites: string[]
      /**
       * @description An query expression of the Livestatus 'hosts' table in nested dictionary form. If you want to use multiple expressions, nest them with the AND/OR operators.
       * @example {"op": "and", "expr": [{"op": "=", "left": "name", "right": "example.com"}, {"op": "!=", "left": "state", "right": "0"}]}
       */
      query?: components['schemas']['Expr']
      /**
       * @description The desired columns of the `hosts` table. If left empty, a default set of columns is used.
       * @default [
       *       "name"
       *     ]
       * @example [
       *       "name"
       *     ]
       */
      columns: string[]
    }
    HostTagOutput: {
      /** @description The unique identifier of this host tag */
      id?: string | null
      /** @description The title of this host tag */
      title?: string
      /** @description The auxiliary tags this tag included in. */
      aux_tags?: string[]
    }
    HostTagExtensions: {
      /** @description The topic this host tag group is organized in. */
      topic?: string
      /** @description The list of tags in this group. */
      tags?: components['schemas']['HostTagOutput'][]
      /** @description A help description for the tag group */
      help?: string
    }
    ConcreteHostTagGroup: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The domain type of the object.
       * @default host_tag_group
       */
      domainType: unknown
      /** @description The unique identifier for this domain-object type. */
      id?: string
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description The container for external resources, like linked foreign objects or actions. */
      members?: {
        [key: string]: unknown
      }
      /** @description Additional fields for objects of this type. */
      extensions?: components['schemas']['HostTagExtensions']
    }
    HostTagGroupCollection: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The name of this collection.
       * @default all
       */
      id: string
      /**
       * @description The domain type of the objects in the collection.
       * @default host_tag_group
       */
      domainType: unknown
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description A list of host tag group objects. */
      value?: components['schemas']['ConcreteHostTagGroup'][]
      /** @description Additional attributes alongside the collection. */
      extensions?: {
        [key: string]: unknown
      }
    }
    HostTag: {
      /**
       * @description An unique id for the tag
       * @default null
       * @example tag_id
       */
      id: string | null
      /**
       * @description The title of the tag
       * @example Tag
       */
      title: string
      /**
       * @description The list of auxiliary tag ids. Built-in tags (ip-v4, ip-v6, snmp, tcp, ping) and custom defined tags are allowed.
       * @example [
       *       "ip-v4, ip-v6"
       *     ]
       */
      aux_tags?: (string | null)[]
    }
    UpdateHostTagGroup: {
      /**
       * @description A title for the host tag
       * @example Kubernetes
       */
      title?: string
      /**
       * @description Different tags can be grouped in a topic
       * @example Data Sources
       */
      topic?: string
      /**
       * @description A help description for the tag group
       * @example Kubernetes Pods
       */
      help?: string
      /**
       * @description A list of host tags belonging to the host tag group
       * @example [
       *       {
       *         "id": "pod",
       *         "title": "Pod"
       *       }
       *     ]
       */
      tags?: components['schemas']['HostTag'][]
      /**
       * @description The host tag group can be in use by other hosts. Setting repair to True gives permission to automatically update the tag from the affected hosts.
       * @default false
       * @example false
       */
      repair: boolean
    }
    Api405DefaultError: {
      /**
       * @description The HTTP status code.
       * @example 405
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example Method not allowed: This request is only allowed with other HTTP methods.
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Method Not Allowed
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    InputHostTagGroup: {
      /**
       * @description An id for the host tag group
       * @example group_id
       */
      id: string
      /**
       * @description A title for the host tag
       * @example Kubernetes
       */
      title: string
      /**
       * @description Different tags can be grouped in a topic
       * @example Data Sources
       */
      topic?: string
      /**
       * @description A help description for the tag group
       * @default
       * @example Kubernetes Pods
       */
      help: string
      /**
       * @description A list of host tags belonging to the host tag group
       * @example [
       *       {
       *         "id": "pod",
       *         "title": "Pod"
       *       }
       *     ]
       */
      tags: components['schemas']['HostTag'][]
    }
    Api404CustomError3: {
      /**
       * @description The HTTP status code.
       * @example 404
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example There is no running renaming job
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Not Found
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    /** Api403DefaultErrorCED056C5417736D5 */
    Api403DefaultErrorCED056C5417736D5: {
      /**
       * Status
       * @description The HTTP status code.
       * @example 403
       */
      status: number
      /**
       * Title
       * @description A summary of the problem.
       * @example Forbidden
       */
      title: string
      /**
       * Detail
       * @description Detailed information on what exactly went wrong.
       * @example Configuration via Setup is disabled.
       */
      detail: string
      /**
       * Validation errors
       * @description Detailed error messages on all fields failing validation.
       * @example {
       *       "field": "error message"
       *     }
       */
      fields?: {
        [key: string]: string
      }
      /**
       * Error extensions
       * @description Additional information about the error.
       * @example {
       *       "key": "value"
       *     }
       */
      ext?: {
        [key: string]: string
      }
    }
    AnnotatedFolder: string
    /** DirectMappingModel */
    DirectMappingModel: {
      /**
       * Hostname
       * @description The host name to be replaced.
       */
      hostname: string
      /**
       * Replace With
       * @description The replacement string.
       */
      replace_with: string
    }
    /** FolderExtensionsModel */
    FolderExtensionsModel: {
      /**
       * Path
       * @description The full path of this folder, slash delimited.
       */
      path: string
      /** @description The folder's attributes. Hosts placed in this folder will inherit these attributes. */
      attributes: components['schemas']['FolderViewAttributeModel']
    }
    /** FolderMembersModel */
    FolderMembersModel: {
      /** @description A list of links pointing to the actual host-resources. */
      hosts: components['schemas']['ObjectCollectionMemberModel']
      /** @description An action which triggers the move of this folder to another folder. */
      move: components['schemas']['ObjectActionMemberModel']
    }
    /** FolderModel */
    FolderModel: {
      /**
       * Links
       * @description List of links to other resources.
       * @example [
       *       {
       *         "href": "https://.../api_resource",
       *         "method": "GET",
       *         "rel": "self",
       *         "type": "application/json"
       *       }
       *     ]
       */
      links: components['schemas']['LinkModel'][]
      /**
       * Domaintype
       * @description The domain type of the object.
       * @constant
       */
      domainType: 'folder_config'
      /**
       * Id
       * @description The full path of the folder, tilde-separated.
       */
      id: string
      /**
       * Title
       * @description The human readable title for this folder.
       */
      title: string
      /** @description Specific collections or actions applicable to this object. */
      members: components['schemas']['FolderMembersModel']
      /** @description Data and Meta-Data of this object. */
      extensions: components['schemas']['FolderExtensionsModel']
    }
    /** FolderViewAttributeModel */
    FolderViewAttributeModel: {
      /**
       * Tag Address Family
       * @description The IP address family of the host.
       * @example ip-v4-only
       * @enum {string}
       */
      tag_address_family?: 'ip-v4-only' | 'ip-v6-only' | 'ip-v4v6' | 'no-ip'
      /**
       * Tag Agent
       * @description Agent and API integrations
       * @example cmk-agent
       * @enum {string}
       */
      tag_agent?: 'cmk-agent' | 'all-agents' | 'special-agents' | 'no-agent'
      /**
       * Tag Snmp Ds
       * @description The SNMP data source of the host.
       * @example snmp-v2
       * @enum {string}
       */
      tag_snmp_ds?: 'no-snmp' | 'snmp-v2' | 'snmp-v1'
      /**
       * Tag Piggyback
       * @description Use piggyback data for this host.
       * @example piggyback
       * @enum {string}
       */
      tag_piggyback?: 'auto-piggyback' | 'piggyback' | 'no-piggyback'
      /**
       * Site
       * @description The site that should monitor this host.
       */
      site?: string
      /**
       * Parents
       * @description A list of parents of this host.
       */
      parents?: string[]
      /**
       * Contactgroups
       * @description Only members of the contact groups listed here have Setup permission for the host/folder. Optionally, you can make these contact groups automatically monitor contacts. The assignment of hosts to contact groups can also be defined by rules.
       */
      contactgroups?: components['schemas']['HostContactGroupModel']
      /**
       * Bake Agent Package
       * @description Bake agent packages for this folder even if it is empty.
       */
      bake_agent_package?: boolean
      /**
       * Snmp Community
       * @description The SNMP access configuration. A configured SNMP v1/v2 community here will have precedence over any configured SNMP community rule. For this attribute to take effect, the attribute `tag_snmp_ds` needs to be set first.
       */
      snmp_community?:
        | components['schemas']['SNMPCommunityModel']
        | components['schemas']['SNMPv3NoAuthNoPrivacyModel']
        | components['schemas']['SNMPv3AuthNoPrivacyModel']
        | components['schemas']['SNMPv3AuthPrivacyModel']
      /**
       * Labels
       * @description Labels allow you to flexibly group your hosts in order to refer to them later at other places in Checkmk, e.g. in rule chains.<br><b>Label format:</b> key:value<br><br>Neither the key nor the value can contain ‘:’. Checkmk does not perform any other validation on the labels you use. The key is the host label key.
       */
      labels?: {
        [key: string]: string
      }
      /**
       * Network Scan
       * @description Configuration for automatic network scan. Pings will be sent to each IP address in the configured ranges to check if a host is up or down. Each found host will be added to the folder by its host name (if possible) or IP address.
       */
      network_scan?: components['schemas']['NetworkScanModel']
      /**
       * Management Protocol
       * @description The protocol used to connect to the management board.
       *
       *     Valid options are:
       *
       *      * `none` - No management board
       *      * `snmp` - Connect using SNMP
       *      * `ipmi` - Connect using IPMI
       * @enum {string}
       */
      management_protocol?: 'none' | 'snmp' | 'ipmi'
      /**
       * Management Snmp Community
       * @description SNMP credentials
       */
      management_snmp_community?:
        | components['schemas']['SNMPCommunityModel']
        | components['schemas']['SNMPv3NoAuthNoPrivacyModel']
        | components['schemas']['SNMPv3AuthNoPrivacyModel']
        | components['schemas']['SNMPv3AuthPrivacyModel']
        | null
      /**
       * Management Ipmi Credentials
       * @description IPMI credentials
       */
      management_ipmi_credentials?: components['schemas']['IPMIParametersModel'] | null
      /**
       * Network Scan Result
       * @description Read only access to the network scan result
       */
      network_scan_result?: components['schemas']['NetworkScanResultModel']
      /**
       * Meta Data
       * @description Read only access to configured metadata.
       */
      meta_data?: components['schemas']['MetaDataModel']
    } & {
      [key: string]: string
    }
    /** HostConfigModel */
    HostConfigModel: {
      /**
       * Links
       * @description List of links to other resources.
       * @example [
       *       {
       *         "href": "https://.../api_resource",
       *         "method": "GET",
       *         "rel": "self",
       *         "type": "application/json"
       *       }
       *     ]
       */
      links: components['schemas']['LinkModel'][]
      /**
       * Domaintype
       * @description The domain type of the object.
       * @constant
       */
      domainType: 'host_config'
      /**
       * ID
       * @description The unique identifier for this domain-object type.
       * @example host1
       */
      id?: string
      /**
       * Title
       * @description A human readable title of this object. Can be used for user interfaces.
       * @example My Host
       */
      title?: string
      /** @description All the members of the host object. */
      members: components['schemas']['HostMembersModel'] | null
      /** @description All the data and metadata of this host. */
      extensions: components['schemas']['HostExtensionsModel']
    }
    /** HostContactGroupModel */
    HostContactGroupModel: {
      /**
       * Groups
       * @description A list of contact groups.
       * @example all
       */
      groups: string[]
      /**
       * Use
       * @description Add these contact groups to the host.
       */
      use: boolean
      /**
       * Use For Services
       * @description <p>Always add host contact groups also to its services.</p>With this option contact groups that are added to hosts are always being added to services, as well. This only makes a difference if you have assigned other contact groups to services via rules in <i>Host & Service Parameters</i>. As long as you do not have any such rule a service always inherits all contact groups from its host.
       */
      use_for_services: boolean
      /**
       * Recurse Use
       * @description Add these groups as contacts to all hosts in all sub-folders of this folder.
       */
      recurse_use: boolean
      /**
       * Recurse Perms
       * @description Give these groups also permission on all sub-folders.
       */
      recurse_perms: boolean
    }
    /** HostExtensionsModel */
    HostExtensionsModel: {
      /** @description The folder, in which this host resides. */
      folder: components['schemas']['AnnotatedFolder']
      /** @description Attributes of this host. */
      attributes: components['schemas']['HostViewAttributeModel']
      /**
       * Effective Attributes
       * @description All attributes of this host and all parent folders.
       */
      effective_attributes?: components['schemas']['HostViewAttributeModel']
      /**
       * Is Cluster
       * @description If this is a cluster host, i.e. a container for other hosts.
       */
      is_cluster: boolean
      /**
       * Is Offline
       * @description Whether the host is offline.
       */
      is_offline: boolean
      /**
       * Cluster Nodes
       * @description In the case this is a cluster host, these are the cluster nodes.
       */
      cluster_nodes: string[] | null
    }
    /** HostMembersModel */
    HostMembersModel: {
      /**
       * Links
       * @description List of links to other resources.
       * @example [
       *       {
       *         "href": "https://.../api_resource",
       *         "method": "GET",
       *         "rel": "self",
       *         "type": "application/json"
       *       }
       *     ]
       */
      links: components['schemas']['LinkModel'][]
      /**
       * Domain Type
       * @description The "domain-type" of the object.
       * @example host
       */
      domainType: string
      /**
       * ID
       * @description The unique identifier for this domain-object type.
       * @example host1
       */
      id?: string
      /**
       * Title
       * @description A human readable title of this object. Can be used for user interfaces.
       * @example My Host
       */
      title?: string
      /** @description The folder in which this host resides. It is represented by a hexadecimal identifier which is it's 'primary key'. The folder can be accessed via the `self`-link provided in the links array. */
      folder_config: components['schemas']['FolderModel']
    }
    /** HostViewAttributeModel */
    HostViewAttributeModel: {
      /**
       * Tag Address Family
       * @description The IP address family of the host.
       * @example ip-v4-only
       * @enum {string}
       */
      tag_address_family?: 'ip-v4-only' | 'ip-v6-only' | 'ip-v4v6' | 'no-ip'
      /**
       * Tag Agent
       * @description Agent and API integrations
       * @example cmk-agent
       * @enum {string}
       */
      tag_agent?: 'cmk-agent' | 'all-agents' | 'special-agents' | 'no-agent'
      /**
       * Tag Snmp Ds
       * @description The SNMP data source of the host.
       * @example snmp-v2
       * @enum {string}
       */
      tag_snmp_ds?: 'no-snmp' | 'snmp-v2' | 'snmp-v1'
      /**
       * Tag Piggyback
       * @description Use piggyback data for this host.
       * @example piggyback
       * @enum {string}
       */
      tag_piggyback?: 'auto-piggyback' | 'piggyback' | 'no-piggyback'
      /**
       * Alias
       * @description Add a comment or describe this host
       */
      alias?: string
      /**
       * Site
       * @description The site that should monitor this host.
       */
      site?: string
      /**
       * Parents
       * @description A list of parents of this host.
       */
      parents?: string[]
      /**
       * Contactgroups
       * @description Only members of the contact groups listed here have Setup permission for the host/folder. Optionally, you can make these contact groups automatically monitor contacts. The assignment of hosts to contact groups can also be defined by rules.
       */
      contactgroups?: components['schemas']['HostContactGroupModel']
      /**
       * Ipaddress
       * @description An IPv4 address.
       */
      ipaddress?: string
      /**
       * Ipv6Address
       * @description An IPv6 address.
       */
      ipv6address?: string
      /**
       * Additional Ipv4Addresses
       * @description A list of IPv4 addresses.
       */
      additional_ipv4addresses?: string[]
      /**
       * Additional Ipv6Addresses
       * @description A list of IPv6 addresses.
       */
      additional_ipv6addresses?: string[]
      /**
       * Bake Agent Package
       * @description [Enterprise, Cloud, Saas, Managed editions only] Bake agent packages for this folder even if it is empty.
       */
      bake_agent_package?: boolean
      /**
       * Cmk Agent Connection
       * @description [Enterprise, Cloud, Saas, Managed editions only] This configures the communication direction of this host.
       *      * `pull-agent` (default) - The server will try to contact the monitored host and pull the data by initializing a TCP connection
       *      * `push-agent` - the host is expected to send the data to the monitoring server without being triggered
       *
       * @enum {string}
       */
      cmk_agent_connection?: 'push-agent' | 'pull-agent'
      /**
       * Snmp Community
       * @description The SNMP access configuration. A configured SNMP v1/v2 community here will have precedence over any configured SNMP community rule. For this attribute to take effect, the attribute `tag_snmp_ds` needs to be set first.
       */
      snmp_community?:
        | components['schemas']['SNMPCommunityModel']
        | components['schemas']['SNMPv3NoAuthNoPrivacyModel']
        | components['schemas']['SNMPv3AuthNoPrivacyModel']
        | components['schemas']['SNMPv3AuthPrivacyModel']
      /**
       * Labels
       * @description Labels allow you to flexibly group your hosts in order to refer to them later at other places in Checkmk, e.g. in rule chains.<br><b>Label format:</b> key:value<br><br>Neither the key nor the value can contain ‘:’. Checkmk does not perform any other validation on the labels you use. The key is the host label key.
       */
      labels?: {
        [key: string]: string
      }
      /**
       * Waiting For Discovery
       * @description This indicates that the host is waiting for a bulk discovery. It is set to True once the host is in the queue. It will be removed after the discovery is ended.
       */
      waiting_for_discovery?: boolean
      /**
       * Network Scan
       * @description Configuration for automatic network scan. Pings will be sent to each IP address in the configured ranges to check if a host is up or down. Each found host will be added to the folder by its host name (if possible) or IP address.
       */
      network_scan?: components['schemas']['NetworkScanModel']
      /**
       * Management Protocol
       * @description The protocol used to connect to the management board. Valid options are: 'none' - No management board, 'snmp' - Connect using SNMP, 'ipmi' - Connect using IPMI
       * @enum {string}
       */
      management_protocol?: 'none' | 'snmp' | 'ipmi'
      /**
       * Management Address
       * @description Address (IPv4, IPv6 or host name) under which the management board can be reached.
       */
      management_address?: string
      /**
       * Management Snmp Community
       * @description SNMP credentials
       */
      management_snmp_community?:
        | components['schemas']['SNMPCommunityModel']
        | components['schemas']['SNMPv3NoAuthNoPrivacyModel']
        | components['schemas']['SNMPv3AuthNoPrivacyModel']
        | components['schemas']['SNMPv3AuthPrivacyModel']
      /**
       * Management Ipmi Credentials
       * @description IPMI credentials
       */
      management_ipmi_credentials?: components['schemas']['IPMIParametersModel']
      /**
       * Locked By
       * @description Identity of the entity which locked the locked_attributes. The identity is built out of the Site ID, the program name and the connection ID.
       */
      locked_by?: components['schemas']['LockedByModel']
      /**
       * Locked Attributes
       * @description Name of host attributes which are locked in the UI.
       */
      locked_attributes?: string[]
      /**
       * Inventory Failed
       * @description Whether or not the last bulk discovery failed. It is set to True once it fails and unset in case a later discovery succeeds.
       */
      inventory_failed?: boolean
      /**
       * Network Scan Result
       * @description Read only access to the network scan result
       */
      network_scan_result?: components['schemas']['NetworkScanResultModel']
      /**
       * Meta Data
       * @description Read only access to configured metadata.
       */
      meta_data?: components['schemas']['MetaDataModel']
    } & {
      [key: string]: string
    }
    /** IPAddressRangeModel */
    IPAddressRangeModel: {
      /**
       * Type
       * @description Select a range of IP addresses
       * @constant
       */
      type: 'ip_range'
      /**
       * From Address
       * Format: ipv4
       * @description The first IPv4 address of this range.
       */
      from_address: string
      /**
       * To Address
       * Format: ipv4
       * @description The last IPv4 address of this range.
       */
      to_address: string
    }
    /** IPAddressesModel */
    IPAddressesModel: {
      /**
       * Type
       * @description Select multiple explicit IP addresses
       * @constant
       */
      type: 'ip_list'
      /**
       * Addresses
       * @description List of IPv4 addresses
       */
      addresses: string[]
    }
    /** IPMIParametersModel */
    IPMIParametersModel: {
      /**
       * Username
       * @description IPMI username
       */
      username?: string
      /**
       * Password
       * @description IPMI password
       */
      password?: string
    }
    /** IPNetworkModel */
    IPNetworkModel: {
      /**
       * Type
       * @description Select an entire network
       * @constant
       */
      type: 'ip_network'
      /**
       * Network
       * Format: ipv4network
       * @description A IPv4 network in CIDR notation. Minimum prefix length is 8 bit, maximum prefix length is 30 bit.
       *
       *     Valid examples:
       *
       *      * `192.168.0.0/24`
       *      * `192.168.0.0/255.255.255.0`
       */
      network: string
    }
    /** IPRegexpModel */
    IPRegexpModel: {
      /**
       * Type
       * @description Deselect IP addresses with regexes
       * @constant
       */
      type: 'ip_regex_list'
      /**
       * Regexp List
       * @description A list of regular expressions which are matched against the found IP addresses. The matches will be excluded from the result.
       */
      regexp_list: string[]
    }
    /** LockedByModel */
    LockedByModel: {
      /**
       * Site Id
       * @description Site ID
       */
      site_id: string
      /**
       * Program Id
       * @description Program ID
       */
      program_id: string
      /**
       * Instance Id
       * @description Instance ID
       */
      instance_id: string
    }
    /** MetaDataModel */
    MetaDataModel: {
      /**
       * Created At
       * Format: date-time
       * @description When has this object been created.
       */
      created_at?: string
      /**
       * Updated At
       * Format: date-time
       * @description When this object was last changed.
       */
      updated_at?: string
      /**
       * Created By
       * @description The user id under which this object has been created.
       */
      created_by?: string | null
    }
    /** NetworkScanModel */
    NetworkScanModel: {
      /**
       * Addresses
       * @description IPv4 addresses to include.
       */
      addresses: (
        | components['schemas']['IPAddressRangeModel']
        | components['schemas']['IPNetworkModel']
        | components['schemas']['IPAddressesModel']
      )[]
      /**
       * Exclude Addresses
       * @description IPv4 addresses to exclude.
       */
      exclude_addresses?: (
        | components['schemas']['IPAddressRangeModel']
        | components['schemas']['IPNetworkModel']
        | components['schemas']['IPAddressesModel']
        | components['schemas']['IPRegexpModel']
      )[]
      /**
       * Scan Interval
       * @description Scan interval in seconds. Default is 1 day, minimum is 1 hour.
       */
      scan_interval?: number
      /**
       * Time Allowed
       * @description Only execute the discovery during this time range each day.
       */
      time_allowed: components['schemas']['TimeAllowedRangeModel'][]
      /**
       * Set Ipaddress
       * @description When set, the found IPv4 address is set on the discovered host.
       */
      set_ipaddress: boolean
      /**
       * Max Parallel Pings
       * @description Set the maximum number of concurrent pings sent to target IP addresses.
       */
      max_parallel_pings: number
      /**
       * Run As
       * @description Execute the network scan in the Checkmk user context of the chosen user. This user needs the permission to add new hosts to this folder.
       */
      run_as?: string
      /**
       * Tag Criticality
       * @description Specify which criticality tag to set on the host created by the network scan. This field is required if the criticality tag group exists, otherwise it as to be omitted.
       */
      tag_criticality?: string
      /**
       * Translate Names
       * @description Name translation settings
       */
      translate_names?: components['schemas']['TranslateNamesModel']
    }
    /** NetworkScanResultModel */
    NetworkScanResultModel: {
      /**
       * Start
       * @description When the scan started
       */
      start: string | null
      /**
       * End
       * @description When the scan finished. Will be Null if not yet run.
       */
      end?: string | null
      /**
       * State
       * @description Last scan result
       * @enum {string}
       */
      state: 'running' | 'succeeded' | 'failed'
      /**
       * Output
       * @description Short human readable description of what is happening.
       */
      output: string
    }
    /** ObjectActionMemberModel */
    ObjectActionMemberModel: {
      /**
       * Links
       * @description List of links to other resources.
       * @example [
       *       {
       *         "href": "https://.../api_resource",
       *         "method": "GET",
       *         "rel": "self",
       *         "type": "application/json"
       *       }
       *     ]
       */
      links: components['schemas']['LinkModel'][]
      /**
       * Id
       * @description The id of this object.
       */
      id: string
      /**
       * Disabledreason
       * @description Provides the reason (or the literal "disabled") why an object property or collection is un-modifiable, or, in the case of an action, unusable (and hence no links to mutate that member's state, or invoke the action, are provided).
       */
      disabledReason: string | null
      /**
       * Invalidreason
       * @description Provides the reason (or the literal "invalid") why a proposed value for a property, collection or action argument is invalid. Appears within an argument representation 2.9 returned as a response.
       * @example invalid
       */
      invalidReason: string | null
      /**
       * X-Ro-Invalidreason
       * @description Provides the reason why a SET OF proposed values for properties or arguments is invalid.
       * @example invalid
       */
      'x-ro-invalidReason': string | null
      /**
       * Membertype
       * @description The type of this member.
       * @constant
       */
      memberType: 'action'
      /** Parameters */
      parameters: Record<string, never>
      /**
       * Name
       * @description The name of the object.
       * @example import_values
       */
      name: string
      /**
       * Title
       * @description A human readable title of this object. Can be used for user interfaces.
       */
      title: string
    }
    /** ObjectCollectionMemberModel */
    ObjectCollectionMemberModel: {
      /**
       * Links
       * @description List of links to other resources.
       * @example [
       *       {
       *         "href": "https://.../api_resource",
       *         "method": "GET",
       *         "rel": "self",
       *         "type": "application/json"
       *       }
       *     ]
       */
      links: components['schemas']['LinkModel'][]
      /**
       * Id
       * @description The id of this object.
       */
      id: string
      /**
       * Disabledreason
       * @description Provides the reason (or the literal "disabled") why an object property or collection is un-modifiable, or, in the case of an action, unusable (and hence no links to mutate that member's state, or invoke the action, are provided).
       */
      disabledReason: string | null
      /**
       * Invalidreason
       * @description Provides the reason (or the literal "invalid") why a proposed value for a property, collection or action argument is invalid. Appears within an argument representation 2.9 returned as a response.
       * @example invalid
       */
      invalidReason: string | null
      /**
       * X-Ro-Invalidreason
       * @description Provides the reason why a SET OF proposed values for properties or arguments is invalid.
       * @example invalid
       */
      'x-ro-invalidReason': string | null
      /**
       * Membertype
       * @description The type of this member.
       * @constant
       */
      memberType: 'collection'
      /** Value */
      value: components['schemas']['LinkModel'][]
      /**
       * Name
       * @description The name of the object.
       * @example import_values
       */
      name: string
      /**
       * Title
       * @description A human readable title of this object. Can be used for user interfaces.
       */
      title: string
    }
    /** RegexpRewritesModel */
    RegexpRewritesModel: {
      /**
       * Search
       * Format: regex
       * @description The search regexp. May contain match-groups, conditional matches, etc. This follows the Python regular expression syntax.
       *
       *     For details see:
       *
       *      * https://docs.python.org/3/library/re.html
       */
      search: string
      /**
       * Replace With
       * @description The replacement string. Match-groups can only be identified by `\1`, `\2`, etc. Highest supported match group is `\99`. Named lookups are not supported.
       */
      replace_with: string
    }
    /** SNMPCommunityModel */
    SNMPCommunityModel: {
      /**
       * Type
       * @description SNMP v1 or v2 with community
       * @constant
       */
      type: 'v1_v2_community'
      /**
       * Community
       * @description SNMP community (SNMP Versions 1 and 2c)
       */
      community: string
    }
    /** SNMPv3AuthNoPrivacyModel */
    SNMPv3AuthNoPrivacyModel: {
      /**
       * Type
       * @description SNMPv3 with authentication, but without privacy
       * @constant
       */
      type: 'authNoPriv'
      /**
       * Auth Protocol
       * @description Authentication protocol.
       * @enum {string}
       */
      auth_protocol: 'MD5-96' | 'SHA-1-96' | 'SHA-2-224' | 'SHA-2-256' | 'SHA-2-384' | 'SHA-2-512'
      /**
       * Security Name
       * @description Security name
       */
      security_name: string
      /**
       * Auth Password
       * @description Authentication pass phrase.
       */
      auth_password: string
    }
    /** SNMPv3AuthPrivacyModel */
    SNMPv3AuthPrivacyModel: {
      /**
       * Type
       * @description SNMPv3 with authentication and privacy
       * @constant
       */
      type: 'authPriv'
      /**
       * Auth Protocol
       * @description Authentication protocol.
       * @enum {string}
       */
      auth_protocol: 'MD5-96' | 'SHA-1-96' | 'SHA-2-224' | 'SHA-2-256' | 'SHA-2-384' | 'SHA-2-512'
      /**
       * Security Name
       * @description Security name
       */
      security_name: string
      /**
       * Auth Password
       * @description Authentication pass phrase.
       */
      auth_password: string
      /**
       * Privacy Protocol
       * @description The privacy protocol. The only supported values in the Raw Edition are CBC-DES and AES-128. If selected, privacy_password needs to be supplied as well.
       * @enum {string}
       */
      privacy_protocol:
        | 'CBC-DES'
        | 'AES-128'
        | '3DES-EDE'
        | 'AES-192'
        | 'AES-256'
        | 'AES-192-Blumenthal'
        | 'AES-256-Blumenthal'
      /**
       * Privacy Password
       * @description Privacy pass phrase. If filled, privacy_protocol needs to be selected as well.
       */
      privacy_password: string
    }
    /** SNMPv3NoAuthNoPrivacyModel */
    SNMPv3NoAuthNoPrivacyModel: {
      /**
       * Type
       * @description SNMPv3 without authentication or privacy
       * @constant
       */
      type: 'noAuthNoPriv'
      /**
       * Security Name
       * @description Security name
       */
      security_name: string
    }
    /** TimeAllowedRangeModel */
    TimeAllowedRangeModel: {
      /**
       * Start
       * Format: time
       * @description The start time of day. Inclusive. Use ISO8601 format. Seconds are stripped.
       */
      start: string
      /**
       * End
       * Format: time
       * @description The end time of day. Inclusive. Use ISO8601 format. Seconds are stripped.
       */
      end: string
    }
    /** TranslateNamesModel */
    TranslateNamesModel: {
      /**
       * Convert Case
       * @description Convert all detected host names to upper- or lower-case.
       *
       *      * `nop` - Do not convert anything
       *      * `lower` - Convert all host names to lowercase.
       *      * `upper` - Convert all host names to uppercase.
       * @enum {string}
       */
      convert_case: 'nop' | 'lower' | 'upper'
      /**
       * Drop Domain
       * @description Drop the rest of the domain, only keep the host name. Will not affect IP addresses.
       *
       *     Examples:
       *
       *      * `192.168.0.1` -> `192.168.0.1`
       *      * `foobar.example.com` -> `foobar`
       *      * `example.com` -> `example`
       *      * `example` -> `example`
       *
       *     This will be executed **after**:
       *
       *      * `convert_case`
       *
       */
      drop_domain?: boolean
      /**
       * Regexp Rewrites
       * @description Rewrite discovered host names with multiple regular expressions. The replacements will be done one after another in the order they appear in the list. If not anchored at the end by a `$` character, the regexpwill be anchored at the end implicitly by adding a `$` character.
       *
       *     These will be executed **after**:
       *
       *      * `convert_case`
       *      * `drop_domain`
       *
       */
      regexp_rewrites?: components['schemas']['RegexpRewritesModel'][]
      /**
       * Hostname Replacement
       * @description Replace one value with another.
       *
       *     These will be executed **after**:
       *
       *      * `convert_case`
       *      * `drop_domain`
       *      * `regexp_rewrites`
       *
       */
      hostname_replacement?: components['schemas']['DirectMappingModel'][]
    }
    /** HostConfigCollectionModel */
    HostConfigCollectionModel: {
      /**
       * Links
       * @description List of links to other resources.
       * @example [
       *       {
       *         "href": "https://.../api_resource",
       *         "method": "GET",
       *         "rel": "self",
       *         "type": "application/json"
       *       }
       *     ]
       */
      links: components['schemas']['LinkModel'][]
      /**
       * Id
       * @description The name of this collection.
       */
      id: string
      /**
       * Domaintype
       * @description The domain type of the objects in the collection
       * @example host_config
       * @constant
       */
      domainType: 'host_config'
      /**
       * Title
       * @description A human readable title of this object. Can be used for user interfaces.
       */
      title?: string
      /**
       * Value
       * @description A list of host objects
       */
      value: components['schemas']['HostConfigModel'][]
      /**
       * Extensions
       * @description Additional attributes alongside the collection.
       */
      extensions?: Record<string, never>
    }
    HostUpdateAttribute: {
      /**
       * @description The IP address family of the host.
       * @example ip-v4-only
       * @enum {string}
       */
      tag_address_family?: 'ip-v4v6' | 'no-ip' | 'ip-v4-only' | 'ip-v6-only'
      /**
       * @description Agent and API integrations
       * @example cmk-agent
       * @enum {string}
       */
      tag_agent?: 'all-agents' | 'special-agents' | 'cmk-agent' | 'no-agent'
      /**
       * @description The SNMP data source of the host.
       * @example snmp-v2
       * @enum {string}
       */
      tag_snmp_ds?: 'no-snmp' | 'snmp-v1' | 'snmp-v2'
      /**
       * @description Use piggyback data for this host.
       * @example piggyback
       * @enum {string}
       */
      tag_piggyback?: 'piggyback' | 'no-piggyback' | 'auto-piggyback'
      /** @description Add a comment or describe this host */
      alias?: string
      /** @description The site that should monitor this host. */
      site?: string
      /** @description A list of parents of this host. */
      parents?: string[]
      /** @description Only members of the contact groups listed here have Setup permission for the host/folder. Optionally, you can make these contact groups automatically monitor contacts. The assignment of hosts to contact groups can also be defined by <a href='wato.py?mode=edit_ruleset&varname=host_contactgroups'>rules</a>. */
      contactgroups?: components['schemas']['HostContactGroup']
      /** @description An IPv4 address. */
      ipaddress?: string
      /** @description An IPv6 address. */
      ipv6address?: string
      /** @description A list of IPv4 addresses. */
      additional_ipv4addresses?: string[]
      /** @description A list of IPv6 addresses. */
      additional_ipv6addresses?: string[]
      /** @description [Enterprise, Cloud, Saas, Managed editions only] Bake agent packages for this folder even if it is empty. */
      bake_agent_package?: boolean
      /**
       * @description [Cloud, Managed editions only] This configures the communication direction of this host.
       *      * `pull-agent` (default) - The server will try to contact the monitored host and pull the data by initializing a TCP connection
       *      * `push-agent` - the host is expected to send the data to the monitoring server without being triggered
       *
       * @enum {string}
       */
      cmk_agent_connection?: 'pull-agent' | 'push-agent'
      /** @description The SNMP access configuration. A configured SNMP v1/v2 community here will have precedence over any configured SNMP community rule. For this attribute to take effect, the attribute `tag_snmp_ds` needs to be set first. */
      snmp_community?: components['schemas']['SNMPCredentials']
      /** @description Labels allow you to flexibly group your hosts in order to refer to them later at other places in Checkmk, e.g. in rule chains.<br><b>Label format:</b> key:value<br><br>Neither the key nor the value can contain ‘:’. Checkmk does not perform any other validation on the labels you use. */
      labels?: {
        [key: string]: string
      }
      /**
       * @description This indicates that the host is waiting for a bulk discovery. It is set to True once the host is in the queue. It will be removed after the discovery is ended.
       * @example false
       */
      waiting_for_discovery?: boolean
      /** @description Configuration for automatic network scan. Pings will besent to each IP address in the configured ranges to checkif a host is up or down. Each found host will be added tothe folder by it's host name (if possible) or IP address. */
      network_scan?: components['schemas']['NetworkScan']
      /**
       * @description The protocol used to connect to the management board.
       *
       *     Valid options are:
       *
       *      * `none` - No management board
       *      * `snmp` - Connect using SNMP
       *      * `ipmi` - Connect using IPMI
       *
       * @enum {string}
       */
      management_protocol?: 'none' | 'snmp' | 'ipmi'
      /** @description Address (IPv4, IPv6 or host name) under which the management board can be reached. */
      management_address?: string
      /** @description SNMP credentials */
      management_snmp_community?: components['schemas']['SNMPCredentials'] | null
      /** @description IPMI credentials */
      management_ipmi_credentials?: components['schemas']['IPMIParameters'] | null
      /** @description Identity of the entity which locked the locked_attributes. The identity is built out of the Site ID, the program name and the connection ID. */
      locked_by?: components['schemas']['LockedBy']
      /** @description Name of host attributes which are locked in the UI. */
      locked_attributes?: string[]
      /**
       * @description Whether or not the last bulk discovery failed. It is set to True once it fails and unset in case a later discovery succeeds.
       * @example false
       */
      inventory_failed?: boolean
      /** @description [Cloud, Saas, Managed editions only] The name/address of the relay through which this host is monitored, if not empty. */
      relay?: string
    } & {
      [key: string]: string
    }
    UpdateHostEntry: {
      /**
       * @description Replace all currently set attributes on the host, with these attributes. Any previously set attributes which are not given here will be removed. Can't be used together with update_attributes or remove_attributes fields.
       * @example {
       *       "ipaddress": "192.168.0.123"
       *     }
       */
      attributes?: components['schemas']['HostUpdateAttribute']
      /**
       * @description Just update the hosts attributes with these attributes. The previously set attributes will be overwritten. Can't be used together with attributes or remove_attributes fields.
       * @example {
       *       "ipaddress": "192.168.0.123"
       *     }
       */
      update_attributes?: components['schemas']['HostUpdateAttribute']
      /**
       * @description A list of attributes which should be removed. Can't be used together with attributes or update attributes fields.
       * @example [
       *       "tag_foobar"
       *     ]
       */
      remove_attributes?: string[]
      /**
       * @description The hostname or IP address itself.
       * @example example.com
       */
      host_name: string
    }
    BulkUpdateHost: {
      /**
       * @description A list of host entries.
       * @example [
       *       {
       *         "host_name": "example.com",
       *         "attributes": {}
       *       }
       *     ]
       */
      entries: components['schemas']['UpdateHostEntry'][]
    }
    FailedHosts: {
      /** @description The list of succeeded host objects */
      succeeded_hosts?: components['schemas']['HostConfigCollection']
      /** @description Detailed error messages on hosts failing the action */
      failed_hosts?: {
        [key: string]: string
      }
    }
    BulkHostActionWithFailedHosts: {
      /**
       * @description The HTTP status code.
       * @example 400
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example Some of the actions were performed but the following were faulty and were skipped: ['host1', 'host2'].
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Some actions failed
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Details for which hosts have failed */
      ext?: components['schemas']['FailedHosts']
    }
    UpdateHost: {
      /**
       * @description Replace all currently set attributes on the host, with these attributes. Any previously set attributes which are not given here will be removed. Can't be used together with update_attributes or remove_attributes fields.
       * @example {
       *       "ipaddress": "192.168.0.123"
       *     }
       */
      attributes?: components['schemas']['HostUpdateAttribute']
      /**
       * @description Just update the hosts attributes with these attributes. The previously set attributes will be overwritten. Can't be used together with attributes or remove_attributes fields.
       * @example {
       *       "ipaddress": "192.168.0.123"
       *     }
       */
      update_attributes?: components['schemas']['HostUpdateAttribute']
      /**
       * @description A list of attributes which should be removed. Can't be used together with attributes or update attributes fields.
       * @example [
       *       "tag_foobar"
       *     ]
       */
      remove_attributes?: string[]
    }
    RenameHost: {
      /**
       * @description The new name of the existing host.
       * @example newhost
       */
      new_name: string
    }
    Api409CustomError1: {
      /**
       * @description The HTTP status code.
       * @example 409
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example There are pending changes not yet activated or a rename background job is already running.
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Conflict
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    Api422CustomError3: {
      /**
       * @description The HTTP status code.
       * @example 422
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example The host could not be renamed.
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Unprocessable Entity
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    UpdateNodes: {
      /**
       * @description Nodes where the newly created host should be the cluster-container of.
       * @example [
       *       "host1",
       *       "host2",
       *       "host3"
       *     ]
       */
      nodes: string[]
    }
    ObjectProperty: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /** @description The unique name of this property, local to this domain type. */
      id?: string
      /** @description The value of the property. In this case a list. */
      value?: string[]
      /** @description Additional attributes alongside the property. */
      extensions?: {
        [key: string]: unknown
      }
    }
    CreateHost: {
      /**
       * @description The hostname or IP address of the host to be created.
       * @example example.com
       */
      host_name: string
      /**
       * @description The path name of the folder.
       *
       *     Path delimiters can be either `~`, `/` or `\`. Please use the one most appropriate for your quoting/escaping needs. A good default choice is `~`.
       * @example /
       */
      folder: string
      /**
       * @description Attributes to set on the newly created host. You can specify custom attributes and tag groups in addition to the built-in ones listed below.
       * @default {}
       * @example {
       *       "ipaddress": "192.168.0.123"
       *     }
       */
      attributes: components['schemas']['HostCreateAttribute']
    }
    BulkCreateHost: {
      /**
       * @description A list of host entries.
       * @example [
       *       {
       *         "host_name": "example.com",
       *         "folder": "/",
       *         "attributes": {}
       *       }
       *     ]
       */
      entries: components['schemas']['CreateHost'][]
    }
    BulkDeleteHost: {
      /**
       * @description A list of host names.
       * @example [
       *       "example",
       *       "sample"
       *     ]
       */
      entries: string[]
    }
    /** HostUpdateAttributeModel */
    HostUpdateAttributeModel: {
      /**
       * Tag Address Family
       * @description The IP address family of the host.
       * @example ip-v4-only
       * @enum {string}
       */
      tag_address_family?: 'ip-v4-only' | 'ip-v6-only' | 'ip-v4v6' | 'no-ip'
      /**
       * Tag Agent
       * @description Agent and API integrations
       * @example cmk-agent
       * @enum {string}
       */
      tag_agent?: 'cmk-agent' | 'all-agents' | 'special-agents' | 'no-agent'
      /**
       * Tag Snmp Ds
       * @description The SNMP data source of the host.
       * @example snmp-v2
       * @enum {string}
       */
      tag_snmp_ds?: 'no-snmp' | 'snmp-v2' | 'snmp-v1'
      /**
       * Tag Piggyback
       * @description Use piggyback data for this host.
       * @example piggyback
       * @enum {string}
       */
      tag_piggyback?: 'auto-piggyback' | 'piggyback' | 'no-piggyback'
      /**
       * Alias
       * @description Add a comment or describe this host
       */
      alias?: string
      /**
       * Site
       * @description The site that should monitor this host.
       */
      site?: string
      /**
       * Parents
       * @description A list of parents of this host.
       */
      parents?: string[]
      /**
       * Contactgroups
       * @description Only members of the contact groups listed here have Setup permission for the host/folder. Optionally, you can make these contact groups automatically monitor contacts. The assignment of hosts to contact groups can also be defined by rules.
       */
      contactgroups?: components['schemas']['HostContactGroupModel']
      /**
       * Ipaddress
       * @description An IPv4 address.
       */
      ipaddress?: string
      /**
       * Ipv6Address
       * @description An IPv6 address.
       */
      ipv6address?: string
      /**
       * Additional Ipv4Addresses
       * @description A list of IPv4 addresses.
       */
      additional_ipv4addresses?: string[]
      /**
       * Additional Ipv6Addresses
       * @description A list of IPv6 addresses.
       */
      additional_ipv6addresses?: string[]
      /**
       * Bake Agent Package
       * @description [Enterprise, Cloud, Saas, Managed editions only] Bake agent packages for this folder even if it is empty.
       */
      bake_agent_package?: boolean
      /**
       * Cmk Agent Connection
       * @description [Enterprise, Cloud, Saas, Managed editions only] This configures the communication direction of this host.
       *      * `pull-agent` (default) - The server will try to contact the monitored host and pull the data by initializing a TCP connection
       *      * `push-agent` - the host is expected to send the data to the monitoring server without being triggered
       *
       * @enum {string}
       */
      cmk_agent_connection?: 'push-agent' | 'pull-agent'
      /**
       * Snmp Community
       * @description The SNMP access configuration. A configured SNMP v1/v2 community here will have precedence over any configured SNMP community rule. For this attribute to take effect, the attribute `tag_snmp_ds` needs to be set first.
       */
      snmp_community?:
        | components['schemas']['SNMPCommunityModel']
        | components['schemas']['SNMPv3NoAuthNoPrivacyModel']
        | components['schemas']['SNMPv3AuthNoPrivacyModel']
        | components['schemas']['SNMPv3AuthPrivacyModel']
      /**
       * Labels
       * @description Labels allow you to flexibly group your hosts in order to refer to them later at other places in Checkmk, e.g. in rule chains.<br><b>Label format:</b> key:value<br><br>Neither the key nor the value can contain ‘:’. Checkmk does not perform any other validation on the labels you use. The key is the host label key.
       */
      labels?: {
        [key: string]: string
      }
      /**
       * Waiting For Discovery
       * @description This indicates that the host is waiting for a bulk discovery. It is set to True once the host is in the queue. It will be removed after the discovery is ended.
       */
      waiting_for_discovery?: boolean
      /**
       * Network Scan
       * @description Configuration for automatic network scan. Pings will be sent to each IP address in the configured ranges to check if a host is up or down. Each found host will be added to the folder by its host name (if possible) or IP address.
       */
      network_scan?: components['schemas']['NetworkScanModel']
      /**
       * Management Protocol
       * @description The protocol used to connect to the management board. Valid options are: 'none' - No management board, 'snmp' - Connect using SNMP, 'ipmi' - Connect using IPMI
       * @enum {string}
       */
      management_protocol?: 'none' | 'snmp' | 'ipmi'
      /**
       * Management Address
       * @description Address (IPv4, IPv6 or host name) under which the management board can be reached.
       */
      management_address?: string
      /**
       * Management Snmp Community
       * @description SNMP credentials
       */
      management_snmp_community?:
        | components['schemas']['SNMPCommunityModel']
        | components['schemas']['SNMPv3NoAuthNoPrivacyModel']
        | components['schemas']['SNMPv3AuthNoPrivacyModel']
        | components['schemas']['SNMPv3AuthPrivacyModel']
      /**
       * Management Ipmi Credentials
       * @description IPMI credentials
       */
      management_ipmi_credentials?: components['schemas']['IPMIParametersModel']
      /**
       * Locked By
       * @description Identity of the entity which locked the locked_attributes. The identity is built out of the Site ID, the program name and the connection ID.
       */
      locked_by?: components['schemas']['LockedByModel']
      /**
       * Locked Attributes
       * @description Name of host attributes which are locked in the UI.
       */
      locked_attributes?: string[]
      /**
       * Inventory Failed
       * @description Whether or not the last bulk discovery failed. It is set to True once it fails and unset in case a later discovery succeeds.
       */
      inventory_failed?: boolean
    } & {
      [key: string]: string
    }
    /** CreateHostModel */
    CreateHostModel: {
      /**
       * Host Name
       * @description The hostname or IP address of the host to be created.
       */
      host_name: string
      /**
       * @description The path name of the folder.
       * @example /folder/subfolder
       */
      folder: components['schemas']['AnnotatedFolder']
      /**
       * @description Attributes to set on the newly created host. You can specify custom attributes and tag groups in addition to the built-in ones listed below.
       * @default {}
       * @example {
       *       "ipaddress": "192.168.0.123"
       *     }
       */
      attributes: components['schemas']['HostUpdateAttributeModel']
    }
    ClusterCreateAttribute: {
      /**
       * @description The IP address family of the host.
       * @example ip-v4-only
       * @enum {string}
       */
      tag_address_family?: 'ip-v4v6' | 'no-ip' | 'ip-v4-only' | 'ip-v6-only'
      /**
       * @description Agent and API integrations
       * @example cmk-agent
       * @enum {string}
       */
      tag_agent?: 'all-agents' | 'special-agents' | 'cmk-agent' | 'no-agent'
      /**
       * @description The SNMP data source of the host.
       * @example snmp-v2
       * @enum {string}
       */
      tag_snmp_ds?: 'no-snmp' | 'snmp-v1' | 'snmp-v2'
      /**
       * @description Use piggyback data for this host.
       * @example piggyback
       * @enum {string}
       */
      tag_piggyback?: 'piggyback' | 'no-piggyback' | 'auto-piggyback'
      /** @description Add a comment or describe this host */
      alias?: string
      /** @description The site that should monitor this host. */
      site?: string
      /** @description A list of parents of this host. */
      parents?: string[]
      /** @description Only members of the contact groups listed here have Setup permission for the host/folder. Optionally, you can make these contact groups automatically monitor contacts. The assignment of hosts to contact groups can also be defined by <a href='wato.py?mode=edit_ruleset&varname=host_contactgroups'>rules</a>. */
      contactgroups?: components['schemas']['HostContactGroup']
      /** @description An IPv4 address. */
      ipaddress?: string
      /** @description An IPv6 address. */
      ipv6address?: string
      /** @description A list of IPv4 addresses. */
      additional_ipv4addresses?: string[]
      /** @description A list of IPv6 addresses. */
      additional_ipv6addresses?: string[]
      /** @description [Enterprise, Cloud, Saas, Managed editions only] Bake agent packages for this folder even if it is empty. */
      bake_agent_package?: boolean
      /**
       * @description [Cloud, Managed editions only] This configures the communication direction of this host.
       *      * `pull-agent` (default) - The server will try to contact the monitored host and pull the data by initializing a TCP connection
       *      * `push-agent` - the host is expected to send the data to the monitoring server without being triggered
       *
       * @enum {string}
       */
      cmk_agent_connection?: 'pull-agent' | 'push-agent'
      /** @description The SNMP access configuration. A configured SNMP v1/v2 community here will have precedence over any configured SNMP community rule. For this attribute to take effect, the attribute `tag_snmp_ds` needs to be set first. */
      snmp_community?: components['schemas']['SNMPCredentials']
      /** @description Labels allow you to flexibly group your hosts in order to refer to them later at other places in Checkmk, e.g. in rule chains.<br><b>Label format:</b> key:value<br><br>Neither the key nor the value can contain ‘:’. Checkmk does not perform any other validation on the labels you use. */
      labels?: {
        [key: string]: string
      }
      /**
       * @description This indicates that the host is waiting for a bulk discovery. It is set to True once the host is in the queue. It will be removed after the discovery is ended.
       * @example false
       */
      waiting_for_discovery?: boolean
      /** @description Configuration for automatic network scan. Pings will besent to each IP address in the configured ranges to checkif a host is up or down. Each found host will be added tothe folder by it's host name (if possible) or IP address. */
      network_scan?: components['schemas']['NetworkScan']
      /**
       * @description The protocol used to connect to the management board.
       *
       *     Valid options are:
       *
       *      * `none` - No management board
       *      * `snmp` - Connect using SNMP
       *      * `ipmi` - Connect using IPMI
       *
       * @enum {string}
       */
      management_protocol?: 'none' | 'snmp' | 'ipmi'
      /** @description Address (IPv4, IPv6 or host name) under which the management board can be reached. */
      management_address?: string
      /** @description SNMP credentials */
      management_snmp_community?: components['schemas']['SNMPCredentials'] | null
      /** @description IPMI credentials */
      management_ipmi_credentials?: components['schemas']['IPMIParameters'] | null
      /** @description Identity of the entity which locked the locked_attributes. The identity is built out of the Site ID, the program name and the connection ID. */
      locked_by?: components['schemas']['LockedBy']
      /** @description Name of host attributes which are locked in the UI. */
      locked_attributes?: string[]
      /**
       * @description Whether or not the last bulk discovery failed. It is set to True once it fails and unset in case a later discovery succeeds.
       * @example false
       */
      inventory_failed?: boolean
      /** @description [Cloud, Saas, Managed editions only] The name/address of the relay through which this host is monitored, if not empty. */
      relay?: string
    } & {
      [key: string]: string
    }
    CreateClusterHost: {
      /**
       * @description The hostname of the cluster host.
       * @example example.com
       */
      host_name: string
      /**
       * @description The path name of the folder.
       *
       *     Path delimiters can be either `~`, `/` or `\`. Please use the one most appropriate for your quoting/escaping needs. A good default choice is `~`.
       * @example /
       */
      folder: string
      /**
       * @description Attributes to set on the newly created host. You can specify custom attributes and tag groups in addition to the built-in ones listed below.
       * @default {}
       * @example {
       *       "ipaddress": "192.168.0.123"
       *     }
       */
      attributes: components['schemas']['ClusterCreateAttribute']
      /**
       * @description Nodes where the newly created host should be the cluster-container of.
       * @example [
       *       "host1",
       *       "host2",
       *       "host3"
       *     ]
       */
      nodes: string[]
    }
    MoveHost: {
      /**
       * @description The path of the target folder where the host is supposed to be moved to.
       *
       *     Path delimiters can be either `~`, `/` or `\`. Please use the one most appropriate for your quoting/escaping needs. A good default choice is `~`.
       * @example ~my~fine~folder
       */
      target_folder: string
    }
    Api401CustomError1: {
      /**
       * @description The HTTP status code.
       * @example 401
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example You do not have read access to this host.
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Unauthorized
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    HostConfigSchemaInternal: {
      /** @description The site the host is monitored on. */
      site: string
      /** @description Indicates if the host is a cluster host. */
      is_cluster: boolean
    }
    LinkHostUUID: {
      /**
       * Format: uuid
       * @description A valid UUID.
       * @example 34e4c967-1591-4883-8cdf-0e335b09618d
       */
      uuid: string
    }
    Api401CustomError2: {
      /**
       * @description The HTTP status code.
       * @example 401
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example You do not have the permissions to edit this host.
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Unauthorized
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    RegisterHost: {
      /**
       * Format: uuid
       * @description A valid UUID.
       * @example 34e4c967-1591-4883-8cdf-0e335b09618d
       */
      uuid: string
    }
    Api403CustomError4: {
      /**
       * @description The HTTP status code.
       * @example 403
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example You do not have the permissions to register this host.
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Forbidden
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    Api405CustomError: {
      /**
       * @description The HTTP status code.
       * @example 405
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example This host cannot be registered on this site.
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Method Not Allowed
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    ConnectionMode: {
      /**
       * @description [Cloud, Managed editions only] This configures the communication direction of this host.
       *      * `pull-agent` (default) - The server will try to contact the monitored host and pull the data by initializing a TCP connection
       *      * `push-agent` - the host is expected to send the data to the monitoring server without being triggered
       *
       * @enum {string}
       */
      connection_mode?: 'pull-agent' | 'push-agent'
    }
    LDAPGeneralProperties: {
      /** @description The LDAP connection ID. */
      id?: string
      /** @description Add a title or describe this rule */
      description?: string
      /** @description An optional comment to explain the purpose of this object. The comment is only visible in this dialog and can help other users to understand the intentions of the configured attributes. */
      comment?: string
      /** @description An optional URL linking documentation or any other page. An icon links to the page and opens in a new tab when clicked. You can use either global URLs (starting with http://), absolute local URLs (starting with /) or relative URLs (relative to check_mk/). */
      documentation_url?: string
      /**
       * @description Selecting 'deactivated' will disable the rule, but it will remain in the configuration.
       * @enum {string}
       */
      rule_activation?: 'activated' | 'deactivated'
    }
    LDAPDirectoryTypeConnection: {
      /**
       * @example active_directory_manual
       * @enum {string}
       */
      type?:
        | 'active_directory_manual'
        | 'active_directory_automatic'
        | 'open_ldap'
        | '389_directory_server'
      /**
       * @description Set the host address of the LDAP server. Might be an IP address or resolvable host name.
       * @example your_ldap_server.example.com
       */
      ldap_server?: string
      /**
       * @description When the connection to the first server fails with connect specific errors like timeouts or some other network related problems, the connect mechanism will try to use this server instead of the server configured above. If you use persistent connections (default), the connection is being used until the LDAP is not reachable or the local webserver is restarted. You may paste a text from your clipboard which contains several parts separated by ';' characters into the last input field. The text will then be split by these separators and the single parts are added into dedicated input fields.
       * @example [
       *       "192.168.5.2",
       *       "195.65.2.8"
       *     ]
       */
      failover_servers?: string[]
      /**
       * @description Configure the DNS domain name of your Active directory domain here, Checkmk will then query this domain for it's closest domain controller to communicate with.
       * @example your_domain.com
       */
      domain?: string
    }
    LDAPBindCredentials: {
      /**
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /**
       * @description A specific password or a password store id
       * @example explicit
       * @enum {string}
       */
      type?: 'explicit' | 'store'
      /**
       * @description The distinguished name of the user account which is used to bind to the LDAP server. This user account must have read access to the LDAP directory.
       * @example CN=bind_user,OU=users,DC=example,DC=com
       */
      bind_dn?: string
      /**
       * @description An explicit password of the user account which is used to bind to the LDAP server. This user account must have read access to the LDAP directory.
       * @example your_password
       */
      explicit_password?: string
      /**
       * @description A password store id from the user account which is used to bind to the LDAP server. This user account must have read access to the LDAP directory.
       * @example
       */
      password_store_id?: string
    }
    LDAPTCPPort: {
      /**
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /** @example 389 */
      port?: number
    }
    LDAPConnectTimeout: {
      /**
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /**
       * @description Timeout for the initial connection to the LDAP server in seconds.
       * @example 2
       */
      seconds?: number
    }
    LDAPVersion: {
      /**
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /**
       * @description The selected LDAP version the LDAP server is serving. Most modern servers use LDAP version 3.
       * @example 3
       * @enum {integer}
       */
      version?: 2 | 3
    }
    LDAPPageSize: {
      /**
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /**
       * @description LDAP searches can be performed in paginated mode, for example to improve the performance. This enables pagination and configures the size of the pages.
       * @example 1000
       */
      size?: number
    }
    LDAPResponseTimeout: {
      /**
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /**
       * @description Timeout for the initial connection to the LDAP server in seconds.
       * @example 5
       */
      seconds?: number
    }
    LDAPConnectionSuffix: {
      /**
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /**
       * @description The LDAP connection suffix can be used to distinguish equal named objects (name conflicts), for example user accounts, from different LDAP connections.
       * @example suffix_example
       */
      suffix?: string
    }
    LDAPConnection: {
      /**
       * @description The credentials to be used to connect to the LDAP server. The used account must not be allowed to do any changes in the directory the whole connection is read only. In some environment an anonymous connect/bind is allowed, in this case you don't have to configure anything here.It must be possible to list all needed user and group objects from the directory.
       * @example {
       *       "type": "active_directory_manual",
       *       "ldap_server": "your_ldap_server.example.com",
       *       "failover_servers": [
       *         "192.168.5.2",
       *         "195.65.2.8"
       *       ]
       *     }
       */
      directory_type?: components['schemas']['LDAPDirectoryTypeConnection']
      /**
       * @description The credentials used to connect to the LDAP server.
       * @example {
       *       "state": "enabled",
       *       "type": "store",
       *       "bind_dn": "CN=bind_user,OU=users,DC=example,DC=com",
       *       "password_store_id": "pw_store_id"
       *     }
       */
      bind_credentials?: components['schemas']['LDAPBindCredentials']
      /**
       * @description The TCP port to be used to connect to the LDAP server.
       * @example {
       *       "state": "enabled",
       *       "port": 389
       *     }
       */
      tcp_port?: components['schemas']['LDAPTCPPort']
      /**
       * @description Connect to the LDAP server with a SSL encrypted connection. The trusted certificates authorities configured in Checkmk will be used to validate the certificate provided by the LDAP server.
       * @example enable_ssl
       * @enum {string}
       */
      ssl_encryption?: 'enable_ssl' | 'disable_ssl'
      /**
       * @description If the connection timeout is set and its value.
       * @example {
       *       "state": "enabled",
       *       "seconds": 2
       *     }
       */
      connect_timeout?: components['schemas']['LDAPConnectTimeout']
      /**
       * @description If the ldap version is set and the version it's set to. Either 2 or 3.
       * @example {
       *       "state": "enabled",
       *       "version": 3
       *     }
       */
      ldap_version?: components['schemas']['LDAPVersion']
      /**
       * @description If the page size is enabled and its value.
       * @example {
       *       "state": "enabled",
       *       "size": 1000
       *     }
       */
      page_size?: components['schemas']['LDAPPageSize']
      /**
       * @description Enable the response timeout and define its value.
       * @example {
       *       "state": "enabled",
       *       "seconds": 5
       *     }
       */
      response_timeout?: components['schemas']['LDAPResponseTimeout']
      /**
       * @description If the connection suffix is enabled and what its set to.
       * @example {
       *       "state": "enabled",
       *       "suffix": "suffix_example"
       *     }
       */
      connection_suffix?: components['schemas']['LDAPConnectionSuffix']
    }
    LDAPUserSearchFilter: {
      /**
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /**
       * @description Using this option you can define an optional LDAP filter which is used during LDAP searches. It can be used to only handle a subset of the users below the given base DN.
       * @example (&(objectclass=user)(objectcategory=person))
       */
      filter?: string
    }
    LDAPUserGroupFilter: {
      /**
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /**
       * @description Define the DN of a group object which is used to filter the users.
       * @example CN=cmk-users,OU=groups,DC=example,DC=com
       */
      filter?: string
    }
    LDAPUserIDAttribute: {
      /**
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /**
       * @description The attribute used to identify the individual users. It must have unique values to make an user identifyable by the value of this attribute.
       * @example attribute_example
       */
      attribute?: string
    }
    LDAPUsers: {
      /**
       * @description Give a base distinguished name here. All user accounts to synchronize must be located below this one.
       * @example OU=users,DC=example,DC=com
       */
      user_base_dn?: string
      /**
       * @description Scope to be used in LDAP searches. In most cases Search whole subtree below the base DN is the best choice. It searches for matching objects recursively.
       * @example search_whole_subtree
       * @enum {string}
       */
      search_scope?:
        | 'search_whole_subtree'
        | 'search_only_base_dn_entry'
        | 'search_all_one_level_below_base_dn'
      /**
       * @description Enable and define an optional LDAP filter.
       * @example {
       *       "state": "enabled",
       *       "filter": "(&(objectclass=user)(objectcategory=person))"
       *     }
       */
      search_filter?: components['schemas']['LDAPUserSearchFilter']
      /**
       * @description Enable and define the DN of a group object which is used to filter the users.
       * @example {
       *       "state": "enabled",
       *       "filter": "CN=cmk-users,OU=groups,DC=example,DC=com"
       *     }
       */
      filter_group?: components['schemas']['LDAPUserGroupFilter']
      /**
       * @description Enable and define a user ID attribute.
       * @example {
       *       "state": "enabled",
       *       "attribute": "attribute_example"
       *     }
       */
      user_id_attribute?: components['schemas']['LDAPUserIDAttribute']
      /**
       * @description Convert imported User-IDs to lower case during synchronization or leave as is.
       * @example convert_to_lowercase
       * @enum {string}
       */
      user_id_case?: 'dont_convert_to_lowercase' | 'convert_to_lowercase'
      /**
       * @description Checkmk does not support special characters in User-IDs. However, to deal with LDAP users having umlauts in their User-IDs you previously had the choice to replace umlauts with other characters. This option is still available for backward compatibility, but you are advised to use the 'keep_umlauts' option for new installations.
       * @example keep_umlauts
       * @enum {string}
       */
      umlauts_in_user_ids?: 'keep_umlauts' | 'replace_umlauts'
      /**
       * @description Create user accounts during sync or on the first login
       * @example on_sync
       * @enum {string}
       */
      create_users?: 'on_login' | 'on_sync'
    }
    LDAPGroupSearchFilter: {
      /**
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /**
       * @description Define an optional LDAP filter which is used during group related LDAP searches. It can be used to only handle a subset of the groups below the given group base DN.
       * @example (objectclass=group)
       */
      filter?: string
    }
    LDAPMemberAttributeValue: {
      /**
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /**
       * @description The attribute used to identify users group memberships.
       * @example example_member
       */
      attribute?: string
    }
    LDAPGroups: {
      /**
       * @description Give a base distinguished name here. All groups used must be located below this one.
       * @example OU=groups,DC=example,DC=com
       */
      group_base_dn?: string
      /**
       * @description Scope to be used in group related LDAP searches. In most cases Search whole subtree below the base DN is the best choice. It searches for matching objects in the given base recursively.
       * @example
       * @enum {string}
       */
      search_scope?:
        | 'search_whole_subtree'
        | 'search_only_base_dn_entry'
        | 'search_all_one_level_below_base_dn'
      /**
       * @description Enable and define an optional LDAP filter.
       * @example {
       *       "state": "enabled",
       *       "filter": "(objectclass=group)"
       *     }
       */
      search_filter?: components['schemas']['LDAPGroupSearchFilter']
      /**
       * @description Enable and define a member attribute.
       * @example {
       *       "state": "enabled",
       *       "attribute": "example_member"
       *     }
       */
      member_attribute?: components['schemas']['LDAPMemberAttributeValue']
    }
    LDAPSyncPluginAlias: {
      /**
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /** @description The LDAP attribute containing the alias of the user. */
      attribute_to_sync?: string
    }
    LDAPSyncPluginAuthExp: {
      /**
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /** @description When the value of this attribute changes for a user account, all current authenticated sessions of the user are invalidated and the user must login again. By default this field uses the fields which hold the time of the last password change of the user. */
      attribute_to_sync?: string
    }
    LDAPSyncPluginDisableNotifications: {
      /**
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /** @description The LDAP attribute whose contents shall be synced into this custom attribute. */
      attribute_to_sync?: string
    }
    LDAPSyncPluginEmailAddress: {
      /**
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /** @description The LDAP attribute containing the mail address of the user. */
      attribute_to_sync?: string
    }
    LDAPSyncPluginMenuIcons: {
      /**
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /** @description The LDAP attribute whose contents shall be synced into this custom attribute. */
      attribute_to_sync?: string
    }
    LDAPSyncPluginNavBarIcons: {
      /**
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /** @description The LDAP attribute whose contents shall be synced into this custom attribute. */
      attribute_to_sync?: string
    }
    LDAPSyncPluginPager: {
      /**
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /** @description The LDAP attribute containing the pager number of the user. */
      attribute_to_sync?: string
    }
    LDAPSyncPluginShowMode: {
      /**
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /** @description The LDAP attribute whose contents shall be synced into this custom attribute. */
      attribute_to_sync?: string
    }
    LDAPSyncPluginSideBarPosition: {
      /**
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /** @description The LDAP attribute whose contents shall be synced into this custom attribute. */
      attribute_to_sync?: string
    }
    LDAPSyncPluginStartURL: {
      /**
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /** @description The LDAP attribute whose contents shall be synced into this custom attribute. */
      attribute_to_sync?: string
    }
    LDAPSyncPluginTempUnit: {
      /**
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /** @description The LDAP attribute whose contents shall be synced into this custom attribute. */
      attribute_to_sync?: string
    }
    LDAPSyncPluginUITheme: {
      /**
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /** @description The LDAP attribute whose contents shall be synced into this custom attribute. */
      attribute_to_sync?: string
    }
    LDAPSyncPluginVisibilityOfHostsOrServices: {
      /**
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /** @description The LDAP attribute whose contents shall be synced into this custom attribute. */
      attribute_to_sync?: string
    }
    LDAPContactGroupMembership: {
      /**
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /** @description When enabled, this plug-in will not only handle direct group memberships, instead it will also dig into nested groups and treat the members of those groups as contact group members as well. Please bear in mind that this feature might increase the execution time of your LDAP sync. */
      handle_nested?: boolean
      /** @description This is a special feature for environments where user accounts are located in one LDAP directory and groups objects having them as members are located in other directories. You should only enable this feature when you are in this situation and really need it. The current connection is always used. */
      sync_from_other_connections?: string[]
    }
    LDAPFromToFields: {
      /**
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /**
       * Format: date-time
       * @example 2024-02-29T17:32:28+00:00
       */
      from_time: string
      /**
       * Format: date-time
       * @example 2024-02-29T12:53:34+00:00
       */
      to_time: string
    }
    LDAPDisableNotificationsValue: {
      /**
       * @description When this option is active you will not get any alerts or other notifications via email, SMS or similar. This overrides all other notification settings and rules, so make sure that you know what you are doing.
       * @example true
       */
      temporarily_disable_all_notifications?: boolean
      /**
       * @description Here you can specify a time range where no notifications are generated.
       * @example {
       *       "from_time": "2024-02-29T17:32:28+00:00",
       *       "to_time": "2024-02-29T12:53:34+00:00"
       *     }
       */
      custom_time_range?: components['schemas']['LDAPFromToFields']
    }
    LDAPGroupsToSyncDisableNotifications: {
      /**
       * @description The common name of the group in LDAP. This is the name of the group as it is stored in the LDAP directory.
       * @example group_cn_example
       */
      group_cn?: string
      /**
       * @description The name of the attribute to set. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attribute_to_set: 'disable_notifications'
      /**
       * @description The value of the attribute to set
       * @example
       */
      value?: components['schemas']['LDAPDisableNotificationsValue']
    }
    LDAPGroupsToSyncStartURL: {
      /**
       * @description The common name of the group in LDAP. This is the name of the group as it is stored in the LDAP directory.
       * @example group_cn_example
       */
      group_cn?: string
      /**
       * @description The name of the attribute to set. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attribute_to_set: 'start_url'
      /**
       * @description The URL that the user should be redirected to after login. There is a 'default_start_url', a 'welcome_page', and any other will be treated as a custom URL
       * @example default_start_url
       */
      value?: string
    }
    LDAPGroupsToSyncSelector:
      | components['schemas']['LDAPGroupsToSyncDisableNotifications']
      | components['schemas']['LDAPGroupsToSyncStartURL']
    LDAPGroupsToAttributes: {
      /**
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /** @description Once you enable this option, this plug-in will not only handle direct group memberships, instead it will also dig into nested groups and treat the members of those groups as contact group members as well. Please bear in mind that this feature might increase the execution time of your LDAP sync. (Active Directory only at the moment) */
      handle_nested?: boolean
      /** @description This is a special feature for environments where user accounts are located in one LDAP directory and groups objects having them as members are located in other directories. You should only enable this feature when you are in this situation and really need it. The current connection is always used. */
      sync_from_other_connections?: string[]
      /**
       * @description Specify the groups to control the value of a given user attribute. If a user is not a member of a group, the attribute will be left at its default value. When a single attribute is set by multiple groups and a user is a member of multiple of these groups, the later plug-in in the list will override the others.
       * @example [
       *       {
       *         "group_cn": "group_cn_example",
       *         "attribute_to_set": "main_menu_icons",
       *         "value": "main_menu_icons"
       *       }
       *     ]
       */
      groups_to_sync?: components['schemas']['LDAPGroupsToSyncSelector'][]
    }
    LDAPRoleElement: {
      /**
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /**
       * @description This group must be defined within the scope of the LDAP Group Settings
       * @example cmk-users
       */
      group_dn?: string
      /**
       * @description An existing ldap connection.
       * @example LDAP_1
       */
      search_in?: string
    }
    LDAPGroupsToRoles: {
      /**
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /** @description Once you enable this option, this plug-in will not only handle direct group memberships, instead it will also dig into nested groups and treat the members of those groups as contact group members as well. Please bear in mind that this feature might increase the execution time of your LDAP sync */
      handle_nested?: boolean
      admin?: components['schemas']['LDAPRoleElement'][]
      agent_registration?: components['schemas']['LDAPRoleElement'][]
      guest?: components['schemas']['LDAPRoleElement'][]
      user?: components['schemas']['LDAPRoleElement'][]
    }
    LDAPSyncPlugins: {
      /** @description Populates the alias attribute of the Setup user by synchronizing an attribute from the LDAP user account. By default the LDAP attribute cn is used. */
      alias?: components['schemas']['LDAPSyncPluginAlias']
      /** @description This plug-in fetches all information which are needed to check whether or not an already authenticated user should be deauthenticated, e.g. because the password has changed in LDAP or the account has been locked. */
      authentication_expiration?: components['schemas']['LDAPSyncPluginAuthExp']
      /** @description When this option is active you will not get any alerts or other notifications via email, SMS or similar. This overrides all other notification settings and rules, so make sure that you know what you do. Moreover you can specify a time range where no notifications are generated. */
      disable_notifications?: components['schemas']['LDAPSyncPluginDisableNotifications']
      /** @description Synchronizes the email of the LDAP user account into Checkmk */
      email_address?: components['schemas']['LDAPSyncPluginEmailAddress']
      /** @description In the main menus you can select between two options: Have a green icon only for the headlines – the 'topics' – for lean design. Or have a colored icon for every entry so that over time you can zoom in more quickly to a specific entry. */
      main_menu_icons?: components['schemas']['LDAPSyncPluginMenuIcons']
      /**
       * @deprecated
       * @description Deprecated - use `main_menu_icons` instead.
       */
      mega_menu_icons?: components['schemas']['LDAPSyncPluginMenuIcons']
      /** @description With this option you can define if icons in the navigation bar should show a title or not. This gives you the possibility to save some space in the UI. */
      navigation_bar_icons?: components['schemas']['LDAPSyncPluginNavBarIcons']
      /** @description This plug-in synchronizes a field of the users LDAP account to the pager attribute of the Setup user accounts, which is then forwarded to the monitoring core and can be used for notifications. By default the LDAP attribute mobile is used. */
      pager?: components['schemas']['LDAPSyncPluginPager']
      /** @description In some places like e.g. the main menu Checkmk divides features, filters, input fields etc. in two categories, showing more or less entries. With this option you can set a default mode for unvisited menus. Alternatively, you can enforce to show more, so that the round button with the three dots is not shown at all. */
      show_mode?: components['schemas']['LDAPSyncPluginShowMode']
      /** @description The sidebar position */
      ui_sidebar_position?: components['schemas']['LDAPSyncPluginSideBarPosition']
      /** @description The start URL to display in main frame. */
      start_url?: components['schemas']['LDAPSyncPluginStartURL']
      /** @description Set the temperature unit used for graphs and perfometers. The default unit can be configured here. Note that this setting does not affect the temperature unit used in service outputs, which can however be configured in this ruleset. */
      temperature_unit?: components['schemas']['LDAPSyncPluginTempUnit']
      /** @description The user interface theme */
      ui_theme?: components['schemas']['LDAPSyncPluginUITheme']
      /** @description When this option is checked, the status GUI will only display hosts and services that the user is a contact for - even if they have the permission for seeing all objects. */
      visibility_of_hosts_or_services?: components['schemas']['LDAPSyncPluginVisibilityOfHostsOrServices']
      /** @description Adds the user to contact groups based on the group memberships in LDAP. This plug-in adds the user only to existing contact groups while the name of the contact group must match the common name (cn) of the LDAP group. */
      contact_group_membership?: components['schemas']['LDAPContactGroupMembership']
      /** @description Sets custom user attributes based on the group memberships in LDAP. This plug-in can be used to set custom user attributes to specified values for all users which are member of a group in LDAP. The specified group name must match the common name (CN) of the LDAP group. */
      groups_to_custom_user_attributes?: components['schemas']['LDAPGroupsToAttributes']
      /** @description Configures the roles of the user depending on its group memberships in LDAP. */
      groups_to_roles?: components['schemas']['LDAPGroupsToRoles']
    }
    LDAPSyncInterval: {
      days?: number
      hours?: number
      minutes?: number
    }
    LDAPOther: {
      /** @description This option defines the interval of the LDAP synchronization. This setting is only used by sites which have the automatic user synchronization enabled. */
      sync_interval?: components['schemas']['LDAPSyncInterval']
    }
    LDAPConnectionConfig: {
      general_properties?: components['schemas']['LDAPGeneralProperties']
      ldap_connection?: components['schemas']['LDAPConnection']
      users?: components['schemas']['LDAPUsers']
      groups?: components['schemas']['LDAPGroups']
      sync_plugins?: components['schemas']['LDAPSyncPlugins']
      other?: components['schemas']['LDAPOther']
    }
    LDAPConnectionResponse: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The domain type of the object.
       * @default ldap_connection
       */
      domainType: unknown
      /** @description The unique identifier for this domain-object type. */
      id?: string
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description The container for external resources, like linked foreign objects or actions. */
      members?: {
        [key: string]: unknown
      }
      /**
       * @description The configuration attributes of a user LDAP connection.
       * @example {
       *       "general_properties": {
       *         "id": "LDAP_1",
       *         "description": "",
       *         "comment": "",
       *         "documentation_url": "",
       *         "rule_activation": "activated"
       *       },
       *       "ldap_connection": {
       *         "directory_type": {
       *           "type": "active_directory_manual",
       *           "ldap_server": "123.31.12.34",
       *           "failover_servers": []
       *         },
       *         "bind_credentials": {
       *           "state": "disabled"
       *         },
       *         "tcp_port": {
       *           "state": "disabled"
       *         },
       *         "ssl_encryption": "disable_ssl",
       *         "connect_timeout": {
       *           "state": "disabled"
       *         },
       *         "ldap_version": {
       *           "state": "disabled"
       *         },
       *         "page_size": {
       *           "state": "disabled"
       *         },
       *         "response_timeout": {
       *           "state": "disabled"
       *         },
       *         "connection_suffix": {
       *           "state": "disabled"
       *         }
       *       },
       *       "users": {
       *         "user_base_dn": "",
       *         "search_scope": "search_only_base_dn_entry",
       *         "search_filter": {
       *           "state": "disabled"
       *         },
       *         "filter_group": {
       *           "state": "disabled"
       *         },
       *         "user_id_attribute": {
       *           "state": "disabled"
       *         },
       *         "user_id_case": "dont_convert_to_lowercase",
       *         "umlauts_in_user_ids": "keep_umlauts",
       *         "create_users": "on_login"
       *       },
       *       "groups": {
       *         "group_base_dn": "",
       *         "search_scope": "search_whole_subtree",
       *         "search_filter": {
       *           "state": "disabled"
       *         },
       *         "member_attribute": {
       *           "state": "disabled"
       *         }
       *       },
       *       "sync_plugins": {
       *         "alias": {
       *           "state": "disabled"
       *         },
       *         "authentication_expiration": {
       *           "state": "disabled"
       *         },
       *         "disable_notifications": {
       *           "state": "disabled"
       *         },
       *         "email_address": {
       *           "state": "disabled"
       *         },
       *         "main_menu_icons": {
       *           "state": "disabled"
       *         },
       *         "navigation_bar_icons": {
       *           "state": "disabled"
       *         },
       *         "pager": {
       *           "state": "disabled"
       *         },
       *         "show_mode": {
       *           "state": "disabled"
       *         },
       *         "ui_sidebar_position": {
       *           "state": "disabled"
       *         },
       *         "start_url": {
       *           "state": "disabled"
       *         },
       *         "temperature_unit": {
       *           "state": "disabled"
       *         },
       *         "ui_theme": {
       *           "state": "disabled"
       *         },
       *         "visibility_of_hosts_or_services": {
       *           "state": "disabled"
       *         },
       *         "contact_group_membership": {
       *           "state": "disabled"
       *         },
       *         "groups_to_custom_user_attributes": {
       *           "state": "disabled"
       *         },
       *         "groups_to_roles": {
       *           "state": "disabled"
       *         }
       *       },
       *       "other": {
       *         "sync_interval": {
       *           "days": 5,
       *           "hours": 2,
       *           "minutes": 30
       *         }
       *       }
       *     }
       */
      extensions?: components['schemas']['LDAPConnectionConfig']
    }
    LDAPConnectionResponseCollection: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The name of this collection.
       * @default all
       */
      id: string
      /**
       * @description The domain type of the objects in the collection.
       * @default ldap_connection
       */
      domainType: unknown
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /**
       * @description A list of LDAP connections.
       * @example [
       *       {
       *         "links": [],
       *         "domainType": "ldap_connection",
       *         "id": "LDAP_1",
       *         "title": "",
       *         "members": {},
       *         "extensions": {
       *           "general_properties": {
       *             "id": "LDAP_1",
       *             "description": "",
       *             "comment": "",
       *             "documentation_url": "",
       *             "rule_activation": "activated"
       *           },
       *           "ldap_connection": {
       *             "directory_type": {
       *               "type": "active_directory_manual",
       *               "ldap_server": "123.31.12.34",
       *               "failover_servers": []
       *             },
       *             "bind_credentials": {
       *               "state": "disabled"
       *             },
       *             "tcp_port": {
       *               "state": "disabled"
       *             },
       *             "ssl_encryption": "disable_ssl",
       *             "connect_timeout": {
       *               "state": "disabled"
       *             },
       *             "ldap_version": {
       *               "state": "disabled"
       *             },
       *             "page_size": {
       *               "state": "disabled"
       *             },
       *             "response_timeout": {
       *               "state": "disabled"
       *             },
       *             "connection_suffix": {
       *               "state": "disabled"
       *             }
       *           },
       *           "users": {
       *             "user_base_dn": "",
       *             "search_scope": "search_only_base_dn_entry",
       *             "search_filter": {
       *               "state": "disabled"
       *             },
       *             "filter_group": {
       *               "state": "disabled"
       *             },
       *             "user_id_attribute": {
       *               "state": "disabled"
       *             },
       *             "user_id_case": "dont_convert_to_lowercase",
       *             "umlauts_in_user_ids": "keep_umlauts",
       *             "create_users": "on_login"
       *           },
       *           "groups": {
       *             "group_base_dn": "",
       *             "search_scope": "search_whole_subtree",
       *             "search_filter": {
       *               "state": "disabled"
       *             },
       *             "member_attribute": {
       *               "state": "disabled"
       *             }
       *           },
       *           "sync_plugins": {
       *             "alias": {
       *               "state": "disabled"
       *             },
       *             "authentication_expiration": {
       *               "state": "disabled"
       *             },
       *             "disable_notifications": {
       *               "state": "disabled"
       *             },
       *             "email_address": {
       *               "state": "disabled"
       *             },
       *             "main_menu_icons": {
       *               "state": "disabled"
       *             },
       *             "navigation_bar_icons": {
       *               "state": "disabled"
       *             },
       *             "pager": {
       *               "state": "disabled"
       *             },
       *             "show_mode": {
       *               "state": "disabled"
       *             },
       *             "ui_sidebar_position": {
       *               "state": "disabled"
       *             },
       *             "start_url": {
       *               "state": "disabled"
       *             },
       *             "temperature_unit": {
       *               "state": "disabled"
       *             },
       *             "ui_theme": {
       *               "state": "disabled"
       *             },
       *             "visibility_of_hosts_or_services": {
       *               "state": "disabled"
       *             },
       *             "contact_group_membership": {
       *               "state": "disabled"
       *             },
       *             "groups_to_custom_user_attributes": {
       *               "state": "disabled"
       *             },
       *             "groups_to_roles": {
       *               "state": "disabled"
       *             }
       *           },
       *           "other": {
       *             "sync_interval": {
       *               "days": 5,
       *               "hours": 2,
       *               "minutes": 30
       *             }
       *           }
       *         }
       *       }
       *     ]
       */
      value?: components['schemas']['LDAPConnectionResponse'][]
      /** @description Additional attributes alongside the collection. */
      extensions?: {
        [key: string]: unknown
      }
    }
    GETLdapConnection404: {
      /**
       * @description The HTTP status code.
       * @example 404
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example The connection id LDAP_1 did not match any LDAP connection
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example The requested LDAP connection was not found
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    LDAPUserSearchFilterRequest: {
      /**
       * @description This config parameter is enabled. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /**
       * @description Using this option you can define an optional LDAP filter which is used during LDAP searches. It can be used to only handle a subset of the users below the given base DN.
       * @example (&(objectclass=user)(objectcategory=person))
       */
      filter: string
    }
    LDAPCheckboxDisabledRequest: {
      /**
       * @description This config parameter is disabled. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'disabled'
    }
    LDAPUserSearchFilterRequestSelector:
      | components['schemas']['LDAPUserSearchFilterRequest']
      | components['schemas']['LDAPCheckboxDisabledRequest']
    LDAPUserGroupFilterRequest: {
      /**
       * @description This config parameter is enabled. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /**
       * @description Define the DN of a group object which is used to filter the users.
       * @example CN=cmk-users,OU=groups,DC=example,DC=com
       */
      filter: string
    }
    LDAPUserGroupFilterRequestSelector:
      | components['schemas']['LDAPUserGroupFilterRequest']
      | components['schemas']['LDAPCheckboxDisabledRequest']
    LDAPUserIDAttributeRequest: {
      /**
       * @description This config parameter is enabled. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /**
       * @description The attribute used to identify the individual users. It must have unique values to make an user identifyable by the value of this attribute.
       * @example attribute_example
       */
      attribute: string
    }
    LDAPUserIDAttributeRequestSelector:
      | components['schemas']['LDAPUserIDAttributeRequest']
      | components['schemas']['LDAPCheckboxDisabledRequest']
    LDAPUsersRequest: {
      /**
       * @description Give a base distinguished name here. All user accounts to synchronize must be located below this one.
       * @default
       * @example OU=users,DC=example,DC=com
       */
      user_base_dn: string
      /**
       * @description Scope to be used in LDAP searches. In most cases Search whole subtree below the base DN is the best choice. It searches for matching objects recursively.
       * @default search_whole_subtree
       * @example search_whole_subtree
       * @enum {string}
       */
      search_scope:
        | 'search_whole_subtree'
        | 'search_only_base_dn_entry'
        | 'search_all_one_level_below_base_dn'
      /**
       * @description Enable and define an optional LDAP filter.
       * @default {
       *       "state": "disabled"
       *     }
       * @example {
       *       "state": "enabled",
       *       "filter": "(&(objectclass=user)(objectcategory=person))"
       *     }
       */
      search_filter: components['schemas']['LDAPUserSearchFilterRequestSelector']
      /**
       * @description Enable and define the DN of a group object which is used to filter the users.
       * @default {
       *       "state": "disabled"
       *     }
       * @example {
       *       "state": "enabled",
       *       "filter": "CN=cmk-users,OU=groups,DC=example,DC=com"
       *     }
       */
      filter_group: components['schemas']['LDAPUserGroupFilterRequestSelector']
      /**
       * @description Enable and define a user ID attribute.
       * @default {
       *       "state": "disabled"
       *     }
       * @example {
       *       "state": "enabled",
       *       "attribute": "attribute_example"
       *     }
       */
      user_id_attribute: components['schemas']['LDAPUserIDAttributeRequestSelector']
      /**
       * @description Convert imported User-IDs to lower case during synchronization or leave as is.
       * @default dont_convert_to_lowercase
       * @example convert_to_lowercase
       * @enum {string}
       */
      user_id_case: 'dont_convert_to_lowercase' | 'convert_to_lowercase'
      /**
       * @description Checkmk does not support special characters in User-IDs. However, to deal with LDAP users having umlauts in their User-IDs you previously had the choice to replace umlauts with other characters. This option is still available for backward compatibility, but you are advised to use the 'keep_umlauts' option for new installations.
       * @default keep_umlauts
       * @example keep_umlauts
       * @enum {string}
       */
      umlauts_in_user_ids: 'keep_umlauts' | 'replace_umlauts'
      /**
       * @description Create user accounts during sync or on the first login
       * @default on_login
       * @example on_sync
       * @enum {string}
       */
      create_users: 'on_login' | 'on_sync'
    }
    LDAPGroupSearchFilterRequest: {
      /**
       * @description This config parameter is enabled. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /**
       * @description Define an optional LDAP filter which is used during group related LDAP searches. It can be used to only handle a subset of the groups below the given group base DN.
       * @example (objectclass=group)
       */
      filter: string
    }
    LDAPGroupSearchFilterSelector:
      | components['schemas']['LDAPGroupSearchFilterRequest']
      | components['schemas']['LDAPCheckboxDisabledRequest']
    LDAPMemberAttributeRequest: {
      /**
       * @description This config parameter is enabled. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /**
       * @description The attribute used to identify users group memberships.
       * @example example_member
       */
      attribute: string
    }
    LDAPMemberAttributeSelector:
      | components['schemas']['LDAPMemberAttributeRequest']
      | components['schemas']['LDAPCheckboxDisabledRequest']
    LDAPGroupsRequest: {
      /**
       * @description Give a base distinguished name here. All groups used must be located below this one.
       * @default
       * @example OU=groups,DC=example,DC=com
       */
      group_base_dn: string
      /**
       * @description Scope to be used in group related LDAP searches. In most cases Search whole subtree below the base DN is the best choice. It searches for matching objects in the given base recursively.
       * @default search_whole_subtree
       * @example search_whole_subtree
       * @enum {string}
       */
      search_scope:
        | 'search_whole_subtree'
        | 'search_only_base_dn_entry'
        | 'search_all_one_level_below_base_dn'
      /**
       * @description Enable and define an optional LDAP filter.
       * @default {
       *       "state": "disabled"
       *     }
       * @example {
       *       "state": "enabled",
       *       "filter": "(objectclass=group)"
       *     }
       */
      search_filter: components['schemas']['LDAPGroupSearchFilterSelector']
      /**
       * @description Enable and define a member attribute.
       * @default {
       *       "state": "disabled"
       *     }
       * @example {
       *       "state": "enabled",
       *       "attribute": "example_member"
       *     }
       */
      member_attribute: components['schemas']['LDAPMemberAttributeSelector']
    }
    LDAPSyncPluginAttributeRequest: {
      /**
       * @description This config parameter is enabled. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /** @description The attribute to sync */
      attribute_to_sync: string
    }
    LDAPSyncPluginAttrubuteSelector:
      | components['schemas']['LDAPSyncPluginAttributeRequest']
      | components['schemas']['LDAPCheckboxDisabledRequest']
    LDAPSyncPluginNestedOtherConnectionsRequest: {
      /**
       * @description This config parameter is enabled. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /**
       * @description Once you enable this option, this plug-in will not only handle direct group memberships, instead it will also dig into nested groups and treat the members of those groups as contact group members as well. Please bear in mind that this feature might increase the execution time of your LDAP sync.
       * @default false
       * @example true
       */
      handle_nested: boolean
      /**
       * @description The LDAP attribute whose contents shall be synced into this custom attribute.
       * @default []
       * @example [
       *       "LDAP_1",
       *       "LDAP_2"
       *     ]
       */
      sync_from_other_connections: string[]
    }
    LDAPSyncPluginGroupsToContactGroupsSelector:
      | components['schemas']['LDAPSyncPluginNestedOtherConnectionsRequest']
      | components['schemas']['LDAPCheckboxDisabledRequest']
    LDAPCheckboxCustomTimeRangeEnabledRequest: {
      /**
       * @description This config parameter is enabled. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /**
       * Format: date-time
       * @description The start of the time range
       * @example 2024-02-29T17:32:28+00:00
       */
      from_time: string
      /**
       * Format: date-time
       * @description The end of the time range
       * @example 2024-03-04T12:12:56+00:00
       */
      to_time: string
    }
    LDAPCustomTimeRangeSelector:
      | components['schemas']['LDAPCheckboxCustomTimeRangeEnabledRequest']
      | components['schemas']['LDAPCheckboxDisabledRequest']
    LDAPSyncPluginGroupsValueRequest: {
      /**
       * @description When this option is active you will not get any alerts or other notifications via email, SMS or similar. This overrides all other notification settings and rules, so make sure that you know what you're doing. Moreover you can specify a time range where no notifications are generated.
       * @default false
       */
      temporarily_disable_all_notifications: boolean
      /** @example {
       *       "from_time": "2024-02-29T17:32:28+00:00",
       *       "to_time": "2024-03-04T12:12:56+00:00"
       *     } */
      custom_time_range: components['schemas']['LDAPCustomTimeRangeSelector']
    }
    LDAPSyncPluginGroupDisableNotificationsRequest: {
      /**
       * @description The common name of the group
       * @example a_group_cn
       */
      group_cn: string
      /**
       * @description The attribute to set (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attribute_to_set: 'disable_notifications'
      /** @description The value to set */
      value: components['schemas']['LDAPSyncPluginGroupsValueRequest']
    }
    LDAPSyncPluginGroupStartURLRequest: {
      /**
       * @description The common name of the group
       * @example a_group_cn
       */
      group_cn: string
      /**
       * @description The attribute to set (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attribute_to_set: 'start_url'
      /**
       * @description The URL that the user should be redirected to after login. There is a 'default_start_url', a 'welcome_page', and any other will be treated as a custom URL
       * @example welcome_page
       */
      value: string
    }
    LDAPSyncPluginGroupAllOthersRequest: {
      /**
       * @description The common name of the group
       * @example a_group_cn
       */
      group_cn: string
      /**
       * @description The attribute to set (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      attribute_to_set: 'all_others'
      /** @example per_entry */
      value: string
    }
    LDAPSyncPluginGroupsToSyncSelector:
      | components['schemas']['LDAPSyncPluginGroupDisableNotificationsRequest']
      | components['schemas']['LDAPSyncPluginGroupStartURLRequest']
      | components['schemas']['LDAPSyncPluginGroupAllOthersRequest']
    LDAPSyncPluginGroupsToAttributesRequest: {
      /**
       * @description This config parameter is enabled. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /**
       * @description Once you enable this option, this plug-in will not only handle direct group memberships, instead it will also dig into nested groups and treat the members of those groups as contact group members as well. Please bear in mind that this feature might increase the execution time of your LDAP sync.
       * @default false
       * @example true
       */
      handle_nested: boolean
      /**
       * @description The LDAP attribute whose contents shall be synced into this custom attribute.
       * @default []
       * @example [
       *       "LDAP_1",
       *       "LDAP_2"
       *     ]
       */
      sync_from_other_connections: string[]
      /** @default [] */
      groups_to_sync: components['schemas']['LDAPSyncPluginGroupsToSyncSelector'][]
    }
    LDAPSyncPluginGroupsToAttributesSelector:
      | components['schemas']['LDAPSyncPluginGroupsToAttributesRequest']
      | components['schemas']['LDAPCheckboxDisabledRequest']
    LDAPRoleElementRequest: {
      /**
       * @description This group must be defined within the scope of the LDAP Group Settings
       * @example cmk-users
       */
      group_dn: string
      /**
       * @description An existing ldap connection. Use 'this_connection' to select the current connection
       * @default this_connection
       * @example this_connection
       */
      search_in: string
    }
    LDAPEnableGroupsToRoles: {
      /**
       * @description Once you enable this option, this plug-in will not only handle direct group memberships, instead it will also dig into nested groups and treat the members of those groups as contact group members as well. Please bear in mind that this feature might increase the execution time of your LDAP sync
       * @default false
       */
      handle_nested: boolean
      /**
       * @description This config parameter is enabled. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      admin?: components['schemas']['LDAPRoleElementRequest'][]
      agent_registration?: components['schemas']['LDAPRoleElementRequest'][]
      guest?: components['schemas']['LDAPRoleElementRequest'][]
      user?: components['schemas']['LDAPRoleElementRequest'][]
    } & {
      [key: string]: components['schemas']['LDAPRoleElementRequest']
    }
    LDAPGroupsToRolesSelector:
      | components['schemas']['LDAPEnableGroupsToRoles']
      | components['schemas']['LDAPCheckboxDisabledRequest']
    LDAPSyncPluginsRequest: {
      /**
       * @description Enables and populates the alias attribute of the Setup user by synchronizing an attribute from the LDAP user account. By default the LDAP attribute cn is used.
       * @default {
       *       "state": "disabled"
       *     }
       */
      alias: components['schemas']['LDAPSyncPluginAttrubuteSelector']
      /**
       * @description This plug-in when enabled fetches all information which is needed to check whether or not an already authenticated user should be deauthenticated, e.g. because the password has changed in LDAP or the account has been locked.
       * @default {
       *       "state": "disabled"
       *     }
       */
      authentication_expiration: components['schemas']['LDAPSyncPluginAttrubuteSelector']
      /**
       * @description When this option is enabled you will not get any alerts or other notifications via email, SMS or similar. This overrides all other notification settings and rules, so make sure that you know what you do. Moreover you can specify a time range where no notifications are generated.
       * @default {
       *       "state": "disabled"
       *     }
       */
      disable_notifications: components['schemas']['LDAPSyncPluginAttrubuteSelector']
      /**
       * @description Synchronizes the email of the LDAP user account into Checkmk when enabled
       * @default {
       *       "state": "disabled"
       *     }
       */
      email_address: components['schemas']['LDAPSyncPluginAttrubuteSelector']
      /**
       * @deprecated
       * @description Deprecated - use `main_menu_icons` instead.
       * @default {
       *       "state": "disabled"
       *     }
       */
      mega_menu_icons: components['schemas']['LDAPSyncPluginAttrubuteSelector']
      /**
       * @description When enabled, in the main menus you can select between two options: Have a green icon only for the headlines – the 'topics' – for lean design. Or have a colored icon for every entry so that over time you can zoom in more quickly to a specific entry.
       * @default {
       *       "state": "disabled"
       *     }
       */
      main_menu_icons: components['schemas']['LDAPSyncPluginAttrubuteSelector']
      /**
       * @description With this option enabled you can define if icons in the navigation bar should show a title or not. This gives you the possibility to save some space in the UI.
       * @default {
       *       "state": "disabled"
       *     }
       */
      navigation_bar_icons: components['schemas']['LDAPSyncPluginAttrubuteSelector']
      /**
       * @description When enabled, this plug-in synchronizes a field of the users LDAP account to the pager attribute of the Setup user accounts, which is then forwarded to the monitoring core and can be used for notifications. By default the LDAP attribute mobile is used.
       * @default {
       *       "state": "disabled"
       *     }
       */
      pager: components['schemas']['LDAPSyncPluginAttrubuteSelector']
      /**
       * @description In some places like e.g. the main menu Checkmk divides features, filters, input fields etc. in two categories, showing more or less entries. With this option you can set a default mode for unvisited menus. Alternatively, you can enforce to show more, so that the round button with the three dots is not shown at all.
       * @default {
       *       "state": "disabled"
       *     }
       */
      show_mode: components['schemas']['LDAPSyncPluginAttrubuteSelector']
      /**
       * @description The sidebar position
       * @default {
       *       "state": "disabled"
       *     }
       */
      ui_sidebar_position: components['schemas']['LDAPSyncPluginAttrubuteSelector']
      /**
       * @description The start URL to display in main frame.
       * @default {
       *       "state": "disabled"
       *     }
       */
      start_url: components['schemas']['LDAPSyncPluginAttrubuteSelector']
      /**
       * @description Set the temperature unit used for graphs and perfometers. The default unit can be configured here. Note that this setting does not affect the temperature unit used in service outputs, which can however be configured in this ruleset.
       * @default {
       *       "state": "disabled"
       *     }
       */
      temperature_unit: components['schemas']['LDAPSyncPluginAttrubuteSelector']
      /**
       * @description The user interface theme
       * @default {
       *       "state": "disabled"
       *     }
       */
      ui_theme: components['schemas']['LDAPSyncPluginAttrubuteSelector']
      /**
       * @description When this option is checked, the status GUI will only display hosts and services that the user is a contact for - even they have the permission for seeing all objects.
       * @default {
       *       "state": "disabled"
       *     }
       */
      visibility_of_hosts_or_services: components['schemas']['LDAPSyncPluginAttrubuteSelector']
      /**
       * @description This plug-in allows you to synchronize group memberships of the LDAP user account into the contact groups of the Checkmk user account. This allows you to use the group based permissions of your LDAP directory in Checkmk.
       * @default {
       *       "state": "disabled"
       *     }
       */
      contact_group_membership: components['schemas']['LDAPSyncPluginGroupsToContactGroupsSelector']
      /**
       * @description This plug-in allows you to synchronize group memberships of the LDAP user account into the custom attributes of the Checkmk user account. This allows you to use the group based permissions of your LDAP directory in Checkmk.
       * @default {
       *       "state": "disabled"
       *     }
       */
      groups_to_custom_user_attributes: components['schemas']['LDAPSyncPluginGroupsToAttributesSelector']
      /**
       * @description Configures the roles of the user depending on its group memberships in LDAP. Please note: Additionally the user is assigned to the Default Roles. Deactivate them if unwanted.
       * @default {
       *       "state": "disabled"
       *     }
       */
      groups_to_roles: components['schemas']['LDAPGroupsToRolesSelector']
    }
    LDAPSyncIntervalRequest: {
      /**
       * @description The sync interval in days
       * @default 0
       * @example 5
       */
      days: number
      /**
       * @description The sync interval in hours
       * @default 0
       * @example 2
       */
      hours: number
      /**
       * @description The sync interval in minutes
       * @default 5
       * @example 30
       */
      minutes: number
    }
    LDAPOtherRequest: {
      /**
       * @description This option defines the interval of the LDAP synchronization. This setting is only used by sites which have the automatic user synchronization enabled.
       * @default {
       *       "days": 0,
       *       "hours": 0,
       *       "minutes": 5
       *     }
       */
      sync_interval: components['schemas']['LDAPSyncIntervalRequest']
    }
    LDAPGeneralPropertiesUpdateRequest: {
      /**
       * @description Add a title or describe this rule
       * @default
       */
      description: string
      /**
       * @description An optional comment to explain the purpose of this object. The comment is only visible in this dialog and can help other users to understand the intentions of the configured attributes.
       * @default
       */
      comment: string
      /**
       * @description An optional URL linking documentation or any other page. An icon links to the page and opens in a new tab when clicked. You can use either global URLs (starting with http://), absolute local URLs (starting with /) or relative URLs (relative to check_mk/).
       * @default
       */
      documentation_url: string
      /**
       * @description Selecting 'deactivated' will disable the rule, but it will remain in the configuration.
       * @default activated
       * @enum {string}
       */
      rule_activation: 'activated' | 'deactivated'
      /** @description An LDAP connection ID string. */
      id: string
    }
    DirectoryTypeManualRequest: {
      /**
       * @description Select the software the LDAP directory is based on. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'active_directory_manual' | 'open_ldap' | '389_directory_server'
      /**
       * @description Set the host address of the LDAP server. Might be an IP address or resolvable host name.
       * @example your_ldap_server.example.com
       */
      ldap_server: string
      /**
       * @description When the connection to the first server fails with connect specific errors like timeouts or some other network related problems, the connect mechanism will try to use this server instead of the server configured above. If you use persistent connections (default), the connection is being used until the LDAP is not reachable or the local webserver is restarted. You may paste a text from your clipboard which contains several parts separated by ';' characters into the last input field. The text will then be split by these separators and the single parts are added into dedicated input fields.
       * @default []
       * @example [
       *       "192.168.5.2",
       *       "195.65.2.8"
       *     ]
       */
      failover_servers: string[]
    }
    DirectoryTypeAutoRequest: {
      /**
       * @description Select the software the LDAP directory is based on. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'active_directory_automatic'
      /**
       * @description Configure the DNS domain name of your Active directory domain here, Checkmk will then query this domain for it's closest domain controller to communicate with.
       * @example your_domain.com
       */
      domain: string
    }
    DirectoryTypeSelectorRequest:
      | components['schemas']['DirectoryTypeManualRequest']
      | components['schemas']['DirectoryTypeAutoRequest']
      | components['schemas']['DirectoryTypeManualRequest']
      | components['schemas']['DirectoryTypeManualRequest']
    BindCredentialsStoreIdRequest: {
      /**
       * @description This config parameter is enabled.
       * @default enabled
       * @example enabled
       */
      state: unknown
      /**
       * @description The distinguished name of the user account which is used to bind to the LDAP server. This user account must have read access to the LDAP directory.
       * @default
       * @example CN=bind_user,OU=users,DC=example,DC=com
       */
      bind_dn: string
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: 'store'
      /**
       * @description A password store id from the user account which is used to bind to the LDAP server. This user account must have read access to the LDAP directory.
       * @example your_password_store_id
       */
      password_store_id: string
    }
    BindCredentialsExplicitPasswordRequest: {
      /**
       * @description This config parameter is enabled.
       * @default enabled
       * @example enabled
       */
      state: unknown
      /**
       * @description The distinguished name of the user account which is used to bind to the LDAP server. This user account must have read access to the LDAP directory.
       * @default
       * @example CN=bind_user,OU=users,DC=example,DC=com
       */
      bind_dn: string
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: 'explicit'
      /**
       * @description An explicit password of the user account which is used to bind to the LDAP server. This user account must have read access to the LDAP directory.
       * @example your_password
       */
      explicit_password: string
    }
    BindCredentialsPasswordTypeSelectorRequest: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      state: 'enabled'
    } & (
      | components['schemas']['BindCredentialsStoreIdRequest']
      | components['schemas']['BindCredentialsExplicitPasswordRequest']
    )
    BindCredentialsSelectorRequest:
      | components['schemas']['BindCredentialsPasswordTypeSelectorRequest']
      | components['schemas']['LDAPCheckboxDisabledRequest']
    LDAPTCPPortRequest: {
      /**
       * @description This config parameter is enabled. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /**
       * @description This variable allows you to specify the TCP port to be used to connect to the LDAP server.
       * @default 389
       * @example 389
       */
      port: number
    }
    LDAPTCPPortSelectorRequest:
      | components['schemas']['LDAPTCPPortRequest']
      | components['schemas']['LDAPCheckboxDisabledRequest']
    LDAPConnectTimeoutRequest: {
      /**
       * @description This config parameter is enabled. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /**
       * @description Timeout for the initial connection to the LDAP server in seconds.
       * @default 2
       * @example 2
       */
      seconds: number
    }
    LDAPConnectTimeoutSelectorRequest:
      | components['schemas']['LDAPConnectTimeoutRequest']
      | components['schemas']['LDAPCheckboxDisabledRequest']
    LDAPVersionRequest: {
      /**
       * @description This config parameter is enabled. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /**
       * @description The selected LDAP version the LDAP server is serving. Most modern servers use LDAP version 3.
       * @default 3
       * @example 3
       * @enum {integer}
       */
      version: 2 | 3
    }
    LDAPVersionSelectorRequest:
      | components['schemas']['LDAPVersionRequest']
      | components['schemas']['LDAPCheckboxDisabledRequest']
    LDAPPageSizeRequest: {
      /**
       * @description This config parameter is enabled. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /**
       * @description LDAP searches can be performed in paginated mode, for example to improve the performance. This enables pagination and configures the size of the pages.
       * @default 1000
       * @example 1000
       */
      size: number
    }
    LDAPPageSizeSelectorRequest:
      | components['schemas']['LDAPPageSizeRequest']
      | components['schemas']['LDAPCheckboxDisabledRequest']
    LDAPResponseTimeoutRequest: {
      /**
       * @description This config parameter is enabled. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /**
       * @description Timeout for the initial connection to the LDAP server in seconds.
       * @default 5
       * @example 5
       */
      seconds: number
    }
    LDAPResponseTimeoutSelectorRequest:
      | components['schemas']['LDAPResponseTimeoutRequest']
      | components['schemas']['LDAPCheckboxDisabledRequest']
    LDAPConnectionSuffixUpdateRequest: {
      /**
       * @description This config parameter is enabled. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /**
       * @description The LDAP connection suffix can be used to distinguish equal named objects (name conflicts), for example user accounts, from different LDAP connections.
       * @example suffix_example
       */
      suffix: string
    }
    LDAPConnectionSuffixUpdateSelectorRequest:
      | components['schemas']['LDAPConnectionSuffixUpdateRequest']
      | components['schemas']['LDAPCheckboxDisabledRequest']
    LDAPConnectionUpdateRequest: {
      /**
       * @description The credentials to be used to connect to the LDAP server. The used account must not be allowed to do any changes in the directory the whole connection is read only. In some environment an anonymous connect/bind is allowed, in this case you don't have to configure anything here.It must be possible to list all needed user and group objects from the directory.
       * @example {
       *       "type": "active_directory_manual",
       *       "ldap_server": "your_ldap_server.example.com",
       *       "failover_servers": [
       *         "192.168.5.2",
       *         "195.65.2.8"
       *       ]
       *     }
       */
      directory_type: components['schemas']['DirectoryTypeSelectorRequest']
      /**
       * @description The credentials used to connect to the LDAP server.
       * @default {
       *       "state": "disabled"
       *     }
       * @example {
       *       "state": "enabled",
       *       "bind_dn": "CN=bind_user,OU=users,DC=example,DC=com",
       *       "password_store_id": "pw_store_id"
       *     }
       */
      bind_credentials: components['schemas']['BindCredentialsSelectorRequest']
      /**
       * @description The TCP port to be used to connect to the LDAP server.
       * @default {
       *       "state": "disabled"
       *     }
       * @example {
       *       "state": "enabled",
       *       "port": 389
       *     }
       */
      tcp_port: components['schemas']['LDAPTCPPortSelectorRequest']
      /**
       * @description Connect to the LDAP server with a SSL encrypted connection. The trusted certificates authorities configured in Checkmk will be used to validate the certificate provided by the LDAP server.
       * @default disable_ssl
       * @example enable_ssl
       * @enum {string}
       */
      ssl_encryption: 'enable_ssl' | 'disable_ssl'
      /**
       * @description If the connection timeout is set and its value.
       * @default {
       *       "state": "disabled"
       *     }
       * @example {
       *       "state": "enabled",
       *       "seconds": 2
       *     }
       */
      connect_timeout: components['schemas']['LDAPConnectTimeoutSelectorRequest']
      /**
       * @description If the ldap version is set and the version it's set to.
       * @default {
       *       "state": "disabled"
       *     }
       * @example {
       *       "state": "enabled",
       *       "version": 3
       *     }
       */
      ldap_version: components['schemas']['LDAPVersionSelectorRequest']
      /**
       * @description If the page size is enabled and its value.
       * @default {
       *       "state": "disabled"
       *     }
       * @example {
       *       "state": "enabled",
       *       "size": 1000
       *     }
       */
      page_size: components['schemas']['LDAPPageSizeSelectorRequest']
      /**
       * @description Enable the response timeout and define its value.
       * @default {
       *       "state": "disabled"
       *     }
       * @example {
       *       "state": "enabled",
       *       "seconds": 5
       *     }
       */
      response_timeout: components['schemas']['LDAPResponseTimeoutSelectorRequest']
      /**
       * @description If the connection suffix is enabled and what its set to.
       * @default {
       *       "state": "disabled"
       *     }
       * @example {
       *       "state": "enabled",
       *       "suffix": "suffix_example"
       *     }
       */
      connection_suffix: components['schemas']['LDAPConnectionSuffixUpdateSelectorRequest']
    }
    LDAPConnectionConfigUpdateRequest: {
      /**
       * @description The LDAP user configuration
       * @default {
       *       "user_base_dn": "",
       *       "search_scope": "search_only_base_dn_entry",
       *       "search_filter": {
       *         "state": "disabled"
       *       },
       *       "filter_group": {
       *         "state": "disabled"
       *       },
       *       "user_id_attribute": {
       *         "state": "disabled"
       *       },
       *       "user_id_case": "dont_convert_to_lowercase",
       *       "umlauts_in_user_ids": "keep_umlauts",
       *       "create_users": "on_login"
       *     }
       * @example {
       *       "user_base_dn": "ou=OrgUnit,dc=domaincomp,dc=de",
       *       "search_scope": "search_only_base_dn_entry",
       *       "search_filter": {
       *         "state": "enabled",
       *         "filter": "(&(objectclass=user)(objectcategory=person))"
       *       },
       *       "filter_group": {
       *         "state": "enabled",
       *         "filter": "filtergroupexample"
       *       },
       *       "user_id_attribute": {
       *         "state": "enabled",
       *         "attribute": "userattributeexample"
       *       },
       *       "user_id_case": "convert_to_lowercase",
       *       "umlauts_in_user_ids": "keep_umlauts",
       *       "create_users": "on_login"
       *     }
       */
      users: components['schemas']['LDAPUsersRequest']
      /**
       * @description The LDAP group configuration
       * @default {
       *       "group_base_dn": "",
       *       "search_scope": "search_whole_subtree",
       *       "search_filter": {
       *         "state": "disabled"
       *       },
       *       "member_attribute": {
       *         "state": "disabled"
       *       }
       *     }
       * @example {
       *       "group_base_dn": "ou=OrgUnit,dc=domaincomp,dc=de",
       *       "search_scope": "search_whole_subtree",
       *       "search_filter": {
       *         "state": "enabled",
       *         "filter": "(objectclass=group)"
       *       },
       *       "member_attribute": {
       *         "state": "enabled",
       *         "attribute": "member"
       *       }
       *     }
       */
      groups: components['schemas']['LDAPGroupsRequest']
      /**
       * @description The LDAP sync plug-ins configuration
       * @default {}
       * @example {}
       */
      sync_plugins: components['schemas']['LDAPSyncPluginsRequest']
      /**
       * @description Other config options for the LDAP connection.
       * @default {
       *       "sync_interval": {
       *         "days": 0,
       *         "hours": 0,
       *         "minutes": 5
       *       }
       *     }
       * @example {
       *       "sync_interval": {
       *         "days": 0,
       *         "hours": 0,
       *         "minutes": 30
       *       }
       *     }
       */
      other: components['schemas']['LDAPOtherRequest']
      /**
       * @description General properties of an LDAP connection.
       * @example {
       *       "id": "ldap_1",
       *       "description": "1st ldap connection",
       *       "comment": "test_comment",
       *       "documentation_url": "https://checkmk.com/doc/ldap_connections",
       *       "rule_activation": "activated"
       *     }
       */
      general_properties: components['schemas']['LDAPGeneralPropertiesUpdateRequest']
      /**
       * @description The LDAP connection configuration
       * @example {
       *       "directory_type": {
       *         "type": "active_directory_manual",
       *         "ldap_server": "123.31.12.34"
       *       },
       *       "bind_credentials": {
       *         "state": "enabled",
       *         "type": "explicit",
       *         "bind_dn": "cn=commonname,ou=OrgUnit,dc=domaincomp,dc=de",
       *         "explicit_password": "yourpass"
       *       },
       *       "tcp_port": {
       *         "state": "enabled",
       *         "port": 389
       *       },
       *       "ssl_encryption": "enable_ssl",
       *       "connect_timeout": {
       *         "state": "enabled",
       *         "seconds": 5
       *       },
       *       "ldap_version": {
       *         "state": "enabled",
       *         "version": 3
       *       },
       *       "page_size": {
       *         "state": "enabled",
       *         "size": 1000
       *       },
       *       "response_timeout": {
       *         "state": "enabled",
       *         "seconds": 60
       *       },
       *       "connection_suffix": {
       *         "state": "enabled",
       *         "suffix": "dc=domaincomp,dc=de"
       *       }
       *     }
       */
      ldap_connection: components['schemas']['LDAPConnectionUpdateRequest']
    }
    LDAPGeneralPropertiesCreateRequest: {
      /**
       * @description Add a title or describe this rule
       * @default
       */
      description: string
      /**
       * @description An optional comment to explain the purpose of this object. The comment is only visible in this dialog and can help other users to understand the intentions of the configured attributes.
       * @default
       */
      comment: string
      /**
       * @description An optional URL linking documentation or any other page. An icon links to the page and opens in a new tab when clicked. You can use either global URLs (starting with http://), absolute local URLs (starting with /) or relative URLs (relative to check_mk/).
       * @default
       */
      documentation_url: string
      /**
       * @description Selecting 'deactivated' will disable the rule, but it will remain in the configuration.
       * @default activated
       * @enum {string}
       */
      rule_activation: 'activated' | 'deactivated'
      /** @description An LDAP connection ID string. */
      id: string
    }
    LDAPConnectionSuffixCreateRequest: {
      /**
       * @description This config parameter is enabled. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /**
       * @description The LDAP connection suffix can be used to distinguish equal named objects (name conflicts), for example user accounts, from different LDAP connections.
       * @example suffix_example
       */
      suffix: string
    }
    LDAPConnectionSuffixCreateSelectorRequest:
      | components['schemas']['LDAPConnectionSuffixCreateRequest']
      | components['schemas']['LDAPCheckboxDisabledRequest']
    LDAPConnectionCreateRequest: {
      /**
       * @description The credentials to be used to connect to the LDAP server. The used account must not be allowed to do any changes in the directory the whole connection is read only. In some environment an anonymous connect/bind is allowed, in this case you don't have to configure anything here.It must be possible to list all needed user and group objects from the directory.
       * @example {
       *       "type": "active_directory_manual",
       *       "ldap_server": "your_ldap_server.example.com",
       *       "failover_servers": [
       *         "192.168.5.2",
       *         "195.65.2.8"
       *       ]
       *     }
       */
      directory_type: components['schemas']['DirectoryTypeSelectorRequest']
      /**
       * @description The credentials used to connect to the LDAP server.
       * @default {
       *       "state": "disabled"
       *     }
       * @example {
       *       "state": "enabled",
       *       "bind_dn": "CN=bind_user,OU=users,DC=example,DC=com",
       *       "password_store_id": "pw_store_id"
       *     }
       */
      bind_credentials: components['schemas']['BindCredentialsSelectorRequest']
      /**
       * @description The TCP port to be used to connect to the LDAP server.
       * @default {
       *       "state": "disabled"
       *     }
       * @example {
       *       "state": "enabled",
       *       "port": 389
       *     }
       */
      tcp_port: components['schemas']['LDAPTCPPortSelectorRequest']
      /**
       * @description Connect to the LDAP server with a SSL encrypted connection. The trusted certificates authorities configured in Checkmk will be used to validate the certificate provided by the LDAP server.
       * @default disable_ssl
       * @example enable_ssl
       * @enum {string}
       */
      ssl_encryption: 'enable_ssl' | 'disable_ssl'
      /**
       * @description If the connection timeout is set and its value.
       * @default {
       *       "state": "disabled"
       *     }
       * @example {
       *       "state": "enabled",
       *       "seconds": 2
       *     }
       */
      connect_timeout: components['schemas']['LDAPConnectTimeoutSelectorRequest']
      /**
       * @description If the ldap version is set and the version it's set to.
       * @default {
       *       "state": "disabled"
       *     }
       * @example {
       *       "state": "enabled",
       *       "version": 3
       *     }
       */
      ldap_version: components['schemas']['LDAPVersionSelectorRequest']
      /**
       * @description If the page size is enabled and its value.
       * @default {
       *       "state": "disabled"
       *     }
       * @example {
       *       "state": "enabled",
       *       "size": 1000
       *     }
       */
      page_size: components['schemas']['LDAPPageSizeSelectorRequest']
      /**
       * @description Enable the response timeout and define its value.
       * @default {
       *       "state": "disabled"
       *     }
       * @example {
       *       "state": "enabled",
       *       "seconds": 5
       *     }
       */
      response_timeout: components['schemas']['LDAPResponseTimeoutSelectorRequest']
      /**
       * @description If the connection suffix is enabled and what its set to.
       * @default {
       *       "state": "disabled"
       *     }
       * @example {
       *       "state": "enabled",
       *       "suffix": "suffix_example"
       *     }
       */
      connection_suffix: components['schemas']['LDAPConnectionSuffixCreateSelectorRequest']
    }
    LDAPConnectionConfigCreateRequest: {
      /**
       * @description The LDAP user configuration
       * @default {
       *       "user_base_dn": "",
       *       "search_scope": "search_only_base_dn_entry",
       *       "search_filter": {
       *         "state": "disabled"
       *       },
       *       "filter_group": {
       *         "state": "disabled"
       *       },
       *       "user_id_attribute": {
       *         "state": "disabled"
       *       },
       *       "user_id_case": "dont_convert_to_lowercase",
       *       "umlauts_in_user_ids": "keep_umlauts",
       *       "create_users": "on_login"
       *     }
       * @example {
       *       "user_base_dn": "ou=OrgUnit,dc=domaincomp,dc=de",
       *       "search_scope": "search_only_base_dn_entry",
       *       "search_filter": {
       *         "state": "enabled",
       *         "filter": "(&(objectclass=user)(objectcategory=person))"
       *       },
       *       "filter_group": {
       *         "state": "enabled",
       *         "filter": "filtergroupexample"
       *       },
       *       "user_id_attribute": {
       *         "state": "enabled",
       *         "attribute": "userattributeexample"
       *       },
       *       "user_id_case": "convert_to_lowercase",
       *       "umlauts_in_user_ids": "keep_umlauts",
       *       "create_users": "on_login"
       *     }
       */
      users: components['schemas']['LDAPUsersRequest']
      /**
       * @description The LDAP group configuration
       * @default {
       *       "group_base_dn": "",
       *       "search_scope": "search_whole_subtree",
       *       "search_filter": {
       *         "state": "disabled"
       *       },
       *       "member_attribute": {
       *         "state": "disabled"
       *       }
       *     }
       * @example {
       *       "group_base_dn": "ou=OrgUnit,dc=domaincomp,dc=de",
       *       "search_scope": "search_whole_subtree",
       *       "search_filter": {
       *         "state": "enabled",
       *         "filter": "(objectclass=group)"
       *       },
       *       "member_attribute": {
       *         "state": "enabled",
       *         "attribute": "member"
       *       }
       *     }
       */
      groups: components['schemas']['LDAPGroupsRequest']
      /**
       * @description The LDAP sync plug-ins configuration
       * @default {}
       * @example {}
       */
      sync_plugins: components['schemas']['LDAPSyncPluginsRequest']
      /**
       * @description Other config options for the LDAP connection.
       * @default {
       *       "sync_interval": {
       *         "days": 0,
       *         "hours": 0,
       *         "minutes": 5
       *       }
       *     }
       * @example {
       *       "sync_interval": {
       *         "days": 0,
       *         "hours": 0,
       *         "minutes": 30
       *       }
       *     }
       */
      other: components['schemas']['LDAPOtherRequest']
      /**
       * @description General properties of an LDAP connection.
       * @example {
       *       "id": "ldap_1",
       *       "description": "1st ldap connection",
       *       "comment": "test_comment",
       *       "documentation_url": "https://checkmk.com/doc/ldap_connections",
       *       "rule_activation": "activated"
       *     }
       */
      general_properties: components['schemas']['LDAPGeneralPropertiesCreateRequest']
      /**
       * @description The LDAP connection configuration
       * @example {
       *       "directory_type": {
       *         "type": "active_directory_manual",
       *         "ldap_server": "123.31.12.34"
       *       },
       *       "bind_credentials": {
       *         "state": "enabled",
       *         "type": "explicit",
       *         "bind_dn": "cn=commonname,ou=OrgUnit,dc=domaincomp,dc=de",
       *         "explicit_password": "yourpass"
       *       },
       *       "tcp_port": {
       *         "state": "enabled",
       *         "port": 389
       *       },
       *       "ssl_encryption": "enable_ssl",
       *       "connect_timeout": {
       *         "state": "enabled",
       *         "seconds": 5
       *       },
       *       "ldap_version": {
       *         "state": "enabled",
       *         "version": 3
       *       },
       *       "page_size": {
       *         "state": "enabled",
       *         "size": 1000
       *       },
       *       "response_timeout": {
       *         "state": "enabled",
       *         "seconds": 60
       *       },
       *       "connection_suffix": {
       *         "state": "enabled",
       *         "suffix": "dc=domaincomp,dc=de"
       *       }
       *     }
       */
      ldap_connection: components['schemas']['LDAPConnectionCreateRequest']
    }
    VerificationRequest: {
      /**
       * @description The version of the request
       * @example 3.0
       */
      VERSION: string
      /**
       * @description The ID of the request
       * @example df17e557-0daf-4b78-b9f2-f3550252a8b5
       */
      request_id: string
      /**
       * @description The ID of the instance the request is for
       * @example 6b9e78d1-de99-46ef-9644-32ee33a2b489
       */
      instance_id: string
      /**
       * @description The creation timestamp
       * @example 1690379907
       */
      created_at: number
      /**
       * @description How the request was uploaded
       * @example manual
       */
      upload_origin: string
      /**
       * @description The license usage reports
       * @example [
       *       {}
       *     ]
       */
      raw_reports: {
        [key: string]: unknown
      }[]
    }
    Api403CustomError5: {
      /**
       * @description The HTTP status code.
       * @example 403
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example You have insufficient permissions for this operation.
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Forbidden
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    BaseSettingMode: {
      /**
       * @description With which mode to perform the license verification: 'online' or 'offline'. If 'online' is chosen, credentials have to be provided (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      mode: 'offline'
    }
    LicenseCredentials: {
      /** @example application-account-id */
      username: string
      /** @example application-account-password */
      password: string
    }
    OnlineSettingMode: {
      /**
       * @description With which mode to perform the license verification: 'online' or 'offline'. If 'online' is chosen, credentials have to be provided (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      mode: 'online'
      /**
       * @description The credentials to use for online license configuration
       * @example {
       *       "username": "application-account-id",
       *       "password": "application-account-password"
       *     }
       */
      credentials: components['schemas']['LicenseCredentials']
    }
    LicenceSettingMode:
      | components['schemas']['BaseSettingMode']
      | components['schemas']['OnlineSettingMode']
    LicenseSettings: {
      /**
       * @description The settings required for the configuration of licensing settings
       * @example {
       *       "mode": "online",
       *       "credentials": {
       *         "username": "application-account-id",
       *         "password": "application-account-password"
       *       }
       *     }
       */
      settings: components['schemas']['LicenceSettingMode']
    }
    VerificationResponse: {
      /**
       * @description The version of the response
       * @example 3.0
       */
      VERSION: string
      /**
       * @description The ID of the request
       * @example df17e557-0daf-4b78-b9f2-f3550252a8b5
       */
      request_id: string
      /**
       * @description The ID of the response
       * @example 6b9e78d1-de99-46ef-9644-32ee33a2b489
       */
      response_id: string
      /**
       * @description The creation timestamp
       * @example 1690379907
       */
      created_at: number
      /**
       * @description The signature of the response
       * @example
       */
      signature: string
      /**
       * @description The certificate of the response
       * @example -----BEGIN CERTIFICATE-----...
       */
      certificate: string
      /**
       * @description The payload of the response
       * @example {}
       */
      payload: {
        [key: string]: unknown
      }
    }
    Api422CustomError4: {
      /**
       * @description The HTTP status code.
       * @example 422
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example Offline verification procedure was not successful
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Unprocessable Entity
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    Api422CustomError5: {
      /**
       * @description The HTTP status code.
       * @example 422
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example Online verification procedure was not successful
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Unprocessable Entity
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    TimeRange: {
      /**
       * Format: date-time
       * @description The approximate time of the first sample.
       * @example 2025-09-12 07:03:39.107484
       */
      start: string
      /**
       * Format: date-time
       * @description The approximate time of the last sample.
       * @example 2025-09-12 07:18:39.107536
       */
      end: string
    }
    FilterGraph: {
      /**
       * @description The time range from which to source the metrics.
       * @example {
       *       "start": "2025-09-12 07:03:39.107940",
       *       "end": "2025-09-12 07:18:39.107948"
       *     }
       */
      time_range: components['schemas']['TimeRange']
      /**
       * @description Specify how to reduce a segment of data points to a single data point of the output metric. This can be useful to find spikes in your data that would be smoothed out by computing the average.
       * @default average
       * @example max
       * @enum {string}
       */
      reduce: 'min' | 'max' | 'average'
      /**
       * @description Filter for hosts, services and sites. Entries of the filter are combined with logical AND. Depending of the configuration of Checkmk you have to specify a certain set of filters, otherwise Checkmk will refuse to return a result, as too many metrics would have to be returned. See example for commonly used filters.
       * @example {
       *       "siteopt": {
       *         "site": "site_name"
       *       },
       *       "host": {
       *         "host": "host_name"
       *       },
       *       "hostregex": {
       *         "host_regex": "windows.*",
       *         "neg_host_regex": "on"
       *       },
       *       "service": {
       *         "service": "Check_MK"
       *       },
       *       "serviceregex": {
       *         "service_regex": ".+"
       *       },
       *       "host_labels": {
       *         "host_labels_count": "1",
       *         "host_labels_1_vs_count": "1",
       *         "host_labels_1_bool": "and",
       *         "host_labels_indexof_1": "1",
       *         "host_labels_1_vs_1_bool": "and",
       *         "host_labels_1_vs_1_vs": "cmk/os_family:linux",
       *         "host_labels_1_vs_indexof_1": "1"
       *       },
       *       "opthostgroup": {
       *         "opthost_group": "check_mk"
       *       },
       *       "optservicegroup": {
       *         "optservice_group": "APT_Updates"
       *       },
       *       "host_tags": {
       *         "host_tag_0_op": "is",
       *         "host_tag_0_grp": "criticality",
       *         "host_tag_0_val": "test"
       *       }
       *     }
       */
      filter: {
        [key: string]: unknown
      }
      /**
       * @description A result that contains multiple metrics of the same type can be aggregated together. Aggregation is disabled by default.
       * @default off
       * @example maximum
       * @enum {string}
       */
      aggregation: 'off' | 'sum' | 'average' | 'minimum' | 'maximum'
      /**
       * @description Specify whether you want to receive a single metric (via metric_id), or a predefined graph containing multiple metrics (via graph_id). (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'predefined_graph'
      /**
       * @description The ID of the predefined graph. After activating the "Show internal IDs" in the "display options" of the Service view, you can see the ID of a predefined graph in the title of the graph.
       * @example cmk_cpu_time_by_phase
       */
      graph_id: string
    }
    FilterMetric: {
      /**
       * @description The time range from which to source the metrics.
       * @example {
       *       "start": "2025-09-12 07:03:39.107940",
       *       "end": "2025-09-12 07:18:39.107948"
       *     }
       */
      time_range: components['schemas']['TimeRange']
      /**
       * @description Specify how to reduce a segment of data points to a single data point of the output metric. This can be useful to find spikes in your data that would be smoothed out by computing the average.
       * @default average
       * @example max
       * @enum {string}
       */
      reduce: 'min' | 'max' | 'average'
      /**
       * @description Filter for hosts, services and sites. Entries of the filter are combined with logical AND. Depending of the configuration of Checkmk you have to specify a certain set of filters, otherwise Checkmk will refuse to return a result, as too many metrics would have to be returned. See example for commonly used filters.
       * @example {
       *       "siteopt": {
       *         "site": "site_name"
       *       },
       *       "host": {
       *         "host": "host_name"
       *       },
       *       "hostregex": {
       *         "host_regex": "windows.*",
       *         "neg_host_regex": "on"
       *       },
       *       "service": {
       *         "service": "Check_MK"
       *       },
       *       "serviceregex": {
       *         "service_regex": ".+"
       *       },
       *       "host_labels": {
       *         "host_labels_count": "1",
       *         "host_labels_1_vs_count": "1",
       *         "host_labels_1_bool": "and",
       *         "host_labels_indexof_1": "1",
       *         "host_labels_1_vs_1_bool": "and",
       *         "host_labels_1_vs_1_vs": "cmk/os_family:linux",
       *         "host_labels_1_vs_indexof_1": "1"
       *       },
       *       "opthostgroup": {
       *         "opthost_group": "check_mk"
       *       },
       *       "optservicegroup": {
       *         "optservice_group": "APT_Updates"
       *       },
       *       "host_tags": {
       *         "host_tag_0_op": "is",
       *         "host_tag_0_grp": "criticality",
       *         "host_tag_0_val": "test"
       *       }
       *     }
       */
      filter: {
        [key: string]: unknown
      }
      /**
       * @description A result that contains multiple metrics of the same type can be aggregated together. Aggregation is disabled by default.
       * @default off
       * @example maximum
       * @enum {string}
       */
      aggregation: 'off' | 'sum' | 'average' | 'minimum' | 'maximum'
      /**
       * @description Specify whether you want to receive a single metric (via metric_id), or a predefined graph containing multiple metrics (via graph_id). (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'single_metric'
      /**
       * @description The ID of the single metric.After activating the "Show internal IDs" in the "display options" of the Service view, you can see the ID of a single metric in the legend of the graph.
       * @example cmk_time_agent
       */
      metric_id: string
    }
    Filter: components['schemas']['FilterGraph'] | components['schemas']['FilterMetric']
    Metric: {
      /**
       * @description The color of the metric as displayed in Checkmk. Color is in HTML notation.
       * @example #80ff40
       */
      color?: string
      /**
       * @description The samples of the metric.
       * @example [
       *       3752390000,
       *       3746380000,
       *       3770930000,
       *       3773230000,
       *       3796020000,
       *       3787010000,
       *       3777880000,
       *       3781040000,
       *       3798920000,
       *       3805910000
       *     ]
       */
      data_points: number[]
      /**
       * @description The line type to use.
       * @example area
       */
      line_type: string
      /**
       * @description The title of the graph.
       * @example RAM used
       */
      title: string
    }
    GraphCollection: {
      /**
       * @description The time range within the samples of the response lie.
       * @example {
       *       "time_range": {
       *         "start": "1970-01-01T00:00:00Z",
       *         "end": "1970-01-01T00:00:30Z"
       *       }
       *     }
       */
      time_range: components['schemas']['TimeRange']
      /**
       * @description The interval between two samples in seconds.
       * @example 60
       */
      step: number
      /**
       * @description The actual graph data.
       * @example [
       *       {
       *         "color": "#ffffff",
       *         "data_points": [
       *           1,
       *           2,
       *           3,
       *           1
       *         ],
       *         "line_type": "area",
       *         "title": "RAM used"
       *       }
       *     ]
       */
      metrics: components['schemas']['Metric'][]
    }
    GetGraph: {
      /**
       * @description The time range from which to source the metrics.
       * @example {
       *       "start": "2025-09-12 07:03:39.107940",
       *       "end": "2025-09-12 07:18:39.107948"
       *     }
       */
      time_range: components['schemas']['TimeRange']
      /**
       * @description Specify how to reduce a segment of data points to a single data point of the output metric. This can be useful to find spikes in your data that would be smoothed out by computing the average.
       * @default average
       * @example max
       * @enum {string}
       */
      reduce: 'min' | 'max' | 'average'
      /**
       * @description The name of the site. Even though this is optional, specifying a site will greatly improve performance in large distributed systems.
       * @example heute
       */
      site?: string
      /**
       * @description The host name to use.
       * @example my.cool.host
       */
      host_name: string
      /**
       * @description The service, whose data to request.
       * @example Check_MK
       */
      service_description: string
      /**
       * @description Specify whether you want to receive a single metric (via metric_id), or a predefined graph containing multiple metrics (via graph_id). (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'predefined_graph'
      /**
       * @description The ID of the predefined graph. After activating the "Show internal IDs" in the "display options" of the Service view, you can see the ID of a predefined graph in the title of the graph.
       * @example cmk_cpu_time_by_phase
       */
      graph_id: string
    }
    GetMetric: {
      /**
       * @description The time range from which to source the metrics.
       * @example {
       *       "start": "2025-09-12 07:03:39.107940",
       *       "end": "2025-09-12 07:18:39.107948"
       *     }
       */
      time_range: components['schemas']['TimeRange']
      /**
       * @description Specify how to reduce a segment of data points to a single data point of the output metric. This can be useful to find spikes in your data that would be smoothed out by computing the average.
       * @default average
       * @example max
       * @enum {string}
       */
      reduce: 'min' | 'max' | 'average'
      /**
       * @description The name of the site. Even though this is optional, specifying a site will greatly improve performance in large distributed systems.
       * @example heute
       */
      site?: string
      /**
       * @description The host name to use.
       * @example my.cool.host
       */
      host_name: string
      /**
       * @description The service, whose data to request.
       * @example Check_MK
       */
      service_description: string
      /**
       * @description Specify whether you want to receive a single metric (via metric_id), or a predefined graph containing multiple metrics (via graph_id). (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'single_metric'
      /**
       * @description The ID of the single metric.After activating the "Show internal IDs" in the "display options" of the Service view, you can see the ID of a single metric in the legend of the graph.
       * @example cmk_time_agent
       */
      metric_id: string
    }
    Get: components['schemas']['GetGraph'] | components['schemas']['GetMetric']
    InstalledVersions: {
      /**
       * @description The site where this API call was made on.
       * @example production
       */
      site?: string
      /**
       * @description The Apache WSGI application group this call was made on.
       * @example de
       */
      group?: string
      /**
       * @description The REST-API version
       * @example {
       *       "revision": "1.0.0"
       *     }
       */
      rest_api?: {
        [key: string]: unknown
      }
      /**
       * @description Some version numbers
       * @example {
       *       "checkmk": "1.8.0p1"
       *     }
       */
      versions?: {
        [key: string]: unknown
      }
      /**
       * @description The Checkmk edition.
       * @example raw
       */
      edition?: string
      /**
       * @description Whether this is a demo version or not.
       * @example false
       */
      demo?: boolean
    }
    CheckboxOutput: {
      /**
       * @description To enable or disable this field
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
    }
    RulePropertiesAttributes: {
      /**
       * @description A description or title of this rule.
       * @example Notify all contacts of a host/service via HTML email
       */
      description?: string
      /**
       * @description An optional comment that may be used to explain the purpose of this object.
       * @example An example comment
       */
      comment?: string
      /**
       * @description An optional URL pointing to documentation or any other page. This will be displayed as an icon and open a new page when clicked.
       * @example http://link/to/documentation
       */
      documentation_url?: string
      /**
       * @description Disabled rules are kept in the configuration but are not applied.
       * @example {
       *       "state": "enabled"
       *     }
       */
      do_not_apply_this_rule?: components['schemas']['CheckboxOutput']
      /**
       * @description If you set this option then users are allowed to deactivate notifications that are created by this rule.
       * @example {
       *       "state": "enabled"
       *     }
       */
      allow_users_to_deactivate?: components['schemas']['CheckboxOutput']
    }
    PluginBase: {
      /**
       * @example cancel_previous_notifications
       * @enum {string}
       */
      option?:
        | 'cancel_previous_notifications'
        | 'create_notification_with_the_following_parameters'
        | 'create_notification_with_custom_parameters'
      /** @description The plug-in name and configuration parameters defined. */
      plugin_params?: {
        [key: string]: unknown
      }
    }
    CheckboxWithStrValueOutput: {
      /**
       * @description To enable or disable this field
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      value?: string
    }
    NotificationBulkingCommonAttributes: {
      /**
       * @description To enable or disable this field
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /**
       * @description Notifications are kept back for bulking at most for this time (seconds)
       * @example 60
       */
      time_horizon?: number
      /**
       * @description At most that many notifications are kept back for bulking. A value of 1 essentially turns off notification bulking.
       * @example 1000
       */
      max_bulk_size?: number
      notification_bulks_based_on?: (
        | 'folder'
        | 'host'
        | 'service'
        | 'sl'
        | 'check_type'
        | 'state'
        | 'ec_contact'
        | 'ec_comment'
      )[]
      /**
       * @description If you enter the names of host/service-custom macros here then for each different combination of values of those macros a separate bulk will be created. Service macros match first, if no service macro is found, the host macros are searched. This can be used in combination with the grouping by folder, host etc. Omit any leading underscore. Note: If you are using Nagios as a core you need to make sure that the values of the required macros are present in the notification context. This is done in check_mk_templates.cfg. If you macro is _FOO then you need to add the variables NOTIFY_HOST_FOO and NOTIFY_SERVICE_FOO. You may paste a text from your clipboard which contains several parts separated by ';' characters into the last input field. The text will then be split by these separators and the single parts are added into dedicated input fields
       * @example
       */
      notification_bulks_based_on_custom_macros?: string[]
      subject_for_bulk_notifications?: components['schemas']['CheckboxWithStrValueOutput']
    }
    BulkOutsideTimePeriodValue: {
      /**
       * @description To enable or disable this field
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      value?: components['schemas']['NotificationBulkingCommonAttributes']
    }
    NotificationBulking: {
      /**
       * @description To enable or disable this field
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /**
       * @description Notifications are kept back for bulking at most for this time (seconds)
       * @example 60
       */
      time_horizon?: number
      /**
       * @description At most that many notifications are kept back for bulking. A value of 1 essentially turns off notification bulking.
       * @example 1000
       */
      max_bulk_size?: number
      notification_bulks_based_on?: (
        | 'folder'
        | 'host'
        | 'service'
        | 'sl'
        | 'check_type'
        | 'state'
        | 'ec_contact'
        | 'ec_comment'
      )[]
      /**
       * @description If you enter the names of host/service-custom macros here then for each different combination of values of those macros a separate bulk will be created. Service macros match first, if no service macro is found, the host macros are searched. This can be used in combination with the grouping by folder, host etc. Omit any leading underscore. Note: If you are using Nagios as a core you need to make sure that the values of the required macros are present in the notification context. This is done in check_mk_templates.cfg. If you macro is _FOO then you need to add the variables NOTIFY_HOST_FOO and NOTIFY_SERVICE_FOO. You may paste a text from your clipboard which contains several parts separated by ';' characters into the last input field. The text will then be split by these separators and the single parts are added into dedicated input fields
       * @example
       */
      notification_bulks_based_on_custom_macros?: string[]
      subject_for_bulk_notifications?: components['schemas']['CheckboxWithStrValueOutput']
      /** @example 24X7 */
      time_period?: string
      bulk_outside_timeperiod?: components['schemas']['BulkOutsideTimePeriodValue']
    }
    WhenToBulk: {
      /**
       * @description Bulking can always happen or during a set time period
       * @example always
       * @enum {string}
       */
      when_to_bulk?: 'always' | 'timeperiod'
      params?: components['schemas']['NotificationBulking']
    }
    NotificationBulkingCheckbox: {
      /**
       * @description To enable or disable this field
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      value?: components['schemas']['WhenToBulk']
    }
    NotificationPlugin: {
      notify_plugin?: components['schemas']['PluginBase']
      notification_bulking?: components['schemas']['NotificationBulkingCheckbox']
    }
    CheckboxWithListOfStrOutput: {
      /**
       * @description To enable or disable this field
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      value?: string[]
    }
    CustomMacroOutput: {
      /**
       * @description The name of the macro
       * @example macro_1
       */
      macro_name?: string
      /**
       * @description The text entered here is handled as a regular expression pattern
       * @example [A-Z]+
       */
      match_regex?: string
    }
    MatchCustomMacrosOutput: {
      /**
       * @description To enable or disable this field
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      value?: components['schemas']['CustomMacroOutput'][]
    }
    ContactSelectionAttributes: {
      all_contacts_of_the_notified_object?: components['schemas']['CheckboxOutput']
      all_users?: components['schemas']['CheckboxOutput']
      all_users_with_an_email_address?: components['schemas']['CheckboxOutput']
      the_following_users?: components['schemas']['CheckboxWithListOfStrOutput']
      members_of_contact_groups?: components['schemas']['CheckboxWithListOfStrOutput']
      explicit_email_addresses?: components['schemas']['CheckboxWithListOfStrOutput']
      restrict_by_custom_macros?: components['schemas']['MatchCustomMacrosOutput']
      restrict_by_contact_groups?: components['schemas']['CheckboxWithListOfStrOutput']
    }
    CheckboxWithFolderStrOutput: {
      /**
       * @description To enable or disable this field
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /** @description This condition makes the rule match only hosts that are managed via WATO and that are contained in this folder - either directly or in one of its subfolders.
       *
       *     Path delimiters can be either `~`, `/` or `\`. Please use the one most appropriate for your quoting/escaping needs. A good default choice is `~`. */
      value?: string
    }
    AuxTagOutput: {
      /**
       * @description Identifies the type of host tag. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      tag_type: 'aux_tag'
      /**
       * @description This describes the matching action
       * @enum {string}
       */
      operator?: 'is_not_set' | 'is_set'
      /**
       * @description Tag groups tag ids are available via the host tag group endpoint.
       * @example checkmk-agent
       */
      tag_id?: string | null
    }
    TagGroupNoneOfOrOneOfOutput: {
      /**
       * @description Identifies the type of host tag.
       * @example tag_group
       * @enum {string}
       */
      tag_type?: 'aux_tag' | 'tag_group'
      /**
       * @description If the tag_type is 'tag_group', the id of that group is shown here.
       * @example agent
       */
      tag_group_id?: string
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      operator: 'one_of' | 'none_of'
      /** @example [
       *       "ip-v4-only",
       *       "ip-v6-only"
       *     ] */
      tag_ids?: (string | null)[]
    }
    TagGroupIsNotOrIsOutput: {
      /**
       * @description Identifies the type of host tag.
       * @example tag_group
       * @enum {string}
       */
      tag_type?: 'aux_tag' | 'tag_group'
      /**
       * @description If the tag_type is 'tag_group', the id of that group is shown here.
       * @example agent
       */
      tag_group_id?: string
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      operator: 'is_not' | 'is'
      /**
       * @description Tag groups tag ids are available via the host tag group endpoint.
       * @example checkmk-agent
       */
      tag_id?: string | null
    }
    TagGroupSelectorOutput: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      tag_type: 'tag_group'
    } & (
      | components['schemas']['TagGroupNoneOfOrOneOfOutput']
      | components['schemas']['TagGroupNoneOfOrOneOfOutput']
      | components['schemas']['TagGroupIsNotOrIsOutput']
      | components['schemas']['TagGroupIsNotOrIsOutput']
    )
    TagTypeSelectorOutput:
      | components['schemas']['AuxTagOutput']
      | components['schemas']['TagGroupSelectorOutput']
    CheckboxMatchHostTagsOutput: {
      /**
       * @description To enable or disable this field
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /**
       * @description A list of tag groups or aux tags with conditions
       * @example [
       *       {
       *         "tag_type": "tag_group",
       *         "tag_group_id": "agent",
       *         "operator": "is",
       *         "tag_id": "checkmk-agent"
       *       },
       *       {
       *         "tag_type": "aux_tag",
       *         "operator": "is_set",
       *         "tag_id": "snmp"
       *       }
       *     ]
       */
      value?: components['schemas']['TagTypeSelectorOutput'][]
    }
    CheckboxLabelOutput: {
      /** @example cmk/os_family */
      key?: string
      /** @example linux */
      value?: string
    }
    CheckboxWithListOfLabelsOutput: {
      /**
       * @description To enable or disable this field
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /** @description A list of key, value label pairs */
      value?: components['schemas']['CheckboxLabelOutput'][]
    }
    ServiceGroupsRegexOutput: {
      /**
       * @example match_alias
       * @enum {string}
       */
      match_type?: 'match_id' | 'match_alias'
      /**
       * @description The text entered in this list is handled as a regular expression pattern
       * @example [
       *       "[A-Z]+123",
       *       "[A-Z]+456"
       *     ]
       */
      regex_list?: string[]
    }
    CheckboxWithListOfServiceGroupsRegexOutput: {
      /**
       * @description To enable or disable this field
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /** @description The service group alias must not match one of the following regular expressions. For host events this condition is simply ignored. The text entered here is handled as a regular expression pattern. The pattern is applied as infix search. Add a leading ^ to make it match from the beginning and/or a tailing $ to match till the end of the text. The match is performed case sensitive. Read more about regular expression matching in Checkmk in our user guide. You may paste a text from your clipboard which contains several parts separated by ';' characters into the last input field. The text will then be split by these separators and the single parts are added into dedicated input field */
      value?: components['schemas']['ServiceGroupsRegexOutput']
    }
    FromToServiceLevelsOutput: {
      /**
       * @description A service level represented as an integer
       * @example 10
       */
      from_level: number
      /**
       * @description A service level represented as an integer
       * @example 10
       */
      to_level: number
    }
    CheckboxWithFromToServiceLevelsOutput: {
      /**
       * @description To enable or disable this field
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /** @description Host or service must be in the following service level to get notification */
      value?: components['schemas']['FromToServiceLevelsOutput']
    }
    HostEventTypeOutput: {
      /** @example true */
      start_or_end_of_flapping_state?: boolean
      /** @example true */
      start_or_end_of_scheduled_downtime?: boolean
      /** @example false */
      acknowledgement_of_problem?: boolean
      /** @example true */
      alert_handler_execution_successful?: boolean
      /** @example false */
      alert_handler_execution_failed?: boolean
      /** @example true */
      up_down?: boolean
      /** @example false */
      up_unreachable?: boolean
      /** @example true */
      down_up?: boolean
      /** @example false */
      down_unreachable?: boolean
      /** @example false */
      unreachable_down?: boolean
      /** @example false */
      unreachable_up?: boolean
      /** @example false */
      any_up?: boolean
      /** @example true */
      any_down?: boolean
      /** @example true */
      any_unreachable?: boolean
    }
    CheckboxHostEventTypeOutput: {
      /**
       * @description To enable or disable this field
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /** @description Select the host event types and transitions this rule should handle. Note: If you activate this option and do not also specify service event types then this rule will never hold for service notifications! Note: You can only match on event types created by the core. */
      value?: components['schemas']['HostEventTypeOutput']
    }
    ServiceEventTypeOutput: {
      /** @example true */
      start_or_end_of_flapping_state?: boolean
      /** @example true */
      start_or_end_of_scheduled_downtime?: boolean
      /** @example false */
      acknowledgement_of_problem?: boolean
      /** @example true */
      alert_handler_execution_successful?: boolean
      /** @example false */
      alert_handler_execution_failed?: boolean
      /** @example true */
      ok_warn?: boolean
      /** @example true */
      ok_ok?: boolean
      /** @example false */
      ok_crit?: boolean
      /** @example true */
      ok_unknown?: boolean
      /** @example false */
      warn_ok?: boolean
      /** @example false */
      warn_crit?: boolean
      /** @example false */
      warn_unknown?: boolean
      /** @example true */
      crit_ok?: boolean
      /** @example true */
      crit_warn?: boolean
      /** @example true */
      crit_unknown?: boolean
      /** @example true */
      unknown_ok?: boolean
      /** @example true */
      unknown_warn?: boolean
      /** @example true */
      unknown_crit?: boolean
      /** @example false */
      any_ok?: boolean
      /** @example false */
      any_warn?: boolean
      /** @example true */
      any_crit?: boolean
      /** @example false */
      any_unknown?: boolean
    }
    CheckboxServiceEventTypeOutput: {
      /**
       * @description To enable or disable this field
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /** @description Select the service event types and transitions this rule should handle. Note: If you activate this option and do not also specify host event types then this rule will never hold for host notifications! Note: You can only match on event types created by the core */
      value?: components['schemas']['ServiceEventTypeOutput']
    }
    FromToNotificationNumbersOutput: {
      /**
       * @description Let through notifications counting from this number. The first notification always has the number 1
       * @example 1
       */
      beginning_from?: number
      /**
       * @description Let through notifications counting upto this number
       * @example 999999
       */
      up_to?: number
    }
    CheckboxRestrictNotificationNumbersOutput: {
      /**
       * @description To enable or disable this field
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      value?: components['schemas']['FromToNotificationNumbersOutput']
    }
    ThrottlePeriodicNotificationsOutput: {
      /**
       * @description Beginning notification number
       * @example 10
       */
      beginning_from?: number
      /**
       * @description The rate then you will receive the notification 1 through 10 and then 15, 20, 25... and so on
       * @example 5
       */
      send_every_nth_notification?: number
    }
    CheckboxThrottlePeriodicNotifcationsOuput: {
      /**
       * @description To enable or disable this field
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      value?: components['schemas']['ThrottlePeriodicNotificationsOutput']
    }
    SysLogToFromPrioritiesOutput: {
      /**
       * @example warning
       * @enum {string}
       */
      from_priority?: 'emerg' | 'alert' | 'crit' | 'err' | 'warning' | 'notice' | 'info' | 'debug'
      /**
       * @example warning
       * @enum {string}
       */
      to_priority?: 'emerg' | 'alert' | 'crit' | 'err' | 'warning' | 'notice' | 'info' | 'debug'
    }
    CheckboxWithSysLogPriorityOutput: {
      /**
       * @description To enable or disable this field
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      value?: components['schemas']['SysLogToFromPrioritiesOutput']
    }
    EventConsoleAlertAttrsResponse: {
      match_rule_ids?: components['schemas']['CheckboxWithListOfStrOutput']
      match_syslog_priority?: components['schemas']['CheckboxWithSysLogPriorityOutput']
      match_syslog_facility?: components['schemas']['CheckboxWithStrValueOutput']
      match_event_comment?: components['schemas']['CheckboxWithStrValueOutput']
    }
    EventConsoleAlertsResponse: {
      /**
       * @description To enable or disable this field
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      /**
       * @example match_only_event_console_events
       * @enum {string}
       */
      match_type?: 'match_only_event_console_alerts' | 'do_not_match_event_console_alerts'
      values?: components['schemas']['EventConsoleAlertAttrsResponse']
    }
    MatchEventConsoleAlertsResponse: {
      /**
       * @description To enable or disable this field
       * @example enabled
       * @enum {string}
       */
      state?: 'enabled' | 'disabled'
      value?: components['schemas']['EventConsoleAlertsResponse']
    }
    ConditionsAttributes: {
      match_sites?: components['schemas']['CheckboxWithListOfStrOutput']
      match_folder?: components['schemas']['CheckboxWithFolderStrOutput']
      match_host_tags?: components['schemas']['CheckboxMatchHostTagsOutput']
      match_host_labels?: components['schemas']['CheckboxWithListOfLabelsOutput']
      match_host_groups?: components['schemas']['CheckboxWithListOfStrOutput']
      match_hosts?: components['schemas']['CheckboxWithListOfStrOutput']
      match_exclude_hosts?: components['schemas']['CheckboxWithListOfStrOutput']
      match_service_labels?: components['schemas']['CheckboxWithListOfLabelsOutput']
      match_service_groups?: components['schemas']['CheckboxWithListOfStrOutput']
      match_exclude_service_groups?: components['schemas']['CheckboxWithListOfStrOutput']
      match_service_groups_regex?: components['schemas']['CheckboxWithListOfServiceGroupsRegexOutput']
      match_exclude_service_groups_regex?: components['schemas']['CheckboxWithListOfServiceGroupsRegexOutput']
      match_services?: components['schemas']['CheckboxWithListOfStrOutput']
      match_exclude_services?: components['schemas']['CheckboxWithListOfStrOutput']
      match_check_types?: components['schemas']['CheckboxWithListOfStrOutput']
      match_plugin_output?: components['schemas']['CheckboxWithStrValueOutput']
      match_contact_groups?: components['schemas']['CheckboxWithListOfStrOutput']
      match_service_levels?: components['schemas']['CheckboxWithFromToServiceLevelsOutput']
      match_only_during_time_period?: components['schemas']['CheckboxWithStrValueOutput']
      match_host_event_type?: components['schemas']['CheckboxHostEventTypeOutput']
      match_service_event_type?: components['schemas']['CheckboxServiceEventTypeOutput']
      restrict_to_notification_numbers?: components['schemas']['CheckboxRestrictNotificationNumbersOutput']
      throttle_periodic_notifications?: components['schemas']['CheckboxThrottlePeriodicNotifcationsOuput']
      match_notification_comment?: components['schemas']['CheckboxWithStrValueOutput']
      event_console_alerts?: components['schemas']['MatchEventConsoleAlertsResponse']
    }
    NotificationRuleAttributes: {
      rule_properties?: components['schemas']['RulePropertiesAttributes']
      notification_method?: components['schemas']['NotificationPlugin']
      contact_selection?: components['schemas']['ContactSelectionAttributes']
      conditions?: components['schemas']['ConditionsAttributes']
    }
    NotificationRuleConfig: {
      rule_config?: components['schemas']['NotificationRuleAttributes']
    }
    NotificationRuleResponse: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The domain type of the object.
       * @default rule_notifications
       */
      domainType: unknown
      /** @description The unique identifier for this domain-object type. */
      id?: string
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description The container for external resources, like linked foreign objects or actions. */
      members?: {
        [key: string]: unknown
      }
      /**
       * @description The configuration attributes of a notification rule.
       * @example {
       *       "rule_config": {
       *         "rule_properties": {
       *           "description": "A description or title of this rule.",
       *           "comment": "A example comment.",
       *           "documentation_url": "http://link/to/documentation",
       *           "do_not_apply_this_rule": {
       *             "state": "disabled"
       *           },
       *           "allow_users_to_deactivate": {
       *             "state": "enabled"
       *           }
       *         },
       *         "notification_method": {
       *           "notify_plugin": {
       *             "option": "create_notification_with_the_following_parameters",
       *             "plugin_params": {
       *               "plugin_name": "mail",
       *               "from_details": {
       *                 "state": "disabled"
       *               },
       *               "reply_to": {
       *                 "state": "disabled"
       *               },
       *               "subject_for_host_notifications": {
       *                 "state": "disabled"
       *               },
       *               "subject_for_service_notifications": {
       *                 "state": "disabled"
       *               },
       *               "info_to_be_displayed_in_the_email_body": {
       *                 "state": "disabled"
       *               },
       *               "insert_html_section_between_body_and_table": {
       *                 "state": "disabled"
       *               },
       *               "url_prefix_for_links_to_checkmk": {
       *                 "state": "disabled"
       *               },
       *               "sort_order_for_bulk_notifications": {
       *                 "state": "disabled"
       *               },
       *               "send_separate_notification_to_every_recipient": {
       *                 "state": "disabled"
       *               },
       *               "enable_sync_smtp": {
       *                 "state": "disabled"
       *               },
       *               "display_graphs_among_each_other": {
       *                 "state": "disabled"
       *               },
       *               "graphs_per_notification": {
       *                 "state": "disabled"
       *               },
       *               "bulk_notifications_with_graphs": {
       *                 "state": "disabled"
       *               }
       *             }
       *           },
       *           "notification_bulking": {
       *             "state": "disabled"
       *           }
       *         },
       *         "contact_selection": {
       *           "all_contacts_of_the_notified_object": {
       *             "state": "disabled"
       *           },
       *           "all_users": {
       *             "state": "disabled"
       *           },
       *           "all_users_with_an_email_address": {
       *             "state": "disabled"
       *           },
       *           "the_following_users": {
       *             "state": "disabled"
       *           },
       *           "members_of_contact_groups": {
       *             "state": "disabled"
       *           },
       *           "explicit_email_addresses": {
       *             "state": "disabled"
       *           },
       *           "restrict_by_custom_macros": {
       *             "state": "disabled"
       *           },
       *           "restrict_by_contact_groups": {
       *             "state": "disabled"
       *           }
       *         },
       *         "conditions": {
       *           "match_sites": {
       *             "state": "disabled"
       *           },
       *           "match_folder": {
       *             "state": "disabled"
       *           },
       *           "match_host_tags": {
       *             "state": "disabled"
       *           },
       *           "match_host_labels": {
       *             "state": "disabled"
       *           },
       *           "match_host_groups": {
       *             "state": "disabled"
       *           },
       *           "match_hosts": {
       *             "state": "disabled"
       *           },
       *           "match_exclude_hosts": {
       *             "state": "disabled"
       *           },
       *           "match_service_labels": {
       *             "state": "disabled"
       *           },
       *           "match_service_groups": {
       *             "state": "disabled"
       *           },
       *           "match_exclude_service_groups": {
       *             "state": "disabled"
       *           },
       *           "match_service_groups_regex": {
       *             "state": "disabled"
       *           },
       *           "match_exclude_service_groups_regex": {
       *             "state": "disabled"
       *           },
       *           "match_services": {
       *             "state": "disabled"
       *           },
       *           "match_exclude_services": {
       *             "state": "disabled"
       *           },
       *           "match_check_types": {
       *             "state": "disabled"
       *           },
       *           "match_plugin_output": {
       *             "state": "disabled"
       *           },
       *           "match_contact_groups": {
       *             "state": "disabled"
       *           },
       *           "match_service_levels": {
       *             "state": "disabled"
       *           },
       *           "match_only_during_time_period": {
       *             "state": "disabled"
       *           },
       *           "match_host_event_type": {
       *             "state": "disabled"
       *           },
       *           "match_service_event_type": {
       *             "state": "disabled"
       *           },
       *           "restrict_to_notification_numbers": {
       *             "state": "disabled"
       *           },
       *           "throttle_periodic_notifications": {
       *             "state": "disabled"
       *           },
       *           "match_notification_comment": {
       *             "state": "disabled"
       *           },
       *           "event_console_alerts": {
       *             "state": "disabled"
       *           }
       *         }
       *       }
       *     }
       */
      extensions?: components['schemas']['NotificationRuleConfig']
    }
    NotificationRuleResponseCollection: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The name of this collection.
       * @default all
       */
      id: string
      /**
       * @description The domain type of the objects in the collection.
       * @default rule_notifications
       */
      domainType: unknown
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /**
       * @description A list of notification rule objects.
       * @example [
       *       {
       *         "links": [],
       *         "domainType": "rule_notifications",
       *         "id": "1",
       *         "title": "Rule Description",
       *         "members": {},
       *         "extensions": {
       *           "rule_config": {
       *             "rule_properties": {
       *               "description": "A description or title of this rule.",
       *               "comment": "A example comment.",
       *               "documentation_url": "http://link/to/documentation",
       *               "do_not_apply_this_rule": {
       *                 "state": "disabled"
       *               },
       *               "allow_users_to_deactivate": {
       *                 "state": "enabled"
       *               }
       *             },
       *             "notification_method": {
       *               "notify_plugin": {
       *                 "option": "create_notification_with_the_following_parameters",
       *                 "plugin_params": {
       *                   "plugin_name": "mail",
       *                   "from_details": {
       *                     "state": "disabled"
       *                   },
       *                   "reply_to": {
       *                     "state": "disabled"
       *                   },
       *                   "subject_for_host_notifications": {
       *                     "state": "disabled"
       *                   },
       *                   "subject_for_service_notifications": {
       *                     "state": "disabled"
       *                   },
       *                   "info_to_be_displayed_in_the_email_body": {
       *                     "state": "disabled"
       *                   },
       *                   "insert_html_section_between_body_and_table": {
       *                     "state": "disabled"
       *                   },
       *                   "url_prefix_for_links_to_checkmk": {
       *                     "state": "disabled"
       *                   },
       *                   "sort_order_for_bulk_notifications": {
       *                     "state": "disabled"
       *                   },
       *                   "send_separate_notification_to_every_recipient": {
       *                     "state": "disabled"
       *                   },
       *                   "enable_sync_smtp": {
       *                     "state": "disabled"
       *                   },
       *                   "display_graphs_among_each_other": {
       *                     "state": "disabled"
       *                   },
       *                   "graphs_per_notification": {
       *                     "state": "disabled"
       *                   },
       *                   "bulk_notifications_with_graphs": {
       *                     "state": "disabled"
       *                   }
       *                 }
       *               },
       *               "notification_bulking": {
       *                 "state": "disabled"
       *               }
       *             },
       *             "contact_selection": {
       *               "all_contacts_of_the_notified_object": {
       *                 "state": "disabled"
       *               },
       *               "all_users": {
       *                 "state": "disabled"
       *               },
       *               "all_users_with_an_email_address": {
       *                 "state": "disabled"
       *               },
       *               "the_following_users": {
       *                 "state": "disabled"
       *               },
       *               "members_of_contact_groups": {
       *                 "state": "disabled"
       *               },
       *               "explicit_email_addresses": {
       *                 "state": "disabled"
       *               },
       *               "restrict_by_custom_macros": {
       *                 "state": "disabled"
       *               },
       *               "restrict_by_contact_groups": {
       *                 "state": "disabled"
       *               }
       *             },
       *             "conditions": {
       *               "match_sites": {
       *                 "state": "disabled"
       *               },
       *               "match_folder": {
       *                 "state": "disabled"
       *               },
       *               "match_host_tags": {
       *                 "state": "disabled"
       *               },
       *               "match_host_labels": {
       *                 "state": "disabled"
       *               },
       *               "match_host_groups": {
       *                 "state": "disabled"
       *               },
       *               "match_hosts": {
       *                 "state": "disabled"
       *               },
       *               "match_exclude_hosts": {
       *                 "state": "disabled"
       *               },
       *               "match_service_labels": {
       *                 "state": "disabled"
       *               },
       *               "match_service_groups": {
       *                 "state": "disabled"
       *               },
       *               "match_exclude_service_groups": {
       *                 "state": "disabled"
       *               },
       *               "match_service_groups_regex": {
       *                 "state": "disabled"
       *               },
       *               "match_exclude_service_groups_regex": {
       *                 "state": "disabled"
       *               },
       *               "match_services": {
       *                 "state": "disabled"
       *               },
       *               "match_exclude_services": {
       *                 "state": "disabled"
       *               },
       *               "match_check_types": {
       *                 "state": "disabled"
       *               },
       *               "match_plugin_output": {
       *                 "state": "disabled"
       *               },
       *               "match_contact_groups": {
       *                 "state": "disabled"
       *               },
       *               "match_service_levels": {
       *                 "state": "disabled"
       *               },
       *               "match_only_during_time_period": {
       *                 "state": "disabled"
       *               },
       *               "match_host_event_type": {
       *                 "state": "disabled"
       *               },
       *               "match_service_event_type": {
       *                 "state": "disabled"
       *               },
       *               "restrict_to_notification_numbers": {
       *                 "state": "disabled"
       *               },
       *               "throttle_periodic_notifications": {
       *                 "state": "disabled"
       *               },
       *               "match_notification_comment": {
       *                 "state": "disabled"
       *               },
       *               "event_console_alerts": {
       *                 "state": "disabled"
       *               }
       *             }
       *           }
       *         }
       *       }
       *     ]
       */
      value?: components['schemas']['NotificationRuleResponse'][]
      /** @description Additional attributes alongside the collection. */
      extensions?: {
        [key: string]: unknown
      }
    }
    Checkbox: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'disabled'
    }
    RuleProperties: {
      /**
       * @description A description or title of this rule.
       * @example Notify all contacts of a host/service via HTML email
       */
      description: string
      /**
       * @description An optional comment that may be used to explain the purpose of this object.
       * @example An example comment
       */
      comment: string
      /**
       * @description An optional URL pointing to documentation or any other page. This will be displayed as an icon and open a new page when clicked.
       * @example http://link/to/documentation
       */
      documentation_url: string
      /**
       * @description Disabled rules are kept in the configuration but are not applied.
       * @example {
       *       "state": "enabled"
       *     }
       */
      do_not_apply_this_rule: components['schemas']['Checkbox']
      /**
       * @description If you set this option then users are allowed to deactivate notifications that are created by this rule.
       * @example {
       *       "state": "enabled"
       *     }
       */
      allow_users_to_deactivate: components['schemas']['Checkbox']
    }
    PluginNameBuiltInOrCustom: {
      /**
       * @description The plug-in name.
       * @example mail
       */
      plugin_name: string
    }
    PluginWithoutParams: {
      /**
       * @description Cancel previous notifications (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      option: 'cancel_previous_notifications'
      plugin_params: components['schemas']['PluginNameBuiltInOrCustom']
    }
    EmailAndDisplayName: {
      /** @example mail@example.com */
      address?: string
      /** @example  */
      display_name?: string
    }
    FromEmailAndNameCheckbox: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /** @description The email address and visible name used in the From header of notifications messages. If no email address is specified the default address is OMD_SITE@FQDN is used. If the environment variable OMD_SITE is not set it defaults to checkmk */
      value?: components['schemas']['EmailAndDisplayName']
    }
    FromDetailsOneOf:
      | components['schemas']['Checkbox']
      | components['schemas']['FromEmailAndNameCheckbox']
    ToEmailAndNameCheckbox: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /** @description The email address and visible name used in the Reply-To header of notifications messages */
      value?: components['schemas']['EmailAndDisplayName']
    }
    ReplyToOneOf:
      | components['schemas']['Checkbox']
      | components['schemas']['ToEmailAndNameCheckbox']
    SubjectForHostNotificationsCheckbox: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /**
       * @description Here you are allowed to use all macros that are defined in the notification context.
       * @example Check_MK: $HOSTNAME$ - $EVENT_TXT$
       */
      value?: string
    }
    SubjectHostOneOf:
      | components['schemas']['Checkbox']
      | components['schemas']['SubjectForHostNotificationsCheckbox']
    SubjectForServiceNotificationsCheckbox: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /**
       * @description Here you are allowed to use all macros that are defined in the notification context.
       * @example Check_MK: $HOSTNAME$/$SERVICEDESC$ $EVENT_TXT$
       */
      value?: string
    }
    SubjectServiceOneOf:
      | components['schemas']['Checkbox']
      | components['schemas']['SubjectForServiceNotificationsCheckbox']
    CheckboxSortOrderValue: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /**
       * @description With this option you can specify, whether the oldest (default) or the newest notification should get shown at the top of the notification mail
       * @example oldest_first
       * @enum {string}
       */
      value: 'oldest_first' | 'newest_first'
    }
    SortOrderOneOf:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckboxSortOrderValue']
    CheckboxWithStrValue: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      value: string
    }
    StrValueOneOf: components['schemas']['Checkbox'] | components['schemas']['CheckboxWithStrValue']
    AsciiMailPluginCreate: {
      /**
       * @description The plug-in name. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      plugin_name: 'asciimail'
      from_details: components['schemas']['FromDetailsOneOf']
      reply_to: components['schemas']['ReplyToOneOf']
      subject_for_host_notifications: components['schemas']['SubjectHostOneOf']
      subject_for_service_notifications: components['schemas']['SubjectServiceOneOf']
      send_separate_notification_to_every_recipient: components['schemas']['Checkbox']
      sort_order_for_bulk_notifications: components['schemas']['SortOrderOneOf']
      body_head_for_both_host_and_service_notifications: components['schemas']['StrValueOneOf']
      body_tail_for_host_notifications: components['schemas']['StrValueOneOf']
      body_tail_for_service_notifications: components['schemas']['StrValueOneOf']
    }
    CheckboxWithListOfEmailInfoStrs: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /**
       * @description Information to be displayed in the email body.
       * @example [
       *       "abstime",
       *       "graph"
       *     ]
       */
      value: (
        | 'omdsite'
        | 'hosttags'
        | 'address'
        | 'abstime'
        | 'reltime'
        | 'longoutput'
        | 'ack_author'
        | 'ack_comment'
        | 'notification_author'
        | 'notification_comment'
        | 'perfdata'
        | 'graph'
        | 'notesurl'
        | 'context'
      )[]
    }
    EmailInfoOneOf:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckboxWithListOfEmailInfoStrs']
    HtmlSectionBetweenBodyAndTableCheckbox: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /**
       * @description Insert HTML section between body and table
       * @example <HTMLTAG>CONTENT</HTMLTAG>
       */
      value?: string
    }
    InsertHtmlOneOf:
      | components['schemas']['Checkbox']
      | components['schemas']['HtmlSectionBetweenBodyAndTableCheckbox']
    CheckMKURLPrefixAuto: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      option: 'automatic'
      /**
       * @example http
       * @enum {string}
       */
      schema: 'http' | 'https'
    }
    CheckMKURLPrefixManual: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      option: 'manual'
      /** @example http://example_url_prefix */
      url: string
    }
    ManualOrAutomaticSelector:
      | components['schemas']['CheckMKURLPrefixAuto']
      | components['schemas']['CheckMKURLPrefixManual']
    CheckMKURLPrefixValue: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /** @description If you use Automatic HTTP/s, the URL prefix for host and service links within the notification is filled automatically. If you specify an URL prefix here, then several parts of the notification are armed with hyperlinks to your Check_MK GUI. In both cases, the recipient of the notification can directly visit the host or service in question in Check_MK. Specify an absolute URL including the .../check_mk/ */
      value?: components['schemas']['ManualOrAutomaticSelector']
    }
    UrlPrefixOneOf:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckMKURLPrefixValue']
    Authentication: {
      /**
       * @description The authentication method is fixed at 'plaintext' for now.
       * @default plaintext
       * @example plaintext
       * @enum {string}
       */
      method: 'plaintext'
      /**
       * @description The username for the SMTP connection.
       * @default
       * @example user_1
       */
      user: string
      /**
       * @description The password for the SMTP connection.
       * @default
       * @example password
       */
      password: string
    }
    AuthenticationValue: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      value: components['schemas']['Authentication']
    }
    AuthOneOf: components['schemas']['Checkbox'] | components['schemas']['AuthenticationValue']
    EnableSynchronousDeliveryViaSMTP: {
      auth?: components['schemas']['AuthOneOf']
      /**
       * @description The encryption type for the SMTP connection.
       * @example ssl_tls
       * @enum {string}
       */
      encryption?: 'ssl_tls' | 'starttls'
      /** @example 25 */
      port?: number
      /** @default [] */
      smarthosts: string[]
    }
    EnableSynchronousDeliveryViaSMTPValue: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      value?: components['schemas']['EnableSynchronousDeliveryViaSMTP']
    }
    EnableSyncOneOf:
      | components['schemas']['Checkbox']
      | components['schemas']['EnableSynchronousDeliveryViaSMTPValue']
    GraphsPerNotification: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /**
       * @description Sets a limit for the number of graphs that are displayed in a notification
       * @example 5
       */
      value: number
    }
    GraphsPerNotificationOneOf:
      | components['schemas']['Checkbox']
      | components['schemas']['GraphsPerNotification']
    BulkNotificationsWithGraphs: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /**
       * @description Sets a limit for the number of notifications in a bulk for which graphs are displayed. If you do not use bulk notifications this option is ignored. Note that each graph increases the size of the mail and takes time to renderon the monitoring server. Therefore, large bulks may exceed the maximum size for attachements or the plug-in may run into a timeout so that a failed notification is produced
       * @example 5
       */
      value: number
    }
    BulkNotificationsOneOf:
      | components['schemas']['Checkbox']
      | components['schemas']['BulkNotificationsWithGraphs']
    HTMLMailPluginCreate: {
      /**
       * @description The plug-in name. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      plugin_name: 'mail'
      from_details: components['schemas']['FromDetailsOneOf']
      reply_to: components['schemas']['ReplyToOneOf']
      subject_for_host_notifications: components['schemas']['SubjectHostOneOf']
      subject_for_service_notifications: components['schemas']['SubjectServiceOneOf']
      send_separate_notification_to_every_recipient: components['schemas']['Checkbox']
      sort_order_for_bulk_notifications: components['schemas']['SortOrderOneOf']
      info_to_be_displayed_in_the_email_body: components['schemas']['EmailInfoOneOf']
      insert_html_section_between_body_and_table: components['schemas']['InsertHtmlOneOf']
      url_prefix_for_links_to_checkmk: components['schemas']['UrlPrefixOneOf']
      display_graphs_among_each_other: components['schemas']['Checkbox']
      enable_sync_smtp: components['schemas']['EnableSyncOneOf']
      graphs_per_notification: components['schemas']['GraphsPerNotificationOneOf']
      bulk_notifications_with_graphs: components['schemas']['BulkNotificationsOneOf']
    }
    CiscoExplicitWebhookUrl: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      option: 'explicit'
      /**
       * Format: url
       * @example http://example_webhook_url.com
       */
      url: string
    }
    CiscoPasswordStore: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      option: 'store'
      /**
       * @description A password store ID
       * @example stored_password_1
       */
      store_id: string
    }
    CiscoUrlOrStoreSelector:
      | components['schemas']['CiscoExplicitWebhookUrl']
      | components['schemas']['CiscoPasswordStore']
    HttpProxy: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      option: 'no_proxy' | 'environment'
    }
    HttpProxyUrl: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      option: 'url'
      /** @example http://example_proxy */
      url: string
    }
    HttpProxyGlobal: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      option: 'global'
      /**
       * @description A global http proxy
       * @example proxy_id_1
       */
      global_proxy_id: string
    }
    HttpProxyOptions:
      | components['schemas']['HttpProxy']
      | components['schemas']['HttpProxy']
      | components['schemas']['HttpProxyUrl']
      | components['schemas']['HttpProxyGlobal']
    HttpProxyValue: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /** @description Use the proxy settings from the environment variables. The variables NO_PROXY, HTTP_PROXY and HTTPS_PROXY are taken into account during execution. Have a look at the python requests module documentation for further information. Note that these variables must be defined as a site-user in ~/etc/environment and that this might affect other notification methods which also use the requests module */
      value?: components['schemas']['HttpProxyOptions']
    }
    HttpProxyOneOf: components['schemas']['Checkbox'] | components['schemas']['HttpProxyValue']
    CiscoWebexPluginCreate: {
      /**
       * @description The plug-in name. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      plugin_name: 'cisco_webex_teams'
      /** @description Ignore unverified HTTPS request warnings. Use with caution. */
      disable_ssl_cert_verification: components['schemas']['Checkbox']
      webhook_url?: components['schemas']['CiscoUrlOrStoreSelector']
      url_prefix_for_links_to_checkmk: components['schemas']['UrlPrefixOneOf']
      /** @description Use the proxy settings from the environment variables. The variables NO_PROXY, HTTP_PROXY and HTTPS_PROXY are taken into account during execution. */
      http_proxy: components['schemas']['HttpProxyOneOf']
    }
    CheckboxSysLogFacilityToUseValue: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /**
       * @example
       * @enum {string}
       */
      value?:
        | 'kern'
        | 'user'
        | 'mail'
        | 'daemon'
        | 'auth'
        | 'syslog'
        | 'lpr'
        | 'news'
        | 'uucp'
        | 'cron'
        | 'authpriv'
        | 'ftp'
        | 'ntp'
        | 'logaudit'
        | 'logalert'
        | 'clock'
        | 'local0'
        | 'local1'
        | 'local2'
        | 'local3'
        | 'local4'
        | 'local5'
        | 'local6'
        | 'local7'
        | 'logfile'
        | 'snmptrap'
    }
    SysLogFacilityOneOf:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckboxSysLogFacilityToUseValue']
    CheckBoxIPAddressValue: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /**
       * @description A valid IP address
       * @example 127.0.0.1
       */
      value: string
    }
    IPAddressOneOf:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckBoxIPAddressValue']
    MkEventDPluginCreate: {
      /**
       * @description The plug-in name. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      plugin_name: 'mkeventd'
      syslog_facility_to_use: components['schemas']['SysLogFacilityOneOf']
      ip_address_of_remote_event_console: components['schemas']['IPAddressOneOf']
    }
    IlertAPIKey: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      option: 'explicit'
      /** @example example_api_key */
      key: string
    }
    IlertPasswordStoreID: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      option: 'store'
      /**
       * @description A password store ID
       * @example stored_password_1
       */
      store_id: string
    }
    IlertKeyOrStoreSelector:
      | components['schemas']['IlertAPIKey']
      | components['schemas']['IlertPasswordStoreID']
    IlertPluginCreate: {
      /**
       * @description The plug-in name. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      plugin_name: 'ilert'
      /**
       * @description HIGH - with escalation, LOW - without escalation
       * @example HIGH
       * @enum {string}
       */
      notification_priority: 'HIGH' | 'LOW'
      /**
       * @description A custom summary for host alerts
       * @example $NOTIFICATIONTYPE$ Host Alert: $HOSTNAME$ is $HOSTSTATE$ - $HOSTOUTPUT$
       */
      custom_summary_for_host_alerts: string
      /**
       * @description A custom summary for service alerts
       * @example $NOTIFICATIONTYPE$ Service Alert: $HOSTALIAS$/$SERVICEDESC$ is $SERVICESTATE$ - $SERVICEOUTPUT$
       */
      custom_summary_for_service_alerts: string
      /** @description Ignore unverified HTTPS request warnings. Use with caution. */
      disable_ssl_cert_verification: components['schemas']['Checkbox']
      api_key: components['schemas']['IlertKeyOrStoreSelector']
      url_prefix_for_links_to_checkmk: components['schemas']['UrlPrefixOneOf']
      /** @description Use the proxy settings from the environment variables. The variables NO_PROXY, HTTP_PROXY and HTTPS_PROXY are taken into account during execution. */
      http_proxy: components['schemas']['HttpProxyOneOf']
    }
    BasicAuthStorePassword: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      option: 'password_store_id'
      /**
       * @description Your username
       * @example username_example
       */
      username: string
      /**
       * @description A password store ID
       * @example stored_password_1
       */
      store_id: string
    }
    BasicAuthExplicit: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      option: 'explicit_password'
      /**
       * @description Your username
       * @example username_example
       */
      username: string
      /**
       * @description Your password
       * @example password_example
       */
      password: string
    }
    ExplicitToken: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      option: 'explicit_token'
      /**
       * @description Your personal access token
       * @example token_example
       */
      token: string
    }
    AuthStoreToken: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      option: 'token_store_id'
      /**
       * @description A password store ID
       * @example stored_password_1
       */
      store_id: string
    }
    AuthSelector:
      | components['schemas']['BasicAuthStorePassword']
      | components['schemas']['BasicAuthExplicit']
      | components['schemas']['ExplicitToken']
      | components['schemas']['AuthStoreToken']
    JiraPluginCreate: {
      /**
       * @description The plug-in name. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      plugin_name: 'jira_issues'
      /**
       * @description Configure the Jira URL here
       * @example http://jira_url_example.com
       */
      jira_url?: string
      /** @description Ignore unverified HTTPS request warnings. Use with caution. */
      disable_ssl_cert_verification: components['schemas']['Checkbox']
      /** @description The authentication credentials for the Jira connection */
      auth: components['schemas']['AuthSelector']
      /**
       * @description The numerical Jira project ID. If not set, it will be retrieved from a custom user attribute named jiraproject. If that is not set, the notification will fail
       * @example
       */
      project_id: string
      /**
       * @description The numerical Jira issue type ID. If not set, it will be retrieved from a custom user attribute named jiraissuetype. If that is not set, the notification will fail
       * @example
       */
      issue_type_id: string
      /**
       * @description The numerical Jira custom field ID for host problems
       * @example
       */
      host_custom_id: string
      /**
       * @description The numerical Jira custom field ID for service problems
       * @example
       */
      service_custom_id: string
      /**
       * @description Configure the base URL for the monitoring web GUI here. Include the site name. Used for linking to Checkmk out of Jira
       * @example
       */
      monitoring_url: string
      /** @description The numerical ID of the Jira custom field for sites. Please use this option if you have multiple sites in a distributed setup which send their notifications to the same Jira instance */
      site_custom_id: components['schemas']['StrValueOneOf']
      /** @description The numerical Jira priority ID. If not set, it will be retrieved from a custom user attribute named jirapriority. If that is not set, the standard priority will be used */
      priority_id: components['schemas']['StrValueOneOf']
      /** @description Here you are allowed to use all macros that are defined in the notification context */
      host_summary: components['schemas']['StrValueOneOf']
      /** @description Here you are allowed to use all macros that are defined in the notification context */
      service_summary: components['schemas']['StrValueOneOf']
      /** @description Here you can set a custom label for new issues. If not set, 'monitoring' will be used */
      label: components['schemas']['StrValueOneOf']
      /** @description Here you can set a limit for the number of graphs that are displayed in a notification. If not set, 0 will be used */
      graphs_per_notification?: components['schemas']['GraphsPerNotificationOneOf']
      /** @description The numerical Jira resolution transition ID. 11 - 'To Do', 21 - 'In Progress', 31 - 'Done' */
      resolution_id: components['schemas']['StrValueOneOf']
      /** @description Here you can configure timeout settings. */
      optional_timeout: components['schemas']['StrValueOneOf']
    }
    OpsGenieExplicitKey: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      option: 'explicit'
      /** @example example_api_key */
      key: string
    }
    OpsGenieStoreID: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      option: 'store'
      /**
       * @description A password store ID
       * @example stored_password_1
       */
      store_id: string
    }
    OpsGenisStoreOrExplicitKeySelector:
      | components['schemas']['OpsGenieExplicitKey']
      | components['schemas']['OpsGenieStoreID']
    CheckboxOpsGeniePriorityValue: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /**
       * @example moderate
       * @enum {string}
       */
      value: 'critical' | 'high' | 'moderate' | 'low' | 'informational'
    }
    OpsGeniePriorityOneOf:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckboxOpsGeniePriorityValue']
    CheckboxWithListOfStr: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      value: string[]
    }
    ListOfStrOneOf:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckboxWithListOfStr']
    ListOfExtraProperties: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /** @default [
       *       "abstime",
       *       "address",
       *       "longoutput"
       *     ] */
      value: (
        | 'omd_site'
        | 'hosttags'
        | 'address'
        | 'abstime'
        | 'reltime'
        | 'longoutput'
        | 'ack_author'
        | 'ack_comment'
        | 'notification_author'
        | 'notification_comment'
        | 'perfdata'
        | 'notesurl'
        | 'context'
      )[]
    }
    ListOfExtraPropertiesOneOf:
      | components['schemas']['Checkbox']
      | components['schemas']['ListOfExtraProperties']
    OpsGeniePluginCreate: {
      /**
       * @description The plug-in name. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      plugin_name: 'opsgenie_issues'
      api_key: components['schemas']['OpsGenisStoreOrExplicitKeySelector']
      /** @description If you have an european account, please set the domain of your opsgenie. Specify an absolute URL like https://api.eu.opsgenie.com */
      domain: components['schemas']['StrValueOneOf']
      /** @description Ignore unverified HTTPS request warnings. Use with caution. */
      disable_ssl_cert_verification: components['schemas']['Checkbox']
      /** @description Use the proxy settings from the environment variables. The variables NO_PROXY, HTTP_PROXY and HTTPS_PROXY are taken into account during execution. */
      http_proxy: components['schemas']['HttpProxyOneOf']
      /** @description Sets the user of the alert. Display name of the request owner */
      owner: components['schemas']['StrValueOneOf']
      /** @description Source field of the alert. Default value is IP address of the incoming request */
      source: components['schemas']['StrValueOneOf']
      priority: components['schemas']['OpsGeniePriorityOneOf']
      /** @description Additional note that will be added while creating the alert */
      note_while_creating: components['schemas']['StrValueOneOf']
      /** @description Additional note that will be added while closing the alert */
      note_while_closing: components['schemas']['StrValueOneOf']
      /** @description Description field of host alert that is generally used to provide a detailed information about the alert */
      desc_for_host_alerts: components['schemas']['StrValueOneOf']
      /** @description Description field of service alert that is generally used to provide a detailed information about the alert */
      desc_for_service_alerts: components['schemas']['StrValueOneOf']
      message_for_host_alerts: components['schemas']['StrValueOneOf']
      message_for_service_alerts: components['schemas']['StrValueOneOf']
      /** @description Team names which will be responsible for the alert. If the API Key belongs to a team integration, this field will be overwritten with the owner team. You may paste a text from your clipboard which contains several parts separated by ';' characters into the last input field. The text will then be split by these separators and the single parts are added into dedicated input fields */
      responsible_teams: components['schemas']['ListOfStrOneOf']
      /** @description Custom actions that will be available for the alert. You may paste a text from your clipboard which contains several parts separated by ';' characters into the last input field. The text will then be split by these separators and the single parts are added into dedicated input fields */
      actions: components['schemas']['ListOfStrOneOf']
      /** @description Tags of the alert. You may paste a text from your clipboard which contains several parts separated by ';' characters into the last input field. The text will then be split by these separators and the single parts are added into dedicated input fields */
      tags: components['schemas']['ListOfStrOneOf']
      /** @description Is used to specify which domain the alert is related to */
      entity: components['schemas']['StrValueOneOf']
      /** @description A list of extra properties that will be included in the notification */
      extra_properties?: components['schemas']['ListOfExtraPropertiesOneOf']
    }
    PagerDutyExplicitKey: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      option: 'explicit'
      /** @example some_key_example */
      key: string
    }
    PagerDutyAPIKeyStoreID: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      option: 'store'
      /**
       * @description A password store ID
       * @example stored_password_1
       */
      store_id: string
    }
    PagerDutyStoreOrIntegrationKeySelector:
      | components['schemas']['PagerDutyExplicitKey']
      | components['schemas']['PagerDutyAPIKeyStoreID']
    PagerDutyPluginCreate: {
      /**
       * @description The plug-in name. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      plugin_name: 'pagerduty'
      integration_key: components['schemas']['PagerDutyStoreOrIntegrationKeySelector']
      /** @description Ignore unverified HTTPS request warnings. Use with caution. */
      disable_ssl_cert_verification: components['schemas']['Checkbox']
      url_prefix_for_links_to_checkmk: components['schemas']['UrlPrefixOneOf']
      /** @description Use the proxy settings from the environment variables. The variables NO_PROXY, HTTP_PROXY and HTTPS_PROXY are taken into account during execution. */
      http_proxy: components['schemas']['HttpProxyOneOf']
    }
    PushOverPriorityBase: {
      /**
       * @description The pushover priority level (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      level: 'lowest' | 'low' | 'normal' | 'high'
    }
    PushOverPriorityEmergency: {
      /**
       * @description The pushover priority level (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      level: 'emergency'
      /**
       * @description The retry interval in seconds
       * @example 60
       */
      retry: number
      /**
       * @description The expiration time in seconds
       * @example 3600
       */
      expire: number
      /**
       * @description The receipt of the message
       * @example The receipt can be used to periodically poll receipts API to get the status of the notification. See <a href="https://pushover.net/api#receipt" target="_blank">Pushover receipts and callbacks</a> for more information.
       */
      receipt: string
    }
    PushOverPrioritySelector:
      | components['schemas']['PushOverPriorityBase']
      | components['schemas']['PushOverPriorityBase']
      | components['schemas']['PushOverPriorityBase']
      | components['schemas']['PushOverPriorityBase']
      | components['schemas']['PushOverPriorityEmergency']
    PushOverPriority: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /**
       * @description The pushover priority level
       * @example normal
       */
      value: components['schemas']['PushOverPrioritySelector']
    }
    PushOverOneOf: components['schemas']['Checkbox'] | components['schemas']['PushOverPriority']
    Sounds: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /**
       * @description See https://pushover.net/api#sounds for more information and trying out available sounds.
       * @example none
       * @enum {string}
       */
      value:
        | 'none'
        | 'alien'
        | 'bike'
        | 'bugle'
        | 'cashregister'
        | 'classical'
        | 'climb'
        | 'cosmic'
        | 'echo'
        | 'falling'
        | 'gamelan'
        | 'incoming'
        | 'intermission'
        | 'magic'
        | 'mechanical'
        | 'persistent'
        | 'pianobar'
        | 'pushover'
        | 'siren'
        | 'spacealarm'
        | 'tugboat'
        | 'updown'
        | 'vibrate'
        | 'disabled'
    }
    SoundsOneOf: components['schemas']['Checkbox'] | components['schemas']['Sounds']
    PushOverPluginCreate: {
      /**
       * @description The plug-in name. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      plugin_name: 'pushover'
      /**
       * @description You need to provide a valid API key to be able to send push notifications using Pushover. Register and login to Pushover, thn create your Check_MK installation as application and obtain your API key
       * @example azGDORePK8gMaC0QOYAMyEEuzJnyUi
       */
      api_key: string
      /**
       * @description Configure the user or group to receive the notifications by providing the user or group key here. The key can be obtained from the Pushover website.
       * @example azGDORePK8gMaC0QOYAMyEEuzJnyUi
       */
      user_group_key: string
      url_prefix_for_links_to_checkmk: components['schemas']['UrlPrefixOneOf']
      priority: components['schemas']['PushOverOneOf']
      sound: components['schemas']['SoundsOneOf']
      /** @description Use the proxy settings from the environment variables. The variables NO_PROXY, HTTP_PROXY and HTTPS_PROXY are taken into account during execution. */
      http_proxy: components['schemas']['HttpProxyOneOf']
    }
    CheckBoxUseSiteIDPrefix: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /**
       * @example use_site_id
       * @enum {string}
       */
      value: 'use_site_id' | 'deactivated'
    }
    SiteIDPrefixOneOf:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckBoxUseSiteIDPrefix']
    CheckboxWithMgmtTypePriorityValue: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /** @enum {string} */
      value: 'low' | 'moderate' | 'high' | 'critical'
    }
    PriorityOneOf:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckboxWithMgmtTypePriorityValue']
    ManagementTypeCaseStates: {
      /**
       * @example new
       * @enum {string}
       */
      start_predefined?: 'none' | 'new' | 'closed' | 'resolved' | 'open' | 'awaiting_info'
      /** @example 1 */
      start_integer?: number
    }
    CheckboxWithManagementTypeStateCaseValues: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      value?: components['schemas']['ManagementTypeCaseStates']
    }
    StateRecoveryOneOf:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckboxWithManagementTypeStateCaseValues']
    CaseParams: {
      host_description?: components['schemas']['StrValueOneOf']
      service_description?: components['schemas']['StrValueOneOf']
      host_short_description?: components['schemas']['StrValueOneOf']
      service_short_description?: components['schemas']['StrValueOneOf']
      priority?: components['schemas']['PriorityOneOf']
      state_recovery?: components['schemas']['StateRecoveryOneOf']
    }
    MgmntTypeCaseParams: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      option: 'case'
      params?: components['schemas']['CaseParams']
    }
    CheckboxWithMgmtTypeUrgencyValue: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /** @enum {string} */
      value: 'low' | 'medium' | 'high'
    }
    TypeUrgencyOneOf:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckboxWithMgmtTypeUrgencyValue']
    ManagementTypeIncedentStates: {
      /**
       * @example hold
       * @enum {string}
       */
      start_predefined?: 'none' | 'new' | 'progress' | 'closed' | 'resolved' | 'hold' | 'canceled'
      /** @example 1 */
      start_integer?: number
      /**
       * @example resolved
       * @enum {string}
       */
      end_predefined?: 'none' | 'new' | 'progress' | 'closed' | 'resolved' | 'hold' | 'canceled'
      /** @example 0 */
      end_integer?: number
    }
    CheckboxWithManagementTypeStateIncedentValues: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      value?: components['schemas']['ManagementTypeIncedentStates']
    }
    TypeStateOneOf:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckboxWithManagementTypeStateIncedentValues']
    IncidentParams: {
      host_description?: components['schemas']['StrValueOneOf']
      service_description?: components['schemas']['StrValueOneOf']
      host_short_description?: components['schemas']['StrValueOneOf']
      service_short_description?: components['schemas']['StrValueOneOf']
      /**
       * @description Caller is the user on behalf of whom the incident is being reported within ServiceNow.
       * @example Alice
       */
      caller: string
      urgency?: components['schemas']['TypeUrgencyOneOf']
      impact?: components['schemas']['StrValueOneOf']
      state_acknowledgement?: components['schemas']['TypeStateOneOf']
      state_downtime?: components['schemas']['TypeStateOneOf']
      state_recovery?: components['schemas']['TypeStateOneOf']
    }
    MgmntTypeIncidentParams: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      option: 'incident'
      params?: components['schemas']['IncidentParams']
    }
    MgmntTypeSelector:
      | components['schemas']['MgmntTypeCaseParams']
      | components['schemas']['MgmntTypeIncidentParams']
    ServiceNowPluginCreate: {
      /**
       * @description The plug-in name. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      plugin_name: 'servicenow'
      /**
       * @description Configure your ServiceNow URL here
       * @example https://myservicenow.com
       */
      servicenow_url: string
      /** @description The authentication credentials for the ServiceNow connection */
      auth: components['schemas']['AuthSelector']
      /** @description Use the proxy settings from the environment variables. The variables NO_PROXY, HTTP_PROXY and HTTPS_PROXY are taken into account during execution. */
      http_proxy: components['schemas']['HttpProxyOneOf']
      use_site_id_prefix: components['schemas']['SiteIDPrefixOneOf']
      optional_timeout: components['schemas']['StrValueOneOf']
      management_type?: components['schemas']['MgmntTypeSelector']
    }
    SignL4TeamSecret: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      option: 'explicit'
      /** @example team_secret_example */
      secret: string
    }
    SignL4TeamSecretStoreID: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      option: 'store'
      /**
       * @description A password store ID
       * @example stored_password_1
       */
      store_id: string
    }
    SignL4ExplicitOrStoreSelector:
      | components['schemas']['SignL4TeamSecret']
      | components['schemas']['SignL4TeamSecretStoreID']
    Signl4PluginCreate: {
      /**
       * @description The plug-in name. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      plugin_name: 'signl4'
      team_secret: components['schemas']['SignL4ExplicitOrStoreSelector']
      url_prefix_for_links_to_checkmk: components['schemas']['UrlPrefixOneOf']
      /** @description Ignore unverified HTTPS request warnings. Use with caution. */
      disable_ssl_cert_verification: components['schemas']['Checkbox']
      /** @description Use the proxy settings from the environment variables. The variables NO_PROXY, HTTP_PROXY and HTTPS_PROXY are taken into account during execution. */
      http_proxy: components['schemas']['HttpProxyOneOf']
    }
    SlackWebhookURL: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      option: 'explicit'
      /**
       * Format: url
       * @description Configure your Slack or Mattermost Webhook URL here. Slack Webhooks must use HTTPS
       * @example https://example_webhook_url.com
       */
      url: string
    }
    SlackWebhookStore: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      option: 'store'
      /**
       * @description A password store ID
       * @example stored_password_1
       */
      store_id: string
    }
    SlackStoreOrExplicitURLSelector:
      | components['schemas']['SlackWebhookURL']
      | components['schemas']['SlackWebhookStore']
    SlackPluginCreate: {
      /**
       * @description The plug-in name. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      plugin_name: 'slack'
      webhook_url: components['schemas']['SlackStoreOrExplicitURLSelector']
      url_prefix_for_links_to_checkmk: components['schemas']['UrlPrefixOneOf']
      /** @description Ignore unverified HTTPS request warnings. Use with caution. */
      disable_ssl_cert_verification: components['schemas']['Checkbox']
      /** @description Use the proxy settings from the environment variables. The variables NO_PROXY, HTTP_PROXY and HTTPS_PROXY are taken into account during execution. */
      http_proxy: components['schemas']['HttpProxyOneOf']
    }
    SMSAPIExplicitPassword: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      option: 'explicit'
      /** @example https://example_webhook_url.com */
      password: string
    }
    SMSAPIPStoreID: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      option: 'store'
      /**
       * @description A password store ID
       * @example stored_password_1
       */
      store_id: string
    }
    SMSAPIPasswordSelector:
      | components['schemas']['SMSAPIExplicitPassword']
      | components['schemas']['SMSAPIPStoreID']
    SMSAPIPluginCreate: {
      /**
       * @description The plug-in name. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      plugin_name: 'sms_api'
      /**
       * @description Choose what modem is used. Currently supported is only Teltonika-TRB140.
       * @example trb140
       * @enum {string}
       */
      modem_type: 'trb140'
      /**
       * Format: url
       * @description Configure your modem URL here
       * @example https://mymodem.mydomain.example
       */
      modem_url: string
      /** @description Ignore unverified HTTPS request warnings. Use with caution. */
      disable_ssl_cert_verification: components['schemas']['Checkbox']
      /**
       * @description Configure the user name here
       * @example username_a
       */
      username: string
      /**
       * @description Here you can configure timeout settings
       * @example 10
       */
      timeout: string
      user_password: components['schemas']['SMSAPIPasswordSelector']
      /** @description Use the proxy settings from the environment variables. The variables NO_PROXY, HTTP_PROXY and HTTPS_PROXY are taken into account during execution. */
      http_proxy: components['schemas']['HttpProxyOneOf']
    }
    SMSPluginBase: {
      /**
       * @description The plug-in name. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      plugin_name: 'sms'
      /**
       * @description The given parameters are available in scripts as NOTIFY_PARAMETER_1, NOTIFY_PARAMETER_2, etc. You may paste a text from your clipboard which contains several parts separated by ';' characters into the last input field. The text will then be split by these separators and the single parts are added into dedicated input fields.
       * @example [
       *       "NOTIFY_PARAMETER_1",
       *       "NOTIFY_PARAMETER_1"
       *     ]
       */
      params: string[]
    }
    SpectrumPluginBase: {
      /**
       * @description The plug-in name. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      plugin_name: 'spectrum'
      /**
       * @description IP address of the Spectrum server receiving the SNMP trap
       * @example 127.0.0.1
       */
      destination_ip: string
      /**
       * @description SNMP community for the SNMP trap. The password entered here is stored in plain text within the monitoring site. This usually needed because the monitoring process needs to have access to the unencrypted password because it needs to submit it to authenticate with remote systems
       * @example
       */
      snmp_community: string
      /**
       * @description The base OID for the trap content
       * @example 1.3.6.1.4.1.1234
       */
      base_oid: string
    }
    SplunkURLExplicit: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      option: 'explicit'
      /**
       * Format: url
       * @description A valid splunk webhook URL
       * @example https://alert.victorops.com/integrations/example
       */
      url: string
    }
    SplunkStoreID: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      option: 'store'
      /**
       * @description A password store ID
       * @example stored_password_1
       */
      store_id: string
    }
    SplunkRESTEndpointSelector:
      | components['schemas']['SplunkURLExplicit']
      | components['schemas']['SplunkStoreID']
    VictoropsPluginCreate: {
      /**
       * @description The plug-in name. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      plugin_name: 'victorops'
      splunk_on_call_rest_endpoint: components['schemas']['SplunkRESTEndpointSelector']
      url_prefix_for_links_to_checkmk: components['schemas']['UrlPrefixOneOf']
      /** @description Ignore unverified HTTPS request warnings. Use with caution. */
      disable_ssl_cert_verification: components['schemas']['Checkbox']
      /** @description Use the proxy settings from the environment variables. The variables NO_PROXY, HTTP_PROXY and HTTPS_PROXY are taken into account during execution. */
      http_proxy: components['schemas']['HttpProxyOneOf']
    }
    MSTeamsExplicitWebhookUrl: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      option: 'explicit'
      /**
       * Format: url
       * @example http://example_webhook_url.com
       */
      url: string
    }
    MSTeamsURLResponse: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      option: 'store'
      /**
       * @description A password store ID
       * @example stored_password_1
       */
      store_id: string
      /** @example http://example_webhook_url.com */
      url?: string
    }
    MSTeamsUrlOrStoreSelector:
      | components['schemas']['MSTeamsExplicitWebhookUrl']
      | components['schemas']['MSTeamsURLResponse']
    MSTeamsPluginCreate: {
      /**
       * @description The plug-in name. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      plugin_name: 'msteams'
      /** @description Enable/disable if we show affected host groups in the created message */
      affected_host_groups: components['schemas']['Checkbox']
      /** @description Enable/disable the details for host notifications */
      host_details: components['schemas']['StrValueOneOf']
      /** @description Enable/disable the details for service notifications */
      service_details: components['schemas']['StrValueOneOf']
      /** @description Enable/disable the summary for host notifications */
      host_summary: components['schemas']['StrValueOneOf']
      /** @description Enable/disable the summary for service notifications */
      service_summary: components['schemas']['StrValueOneOf']
      /** @description Enable/disable the title for host notifications */
      host_title: components['schemas']['StrValueOneOf']
      /** @description Enable/disable the title for service notifications */
      service_title: components['schemas']['StrValueOneOf']
      /** @description Use the proxy settings from the environment variables. The variables NO_PROXY, HTTP_PROXY and HTTPS_PROXY are taken into account during execution. */
      http_proxy: components['schemas']['HttpProxyOneOf']
      url_prefix_for_links_to_checkmk: components['schemas']['UrlPrefixOneOf']
      webhook_url: components['schemas']['MSTeamsUrlOrStoreSelector']
    }
    PluginSelector:
      | components['schemas']['AsciiMailPluginCreate']
      | components['schemas']['HTMLMailPluginCreate']
      | components['schemas']['CiscoWebexPluginCreate']
      | components['schemas']['MkEventDPluginCreate']
      | components['schemas']['IlertPluginCreate']
      | components['schemas']['JiraPluginCreate']
      | components['schemas']['OpsGeniePluginCreate']
      | components['schemas']['PagerDutyPluginCreate']
      | components['schemas']['PushOverPluginCreate']
      | components['schemas']['ServiceNowPluginCreate']
      | components['schemas']['Signl4PluginCreate']
      | components['schemas']['SlackPluginCreate']
      | components['schemas']['SMSAPIPluginCreate']
      | components['schemas']['SMSPluginBase']
      | components['schemas']['SpectrumPluginBase']
      | components['schemas']['VictoropsPluginCreate']
      | components['schemas']['MSTeamsPluginCreate']
    PluginWithParams: {
      /**
       * @description Create notifications with parameters (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      option: 'create_notification_with_the_following_parameters'
      plugin_params: components['schemas']['PluginSelector']
    }
    CustomPlugin: {
      /**
       * @description The custom plug-in name
       * @example mail
       */
      plugin_name: string
    }
    CustomPluginWithParams: {
      /**
       * @description Create notifications with custom parameters (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      option: 'create_notification_with_custom_parameters'
      plugin_params: components['schemas']['CustomPlugin']
    }
    PluginOptionsSelector:
      | components['schemas']['PluginWithoutParams']
      | components['schemas']['PluginWithParams']
      | components['schemas']['CustomPluginWithParams']
    NotificationBulkingAlways: {
      subject_for_bulk_notifications: components['schemas']['StrValueOneOf']
      /**
       * @description At most that many notifications are kept back for bulking. A value of 1 essentially turns off notification bulking.
       * @example 1000
       */
      max_bulk_size: number
      notification_bulks_based_on: (
        | 'folder'
        | 'host'
        | 'service'
        | 'sl'
        | 'check_type'
        | 'state'
        | 'ec_contact'
        | 'ec_comment'
      )[]
      notification_bulks_based_on_custom_macros?: string[]
      /**
       * @description Notifications are kept back for bulking at most for this time (seconds)
       * @example 60
       */
      time_horizon: number
    }
    AlwaysBulk: {
      /**
       * @description Bulking can always happen or during a set time period (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      when_to_bulk: 'always'
      params: components['schemas']['NotificationBulkingAlways']
    }
    OutsideTimeperiodValue: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      value?: components['schemas']['NotificationBulkingAlways']
    }
    TimePeriodOneOf:
      | components['schemas']['Checkbox']
      | components['schemas']['OutsideTimeperiodValue']
    NotificationBulkingTimePeriod: {
      subject_for_bulk_notifications: components['schemas']['StrValueOneOf']
      /**
       * @description At most that many notifications are kept back for bulking. A value of 1 essentially turns off notification bulking.
       * @example 1000
       */
      max_bulk_size: number
      notification_bulks_based_on: (
        | 'folder'
        | 'host'
        | 'service'
        | 'sl'
        | 'check_type'
        | 'state'
        | 'ec_contact'
        | 'ec_comment'
      )[]
      notification_bulks_based_on_custom_macros?: string[]
      /** @example 24X7 */
      time_period: string
      bulk_outside_timeperiod: components['schemas']['TimePeriodOneOf']
    }
    TimePeriod: {
      /**
       * @description Bulking can always happen or during a set time period (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      when_to_bulk: 'timeperiod'
      params: components['schemas']['NotificationBulkingTimePeriod']
    }
    NotificationBulkingWhenToBulkSelector:
      | components['schemas']['AlwaysBulk']
      | components['schemas']['TimePeriod']
    NotificationBulkingValue: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      value?: components['schemas']['NotificationBulkingWhenToBulkSelector']
    }
    NotificationBulk:
      | components['schemas']['Checkbox']
      | components['schemas']['NotificationBulkingValue']
    RuleNotificationMethod: {
      notify_plugin: components['schemas']['PluginOptionsSelector']
      notification_bulking?: components['schemas']['NotificationBulk']
    }
    TheFollowingUsers:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckboxWithListOfStr']
    CheckboxWithListOfContactGroups: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      value: string[]
    }
    ListOfContactGroupsCheckbox:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckboxWithListOfContactGroups']
    CheckboxWithListOfEmailAddresses: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /**
       * @description You may paste a text from your clipboard which contains several parts separated by ';' characters into the last input field. The text will then be split by these separators and the single parts are added into dedicated input fields
       * @example [
       *       "email1@tribe.com",
       *       "email2@tribe.com"
       *     ]
       */
      value: string[]
    }
    ExplicitEmailAddressesCheckbox:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckboxWithListOfEmailAddresses']
    CustomMacro: {
      /**
       * @description The name of the macro
       * @example macro_1
       */
      macro_name: string
      /**
       * @description The text entered here is handled as a regular expression pattern
       * @example [A-Z]+
       */
      match_regex: string
    }
    MatchCustomMacros: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      value?: components['schemas']['CustomMacro'][]
    }
    CustomMacrosCheckbox:
      | components['schemas']['Checkbox']
      | components['schemas']['MatchCustomMacros']
    ContactSelection: {
      all_contacts_of_the_notified_object: components['schemas']['Checkbox']
      all_users: components['schemas']['Checkbox']
      all_users_with_an_email_address: components['schemas']['Checkbox']
      the_following_users: components['schemas']['TheFollowingUsers']
      members_of_contact_groups: components['schemas']['ListOfContactGroupsCheckbox']
      explicit_email_addresses: components['schemas']['ExplicitEmailAddressesCheckbox']
      restrict_by_contact_groups: components['schemas']['ListOfContactGroupsCheckbox']
      restrict_by_custom_macros: components['schemas']['CustomMacrosCheckbox']
    }
    CheckboxWithListOfSites: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /**
       * @description Match only hosts of the selected sites.
       * @example [
       *       "site_1",
       *       "site_2"
       *     ]
       */
      value: string[]
    }
    MatchSitesCheckbox:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckboxWithListOfSites']
    CheckboxWithFolderStr: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /** @description This condition makes the rule match only hosts that are managed via WATO and that are contained in this folder - either directly or in one of its subfolders.
       *
       *     Path delimiters can be either `~`, `/` or `\`. Please use the one most appropriate for your quoting/escaping needs. A good default choice is `~`. */
      value: string
    }
    MatchFolderCheckbox:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckboxWithFolderStr']
    AuxTag: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      tag_type: 'aux_tag'
      /**
       * @example is_set
       * @enum {string}
       */
      operator: 'is_set' | 'is_not_set'
      /**
       * @description Tag ids are available via the aux tag endpoint.
       * @example snmp
       */
      tag_id: string | null
    }
    TagGroupNoneOfOrOneof: {
      /**
       * @example aux_tag
       * @enum {string}
       */
      tag_type: 'tag_group'
      /**
       * @description Tag group ids are available via the host tag group endpoint.
       * @example agent
       */
      tag_group_id: string
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      operator: 'one_of' | 'none_of'
      /** @example [
       *       "ip-v4-only",
       *       "ip-v6-only"
       *     ] */
      tag_ids?: (string | null)[]
    }
    TagGroupIsNotOrIs: {
      /**
       * @example aux_tag
       * @enum {string}
       */
      tag_type: 'tag_group'
      /**
       * @description Tag group ids are available via the host tag group endpoint.
       * @example agent
       */
      tag_group_id: string
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      operator: 'is_not' | 'is'
      /**
       * @description Tag groups tag ids are available via the host tag group endpoint.
       * @example checkmk-agent
       */
      tag_id?: string | null
    }
    TagGroupSelector: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      tag_type: 'tag_group'
    } & (
      | components['schemas']['TagGroupNoneOfOrOneof']
      | components['schemas']['TagGroupNoneOfOrOneof']
      | components['schemas']['TagGroupIsNotOrIs']
      | components['schemas']['TagGroupIsNotOrIs']
    )
    TagTypeSelector: components['schemas']['AuxTag'] | components['schemas']['TagGroupSelector']
    CheckboxMatchHostTags: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /**
       * @description A list of tag groups or aux tags with conditions
       * @example [
       *       {
       *         "tag_type": "tag_group",
       *         "tag_group_id": "agent",
       *         "operator": "is",
       *         "tag_id": "checkmk-agent"
       *       },
       *       {
       *         "tag_type": "aux_tag",
       *         "operator": "is_set",
       *         "tag_id": "snmp"
       *       }
       *     ]
       */
      value: components['schemas']['TagTypeSelector'][]
    }
    MatchHostTagsCheckbox:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckboxMatchHostTags']
    CheckboxLabel: {
      /** @example cmk/os_family */
      key: string
      /** @example linux */
      value: string
    }
    CheckboxWithListOfLabels: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /** @description A list of key, value label pairs */
      value: components['schemas']['CheckboxLabel'][]
    }
    MatchLabelsCheckbox:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckboxWithListOfLabels']
    CheckboxWithListOfHostGroups: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /**
       * @description The host must be in one of the selected host groups
       * @example [
       *       "host_group1",
       *       "host_group2"
       *     ]
       */
      value: string[]
    }
    MatchHostGroupsCheckbox:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckboxWithListOfHostGroups']
    CheckboxWithListOfHosts: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /** @example [
       *       "host_1",
       *       "host_2"
       *     ] */
      value: string[]
    }
    MatchHostsCheckbox:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckboxWithListOfHosts']
    CheckboxWithListOfServiceGroups: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      value: string[]
    }
    MatchServiceGroupsCheckbox:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckboxWithListOfServiceGroups']
    ServiceGroupsRegex: {
      /**
       * @example match_alias
       * @enum {string}
       */
      match_type: 'match_id' | 'match_alias'
      /**
       * @description The text entered in this list is handled as a regular expression pattern
       * @example [
       *       "[A-Z]+123",
       *       "[A-Z]+456"
       *     ]
       */
      regex_list: string[]
    }
    CheckboxWithListOfServiceGroupsRegex: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /** @description The service group alias must not match one of the following regular expressions. For host events this condition is simply ignored. The text entered here is handled as a regular expression pattern. The pattern is applied as infix search. Add a leading ^ to make it match from the beginning and/or a tailing $ to match till the end of the text. The match is performed case sensitive. Read more about regular expression matching in Checkmk in our user guide. You may paste a text from your clipboard which contains several parts separated by ';' characters into the last input field. The text will then be split by these separators and the single parts are added into dedicated input field */
      value: components['schemas']['ServiceGroupsRegex']
    }
    MatchServiceGroupRegexCheckbox:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckboxWithListOfServiceGroupsRegex']
    MatchServicesCheckbox:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckboxWithListOfStr']
    CheckboxWithListOfCheckTypes: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /**
       * @description Only apply the rule if the notification originates from certain types of check plug-ins. Note: Host notifications never match this rule if this option is being used
       * @example [
       *       "3par_capacity",
       *       "acme_fan",
       *       "acme_realm"
       *     ]
       */
      value: string[]
    }
    MatchCheckTypesCheckbox:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckboxWithListOfCheckTypes']
    StringCheckbox:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckboxWithStrValue']
    MatchContactGroupsCheckbox:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckboxWithListOfContactGroups']
    FromToServiceLevels: {
      /**
       * @description A service level represented as an integer
       * @example 10
       */
      from_level: number
      /**
       * @description A service level represented as an integer
       * @example 10
       */
      to_level: number
    }
    CheckboxWithFromToServiceLevels: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /** @description Host or service must be in the following service level to get notification */
      value: components['schemas']['FromToServiceLevels']
    }
    MatchServiceLevelsCheckbox:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckboxWithFromToServiceLevels']
    CheckboxWithTimePeriod: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /**
       * @description Match this rule only during times where the selected time period from the monitoring system is active
       * @example 24X7
       */
      value: string
    }
    MatchTimePeriodCheckbox:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckboxWithTimePeriod']
    HostEventType: {
      /** @example true */
      start_or_end_of_flapping_state: boolean
      /** @example true */
      start_or_end_of_scheduled_downtime: boolean
      /** @example false */
      acknowledgement_of_problem: boolean
      /** @example true */
      alert_handler_execution_successful: boolean
      /** @example false */
      alert_handler_execution_failed: boolean
      /** @example true */
      up_down: boolean
      /** @example false */
      up_unreachable: boolean
      /** @example true */
      down_up: boolean
      /** @example false */
      down_unreachable: boolean
      /** @example false */
      unreachable_down: boolean
      /** @example false */
      unreachable_up: boolean
      /** @example false */
      any_up: boolean
      /** @example true */
      any_down: boolean
      /** @example true */
      any_unreachable: boolean
    }
    CheckboxHostEventType: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /** @description Select the host event types and transitions this rule should handle. Note: If you activate this option and do not also specify service event types then this rule will never hold for service notifications! Note: You can only match on event types created by the core. */
      value: components['schemas']['HostEventType']
    }
    MatchHostEventTypeCheckbox:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckboxHostEventType']
    ServiceEventType: {
      /** @example true */
      start_or_end_of_flapping_state: boolean
      /** @example true */
      start_or_end_of_scheduled_downtime: boolean
      /** @example false */
      acknowledgement_of_problem: boolean
      /** @example true */
      alert_handler_execution_successful: boolean
      /** @example false */
      alert_handler_execution_failed: boolean
      /** @example true */
      ok_warn: boolean
      /** @example true */
      ok_ok: boolean
      /** @example false */
      ok_crit: boolean
      /** @example true */
      ok_unknown: boolean
      /** @example false */
      warn_ok: boolean
      /** @example false */
      warn_crit: boolean
      /** @example false */
      warn_unknown: boolean
      /** @example true */
      crit_ok: boolean
      /** @example true */
      crit_warn: boolean
      /** @example true */
      crit_unknown: boolean
      /** @example true */
      unknown_ok: boolean
      /** @example true */
      unknown_warn: boolean
      /** @example true */
      unknown_crit: boolean
      /** @example false */
      any_ok: boolean
      /** @example false */
      any_warn: boolean
      /** @example true */
      any_crit: boolean
      /** @example false */
      any_unknown: boolean
    }
    CheckboxServiceEventType: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /** @description Select the service event types and transitions this rule should handle. Note: If you activate this option and do not also specify host event types then this rule will never hold for host notifications! Note: You can only match on event types created by the core */
      value: components['schemas']['ServiceEventType']
    }
    MatchServiceEventTypeCheckbox:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckboxServiceEventType']
    FromToNotificationNumbers: {
      /**
       * @description Let through notifications counting from this number. The first notification always has the number 1
       * @example 1
       */
      beginning_from: number
      /**
       * @description Let through notifications counting upto this number
       * @example 999999
       */
      up_to: number
    }
    CheckboxRestrictNotificationNumbers: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      value: components['schemas']['FromToNotificationNumbers']
    }
    RestrictNotificationNumCheckbox:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckboxRestrictNotificationNumbers']
    ThrottlePeriodicNotifications: {
      /**
       * @description Beginning notification number
       * @example 10
       */
      beginning_from: number
      /**
       * @description The rate then you will receive the notification 1 through 10 and then 15, 20, 25... and so on
       * @example 5
       */
      send_every_nth_notification: number
    }
    CheckboxThrottlePeriodicNotifcations: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      value: components['schemas']['ThrottlePeriodicNotifications']
    }
    ThorttlePeriodicNotificationsCheckbox:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckboxThrottlePeriodicNotifcations']
    CheckboxWithListOfRuleIds: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /** @example  */
      value: string[]
    }
    MatchRuleIdsOneOf:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckboxWithListOfRuleIds']
    SysLogToFromPriorities: {
      /**
       * @example warning
       * @enum {string}
       */
      from_priority: 'emerg' | 'alert' | 'crit' | 'err' | 'warning' | 'notice' | 'info' | 'debug'
      /**
       * @example warning
       * @enum {string}
       */
      to_priority: 'emerg' | 'alert' | 'crit' | 'err' | 'warning' | 'notice' | 'info' | 'debug'
    }
    CheckboxWithSysLogPriority: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      value?: components['schemas']['SysLogToFromPriorities']
    }
    MatchSysLogPriOneOf:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckboxWithSysLogPriority']
    CheckboxWithSysLogFacility: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /**
       * @example kern
       * @enum {string}
       */
      value?:
        | 'kern'
        | 'user'
        | 'mail'
        | 'daemon'
        | 'auth'
        | 'syslog'
        | 'lpr'
        | 'news'
        | 'uucp'
        | 'cron'
        | 'authpriv'
        | 'ftp'
        | 'ntp'
        | 'logaudit'
        | 'logalert'
        | 'clock'
        | 'local0'
        | 'local1'
        | 'local2'
        | 'local3'
        | 'local4'
        | 'local5'
        | 'local6'
        | 'local7'
        | 'logfile'
        | 'snmptrap'
    }
    MatchSysLogFacOneOf:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckboxWithSysLogFacility']
    EventConsoleAlertAttrsCreate: {
      match_rule_ids?: components['schemas']['MatchRuleIdsOneOf']
      match_syslog_priority?: components['schemas']['MatchSysLogPriOneOf']
      match_syslog_facility?: components['schemas']['MatchSysLogFacOneOf']
      match_event_comment?: components['schemas']['StrValueOneOf']
    }
    EventConsoleAlertAttributes: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      match_type: 'match_only_event_console_alerts'
      values: components['schemas']['EventConsoleAlertAttrsCreate']
    }
    EventConsoleAlertAttributesBase: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      match_type: 'do_not_match_event_console_alerts'
    }
    MatchTypeSelector:
      | components['schemas']['EventConsoleAlertAttributes']
      | components['schemas']['EventConsoleAlertAttributesBase']
    CheckboxEventConsoleAlerts: {
      /**
       * @description To enable or disable this field (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      state: 'enabled'
      /** @description The Event Console can have events create notifications in Check_MK. These notifications will be processed by the rule based notification system of Check_MK. This matching option helps you distinguishing and also gives you access to special event fields */
      value: components['schemas']['MatchTypeSelector']
    }
    EventConsoleAlertCheckbox:
      | components['schemas']['Checkbox']
      | components['schemas']['CheckboxEventConsoleAlerts']
    RuleConditions: {
      match_sites: components['schemas']['MatchSitesCheckbox']
      match_folder: components['schemas']['MatchFolderCheckbox']
      match_host_tags: components['schemas']['MatchHostTagsCheckbox']
      match_host_labels: components['schemas']['MatchLabelsCheckbox']
      match_host_groups: components['schemas']['MatchHostGroupsCheckbox']
      match_hosts: components['schemas']['MatchHostsCheckbox']
      match_exclude_hosts: components['schemas']['MatchHostsCheckbox']
      match_service_labels: components['schemas']['MatchLabelsCheckbox']
      match_service_groups: components['schemas']['MatchServiceGroupsCheckbox']
      match_exclude_service_groups: components['schemas']['MatchServiceGroupsCheckbox']
      match_service_groups_regex: components['schemas']['MatchServiceGroupRegexCheckbox']
      match_exclude_service_groups_regex: components['schemas']['MatchServiceGroupRegexCheckbox']
      match_services: components['schemas']['MatchServicesCheckbox']
      match_exclude_services: components['schemas']['MatchServicesCheckbox']
      match_check_types: components['schemas']['MatchCheckTypesCheckbox']
      match_plugin_output: components['schemas']['StringCheckbox']
      match_contact_groups: components['schemas']['MatchContactGroupsCheckbox']
      match_service_levels: components['schemas']['MatchServiceLevelsCheckbox']
      match_only_during_time_period: components['schemas']['MatchTimePeriodCheckbox']
      match_host_event_type: components['schemas']['MatchHostEventTypeCheckbox']
      match_service_event_type: components['schemas']['MatchServiceEventTypeCheckbox']
      restrict_to_notification_numbers: components['schemas']['RestrictNotificationNumCheckbox']
      throttle_periodic_notifications: components['schemas']['ThorttlePeriodicNotificationsCheckbox']
      match_notification_comment: components['schemas']['StringCheckbox']
      event_console_alerts: components['schemas']['EventConsoleAlertCheckbox']
    }
    RuleNotification: {
      rule_properties: components['schemas']['RuleProperties']
      notification_method: components['schemas']['RuleNotificationMethod']
      contact_selection: components['schemas']['ContactSelection']
      conditions: components['schemas']['RuleConditions']
    }
    NotificationRuleRequest: {
      /** @example {
       *       "rule_properties": {
       *         "description": "A description or title of this rule.",
       *         "comment": "A example comment.",
       *         "documentation_url": "http://link/to/documentation",
       *         "do_not_apply_this_rule": {
       *           "state": "disabled"
       *         },
       *         "allow_users_to_deactivate": {
       *           "state": "enabled"
       *         }
       *       },
       *       "notification_method": {
       *         "notify_plugin": {
       *           "option": "create_notification_with_the_following_parameters",
       *           "plugin_params": {
       *             "plugin_name": "mail",
       *             "from_details": {
       *               "state": "disabled"
       *             },
       *             "reply_to": {
       *               "state": "disabled"
       *             },
       *             "subject_for_host_notifications": {
       *               "state": "disabled"
       *             },
       *             "subject_for_service_notifications": {
       *               "state": "disabled"
       *             },
       *             "info_to_be_displayed_in_the_email_body": {
       *               "state": "disabled"
       *             },
       *             "insert_html_section_between_body_and_table": {
       *               "state": "disabled"
       *             },
       *             "url_prefix_for_links_to_checkmk": {
       *               "state": "disabled"
       *             },
       *             "sort_order_for_bulk_notifications": {
       *               "state": "disabled"
       *             },
       *             "send_separate_notification_to_every_recipient": {
       *               "state": "disabled"
       *             },
       *             "enable_sync_smtp": {
       *               "state": "disabled"
       *             },
       *             "display_graphs_among_each_other": {
       *               "state": "disabled"
       *             },
       *             "graphs_per_notification": {
       *               "state": "disabled"
       *             },
       *             "bulk_notifications_with_graphs": {
       *               "state": "disabled"
       *             }
       *           }
       *         },
       *         "notification_bulking": {
       *           "state": "disabled"
       *         }
       *       },
       *       "contact_selection": {
       *         "all_contacts_of_the_notified_object": {
       *           "state": "disabled"
       *         },
       *         "all_users": {
       *           "state": "disabled"
       *         },
       *         "all_users_with_an_email_address": {
       *           "state": "disabled"
       *         },
       *         "the_following_users": {
       *           "state": "disabled"
       *         },
       *         "members_of_contact_groups": {
       *           "state": "disabled"
       *         },
       *         "explicit_email_addresses": {
       *           "state": "disabled"
       *         },
       *         "restrict_by_custom_macros": {
       *           "state": "disabled"
       *         },
       *         "restrict_by_contact_groups": {
       *           "state": "disabled"
       *         }
       *       },
       *       "conditions": {
       *         "match_sites": {
       *           "state": "disabled"
       *         },
       *         "match_folder": {
       *           "state": "disabled"
       *         },
       *         "match_host_tags": {
       *           "state": "disabled"
       *         },
       *         "match_host_labels": {
       *           "state": "disabled"
       *         },
       *         "match_host_groups": {
       *           "state": "disabled"
       *         },
       *         "match_hosts": {
       *           "state": "disabled"
       *         },
       *         "match_exclude_hosts": {
       *           "state": "disabled"
       *         },
       *         "match_service_labels": {
       *           "state": "disabled"
       *         },
       *         "match_service_groups": {
       *           "state": "disabled"
       *         },
       *         "match_exclude_service_groups": {
       *           "state": "disabled"
       *         },
       *         "match_service_groups_regex": {
       *           "state": "disabled"
       *         },
       *         "match_exclude_service_groups_regex": {
       *           "state": "disabled"
       *         },
       *         "match_services": {
       *           "state": "disabled"
       *         },
       *         "match_exclude_services": {
       *           "state": "disabled"
       *         },
       *         "match_check_types": {
       *           "state": "disabled"
       *         },
       *         "match_plugin_output": {
       *           "state": "disabled"
       *         },
       *         "match_contact_groups": {
       *           "state": "disabled"
       *         },
       *         "match_service_levels": {
       *           "state": "disabled"
       *         },
       *         "match_only_during_time_period": {
       *           "state": "disabled"
       *         },
       *         "match_host_event_type": {
       *           "state": "disabled"
       *         },
       *         "match_service_event_type": {
       *           "state": "disabled"
       *         },
       *         "restrict_to_notification_numbers": {
       *           "state": "disabled"
       *         },
       *         "throttle_periodic_notifications": {
       *           "state": "disabled"
       *         },
       *         "match_notification_comment": {
       *           "state": "disabled"
       *         },
       *         "event_console_alerts": {
       *           "state": "disabled"
       *         }
       *       }
       *     } */
      rule_config: components['schemas']['RuleNotification']
    }
    Response1: {
      /** @description Secret of the download user */
      secret: string
    }
    PerformanceSettings: {
      /**
       * @description Timeout for responses
       * @default 8
       * @example 8
       */
      responses_timeout: number
      /**
       * @description Number of probes per hop
       * @default 2
       * @example 2
       */
      hop_probes: number
      /**
       * @description Maximum distance (TTL) to gateway
       * @default 10
       * @example 10
       */
      max_gateway_distance: number
      /**
       * @description Number of ping probes
       * @default 5
       * @example 5
       */
      ping_probes: number
    }
    Configuration: {
      /**
       * @description Force explicit setting for parents even if setting match that of the folder
       * @default false
       * @example false
       */
      force_explicit_parents: boolean
    }
    NoGatewayHosts: {
      /**
       * @description Creation of gateway hosts option (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      option: 'no_gateway_hosts'
    }
    CreateInFolder: {
      /**
       * @description Creation of gateway hosts option (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      option: 'create_in_folder'
      /**
       * @description Folder location where the gateway hosts should be created
       *
       *     Path delimiters can be either `~`, `/` or `\`. Please use the one most appropriate for your quoting/escaping needs. A good default choice is `~`.
       * @example /
       */
      folder: string
      /**
       * @description Alias for created gateway hosts
       * @default Created by parent scan
       * @example Created by parent scan
       */
      hosts_alias: string
    }
    CreateInHostLocation: {
      /**
       * @description Creation of gateway hosts option (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      option: 'create_in_host_location'
      /**
       * @description Alias for created gateway hosts
       * @default Created by parent scan
       * @example Created by parent scan
       */
      hosts_alias: string
    }
    GatewayHosts:
      | components['schemas']['NoGatewayHosts']
      | components['schemas']['CreateInFolder']
      | components['schemas']['CreateInHostLocation']
    ParentScan: {
      /**
       * @description Targeted hosts for parent scan.
       * @example [
       *       "host1",
       *       "host2"
       *     ]
       */
      host_names: string[]
      /**
       * @description Parent scan performance related options
       * @example {
       *       "responses_timeout": 8,
       *       "hop_probes": 2,
       *       "max_gateway_distance": 10,
       *       "ping_probes": 5
       *     }
       */
      performance: components['schemas']['PerformanceSettings']
      /**
       * @description Parent scan configuration options
       * @example {
       *       "force_explicit_parents": false
       *     }
       */
      configuration: components['schemas']['Configuration']
      /**
       * @description Creation of gateway hosts options
       * @example {
       *       "option": "no_gateway_hosts"
       *     }
       */
      gateway_hosts: components['schemas']['GatewayHosts']
    }
    JobLogs: {
      /** @description The list of result related logs */
      result?: string[]
      /** @description The list of progress related logs */
      progress?: string[]
    }
    BackgroundJobStatus1: {
      /**
       * @description This field indicates if the background job is active or not.
       * @example true
       */
      active: boolean
      /**
       * @description This field indicates the current state of the background job.
       * @example initialized
       * @enum {string}
       */
      state: 'initialized' | 'running' | 'finished' | 'stopped' | 'exception'
      /**
       * @description Logs related to the background job.
       * @example {
       *       "result": [
       *         "result1"
       *       ],
       *       "progress": [
       *         "progress1"
       *       ]
       *     }
       */
      logs: components['schemas']['JobLogs']
    }
    BackgroundJobStatusObject: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The domain type of the object
       * @default parent_scan
       */
      domainType: unknown
      /** @description The unique identifier for this domain-object type. */
      id?: string
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description The container for external resources, like linked foreign objects or actions. */
      members?: {
        [key: string]: unknown
      }
      /** @description The attributes of the background job */
      extensions?: components['schemas']['BackgroundJobStatus1']
    }
    /** PasswordExtension */
    PasswordExtension: {
      /**
       * Comment
       * @description An optional comment to explain the purpose of this password.
       * @example Kommentar
       */
      comment?: string
      /**
       * Documentation Url
       * @description A URL pointing to documentation or any other page.
       * @example localhost
       */
      documentation_url?: string
      /**
       * Owned By
       * @deprecated
       * @description Deprecated - use `editable_by` instead. The owner of the password who is able to edit, delete and use existing passwords.
       * @example admin
       */
      owned_by?: string
      /**
       * Editable By
       * @description The owner of the password who is able to edit, delete and use existing passwords.
       * @example admin
       */
      editable_by?: string
      /**
       * Shared
       * @description Each password is owned by a group of users which are able to edit, delete and use existing passwords.
       * @example [
       *       "all"
       *     ]
       */
      shared?: string[]
      /**
       * Customer
       * @description By specifying a customer, you configure on which sites the user object will be available. 'global' will make the object available on all sites.
       * @example provider
       */
      customer?: string
    }
    /** PasswordObject */
    PasswordObject: {
      /**
       * Links
       * @description List of links to other resources.
       * @example [
       *       {
       *         "href": "https://.../api_resource",
       *         "method": "GET",
       *         "rel": "self",
       *         "type": "application/json"
       *       }
       *     ]
       */
      links: components['schemas']['LinkModel'][]
      /**
       * Domaintype
       * @description The type of the domain-object.
       * @constant
       */
      domainType: 'password'
      /**
       * ID
       * @description The unique identifier for this domain-object type.
       * @example host1
       */
      id?: string
      /**
       * Title
       * @description A human readable title of this object. Can be used for user interfaces.
       * @example My Host
       */
      title?: string
      /** @description All the attributes of the domain object. */
      extensions: components['schemas']['PasswordExtension']
    }
    /** PasswordCollection */
    PasswordCollection: {
      /**
       * Links
       * @description List of links to other resources.
       * @example [
       *       {
       *         "href": "https://.../api_resource",
       *         "method": "GET",
       *         "rel": "self",
       *         "type": "application/json"
       *       }
       *     ]
       */
      links: components['schemas']['LinkModel'][]
      /**
       * Id
       * @description The name of this collection.
       */
      id: string
      /**
       * Domaintype
       * @description The domain type of the objects in the collection.
       * @constant
       */
      domainType: 'password'
      /**
       * Title
       * @description A human readable title of this object. Can be used for user interfaces.
       */
      title?: string
      /**
       * Value
       * @description A list of password objects.
       */
      value: components['schemas']['PasswordObject'][]
      /**
       * Extensions
       * @description Additional attributes alongside the collection.
       */
      extensions?: Record<string, never>
    }
    /** UpdatePassword */
    UpdatePassword: {
      /**
       * Title
       * @description The name of your password for easy recognition.
       * @example Kubernetes login
       */
      title?: string
      /**
       * Comment
       * @description An optional comment to explain the purpose of this password.
       * @example Kommentar
       */
      comment?: string
      /**
       * Documentation Url
       * @description An optional URL pointing to documentation or any other page. You can use either global URLs (beginning with http://), absolute local urls (beginning with /) or relative URLs (that are relative to check_mk/).
       * @example localhost
       */
      documentation_url?: string
      /**
       * Password
       * @description The password string
       * @example password
       */
      password?: string
      /**
       * Owner
       * @deprecated
       * @description Deprecated - use `editable_by` instead. Each password is owned by a group of users which are able to edit, delete and use existing passwords.
       * @example admin
       */
      owner?: string
      /**
       * Editable By
       * @description Each password is owned by a group of users which are able to edit, delete and use existing passwords.
       * @example admin
       */
      editable_by?: string
      /**
       * Shared
       * @description Each password is owned by a group of users which are able to edit, delete and use existing passwords.
       * @example [
       *       "all"
       *     ]
       */
      shared?: string[]
      /**
       * Customer
       * @description [Managed edition only] By specifying a customer, you configure on which sites the user object will be available. 'global' will make the object available on all sites. This field is required for the following editions: Managed.
       * @example provider
       */
      customer?: string
    }
    /** Api412DefaultError2905EF83026CF4EE */
    Api412DefaultError2905EF83026CF4EE: {
      /**
       * Status
       * @description The HTTP status code.
       * @example 412
       */
      status: number
      /**
       * Title
       * @description A summary of the problem.
       * @example Precondition Failed
       */
      title: string
      /**
       * Detail
       * @description Detailed information on what exactly went wrong.
       * @example The value of the If-Match header doesn't match the object's ETag.
       */
      detail: string
      /**
       * Validation errors
       * @description Detailed error messages on all fields failing validation.
       * @example {
       *       "field": "error message"
       *     }
       */
      fields?: {
        [key: string]: string
      }
      /**
       * Error extensions
       * @description Additional information about the error.
       * @example {
       *       "key": "value"
       *     }
       */
      ext?: {
        [key: string]: string
      }
    }
    /** Api428DefaultError9EE11ED07CC121C2 */
    Api428DefaultError9EE11ED07CC121C2: {
      /**
       * Status
       * @description The HTTP status code.
       * @example 428
       */
      status: number
      /**
       * Title
       * @description A summary of the problem.
       * @example Precondition Required
       */
      title: string
      /**
       * Detail
       * @description Detailed information on what exactly went wrong.
       * @example The required If-Match header is missing.
       */
      detail: string
      /**
       * Validation errors
       * @description Detailed error messages on all fields failing validation.
       * @example {
       *       "field": "error message"
       *     }
       */
      fields?: {
        [key: string]: string
      }
      /**
       * Error extensions
       * @description Additional information about the error.
       * @example {
       *       "key": "value"
       *     }
       */
      ext?: {
        [key: string]: string
      }
    }
    /** CreatePassword */
    CreatePassword: {
      /**
       * Ident
       * @description The unique identifier for the password
       * @example pass
       */
      ident: string
      /**
       * Title
       * @description The name of your password for easy recognition.
       * @example Kubernetes login
       */
      title: string
      /**
       * Comment
       * @description An optional comment to explain the purpose of this password.
       * @default
       * @example Kommentar
       */
      comment: string
      /**
       * Documentation Url
       * @description An optional URL pointing to documentation or any other page. You can use either global URLs (beginning with http://), absolute local urls (beginning with /) or relative URLs (that are relative to check_mk/).
       * @default
       * @example localhost
       */
      documentation_url: string
      /**
       * Password
       * @description The password string
       * @example password
       */
      password: string
      /**
       * Owner
       * @deprecated
       * @description Deprecated - use `editable_by` instead. Each password is owned by a group of users which are able to edit, delete and use existing passwords.
       * @example admin
       */
      owner?: string
      /**
       * Editable By
       * @description Each password is owned by a group of users which are able to edit, delete and use existing passwords. By default, the admin group is the owner of a password.
       * @example admin
       */
      editable_by?: string
      /**
       * Shared
       * @description Each password is owned by a group of users which are able to edit, delete and use existing passwords.
       * @example [
       *       "all"
       *     ]
       */
      shared?: string[]
      /**
       * Customer
       * @description [Managed edition only] By specifying a customer, you configure on which sites the user object will be available. 'global' will make the object available on all sites. This field is required for the following editions: Managed.
       * @example provider
       */
      customer?: string
    }
    QuickSetupButtonIcon: {
      /**
       * @description Name of the icon.
       * @example next
       */
      name?: string
      /**
       * @description Rotation in degrees for the icon
       * @example 90
       */
      rotate?: number
    }
    QuickSetupButton: {
      /**
       * @description The button id
       * @example next
       */
      id?: string | null
      /**
       * @description The label of the button
       * @example Next
       */
      label?: string
      /**
       * @description Definition of the button icon
       * @example {
       *       "name": "save-to-service",
       *       "rotate": 0
       *     }
       */
      icon?: components['schemas']['QuickSetupButtonIcon'] | null
      /**
       * @description The aria label of the button
       * @example Next
       */
      aria_label?: string | null
    }
    Action: {
      /**
       * @description The action id
       * @example action
       */
      id?: string
      /**
       * @description Definition of the action button
       * @example {
       *       "label": "Next",
       *       "aria_label": "Next"
       *     }
       */
      button?: components['schemas']['QuickSetupButton']
      /**
       * @description A string to display while waiting for the next stage
       * @example Please wait...
       */
      load_wait_label?: string
    }
    QuickSetupStageOverviewResponse: {
      /**
       * @description The title of a stage
       * @example Prepare AWS for Checkmk
       */
      title?: string
      /**
       * @description The sub-title of a stage
       * @example aws
       */
      sub_title?: string | null
    }
    QuickSetupStageStructure: {
      /**
       * @description A collection of stage components
       * @example []
       */
      components?: {
        [key: string]: unknown
      }[]
      /**
       * @description A collection of stage actions
       * @example []
       */
      actions?: components['schemas']['Action'][]
      /**
       * @description Definition of the `go to previous stage` button
       * @example {
       *       "id": "prev",
       *       "label": "Back"
       *     }
       */
      prev_button?: components['schemas']['QuickSetupButton'] | null
    }
    QuickSetupGuidedResponse: {
      /**
       * @description The quicksetup id
       * @example aws_quicksetup
       */
      quick_setup_id?: string
      /**
       * @description A list of all complete actions
       * @example [
       *       {
       *         "id": "save",
       *         "label": "Save configuration"
       *       }
       *     ]
       */
      actions?: components['schemas']['Action'][]
      /**
       * @description Definition of the `go to previous stage` button
       * @example {
       *       "id": "prev",
       *       "label": "Back",
       *       "aria_label": "Back"
       *     }
       */
      prev_button?: components['schemas']['QuickSetupButton'] | null
      /**
       * @description The string for the guided mode label
       * @example Guided mode
       */
      guided_mode_string?: string
      /**
       * @description The string for the overview mode label
       * @example Overview mode
       */
      overview_mode_string?: string
      /**
       * @description The overview of the quicksetup stages
       * @example []
       */
      overviews?: components['schemas']['QuickSetupStageOverviewResponse'][]
      /**
       * @description The first stage
       * @example {
       *       "components": []
       *     }
       */
      stage?: components['schemas']['QuickSetupStageStructure']
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      mode: 'guided'
    }
    QuickSetupCompleteStageResponse: {
      /**
       * @description The title of a stage
       * @example Prepare AWS for Checkmk
       */
      title?: string
      /**
       * @description The sub-title of a stage
       * @example aws
       */
      sub_title?: string | null
      /**
       * @description A collection of stage components
       * @example []
       */
      components?: {
        [key: string]: unknown
      }[]
      /**
       * @description A collection of stage actions
       * @example []
       */
      actions?: components['schemas']['Action'][]
      /**
       * @description Definition of the `go to previous stage` button
       * @example {
       *       "id": "prev",
       *       "label": "Back"
       *     }
       */
      prev_button?: components['schemas']['QuickSetupButton'] | null
    }
    QuickSetupOverviewResponse: {
      /**
       * @description The quicksetup id
       * @example aws_quicksetup
       */
      quick_setup_id?: string
      /**
       * @description A list of all complete actions
       * @example [
       *       {
       *         "id": "save",
       *         "label": "Save configuration"
       *       }
       *     ]
       */
      actions?: components['schemas']['Action'][]
      /**
       * @description Definition of the `go to previous stage` button
       * @example {
       *       "id": "prev",
       *       "label": "Back",
       *       "aria_label": "Back"
       *     }
       */
      prev_button?: components['schemas']['QuickSetupButton'] | null
      /**
       * @description The string for the guided mode label
       * @example Guided mode
       */
      guided_mode_string?: string
      /**
       * @description The string for the overview mode label
       * @example Overview mode
       */
      overview_mode_string?: string
      /**
       * @description A list of all stages and their components
       * @example []
       */
      stages?: components['schemas']['QuickSetupCompleteStageResponse'][]
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      mode: 'overview'
    }
    QuickSetupResponse:
      | components['schemas']['QuickSetupGuidedResponse']
      | components['schemas']['QuickSetupOverviewResponse']
    Errors: {
      /**
       * @description Index of the stage containing errors.
       * @example 0
       */
      stage_index?: number | null
      /**
       * @description A mapping of formspec ids to formspec validation errors
       * @example {}
       */
      formspec_errors?: {
        [key: string]: unknown
      }
      /**
       * @description A collection of general stage errors
       * @example []
       */
      stage_errors?: string[]
    }
    BackgroundJobException: {
      /**
       * @description The exception message
       * @example An exception message
       */
      message?: string
      /**
       * @description The traceback of the exception
       * @example The traceback of the background job exception
       */
      traceback?: string
    }
    QuickSetupCompleteResponse: {
      /**
       * @description The url to redirect to after saving the quicksetup
       * @example http://save/url
       */
      redirect_url?: string
      /**
       * @description A list of stage errors
       * @example []
       */
      all_stage_errors?: (components['schemas']['Errors'] | null)[]
      /**
       * @description The exception details if the action was run in the background and raised an unexpected exception
       * @example {}
       */
      background_job_exception?: components['schemas']['BackgroundJobException']
    }
    QuickSetupStageActionResponse: {
      /**
       * @description A collection of widget recaps
       * @example []
       */
      stage_recap?: {
        [key: string]: unknown
      }[]
      /**
       * @description All formspec errors and general stage errors
       * @example {}
       */
      validation_errors?: components['schemas']['Errors'] | null
      /**
       * @description The exception details if the action was run in the background and raised an unexpected exception
       * @example {}
       */
      background_job_exception?: components['schemas']['BackgroundJobException']
    }
    QuickSetupStageRequest: {
      /**
       * @description The form data entered by the user.
       * @example {}
       */
      form_data: {
        [key: string]: unknown
      }
    }
    QuickSetupFinalActionRequest: {
      /**
       * @description Unique id of the action button clicked by the user
       * @example save
       */
      button_id: string
      /**
       * @description A list of stages' form data
       * @example [
       *       {
       *         "stage_data": []
       *       },
       *       {
       *         "stage_data": []
       *       }
       *     ]
       */
      stages?: components['schemas']['QuickSetupStageRequest'][]
    }
    QuickSetupStageActionRequest: {
      /**
       * @description The id of the stage action to be performed
       * @example test_connection
       */
      stage_action_id: string
      /**
       * @description A list of stages
       * @example [
       *       {
       *         "form_data": {}
       *       },
       *       {
       *         "form_data": {}
       *       }
       *     ]
       */
      stages?: components['schemas']['QuickSetupStageRequest'][]
    }
    /** RelayConfigModel */
    RelayConfigModel: {
      /**
       * Alias
       * @description The relay alias.
       */
      alias: string
      /**
       * Siteid
       * @description The relay site ID.
       */
      siteid: string
    }
    /** RelayModel */
    RelayModel: {
      /**
       * Links
       * @description List of links to other resources.
       * @example [
       *       {
       *         "href": "https://.../api_resource",
       *         "method": "GET",
       *         "rel": "self",
       *         "type": "application/json"
       *       }
       *     ]
       */
      links: components['schemas']['LinkModel'][]
      /**
       * Domaintype
       * @description The domain type of the object.
       * @constant
       */
      domainType: 'relay'
      /**
       * ID
       * @description The unique identifier for this domain-object type.
       * @example host1
       */
      id?: string
      /**
       * Title
       * @description A human readable title of this object. Can be used for user interfaces.
       * @example My Host
       */
      title?: string
      /** @description All the data and metadata of this relay. */
      extensions: components['schemas']['RelayConfigModel']
    }
    /** RelayCollectionModel */
    RelayCollectionModel: {
      /**
       * Links
       * @description List of links to other resources.
       * @example [
       *       {
       *         "href": "https://.../api_resource",
       *         "method": "GET",
       *         "rel": "self",
       *         "type": "application/json"
       *       }
       *     ]
       */
      links: components['schemas']['LinkModel'][]
      /**
       * Id
       * @description The name of this collection.
       */
      id: string
      /**
       * Domaintype
       * @description The domain type of the objects in the collection
       * @example relay
       * @constant
       */
      domainType: 'relay'
      /**
       * Title
       * @description A human readable title of this object. Can be used for user interfaces.
       */
      title?: string
      /**
       * Value
       * @description A list of relay objects
       */
      value: components['schemas']['RelayModel'][]
      /**
       * Extensions
       * @description Additional attributes alongside the collection.
       */
      extensions?: Record<string, never>
    }
    Properties: {
      /**
       * @description A description for this rule to inform other users about its intent.
       * @example This rule is here to foo the bar hosts.
       */
      description?: string
      /**
       * @description Any comment string.
       * @example Created yesterday due to foo hosts behaving weird.
       */
      comment?: string
      /**
       * Format: url
       * @description An URL (e.g. an internal Wiki entry) which explains this rule.
       * @example http://example.com/wiki/ConfiguringFooBarHosts
       */
      documentation_url?: string
      /**
       * @description When set to False, the rule will be evaluated. Default is False.
       * @default false
       * @example false
       */
      disabled: boolean
    }
    HostOrServiceCondition: {
      /** @description A list of string matching regular expressions. */
      match_on: string[]
      /**
       * @description How the hosts or services should be matched.
       *      * one_of - will match if any of the hosts or services is matched
       *      * none_of - will match if none of the hosts are matched. In other words: will match all hosts or services which are not specified.
       *
       * @enum {string}
       */
      operator: 'one_of' | 'none_of'
    }
    TagConditionScalarSchemaBase: {
      /** @description The name of the tag. */
      key: string
      /**
       * @description If the tag's value should match what is given under the field `value`. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      operator: 'is' | 'is_not'
      /** @description The value of a tag. */
      value: string
    }
    TagConditionConditionSchemaBase: {
      /** @description The name of the tag. */
      key: string
      /**
       * @description If the matched tag should be one of the given values, or not. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      operator: 'one_of' | 'none_of'
      /** @description A list of values for the tag. */
      value: string[]
    }
    TagCondition:
      | components['schemas']['TagConditionScalarSchemaBase']
      | components['schemas']['TagConditionScalarSchemaBase']
      | components['schemas']['TagConditionConditionSchemaBase']
      | components['schemas']['TagConditionConditionSchemaBase']
    LabelCondition1: {
      /**
       * @description Boolean operator that connects the label to other labels within the same label group condition
       * @enum {string}
       */
      operator?: 'and' | 'or' | 'not'
      /**
       * @description A label of format "{key}:{value}"
       * @example os:windows
       */
      label: string
    }
    LabelGroupCondition1: {
      /**
       * @description Boolean operator that connects the label group to other label groups
       * @default and
       * @enum {string}
       */
      operator: 'and' | 'or' | 'not'
      /**
       * @description A list of label conditions that form a label group
       * @example [
       *       {
       *         "operator": "and",
       *         "label": "os:linux"
       *       }
       *     ]
       */
      label_group: components['schemas']['LabelCondition1'][]
    }
    Conditions: {
      /**
       * @description Here you can enter a list of explicit host names that the rule should or should not apply to. Leave this option disabled if you want the rule to apply for all hosts specified by the given tags. The names that you enter here are compared with case sensitive exact matching. Alternatively you can use regular expressions if you enter a tilde `~` as the first character. That regular expression must match the beginning of the host names in question.
       * @example {
       *       "match_on": [
       *         "host1",
       *         "host2"
       *       ],
       *       "operator": "one_of"
       *     }
       */
      host_name?: components['schemas']['HostOrServiceCondition']
      /**
       * @description The rule will only be applied to hosts fulfilling all the host tag conditions listed here, even if they appear in the list of explicit host names.
       * @example [
       *       {
       *         "key": "criticality",
       *         "operator": "is",
       *         "value": "prod"
       *       }
       *     ]
       */
      host_tags?: components['schemas']['TagCondition'][]
      /**
       * @description Further restrict this rule by applying host label conditions. Although all items in this list have a default operator value, the operator value for the the first item in the list does not have any effect.
       * @example [
       *       {
       *         "label_group": [
       *           {
       *             "operator": "and",
       *             "label": "db:mssql"
       *           }
       *         ]
       *       },
       *       {
       *         "operator": "and",
       *         "label_group": [
       *           {
       *             "operator": "and",
       *             "label": "os:windows"
       *           }
       *         ]
       *       }
       *     ]
       */
      host_label_groups?: components['schemas']['LabelGroupCondition1'][]
      /**
       * @description Restrict the application of the rule, by checking against service label conditions. Although all items in this list have a default operator value, the operator value for the the first item in the list does not have any effect.
       * @example [
       *       {
       *         "label_group": [
       *           {
       *             "operator": "and",
       *             "label": "db:mssql"
       *           }
       *         ]
       *       },
       *       {
       *         "operator": "and",
       *         "label_group": [
       *           {
       *             "operator": "and",
       *             "label": "os:windows"
       *           }
       *         ]
       *       }
       *     ]
       */
      service_label_groups?: components['schemas']['LabelGroupCondition1'][]
      /**
       * @description Specify a list of service patterns this rule shall apply to.
       *      * The patterns must match the beginning of the service in question.
       *      * Adding a `$` to the end forces an exact match.
       *      * Pattern use regular expressions. e.g. a `.*` will match an arbitrary text.
       *      * The text entered here is handled as a regular expression pattern.
       *      * The pattern is matched from the beginning.
       *      * The match is performed case sensitive.
       *     BE AWARE: Depending on the service ruleset the service_description of the rules is only a check item or a full service name. For example the check parameters rulesets only use the item, and other service rulesets like disabled services ruleset use full servicedescriptions.
       * @example {
       *       "match_on": [
       *         "foo1",
       *         "bar2"
       *       ],
       *       "operator": "none_of"
       *     }
       */
      service_description?: components['schemas']['HostOrServiceCondition']
    }
    RuleExtensions: {
      /** @description The name of the ruleset. */
      ruleset?: string
      /**
       * @description The path name of the folder.
       *
       *     Path delimiters can be either `~`, `/` or `\`. Please use the one most appropriate for your quoting/escaping needs. A good default choice is `~`.
       * @example ~router
       */
      folder: string
      /** @description The position of this rule in the chain in this folder. */
      folder_index?: number
      /**
       * @description Property values of this rule.
       * @example {}
       */
      properties?: components['schemas']['Properties']
      /**
       * @description The raw parameter value for this rule.
       * @example {"ignore_fs_types": ["tmpfs"]}
       */
      value_raw?: string
      /** @description Conditions. */
      conditions?: components['schemas']['Conditions']
    }
    RuleObject: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description Domain type of this object.
       * @default rule
       * @example rule
       */
      domainType: unknown
      /** @description The unique identifier for this domain-object type. */
      id?: string
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description The container for external resources, like linked foreign objects or actions. */
      members?: {
        [key: string]: unknown
      }
      /** @description Attributes specific to rule objects. */
      extensions?: components['schemas']['RuleExtensions']
    }
    RuleCollection: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The name of this collection.
       * @default all
       */
      id: string
      /**
       * @description Domain type of this object.
       * @default rule
       */
      domainType: unknown
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description The collection itself. Each entry in here is part of the collection. */
      value?: components['schemas']['RuleObject'][]
      /** @description Additional attributes alongside the collection. */
      extensions?: {
        [key: string]: unknown
      }
    }
    LabelCondition2: {
      /** @description The key of the label. e.g. 'os' in 'os:windows' */
      key: string
      /**
       * @description How the label should be matched.
       * @enum {string}
       */
      operator: 'is' | 'is_not'
      /** @description The value of the label. e.g. 'windows' in 'os:windows' */
      value: string
    }
    InputConditions: {
      /**
       * @description Here you can enter a list of explicit host names that the rule should or should not apply to. Leave this option disabled if you want the rule to apply for all hosts specified by the given tags. The names that you enter here are compared with case sensitive exact matching. Alternatively you can use regular expressions if you enter a tilde `~` as the first character. That regular expression must match the beginning of the host names in question.
       * @example {
       *       "match_on": [
       *         "host1",
       *         "host2"
       *       ],
       *       "operator": "one_of"
       *     }
       */
      host_name?: components['schemas']['HostOrServiceCondition']
      /**
       * @description The rule will only be applied to hosts fulfilling all the host tag conditions listed here, even if they appear in the list of explicit host names.
       * @example [
       *       {
       *         "key": "criticality",
       *         "operator": "is",
       *         "value": "prod"
       *       }
       *     ]
       */
      host_tags?: components['schemas']['TagCondition'][]
      /**
       * @description Further restrict this rule by applying host label conditions. Although all items in this list have a default operator value, the operator value for the the first item in the list does not have any effect.
       * @example [
       *       {
       *         "label_group": [
       *           {
       *             "operator": "and",
       *             "label": "db:mssql"
       *           }
       *         ]
       *       },
       *       {
       *         "operator": "and",
       *         "label_group": [
       *           {
       *             "operator": "and",
       *             "label": "os:windows"
       *           }
       *         ]
       *       }
       *     ]
       */
      host_label_groups?: components['schemas']['LabelGroupCondition1'][]
      /**
       * @description Restrict the application of the rule, by checking against service label conditions. Although all items in this list have a default operator value, the operator value for the the first item in the list does not have any effect.
       * @example [
       *       {
       *         "label_group": [
       *           {
       *             "operator": "and",
       *             "label": "db:mssql"
       *           }
       *         ]
       *       },
       *       {
       *         "operator": "and",
       *         "label_group": [
       *           {
       *             "operator": "and",
       *             "label": "os:windows"
       *           }
       *         ]
       *       }
       *     ]
       */
      service_label_groups?: components['schemas']['LabelGroupCondition1'][]
      /**
       * @description Specify a list of service patterns this rule shall apply to.
       *      * The patterns must match the beginning of the service in question.
       *      * Adding a `$` to the end forces an exact match.
       *      * Pattern use regular expressions. e.g. a `.*` will match an arbitrary text.
       *      * The text entered here is handled as a regular expression pattern.
       *      * The pattern is matched from the beginning.
       *      * The match is performed case sensitive.
       *     BE AWARE: Depending on the service ruleset the service_description of the rules is only a check item or a full service name. For example the check parameters rulesets only use the item, and other service rulesets like disabled services ruleset use full servicedescriptions.
       * @example {
       *       "match_on": [
       *         "foo1",
       *         "bar2"
       *       ],
       *       "operator": "none_of"
       *     }
       */
      service_description?: components['schemas']['HostOrServiceCondition']
      /**
       * @deprecated
       * @description Further restrict this rule by applying host label conditions. - Deprecated: Use `host_label_groups` instead.
       * @example [
       *       {
       *         "key": "os",
       *         "operator": "is",
       *         "value": "windows"
       *       }
       *     ]
       */
      host_labels?: components['schemas']['LabelCondition2'][]
      /**
       * @deprecated
       * @description Restrict the application of the rule, by checking against service label conditions. - Deprecated: Use `service_label_groups` instead.
       * @example [
       *       {
       *         "key": "os",
       *         "operator": "is",
       *         "value": "windows"
       *       }
       *     ]
       */
      service_labels?: components['schemas']['LabelCondition2'][]
    }
    UpdateRuleObject: {
      /**
       * @description Configuration values for rules.
       * @example {
       *       "disabled": false
       *     }
       */
      properties?: components['schemas']['Properties']
      /**
       * @description The raw parameter value for this rule. To create the correct structure, for now use the 'export for API' menu item in the Rule Editor of the GUI. The value is expected to be a valid Python type.
       * @example {'cmk/os_family': 'linux'}
       */
      value_raw: string
      /**
       * @description Conditions.
       * @example {
       *       "host_name": {
       *         "match_on": [
       *           "host1",
       *           "host2"
       *         ],
       *         "operator": "one_of"
       *       },
       *       "host_tags": [
       *         {
       *           "key": "criticality",
       *           "operator": "is",
       *           "value": "prod"
       *         }
       *       ],
       *       "host_labels": [
       *         {
       *           "key": "os",
       *           "operator": "is",
       *           "value": "windows"
       *         }
       *       ],
       *       "service_labels": [
       *         {
       *           "key": "os",
       *           "operator": "is",
       *           "value": "windows"
       *         }
       *       ],
       *       "host_label_groups": [
       *         {
       *           "operator": "and",
       *           "label_group": [
       *             {
       *               "operator": "and",
       *               "label": "os:windows"
       *             }
       *           ]
       *         }
       *       ],
       *       "service_label_groups": [
       *         {
       *           "operator": "and",
       *           "label_group": [
       *             {
       *               "operator": "and",
       *               "label": "os:windows"
       *             }
       *           ]
       *         }
       *       ],
       *       "service_description": {
       *         "match_on": [
       *           "foo1",
       *           "bar2"
       *         ],
       *         "operator": "none_of"
       *       }
       *     }
       */
      conditions?: components['schemas']['InputConditions']
    }
    InputRuleObject: {
      /**
       * @description Configuration values for rules.
       * @example {
       *       "disabled": false
       *     }
       */
      properties?: components['schemas']['Properties']
      /**
       * @description The raw parameter value for this rule. To create the correct structure, for now use the 'export for API' menu item in the Rule Editor of the GUI. The value is expected to be a valid Python type.
       * @example {'cmk/os_family': 'linux'}
       */
      value_raw: string
      /**
       * @description Conditions.
       * @example {
       *       "host_name": {
       *         "match_on": [
       *           "host1",
       *           "host2"
       *         ],
       *         "operator": "one_of"
       *       },
       *       "host_tags": [
       *         {
       *           "key": "criticality",
       *           "operator": "is",
       *           "value": "prod"
       *         }
       *       ],
       *       "host_labels": [
       *         {
       *           "key": "os",
       *           "operator": "is",
       *           "value": "windows"
       *         }
       *       ],
       *       "service_labels": [
       *         {
       *           "key": "os",
       *           "operator": "is",
       *           "value": "windows"
       *         }
       *       ],
       *       "host_label_groups": [
       *         {
       *           "operator": "and",
       *           "label_group": [
       *             {
       *               "operator": "and",
       *               "label": "os:windows"
       *             }
       *           ]
       *         }
       *       ],
       *       "service_label_groups": [
       *         {
       *           "operator": "and",
       *           "label_group": [
       *             {
       *               "operator": "and",
       *               "label": "os:windows"
       *             }
       *           ]
       *         }
       *       ],
       *       "service_description": {
       *         "match_on": [
       *           "foo1",
       *           "bar2"
       *         ],
       *         "operator": "none_of"
       *       }
       *     }
       */
      conditions?: components['schemas']['InputConditions']
      /**
       * @description Name of rule set.
       * @example host_label_rules
       */
      ruleset: string
      /**
       * @description The path name of the folder.
       *
       *     Path delimiters can be either `~`, `/` or `\`. Please use the one most appropriate for your quoting/escaping needs. A good default choice is `~`.
       * @example ~hosts~linux
       */
      folder: string
    }
    MoveToFolder: {
      /**
       * @description The type of position to move to.
       *             Note that you cannot move rules before rules managed by a Quick setup. In the case of
       *             `top_of_folder` your rule will instead be after all managed rules. If you specify a managed
       *             rule in `after_specific_rule` or `before_specific_rule` you will receive an error. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      position: 'top_of_folder' | 'bottom_of_folder'
      /**
       * @description The path name of the folder.
       *
       *     Path delimiters can be either `~`, `/` or `\`. Please use the one most appropriate for your quoting/escaping needs. A good default choice is `~`.
       * @example /
       */
      folder?: string
    }
    MoveToSpecificRule: {
      /**
       * @description The type of position to move to.
       *             Note that you cannot move rules before rules managed by a Quick setup. In the case of
       *             `top_of_folder` your rule will instead be after all managed rules. If you specify a managed
       *             rule in `after_specific_rule` or `before_specific_rule` you will receive an error. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      position: 'after_specific_rule' | 'before_specific_rule'
      /**
       * @description The UUID of the rule to move after/before.
       * @example f8b74720-a454-4242-99c4-62994ef0f2bf
       */
      rule_id?: string
    }
    MoveRuleTo:
      | components['schemas']['MoveToFolder']
      | components['schemas']['MoveToFolder']
      | components['schemas']['MoveToSpecificRule']
      | components['schemas']['MoveToSpecificRule']
    Api404CustomError4: {
      /**
       * @description The HTTP status code.
       * @example 404
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example The rule to be deleted was not found.
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Not Found
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    Api400CustomError: {
      /**
       * @description The HTTP status code.
       * @example 400
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example The rule is locked and cannot be deleted.
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Bad Request
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    RulesetCollection: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The name of this collection.
       * @default all
       */
      id: string
      /**
       * @description Domain type of this object.
       * @default ruleset
       * @example ruleset
       */
      domainType: unknown
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description The collection itself. Each entry in here is part of the collection. */
      value?: components['schemas']['CollectionItem'][]
      /** @description Additional attributes alongside the collection. */
      extensions?: {
        [key: string]: unknown
      }
    }
    RulesetExtensions: {
      /**
       * @description The name of the ruleset
       * @example host_groups
       */
      name?: string
      /**
       * @description The path name of the folder.
       *
       *     Path delimiters can be either `~`, `/` or `\`. Please use the one most appropriate for your quoting/escaping needs. A good default choice is `~`.
       * @example ~router
       */
      folder: string
      /**
       * @description The number of rules of this ruleset.
       * @example 5
       */
      number_of_rules?: number
    }
    RulesetObject: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description Domain type of this object.
       * @default ruleset
       * @example ruleset
       */
      domainType: unknown
      /** @description The unique identifier for this domain-object type. */
      id?: string
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description The container for external resources, like linked foreign objects or actions. */
      members?: {
        [key: string]: unknown
      }
      /** @description Specific attributes related to rulesets. */
      extensions?: components['schemas']['RulesetExtensions']
    }
    GeneralProperties: {
      /** @description Display name for the SAML connection. */
      name: string
      /**
       * @description Add a title or describe this rule.
       * @default
       */
      description: string
      /**
       * @description An optional comment to explain the purpose of this object. The comment is only visible in this dialog and can help other users to understand the intentions of the configured attributes.
       * @default
       */
      comment: string
      /**
       * @description An optional URL linking documentation or any other page. An icon links to the page and opens in a new tab when clicked. You can use either global URLs (starting with http://), absolute local URLs (starting with /) or relative URLs (relative to check_mk/).
       * @default
       */
      documentation_url: string
      /**
       * @description Selecting 'deactivated' will disable the rule, but it will remain in the configuration.
       * @default activated
       * @enum {string}
       */
      rule_activation: 'activated' | 'deactivated'
      /** @description A SAML connection ID string. */
      id: string
    }
    Metadata: {
      /** @description Entity ID for this connection. */
      entity_id: string
      /**
       * Format: url
       * @description Metadata endpoint for this connection.
       */
      metadata_endpoint: string
      /**
       * Format: url
       * @description Assertion Consumer Service endpoint for this connection.
       */
      assertion_consumer_service_endpoint: string
    }
    IdpMetadataURL: {
      /**
       * @description Automatically determine identity provider metadata by querying an endpoint. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'url'
      /**
       * Format: url
       * @description URL to fetch identity provider metadata from.
       */
      url: string
    }
    IdpMetadataXML: {
      /**
       * @description Static configuration in XML format. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'xml'
      /** @description Identity provider metadata xml. */
      xml: string
    }
    IdpMetadata: components['schemas']['IdpMetadataURL'] | components['schemas']['IdpMetadataXML']
    IdpTimeout: {
      /**
       * @description Connect timeout.
       * @default 12
       */
      connect: number
      /**
       * @description Read timeout.
       * @default 12
       */
      read: number
    }
    ConnectionConfig: {
      /**
       * Format: url
       * @description URL of the CheckMK server.
       */
      checkmk_server_url: string
      /** @description Identity provider metadata. */
      identity_provider_metadata: components['schemas']['IdpMetadata']
      /**
       * @description Configured timeouts.
       * @default {
       *       "connect": 12,
       *       "read": 12
       *     }
       */
      identity_provider_timeout: components['schemas']['IdpTimeout']
    }
    BuiltinCertificate: {
      /**
       * @description Use the certificate that comes with Checkmk. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'builtin'
    }
    CustomCertificate: {
      /**
       * @description Specify a custom certificate. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'custom'
      /** @description Private key in PEM format. */
      private_key: string
      /** @description Public key in PEM format. Must be a single certificate, not a chain. */
      certificate: string
    }
    Certificate:
      | components['schemas']['BuiltinCertificate']
      | components['schemas']['CustomCertificate']
    Security: {
      /**
       * @description Certificate to sign requests to the identity provider.
       * @default {
       *       "type": "builtin"
       *     }
       */
      signing_certificate: components['schemas']['Certificate']
      /** @description Certificate to decrypt authentication responses. */
      decrypt_auth_certificate?: components['schemas']['Certificate']
    }
    ContactGroupMapping: {
      /** @description Value to compare to the attribute. */
      attribute_value: string
      /** @description List of contact groups. */
      contact_groups: string[]
    }
    ContactGroupMapValue: {
      /** @description Attribute for contact group sync. */
      attribute: string
      /**
       * @description The attribute value will be compared to values in the mapping. The contact groups specified for that value will be applied. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'map'
      /** @description Mapping of attribute values to contact groups. */
      mapping: components['schemas']['ContactGroupMapping'][]
    }
    ContactGroupFromAttributeValue: {
      /** @description Attribute for contact group sync. */
      attribute: string
      /**
       * @description The attribute value will be mapped to an existing contact group with the same name. If no such group exists, they will not be mapped. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'from_attribute_value'
    }
    ContactGroupCnFromLdapDn: {
      /** @description Attribute for contact group sync. */
      attribute: string
      /**
       * @description The attribute value will be interpreted as a distinguished name (DN). The common name (CN) will be mapped to an existing contact group. If no such group exists, they will not be mapped. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'cn_from_ldap_dn'
    }
    ContactGroups:
      | components['schemas']['ContactGroupMapValue']
      | components['schemas']['ContactGroupFromAttributeValue']
      | components['schemas']['ContactGroupCnFromLdapDn']
    RolesMap: {
      /** @enum {string} */
      type: 'map'
      /** @description Attribute which will be checked for a match. */
      attribute: string
      /** @description Mapping of roles and attribute values. Roles will be added to the user if one of the values matches the attribute value. */
      roles?: {
        [key: string]: string[]
      }
    }
    Users: {
      /** @description Attribute used to uniquely identify the users. */
      id_attribute: string
      /**
       * @description Attribute used for the full name, if not set the ID is used.
       * @default
       */
      full_name_attribute: string
      /**
       * @description Attribute used for the email.
       * @default
       */
      email_attribute: string
      /** @description Contact group sync configuration. */
      contact_groups?: components['schemas']['ContactGroups']
      /** @description Role sync configuration. */
      roles?: components['schemas']['RolesMap']
    }
    SAMLConnectionConfig: {
      /** @description General properties of a SAML connection. */
      general_properties: components['schemas']['GeneralProperties']
      /** @description Generated service provider metadata. */
      metadata: components['schemas']['Metadata']
      /** @description SAML connection configuration. */
      connection_config: components['schemas']['ConnectionConfig']
      /** @description SAML security configuration. */
      security: components['schemas']['Security']
      /** @description User sync configuration. */
      users: components['schemas']['Users']
    }
    SAMLConnectionResponse: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The domain type of the object.
       * @default saml_connection
       */
      domainType: unknown
      /** @description The unique identifier for this domain-object type. */
      id?: string
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description The container for external resources, like linked foreign objects or actions. */
      members?: {
        [key: string]: unknown
      }
      /** @description The configuration attributes of a user SAML connection. */
      extensions: components['schemas']['SAMLConnectionConfig']
    }
    SAMLConnectionResponseCollection: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The name of this collection.
       * @default all
       */
      id: string
      /**
       * @description The domain type of the objects in the collection.
       * @default saml_connection
       */
      domainType: unknown
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description A list of SAML connections. */
      value?: components['schemas']['SAMLConnectionResponse'][]
      /** @description Additional attributes alongside the collection. */
      extensions?: {
        [key: string]: unknown
      }
    }
    GeneralPropertiesCreate: {
      /** @description Display name for the SAML connection. */
      name: string
      /**
       * @description Add a title or describe this rule.
       * @default
       */
      description: string
      /**
       * @description An optional comment to explain the purpose of this object. The comment is only visible in this dialog and can help other users to understand the intentions of the configured attributes.
       * @default
       */
      comment: string
      /**
       * @description An optional URL linking documentation or any other page. An icon links to the page and opens in a new tab when clicked. You can use either global URLs (starting with http://), absolute local URLs (starting with /) or relative URLs (relative to check_mk/).
       * @default
       */
      documentation_url: string
      /**
       * @description Selecting 'deactivated' will disable the rule, but it will remain in the configuration.
       * @default activated
       * @enum {string}
       */
      rule_activation: 'activated' | 'deactivated'
      /** @description A SAML connection ID string. */
      id: string
    }
    SAMLConnectionCreateRequest: {
      /**
       * @description General properties of a SAML connection.
       * @example {
       *       "id": "saml_1",
       *       "name": "SAML Auth",
       *       "description": "1st saml connection",
       *       "comment": "test_comment",
       *       "documentation_url": "https://docs.checkmk.com/latest/en/saml.html",
       *       "rule_activation": "activated"
       *     }
       */
      general_properties: components['schemas']['GeneralPropertiesCreate']
      /**
       * @description SAML connection configuration.
       * @example {
       *       "checkmk_server_url": "https://localhost",
       *       "identity_provider_metadata": {
       *         "type": "url",
       *         "url": "https://localhost/saml"
       *       },
       *       "identity_provider_timeout": {
       *         "connect": 12,
       *         "read": 12
       *       }
       *     }
       */
      connection_config: components['schemas']['ConnectionConfig']
      /**
       * @description SAML security configuration.
       * @default {
       *       "signing_certificate": {
       *         "type": "builtin"
       *       }
       *     }
       * @example {
       *       "signing_certificate": {
       *         "type": "builtin"
       *       },
       *       "decrypt_auth_certificate": {
       *         "type": "builtin"
       *       }
       *     }
       */
      security: components['schemas']['Security']
      /**
       * @description User sync configuration.
       * @example {
       *       "id_attribute": "user_id",
       *       "full_name_attribute": "",
       *       "email_attribute": "",
       *       "contact_groups": {
       *         "type": "from_attribute_value",
       *         "attribute": "contact_group_attribute"
       *       },
       *       "roles": {
       *         "type": "map",
       *         "attribute": "roles_attribute",
       *         "roles": {
       *           "user": [
       *             "value1"
       *           ],
       *           "guest": [
       *             "value2",
       *             "value3"
       *           ]
       *         }
       *       }
       *     }
       */
      users: components['schemas']['Users']
    }
    PreDefinedTimeRange: {
      /**
       * @description The type of the time range. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      range_type: 'pre_defined'
      /**
       * @description The pre-defined time range.
       * @example today
       * @enum {string}
       */
      range:
        | 'today'
        | 'yesterday'
        | 'this_week'
        | 'last_week'
        | 'this_month'
        | 'last_month'
        | 'this_year'
        | 'last_year'
    }
    CustomTimeRange: {
      /**
       * @description The type of the time range. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      range_type: 'custom'
      /**
       * Format: iso8601
       * @description The start datetime of the SLA compute period range. The format has to conform to the ISO 8601 profile
       * @example 2017-07-21T17:32:28Z
       */
      start: string
      /**
       * Format: iso8601
       * @description The end datetime of the SLA compute period range. The format has to conform to the ISO 8601 profile
       * @example 2017-07-21T17:32:28Z
       */
      end: string
    }
    TimeRange1:
      | components['schemas']['PreDefinedTimeRange']
      | components['schemas']['CustomTimeRange']
    Service: {
      /** @example example.com */
      host_name: string
      /**
       * @description The service whose SLA data is to be computed.
       * @example CPU load
       */
      service_description: string
    }
    SLAComputeTarget: {
      /**
       * @description The ids of the SLA configurations for which the SLA should be computed.
       * @example [
       *       "sla_configuration_1",
       *       "sla_configuration_2"
       *     ]
       */
      sla_ids: string[]
      /**
       * @description The time ranges for which the SLA should be computed.
       * @example [
       *       {
       *         "range_type": "pre_defined",
       *         "range": "today"
       *       }
       *     ]
       */
      time_ranges: components['schemas']['TimeRange1'][]
      /**
       * @description The services for which the SLA should be computed.
       * @example [
       *       {
       *         "host_name": "heute",
       *         "service_description": "CPU load"
       *       }
       *     ]
       */
      services: components['schemas']['Service'][]
    }
    SLAComputeRequest: {
      /**
       * @description The SLA compute targets for which the SLA should be computed.
       * @example [
       *       {
       *         "sla_ids": [
       *           "sla_configuration_1"
       *         ],
       *         "time_ranges": [
       *           {
       *             "range_type": "pre_defined",
       *             "range": "today"
       *           }
       *         ],
       *         "services": [
       *           {
       *             "host_name": "heute",
       *             "service_description": "CPU load"
       *           }
       *         ]
       *       }
       *     ]
       */
      sla_compute_targets: components['schemas']['SLAComputeTarget'][]
    }
    ServiceOutput: {
      /**
       * @description The ID of the site.
       * @example production
       */
      site?: string
      /**
       * @description The name of the host.
       * @example heute
       */
      host_name?: string
      /**
       * @description The description of the service for which the SLA is computed.
       * @example CPU load
       */
      service_description?: string
    }
    SLATimeRange:
      | components['schemas']['PreDefinedTimeRange']
      | components['schemas']['CustomTimeRange']
    TimeRangeOutput: {
      /**
       * Format: date-time
       * @description The start time of the period
       * @example 2025-09-12 07:17:44.756718
       */
      start: string
      /**
       * Format: date-time
       * @description The end time of the period
       * @example 2025-09-12 07:18:44.756820
       */
      end: string
    }
    StateDurations: {
      /**
       * @description The time duration for how long the service was in the OK state or in downtime.
       * @example 10
       */
      ok_indowntime?: number
      /**
       * @description The time duration for how long the service was in the WARN state.
       * @example 10
       */
      warn?: number
      /**
       * @description The time duration for how long the service was in the CRIT state.
       * @example 10
       */
      crit?: number
      /**
       * @description The time duration for how long the service was in the UNKNOWN state or unmonitored.
       * @example 10
       */
      unknown_unmonitored?: number
    }
    StateSubResult: {
      /**
       * @description The deviation value of the SLA agreement. The deviation value is the difference between the observed and computed value. The meaning differs depending on the configured SLA computation type.
       * @example 1
       */
      deviation_value?: number
      /**
       * @description The deviation state of the SLA agreement. The deviation state is respective to the configured warn and crit levels and the determined deviation value.
       * @example ok
       * @enum {string}
       */
      deviation_state?: 'ok' | 'warn' | 'crit'
      /**
       * @description Whether the SLA agreement was broken or fulfilled during this period.The agreement is considered broken if at least one agreement of the defined state configurations was broken.
       * @example false
       * @enum {string}
       */
      sla_agreement: 'broken' | 'fulfilled'
    }
    ServiceStatePercentageStateRequirement: {
      /**
       * @description The configured state for which the SLA agreement is checked.
       * @example ok
       * @enum {string}
       */
      observed_state?: 'ok' | 'warn' | 'crit' | 'unknown'
      /**
       * @description The reference condition for which the observed state is compared to.
       * @example more_than
       * @enum {string}
       */
      condition?: 'more_than' | 'less_than'
      /**
       * @description The reference percentage value for which the condition is checked.
       * @example 10
       */
      observed_percentage?: number
    }
    Levels: {
      /**
       * @description The warning level of the SLA agreement.
       * @example 10
       */
      warn?: number
      /**
       * @description The critical level of the SLA agreement.
       * @example 10
       */
      crit?: number
    }
    MonitoringLevels: {
      /**
       * @description The levels of the SLA agreement.
       * @example {
       *       "warn": 10,
       *       "crit": 10
       *     }
       */
      levels?: components['schemas']['Levels']
      /**
       * @description The limit of the SLA agreement.
       * @example 10
       */
      limit?: number
    }
    ServiceStatePercentageConfig: {
      /** @description The configured state for which the SLA agreement is checked. */
      state_requirement?: components['schemas']['ServiceStatePercentageStateRequirement']
      /**
       * @description The monitoring levels for which the SLA agreement is checked.
       * @example {
       *       "levels": {
       *         "warn": 10,
       *         "crit": 10
       *       },
       *       "limit": 10
       *     }
       */
      monitoring_levels?: components['schemas']['MonitoringLevels']
    }
    ServiceStatePercentageSubResult: {
      /**
       * @description The state of the SLA agreement
       * @example {
       *       "deviation_value": 1,
       *       "deviation_state": "ok",
       *       "sla_agreement": "fulfilled"
       *     }
       */
      state?: components['schemas']['StateSubResult']
      config?: components['schemas']['ServiceStatePercentageConfig']
    }
    ServicePercentagePeriodResult: {
      /**
       * @description The duration of the time range in seconds.
       * @example 3600
       */
      duration?: number
      /** @description The time range of the period. */
      time_range?: components['schemas']['TimeRangeOutput']
      /**
       * @description Whether the SLA agreement was broken or fulfilled during this period.The agreement is considered broken if at least one agreement of the defined state configurations was broken.
       * @example false
       * @enum {string}
       */
      sla_agreement: 'broken' | 'fulfilled'
      /**
       * @description The percentage of the duration for which the service was in the underlying states
       * @example {
       *       "ok": 10,
       *       "warn": 10,
       *       "crit": 10,
       *       "unknown": 10
       *     }
       */
      state_durations?: components['schemas']['StateDurations']
      /** @description The sub results of the service state percentage period result. */
      sub_results?: components['schemas']['ServiceStatePercentageSubResult'][]
    }
    PluginPercentageStateComputedResult: {
      /**
       * @description The id of the plugin. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      plugin_id: 'service_state_percentage' | 'service_outage_count'
      /**
       * @description The duration of the time range in seconds.
       * @example 3600
       */
      time_range_sla_duration: number
      /** @description The period results of the service percentage state computation plugin. */
      period_results?: components['schemas']['ServicePercentagePeriodResult'][]
    }
    PluginResult:
      | components['schemas']['PluginPercentageStateComputedResult']
      | components['schemas']['PluginPercentageStateComputedResult']
    SLAComputeResult: {
      /**
       * @description The service entity for which the SLA is computed.
       * @example {
       *       "site_id": "production",
       *       "host_name": "heute",
       *       "service_description": "CPU load"
       *     }
       */
      service?: components['schemas']['ServiceOutput']
      /**
       * @description The ID of the SLA.
       * @example sla_configuration_1
       */
      sla_id?: string
      /** @description The time range for which the SLA is computed. */
      time_range?: components['schemas']['SLATimeRange']
      /**
       * @description The configured SLA period.
       * @example monthly
       * @enum {string}
       */
      sla_period?: 'monthly' | 'weekly' | 'daily'
      /** @description The period results of the SLA computation. */
      results?: components['schemas']['PluginResult'][]
    }
    SLAComputedResultCollection: {
      /**
       * @description The domain type of the objects in the collection
       * @default sla_computed
       */
      domainType: unknown
      /** @description The list of SLA computed results. */
      value?: components['schemas']['SLAComputeResult'][]
    }
    ServiceDiscoveryResultCheckTableValueExtensions: {
      /** @description The name of the host */
      host_name: string
      /** @description The name of the check plugin */
      check_plugin_name: string
      /** @description The name of the service */
      service_name: string
      /** @description The name of the service item */
      service_item?: string
      /** @description The name of the service phase */
      service_phase: string
    }
    ServiceDiscoveryResultCheckTableValue: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /** @description The name of the check */
      id: string
      /** @default property */
      memberType: unknown
      /** @description Current service phase of the check */
      value: string
      /** @default string */
      format: unknown
      /** @description Current service phase of the check */
      title: string
      /** @description Additional information about the check */
      extensions: components['schemas']['ServiceDiscoveryResultCheckTableValueExtensions']
    }
    ServiceDiscoveryResultHostLabelValue: {
      /** @description The value of the host label */
      value: string
      /** @description The name of the plugin that discovered the host label */
      plugin_name?: string
    }
    ServiceDiscoveryResultExtensions: {
      /** @description The changed checks for this host */
      check_table: {
        [key: string]: components['schemas']['ServiceDiscoveryResultCheckTableValue']
      }
      /** @description The labels of the host */
      host_labels: {
        [key: string]: components['schemas']['ServiceDiscoveryResultHostLabelValue']
      }
      /** @description The labels that have vanished */
      vanished_labels: {
        [key: string]: components['schemas']['ServiceDiscoveryResultHostLabelValue']
      }
      /** @description The labels that have changed */
      changed_labels: {
        [key: string]: components['schemas']['ServiceDiscoveryResultHostLabelValue']
      }
    }
    ServiceDiscoveryResult: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /** @description The "domain-type" of the object. */
      domainType: string
      /** @description The unique identifier for this domain-object type. */
      id?: string
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description The container for external resources, like linked foreign objects or actions. */
      members?: {
        [key: string]: unknown
      }
      /** @description Additional information about the service discovery result */
      extensions: components['schemas']['ServiceDiscoveryResultExtensions']
    }
    ServiceDiscoveryRunLogs: {
      /** @description The result messages */
      result: string[]
      /** @description The progress messages */
      progress: string[]
    }
    ServiceDiscoveryRunExtensions: {
      /** @description Whether the service discovery run is active */
      active: boolean
      /**
       * @description Current state of the service discovery run
       * @enum {string}
       */
      state: 'initialized' | 'running' | 'finished' | 'stopped' | 'exception'
      /** @description The logs of the service discovery run */
      logs: components['schemas']['ServiceDiscoveryRunLogs']
    }
    ServiceDiscoveryRun: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /** @description The "domain-type" of the object. */
      domainType: string
      /** @description The unique identifier for this domain-object type. */
      id?: string
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description The container for external resources, like linked foreign objects or actions. */
      members?: {
        [key: string]: unknown
      }
      /** @description Additional information about the service discovery run */
      extensions: components['schemas']['ServiceDiscoveryRunExtensions']
    }
    Api404CustomError5: {
      /**
       * @description The HTTP status code.
       * @example 404
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example There is no running service discovery
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Not Found
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    UpdateDiscoveryPhase: {
      /**
       * @description The name of the check which this service uses.
       * @example df
       */
      check_type: string
      /**
       * @description The value uniquely identifying the service on a given host.
       * @example /home
       */
      service_item: string | null
      /**
       * @description The target phase of the service.
       * @example monitored
       * @enum {string}
       */
      target_phase:
        | 'active'
        | 'changed'
        | 'clustered_ignored'
        | 'clustered_monitored'
        | 'clustered_undecided'
        | 'clustered_vanished'
        | 'custom'
        | 'ignored'
        | 'ignored_active'
        | 'ignored_custom'
        | 'legacy'
        | 'legacy_ignored'
        | 'manual'
        | 'monitored'
        | 'removed'
        | 'undecided'
        | 'vanished'
    }
    Api404CustomError6: {
      /**
       * @description The HTTP status code.
       * @example 404
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example Host could not be found
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Not Found
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    BulkDiscoveryOptions: {
      /**
       * @description The option whether to monitor undecided services or not.
       * @default false
       * @example true
       */
      monitor_undecided_services: boolean
      /**
       * @description The option whether to remove vanished services or not.
       * @default false
       * @example true
       */
      remove_vanished_services: boolean
      /**
       * @description The option whether to update service labels or not.
       * @default false
       * @example true
       */
      update_service_labels: boolean
      /**
       * @description The option whether to update discovered service parameters or not.
       * @default false
       * @example true
       */
      update_service_parameters: boolean
      /**
       * @description The option whether to update host labels or not.
       * @default false
       * @example true
       */
      update_host_labels: boolean
    }
    BulkDiscovery: {
      /**
       * @description A list of host names
       * @example [
       *       "example",
       *       "sample"
       *     ]
       */
      hostnames: string[]
      /**
       * @description The discovery options for the bulk discovery
       * @example {
       *       "monitor_undecided_services": true,
       *       "remove_vanished_services": true,
       *       "update_service_labels": true,
       *       "update_service_parameters": true,
       *       "update_host_labels": true
       *     }
       */
      options: components['schemas']['BulkDiscoveryOptions']
      /**
       * @description The option whether to perform a full scan or not.
       * @default true
       * @example true
       */
      do_full_scan: boolean
      /**
       * @description The number of hosts to be handled at once.
       * @default 10
       * @example 10
       */
      bulk_size: number
      /**
       * @description The option whether to ignore errors in single check plug-ins.
       * @default true
       * @example true
       */
      ignore_errors: boolean
    }
    DiscoverServices: {
      /**
       * @description The host of the service which shall be updated.
       * @example example.com
       */
      host_name: string
      /**
       * @description The mode of the discovery action. The 'refresh' mode starts a new service
       *             discovery which will contact the host and identify undecided and vanished services and host
       *             labels. Those services and host labels can be added or removed accordingly with the
       *             'fix_all' mode. The 'tabula_rasa' mode combines these two procedures. The 'new', 'remove',
       *             'only_host_labels' and 'only_service_labels' modes give you more granular control. Both the
       *             'tabula_rasa' and 'refresh' modes will start a background job and the endpoint will return
       *             a redirect to the 'wait-for-completion' endpoint. All other modes will return an immediate
       *             result instead. Keep in mind that the non background job modes only work with scanned data,
       *             so you may need to run "refresh" first. The corresponding user interface option for each
       *             discovery mode is shown below.
       *
       *      * `new` - Monitor undecided services
       *      * `remove` - Remove vanished services
       *      * `fix_all` - Accept all
       *      * `tabula_rasa` - Remove all and find new
       *      * `refresh` - Rescan
       *      * `only_host_labels` - Update host labels
       *      * `only_service_labels` - Update service labels
       *
       * @default fix_all
       * @example refresh
       * @enum {string}
       */
      mode:
        | 'new'
        | 'remove'
        | 'fix_all'
        | 'refresh'
        | 'only_host_labels'
        | 'only_service_labels'
        | 'tabula_rasa'
    }
    Api409CustomError2: {
      /**
       * @description The HTTP status code.
       * @example 409
       */
      status?: number
      /**
       * @description Detailed information on what exactly went wrong.
       * @example A service discovery background job is currently running
       */
      detail?: string
      /**
       * @description A summary of the problem.
       * @example Conflict
       */
      title?: string
      /** @description Detailed error messages on all fields failing validation. */
      fields?: {
        [key: string]: unknown
      }
      /** @description Additional information about the error. */
      ext?: {
        [key: string]: unknown
      }
    }
    ServiceGroupExtensions: {
      /**
       * @description [Managed edition only] The customer for which the object is configured. This field is required for the following editions: Managed.
       * @example provider
       */
      customer?: string
    }
    ServiceGroup: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The domain type of the object.
       * @default service_group_config
       */
      domainType: unknown
      /** @description The unique identifier for this domain-object type. */
      id?: string
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description The container for external resources, like linked foreign objects or actions. */
      members?: {
        [key: string]: unknown
      }
      /** @description All the attributes of the domain object. */
      extensions?: components['schemas']['ServiceGroupExtensions']
    }
    ServiceGroupCollection: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The name of this collection.
       * @default all
       */
      id: string
      /**
       * @description The domain type of the objects in the collection.
       * @default service_group_config
       */
      domainType: unknown
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description A list of service group objects. */
      value?: components['schemas']['ServiceGroup'][]
      /** @description Additional attributes alongside the collection. */
      extensions?: {
        [key: string]: unknown
      }
    }
    UpdateServiceGroupAttributes: {
      /**
       * @description The name used for displaying in the GUI.
       * @example Example Group
       */
      alias: string
      /**
       * @description [Managed edition only] By specifying a customer, you configure on which sites the user object will be available. 'global' will make the object available on all sites.
       * @example provider
       */
      customer?: string
    }
    UpdateServiceGroup: {
      /**
       * @description The name of the service group.
       * @example windows
       */
      name: string
      attributes: components['schemas']['UpdateServiceGroupAttributes']
    }
    BulkUpdateServiceGroup: {
      /**
       * @description A list of service group entries.
       * @example [
       *       {
       *         "name": "windows",
       *         "attributes": {
       *           "alias": "Windows Servers"
       *         }
       *       }
       *     ]
       */
      entries: components['schemas']['UpdateServiceGroup'][]
    }
    InputServiceGroup: {
      /**
       * @description [Managed edition only] By specifying a customer, you configure on which sites the user object will be available. 'global' will make the object available on all sites. This field is required for the following editions: Managed.
       * @example provider
       */
      customer?: string
      /**
       * @description A name used as identifier
       * @example windows
       */
      name: string
      /**
       * @description The name used for displaying in the GUI.
       * @example Environment Sensors
       */
      alias: string
    }
    BulkInputServiceGroup: {
      /**
       * @description A list of service group entries.
       * @example [
       *       {
       *         "name": "environment",
       *         "alias": "Environment Sensors"
       *       }
       *     ]
       */
      entries: components['schemas']['InputServiceGroup'][]
    }
    BulkDeleteServiceGroup: {
      /**
       * @description A list of service group names.
       * @example [
       *       "windows",
       *       "panels"
       *     ]
       */
      entries: string[]
    }
    ServiceParametersWithHost: {
      /**
       * @description Restrict the query to this particular site.
       * @default []
       * @example [
       *       "heute"
       *     ]
       */
      sites: string[]
      /**
       * @description The desired columns of the `services` table. If left empty, a default set of columns is used.
       * @default [
       *       "host_name",
       *       "description"
       *     ]
       * @example [
       *       "host_name",
       *       "description"
       *     ]
       */
      columns: string[]
      /**
       * @description An query expression of the Livestatus 'services' table in nested dictionary form. If you want to use multiple expressions, nest them with the AND/OR operators.
       * @example {
       *       "op": "=",
       *       "left": "host_name",
       *       "right": "example.com"
       *     }
       */
      query?: components['schemas']['Expr']
      /**
       * @description A host name.
       * @example example.com
       */
      host_name?: string
    }
    ServiceParameters: {
      /**
       * @description Restrict the query to this particular site.
       * @default []
       * @example [
       *       "heute"
       *     ]
       */
      sites: string[]
      /**
       * @description The desired columns of the `services` table. If left empty, a default set of columns is used.
       * @default [
       *       "host_name",
       *       "description"
       *     ]
       * @example [
       *       "host_name",
       *       "description"
       *     ]
       */
      columns: string[]
      /**
       * @description An query expression of the Livestatus 'services' table in nested dictionary form. If you want to use multiple expressions, nest them with the AND/OR operators.
       * @example {
       *       "op": "=",
       *       "left": "host_name",
       *       "right": "example.com"
       *     }
       */
      query?: components['schemas']['Expr']
    }
    /** BasicSettingsModel */
    BasicSettingsModel: {
      /**
       * Site Id
       * @description The site id.
       * @example prod
       */
      site_id: string
      /**
       * Alias
       * @description The alias of the site.
       * @example Site Alias
       */
      alias: string
      /**
       * Customer
       * @description [Managed edition only] By specifying a customer, you configure on which sites the user object will be available. 'global' will make the object available on all sites. This field is required for the following editions: Managed.
       * @example provider
       */
      customer?: string
    }
    /** ConnectionWithReplicationModel */
    ConnectionWithReplicationModel: {
      /**
       * @description Replication allows you to manage several monitoring sites with a logically centralized setup. Remote sites receive their configuration from the central sites. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      enable_replication: 'True'
      /**
       * Url Of Remote Site
       * @description URL of the remote Checkmk including /check_mk/. This URL is in many cases the same as the URL-Prefix but with check_mk/ appended, but it must always be an absolute URL.
       * @default
       * @example http://remote_site_1/check_mk/
       */
      url_of_remote_site: string
      /**
       * Disable Remote Configuration
       * @description It is a good idea to disable access to Setup completely on the remote site. Otherwise a user who does not now about the replication could make local changes that are overridden at the next configuration activation.
       * @example true
       */
      disable_remote_configuration: boolean
      /**
       * Ignore Tls Errors
       * @description This might be needed to make the synchronization accept problems with SSL certificates when using an SSL secured connection.
       */
      ignore_tls_errors: boolean
      /**
       * Direct Login To Web Gui Allowed
       * @description When enabled, this site is marked for synchronisation every time a web GUI related option is changed and users are allowed to login to the web GUI of this site.
       * @example true
       */
      direct_login_to_web_gui_allowed: boolean
      /**
       * User Sync
       * @description By default the users are synchronized automatically in the interval configured in the connection. For example the LDAP connector synchronizes the users every five minutes by default. The interval can be changed for each connection individually in the connection settings. Please note that the synchronization is only performed on the master site in distributed setups by default.
       */
      user_sync:
        | components['schemas']['UserSyncWithLdapModel']
        | components['schemas']['UserSyncAllModel']
        | components['schemas']['UserSyncDisabledModel']
      /**
       * Replicate Event Console
       * @description This option enables the distribution of global settings and rules of the Event Console to the remote site. Any change in the local Event Console settings will mark the site as need sync. A synchronization will automatically reload the EventConsole of the remote site.
       * @example true
       */
      replicate_event_console: boolean
      /**
       * Replicate Extensions
       * @description If you enable the replication of MKPs then during each Activate Changes MKPs that are installed on your central site and all other files below the ~/local/ directory will be also transferred to the remote site. Note: all other MKPs and files below ~/local/ on the remote site will be removed.
       * @example true
       */
      replicate_extensions: boolean
      /**
       * Message Broker Port
       * @description The port used by the message broker to exchange messages.
       * @example 5672
       */
      message_broker_port: number
    }
    /** ConnectionWithoutReplicationModel */
    ConnectionWithoutReplicationModel: {
      /**
       * @description Replication is disabled (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      enable_replication: 'False'
    }
    /** Direct */
    Direct: {
      /**
       * @description Use livestatus daemon with direct connection. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      use_livestatus_daemon: 'direct'
    }
    /** HeartbeatModel */
    HeartbeatModel: {
      /**
       * Interval
       * @description The heartbeat interval for the TCP connection.
       * @example 5
       */
      interval?: number
      /**
       * Timeout
       * @description The heartbeat timeout for the TCP connection.
       * @example 2
       */
      timeout?: number
    }
    /** IP4Socket */
    IP4Socket: {
      /**
       * Port
       * @description The TCP port to connect to.
       * @example 6790
       */
      port: number
      /**
       * Encrypted
       * @description To enable an encrypted connection.
       * @example true
       */
      encrypted: boolean
      /**
       * Verify
       * @description Verify server certificate.
       * @example true
       */
      verify?: boolean
      /**
       * @description The tcp socket type (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      socket_type: 'tcp'
      /**
       * Host
       * @description The IP4 address or domain name of the host.
       * @example 127.0.0.1
       */
      host: string
    }
    /** IP6Socket */
    IP6Socket: {
      /**
       * Port
       * @description The TCP port to connect to.
       * @example 6790
       */
      port: number
      /**
       * Encrypted
       * @description To enable an encrypted connection.
       * @example true
       */
      encrypted: boolean
      /**
       * Verify
       * @description Verify server certificate.
       * @example true
       */
      verify?: boolean
      /**
       * @description The tcp6 socket type (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      socket_type: 'tcp6'
      /**
       * Host
       * @description The IP6 address or domain name of the host.
       * @example 5402:1db8:95a3:0000:0000:9a2e:0480:8334
       */
      host: string
    }
    /** LocalSocket */
    LocalSocket: {
      /**
       * @description The local socket type (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      socket_type: 'local'
    }
    /** ProxyParamsModel */
    ProxyParamsModel: {
      /**
       * Channels
       * @description The number of channels to keep open.
       * @example 5
       */
      channels?: number
      /**
       * Heartbeat
       * @description The heartbeat interval and timeout configuration.
       */
      heartbeat?: components['schemas']['HeartbeatModel']
      /**
       * Channel Timeout
       * @description The timeout waiting for a free channel.
       * @example 3
       */
      channel_timeout?: number
      /**
       * Query Timeout
       * @description The total query timeout.
       * @example 120
       */
      query_timeout?: number
      /**
       * Connect Retry
       * @description The cooling period after a failed connect/heartbeat.
       * @example 4
       */
      connect_retry?: number
      /**
       * Cache
       * @description Enable caching.
       * @example true
       */
      cache?: boolean
    }
    /** ProxyTcpModel */
    ProxyTcpModel: {
      /**
       * Port
       * @description The TCP port to connect to.
       * @example 6790
       */
      port: number
      /**
       * Only From
       * @description Restrict access to these IP addresses.
       * @example [
       *       "192.168.1.23"
       *     ]
       */
      only_from: string[]
      /**
       * Tls
       * @description Encrypt TCP Livestatus connections.
       */
      tls?: boolean
    }
    /** SiteConnectionExtensionsModel */
    SiteConnectionExtensionsModel: {
      /** @description The status connection attributes */
      status_connection: components['schemas']['StatusConnectionModel']
      /**
       * Configuration Connection
       * @description The configuration connection attributes
       */
      configuration_connection:
        | components['schemas']['ConnectionWithReplicationModel']
        | components['schemas']['ConnectionWithoutReplicationModel']
      /** @description The basic settings of the site connection. */
      basic_settings: components['schemas']['BasicSettingsModel']
    }
    /** SiteConnectionModel */
    SiteConnectionModel: {
      /**
       * Links
       * @description List of links to other resources.
       * @example [
       *       {
       *         "href": "https://.../api_resource",
       *         "method": "GET",
       *         "rel": "self",
       *         "type": "application/json"
       *       }
       *     ]
       */
      links: components['schemas']['LinkModel'][]
      /**
       * Domaintype
       * @description The domain type of the object.
       * @constant
       */
      domainType: 'site_connection'
      /**
       * ID
       * @description The unique identifier for this domain-object type.
       * @example host1
       */
      id?: string
      /**
       * Title
       * @description A human readable title of this object. Can be used for user interfaces.
       * @example My Host
       */
      title?: string
      /**
       * @description The configuration attributes of a site.
       * @example {
       *       "basic_settings": {
       *         "alias": "Die remote site 1",
       *         "site_id": "site_id_1"
       *       },
       *       "configuration_connection": {
       *         "direct_login_to_web_gui_allowed": true,
       *         "disable_remote_configuration": true,
       *         "enable_replication": true,
       *         "ignore_tls_errors": false,
       *         "message_broker_port": 5672,
       *         "replicate_event_console": true,
       *         "replicate_extensions": true,
       *         "url_of_remote_site": "http://localhost/heute_remote_site_id_1/check_mk/",
       *         "user_sync": {
       *           "sync_with_ldap_connections": "all"
       *         }
       *       },
       *       "status_connection": {
       *         "connect_timeout": 2,
       *         "connection": {
       *           "encrypted": true,
       *           "host": "192.168.1.1",
       *           "port": 1253,
       *           "socket_type": "tcp",
       *           "verify": false
       *         },
       *         "disable_in_status_gui": false,
       *         "persistent_connection": false,
       *         "proxy": {
       *           "global_settings": false,
       *           "params": {
       *             "cache": true,
       *             "channel_timeout": 3.5,
       *             "channels": 15,
       *             "connect_retry": 4.6,
       *             "heartbeat": {
       *               "interval": 12,
       *               "timeout": 3
       *             },
       *             "query_timeout": 120.2
       *           },
       *           "tcp": {
       *             "only_from": [
       *               "192.168.1.1"
       *             ],
       *             "port": 6560,
       *             "tls": false
       *           },
       *           "use_livestatus_daemon": "with_proxy"
       *         },
       *         "status_host": {
       *           "status_host_set": "disabled"
       *         },
       *         "url_prefix": "/heute_remote_1/"
       *       }
       *     }
       */
      extensions: components['schemas']['SiteConnectionExtensionsModel']
    }
    /** StatusConnectionModel */
    StatusConnectionModel: {
      /**
       * Connection
       * @description When connecting to remote site please make sure that Livestatus over TCP is activated there. You can use UNIX sockets to connect to foreign sites on localhost.
       */
      connection:
        | components['schemas']['LocalSocket']
        | components['schemas']['IP4Socket']
        | components['schemas']['IP6Socket']
        | components['schemas']['UnixSocket']
      /**
       * Proxy
       * @description The Livestatus proxy daemon configuration attributes.
       */
      proxy: components['schemas']['Direct'] | components['schemas']['UseProxy']
      /**
       * Connect Timeout
       * @description The time that the GUI waits for a connection to the site to be established before the site is considered to be unreachable.
       * @example 2
       */
      connect_timeout: number
      /**
       * Persistent Connection
       * @description If you enable persistent connections then Multisite will try to keep open the connection to the remote sites.
       */
      persistent_connection?: boolean
      /**
       * Url Prefix
       * @description The URL prefix will be prepended to links of addons like NagVis when a link to such applications points to a host or service on that site.
       * @example /remote_1/
       */
      url_prefix?: string
      /**
       * Status Host
       * @description By specifying a status host for each non-local connection you prevent Multisite from running into timeouts when remote sites do not respond.
       */
      status_host:
        | components['schemas']['StatusHostDisabled']
        | components['schemas']['StatusHostEnabled']
      /**
       * Disable In Status Gui
       * @description If you disable a connection, then no data of this site will be shown in the status GUI. The replication is not affected by this, however.
       */
      disable_in_status_gui?: boolean
    }
    /** StatusHostDisabled */
    StatusHostDisabled: {
      /**
       * @description disabled for 'no status host' (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      status_host_set: 'disabled'
    }
    /** StatusHostEnabled */
    StatusHostEnabled: {
      /**
       * @description enabled for 'use the following status host' (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      status_host_set: 'enabled'
      /**
       * Site
       * @description The site ID of the status host.
       * @example prod
       */
      site: string
      /**
       * Host
       * @description The host name of the status host.
       * @example host_1
       */
      host: string
    }
    /** UnixSocket */
    UnixSocket: {
      /**
       * @description The unix socket type (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      socket_type: 'unix'
      /**
       * Path
       * @description When the connection name is unix, this is the path to the unix socket.
       * @example /path/to/your/unix_socket
       */
      path: string
    }
    /** UseProxy */
    UseProxy: {
      /**
       * @description Use livestatus daemon with livestatus proxy. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      use_livestatus_daemon: 'with_proxy'
      /**
       * Global Settings
       * @description When use_livestatus_daemon is set to 'with_proxy', you can set this to True to use global setting or False to use custom parameters.
       * @example true
       */
      global_settings: boolean
      /**
       * Tcp
       * @description Allow access via TCP configuration.
       */
      tcp?: components['schemas']['ProxyTcpModel']
      /**
       * Params
       * @description The live status proxy daemon parameters.
       */
      params?: components['schemas']['ProxyParamsModel']
    }
    /** UserSyncAllModel */
    UserSyncAllModel: {
      /**
       * @description Sync with all connections. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      sync_with_ldap_connections: 'all'
    }
    /** UserSyncDisabledModel */
    UserSyncDisabledModel: {
      /**
       * @description Sync with disabled connections. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      sync_with_ldap_connections: 'disabled'
    }
    /** UserSyncWithLdapModel */
    UserSyncWithLdapModel: {
      /**
       * @description Sync with ldap connections. (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      sync_with_ldap_connections: 'ldap'
      /**
       * Ldap Connections
       * @description A list of existing ldap connections.
       * @example [
       *       "LDAP_1",
       *       "LDAP_2"
       *     ]
       */
      ldap_connections: string[]
    }
    /** SiteManagementCollectionModel */
    SiteManagementCollectionModel: {
      /**
       * Links
       * @description List of links to other resources.
       * @example [
       *       {
       *         "href": "https://.../api_resource",
       *         "method": "GET",
       *         "rel": "self",
       *         "type": "application/json"
       *       }
       *     ]
       */
      links: components['schemas']['LinkModel'][]
      /**
       * Id
       * @description The name of this collection.
       */
      id: string
      /**
       * Domaintype
       * @description The domain type of the objects in the collection
       * @example site_connection
       * @constant
       */
      domainType: 'site_connection'
      /**
       * Title
       * @description A human readable title of this object. Can be used for user interfaces.
       */
      title?: string
      /**
       * Value
       * @description A list of site configuration objects.
       * @example [
       *       {
       *         "domainType": "site_connection",
       *         "extensions": {
       *           "basic_settings": {
       *             "alias": "Die remote site 1",
       *             "site_id": "site_id_1"
       *           },
       *           "configuration_connection": {
       *             "direct_login_to_web_gui_allowed": true,
       *             "disable_remote_configuration": true,
       *             "enable_replication": true,
       *             "ignore_tls_errors": false,
       *             "message_broker_port": 5672,
       *             "replicate_event_console": true,
       *             "replicate_extensions": true,
       *             "url_of_remote_site": "http://localhost/heute_remote_site_id_1/check_mk/",
       *             "user_sync": {
       *               "sync_with_ldap_connections": "all"
       *             }
       *           },
       *           "status_connection": {
       *             "connect_timeout": 2,
       *             "connection": {
       *               "encrypted": true,
       *               "host": "192.168.1.1",
       *               "port": 1253,
       *               "socket_type": "tcp",
       *               "verify": false
       *             },
       *             "disable_in_status_gui": false,
       *             "persistent_connection": false,
       *             "proxy": {
       *               "global_settings": false,
       *               "params": {
       *                 "cache": true,
       *                 "channel_timeout": 3.5,
       *                 "channels": 15,
       *                 "connect_retry": 4.6,
       *                 "heartbeat": {
       *                   "interval": 12,
       *                   "timeout": 3
       *                 },
       *                 "query_timeout": 120.2
       *               },
       *               "tcp": {
       *                 "only_from": [
       *                   "192.168.1.1"
       *                 ],
       *                 "port": 6560,
       *                 "tls": false
       *               },
       *               "use_livestatus_daemon": "with_proxy"
       *             },
       *             "status_host": {
       *               "status_host_set": "disabled"
       *             },
       *             "url_prefix": "/heute_remote_1/"
       *           }
       *         },
       *         "id": "prod",
       *         "links": [],
       *         "members": {},
       *         "title": "Site Alias"
       *       }
       *     ]
       */
      value: components['schemas']['SiteConnectionModel'][]
      /**
       * Extensions
       * @description Additional attributes alongside the collection.
       */
      extensions?: Record<string, never>
    }
    /** BasicSettingsEditModel */
    BasicSettingsEditModel: {
      /**
       * Alias
       * @description The alias of the site.
       * @example Site Alias
       */
      alias: string
      /**
       * Customer
       * @description [Managed edition only] By specifying a customer, you configure on which sites the user object will be available. 'global' will make the object available on all sites. This field is required for the following editions: Managed.
       * @example provider
       */
      customer?: string
      /**
       * Site Id
       * @description The site ID.
       * @example prod
       */
      site_id: string
    }
    /** SiteConnectionEdit */
    SiteConnectionEdit: {
      /** @description The status connection attributes */
      status_connection: components['schemas']['StatusConnectionModel']
      /**
       * Configuration Connection
       * @description The configuration connection attributes
       */
      configuration_connection:
        | components['schemas']['ConnectionWithReplicationModel']
        | components['schemas']['ConnectionWithoutReplicationModel']
      /** @description The basic connection attributes */
      basic_settings: components['schemas']['BasicSettingsEditModel']
    }
    /** SiteConnectionEditModel */
    SiteConnectionEditModel: {
      /**
       * @description A site's connection.
       * @example {
       *       "basic_settings": {
       *         "alias": "Die remote site 1",
       *         "site_id": "site_id_1"
       *       },
       *       "configuration_connection": {
       *         "direct_login_to_web_gui_allowed": true,
       *         "disable_remote_configuration": true,
       *         "enable_replication": true,
       *         "ignore_tls_errors": false,
       *         "message_broker_port": 5672,
       *         "replicate_event_console": true,
       *         "replicate_extensions": true,
       *         "url_of_remote_site": "http://localhost/heute_remote_site_id_1/check_mk/",
       *         "user_sync": {
       *           "sync_with_ldap_connections": "all"
       *         }
       *       },
       *       "status_connection": {
       *         "connect_timeout": 2,
       *         "connection": {
       *           "encrypted": true,
       *           "host": "192.168.1.1",
       *           "port": 1253,
       *           "socket_type": "tcp",
       *           "verify": false
       *         },
       *         "disable_in_status_gui": false,
       *         "persistent_connection": false,
       *         "proxy": {
       *           "global_settings": false,
       *           "params": {
       *             "cache": true,
       *             "channel_timeout": 3.5,
       *             "channels": 15,
       *             "connect_retry": 4.6,
       *             "heartbeat": {
       *               "interval": 12,
       *               "timeout": 3
       *             },
       *             "query_timeout": 120.2
       *           },
       *           "tcp": {
       *             "only_from": [
       *               "192.168.1.1"
       *             ],
       *             "port": 6560,
       *             "tls": false
       *           },
       *           "use_livestatus_daemon": "with_proxy"
       *         },
       *         "status_host": {
       *           "status_host_set": "disabled"
       *         },
       *         "url_prefix": "/heute_remote_1/"
       *       }
       *     }
       */
      site_config: components['schemas']['SiteConnectionEdit']
    }
    /** BasicSettingsCreateModel */
    BasicSettingsCreateModel: {
      /**
       * Alias
       * @description The alias of the site.
       * @example Site Alias
       */
      alias: string
      /**
       * Customer
       * @description [Managed edition only] By specifying a customer, you configure on which sites the user object will be available. 'global' will make the object available on all sites. This field is required for the following editions: Managed.
       * @example provider
       */
      customer?: string
      /**
       * Site Id
       * @description The site ID for the new connection.
       * @example prod
       */
      site_id: string
    }
    /** SiteConnectionCreate */
    SiteConnectionCreate: {
      /** @description The status connection attributes */
      status_connection: components['schemas']['StatusConnectionModel']
      /**
       * Configuration Connection
       * @description The configuration connection attributes
       */
      configuration_connection:
        | components['schemas']['ConnectionWithReplicationModel']
        | components['schemas']['ConnectionWithoutReplicationModel']
      /** @description The basic connection attributes */
      basic_settings: components['schemas']['BasicSettingsCreateModel']
    }
    /** SiteConnectionCreateModel */
    SiteConnectionCreateModel: {
      /**
       * @description A site's connection.
       * @example {
       *       "basic_settings": {
       *         "alias": "Die remote site 1",
       *         "site_id": "site_id_1"
       *       },
       *       "configuration_connection": {
       *         "direct_login_to_web_gui_allowed": true,
       *         "disable_remote_configuration": true,
       *         "enable_replication": true,
       *         "ignore_tls_errors": false,
       *         "message_broker_port": 5672,
       *         "replicate_event_console": true,
       *         "replicate_extensions": true,
       *         "url_of_remote_site": "http://localhost/heute_remote_site_id_1/check_mk/",
       *         "user_sync": {
       *           "sync_with_ldap_connections": "all"
       *         }
       *       },
       *       "status_connection": {
       *         "connect_timeout": 2,
       *         "connection": {
       *           "encrypted": true,
       *           "host": "192.168.1.1",
       *           "port": 1253,
       *           "socket_type": "tcp",
       *           "verify": false
       *         },
       *         "disable_in_status_gui": false,
       *         "persistent_connection": false,
       *         "proxy": {
       *           "global_settings": false,
       *           "params": {
       *             "cache": true,
       *             "channel_timeout": 3.5,
       *             "channels": 15,
       *             "connect_retry": 4.6,
       *             "heartbeat": {
       *               "interval": 12,
       *               "timeout": 3
       *             },
       *             "query_timeout": 120.2
       *           },
       *           "tcp": {
       *             "only_from": [
       *               "192.168.1.1"
       *             ],
       *             "port": 6560,
       *             "tls": false
       *           },
       *           "use_livestatus_daemon": "with_proxy"
       *         },
       *         "status_host": {
       *           "status_host_set": "disabled"
       *         },
       *         "url_prefix": "/heute_remote_1/"
       *       }
       *     }
       */
      site_config: components['schemas']['SiteConnectionCreate']
    }
    /** SiteLoginCredentials */
    SiteLoginCredentials: {
      /**
       * Username
       * @description An administrative user's username.
       * @example cmkadmin
       */
      username: string
      /**
       * Password
       * @description The password for the username given
       * @example password
       */
      password: string
    }
    ConcreteTimeRange: {
      /**
       * Format: time
       * @description The hour of the time period.
       * @example 14:00
       */
      start?: string
      /**
       * Format: time
       * @description The hour of the time period.
       * @example 14:00
       */
      end?: string
    }
    ConcreteTimeRangeActive: {
      /**
       * @description The day for which the time ranges are specified
       * @enum {string}
       */
      day?: 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday' | 'sunday'
      time_ranges?: components['schemas']['ConcreteTimeRange'][]
    }
    ConcreteTimePeriodException: {
      /**
       * Format: date
       * @description The date of the time period exception.8601 profile
       * @example 2020-01-01
       */
      date?: string
      /** @example [{'start': '14:00', 'end': '18:00'}] */
      time_ranges?: components['schemas']['ConcreteTimeRange'][]
    }
    TimePeriodAttrsResponse: {
      /**
       * @description The alias of the time period
       * @example alias
       */
      alias?: string
      /**
       * @description The days for which time ranges were specified
       * @example {
       *       "day": "all",
       *       "time_ranges": [
       *         {
       *           "start": "12:00",
       *           "end": "14:00"
       *         }
       *       ]
       *     }
       */
      active_time_ranges?: components['schemas']['ConcreteTimeRangeActive'][]
      /**
       * @description Specific day exclusions with their list of time ranges
       * @example [
       *       {
       *         "date": "2020-01-01",
       *         "time_ranges": [
       *           {
       *             "start": "14:00",
       *             "end": "18:00"
       *           }
       *         ]
       *       }
       *     ]
       */
      exceptions?: components['schemas']['ConcreteTimePeriodException'][]
      /**
       * @description The collection of time period names whose periods are excluded
       * @example [
       *       "time_period_1",
       *       "time_period_2",
       *       "time_period_3"
       *     ]
       */
      exclude?: string[]
    }
    TimePeriodResponse: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The domain type of the object.
       * @default time_period
       */
      domainType: unknown
      /**
       * @description The unique identifier for this time period.
       * @example time_period_name
       */
      id?: string
      /**
       * @description The time period name.
       * @example time_period_alias.
       */
      title?: string
      /** @description The container for external resources, like linked foreign objects or actions. */
      members?: {
        [key: string]: unknown
      }
      /**
       * @description The time period attributes.
       * @example {
       *       "alias": "holidays",
       *       "active_time_ranges": [
       *         {
       *           "day": "monday",
       *           "time_ranges": [
       *             {
       *               "start": "12:00",
       *               "end": "15:00"
       *             }
       *           ]
       *         }
       *       ],
       *       "exceptions": [
       *         {
       *           "date": "2023-01-01",
       *           "time_ranges": [
       *             {
       *               "start": "12:30",
       *               "end": "13:30"
       *             }
       *           ]
       *         }
       *       ],
       *       "exclude": [
       *         "time_period_1",
       *         "time_period_2",
       *         "time_period_3"
       *       ]
       *     }
       */
      extensions?: components['schemas']['TimePeriodAttrsResponse']
    }
    TimePeriodResponseCollection: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The name of this collection.
       * @default all
       */
      id: string
      /**
       * @description The domain type of the objects in the collection.
       * @default time_period
       */
      domainType: unknown
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /**
       * @description A list of time period objects.
       * @example [
       *       {
       *         "links": [],
       *         "domainType": "time_period",
       *         "id": "time_period",
       *         "members": {},
       *         "extensions": {
       *           "alias": "holidays",
       *           "active_time_ranges": [
       *             {
       *               "day": "monday",
       *               "time_ranges": [
       *                 {
       *                   "start": "12:00",
       *                   "end": "15:00"
       *                 }
       *               ]
       *             }
       *           ],
       *           "exceptions": [
       *             {
       *               "date": "2023-01-01",
       *               "time_ranges": [
       *                 {
       *                   "start": "12:30",
       *                   "end": "13:30"
       *                 }
       *               ]
       *             }
       *           ],
       *           "exclude": [
       *             "time_period_1",
       *             "time_period_2",
       *             "time_period_3"
       *           ]
       *         }
       *       }
       *     ]
       */
      value?: components['schemas']['TimePeriodResponse'][]
      /** @description Additional attributes alongside the collection. */
      extensions?: {
        [key: string]: unknown
      }
    }
    TimeRange2: {
      /**
       * Format: time
       * @description The start time of the period's time range
       * @example 14:00:00
       */
      start: string
      /**
       * Format: time
       * @description The end time of the period's time range
       * @example 16:00:00
       */
      end: string
    }
    TimeRangeActive: {
      /**
       * @description The day for which time ranges are to be specified. The 'all' option allows to specify time ranges for all days.
       * @default all
       * @enum {string}
       */
      day:
        | 'all'
        | 'monday'
        | 'tuesday'
        | 'wednesday'
        | 'thursday'
        | 'friday'
        | 'saturday'
        | 'sunday'
      /**
       * @default [
       *       {
       *         "start": "00:00:00",
       *         "end": "23:59:00"
       *       }
       *     ]
       * @example [
       *       {
       *         "start": "13:00:00",
       *         "end": "19:00:00"
       *       }
       *     ]
       */
      time_ranges: components['schemas']['TimeRange2'][]
    }
    TimePeriodException: {
      /**
       * Format: date
       * @description The date of the time period exception.8601 profile
       * @example 2020-01-01
       */
      date: string
      /**
       * @default []
       * @example [
       *       {
       *         "start": "14:00",
       *         "end": "18:00"
       *       }
       *     ]
       */
      time_ranges: components['schemas']['TimeRange2'][]
    }
    UpdateTimePeriod: {
      /**
       * @description An alias for the time period
       * @example new_alias
       */
      alias?: string
      /**
       * @description The list of active time ranges which replaces the existing list of time ranges
       * @example [
       *       {
       *         "day": "monday",
       *         "time_ranges": [
       *           {
       *             "start": "12:00:00",
       *             "end": "14:00:00"
       *           }
       *         ]
       *       }
       *     ]
       */
      active_time_ranges?: components['schemas']['TimeRangeActive'][]
      /**
       * @description A list of additional time ranges to be added.
       * @example [
       *       {
       *         "date": "2020-01-01",
       *         "time_ranges": [
       *           {
       *             "start": "14:00:00",
       *             "end": "18:00:00"
       *           }
       *         ]
       *       }
       *     ]
       */
      exceptions?: components['schemas']['TimePeriodException'][]
      /**
       * @description A list of time period names whose periods are excluded.
       * @example [
       *       "time_name"
       *     ]
       */
      exclude?: string[]
    }
    CreateTimePeriod: {
      /**
       * @description A unique name for the time period.
       * @example first
       */
      name: string
      /**
       * @description An alias for the time period.
       * @example alias
       */
      alias: string
      /**
       * @description The list of active time ranges.
       * @example [
       *       {
       *         "day": "monday",
       *         "time_ranges": [
       *           {
       *             "start": "12:00:00",
       *             "end": "14:00:00"
       *           }
       *         ]
       *       }
       *     ]
       */
      active_time_ranges: components['schemas']['TimeRangeActive'][]
      /**
       * @description A list of additional time ranges to be added.
       * @example [
       *       {
       *         "date": "2020-01-01",
       *         "time_ranges": [
       *           {
       *             "start": "14:00:00",
       *             "end": "18:00:00"
       *           }
       *         ]
       *       }
       *     ]
       */
      exceptions?: components['schemas']['TimePeriodException'][]
      /**
       * @description A list of time period names whose periods are excluded.
       * @example [
       *       "name"
       *     ]
       */
      exclude?: string[]
    }
    /** UserRoleExtensionsModel */
    UserRoleExtensionsModel: {
      /**
       * Alias
       * @description The alias of the user role.
       */
      alias: string
      /**
       * Permissions
       * @description A list of permissions for the user role.
       */
      permissions: string[]
      /**
       * Builtin
       * @description True if it's a built-in user role, otherwise False.
       */
      builtin: boolean
      /**
       * Enforce Two Factor Authentication
       * @description If enabled, all users with this role will be required to setup two factor authentication and will be logged out of any current sessions.
       */
      enforce_two_factor_authentication?: boolean
      /**
       * Basedon
       * @description The built-in user role id that the user role is based on.
       */
      basedon?: string
    }
    /** UserRoleModel */
    UserRoleModel: {
      /**
       * Links
       * @description List of links to other resources.
       * @example [
       *       {
       *         "href": "https://.../api_resource",
       *         "method": "GET",
       *         "rel": "self",
       *         "type": "application/json"
       *       }
       *     ]
       */
      links: components['schemas']['LinkModel'][]
      /**
       * Domaintype
       * @description The domain type of the object.
       * @constant
       */
      domainType: 'user_role'
      /**
       * ID
       * @description The unique identifier for this domain-object type.
       * @example host1
       */
      id?: string
      /**
       * Title
       * @description A human readable title of this object. Can be used for user interfaces.
       * @example My Host
       */
      title?: string
      /** @description All the data and metadata of this user role. */
      extensions: components['schemas']['UserRoleExtensionsModel']
    }
    /** UserRoleCollectionModel */
    UserRoleCollectionModel: {
      /**
       * Links
       * @description List of links to other resources.
       * @example [
       *       {
       *         "href": "https://.../api_resource",
       *         "method": "GET",
       *         "rel": "self",
       *         "type": "application/json"
       *       }
       *     ]
       */
      links: components['schemas']['LinkModel'][]
      /**
       * Id
       * @description The name of this collection.
       */
      id: string
      /**
       * Domaintype
       * @description The domain type of the objects in the collection
       * @example host_config
       * @constant
       */
      domainType: 'user_role'
      /**
       * Title
       * @description A human readable title of this object. Can be used for user interfaces.
       */
      title?: string
      /**
       * Value
       * @description A list of user role objects
       */
      value: components['schemas']['UserRoleModel'][]
      /**
       * Extensions
       * @description Additional attributes alongside the collection.
       */
      extensions?: Record<string, never>
    }
    /** EditUserRoleModel */
    EditUserRoleModel: {
      /**
       * New Role Id
       * @description New role_id for the userrole that must be unique.
       * @example new_userrole_id
       */
      new_role_id?: string
      /**
       * New Alias
       * @description New alias for the userrole that must be unique.
       * @example new_userrole_alias
       */
      new_alias?: string
      /**
       * New Basedon
       * @description A built-in user role that you want the user role to be based on.
       * @example guest
       */
      new_basedon?: string
      /**
       * New Permissions
       * @description A map of permission names to their state.  The following values can be set: 'yes' - the permission is active for this role.'no' - the permission is deactivated for this role, even if it was active in the role it was based on.'default' - takes the activation state from the role this role was based on.
       * @example {
       *       "general.edit_profile": "yes",
       *       "general.message": "no"
       *     }
       */
      new_permissions?: Record<string, never>
      /**
       * Enforce Two Factor Authentication
       * @description If enabled, all users with this role will be required to setup two factor authentication and will be logged out of any current sessions.
       */
      enforce_two_factor_authentication?: boolean
    }
    /** CreateUserRoleModel */
    CreateUserRoleModel: {
      /**
       * Role Id
       * @description An existing userrole that you want to clone.
       * @example admin
       */
      role_id: string
      /**
       * New Role Id
       * @description The new role id for the newly created user role.
       * @example new_limited_permissions_userrole
       */
      new_role_id?: string
      /**
       * New Alias
       * @description A new alias that you want to give to the newly created user role.
       * @example user_a
       */
      new_alias?: string
      /**
       * Enforce Two Factor Authentication
       * @description If enabled, all users with this role will be required to setup two factor authentication and will be logged out of any current sessions.
       * @example true
       */
      enforce_two_factor_authentication?: boolean
    }
    ConcreteUserContactOption: {
      /**
       * @description The mail address of the user.
       * @example user@example.com
       */
      email: string
      /** @description In case none of the notification rules handle a certain event a notification will be sent to the specified email */
      fallback_contact?: boolean
    }
    UserIdleOption: {
      /**
       * @description This field indicates if the idle timeout uses the global configuration, is disabled or uses an individual duration
       * @enum {string}
       */
      option: 'global' | 'disable' | 'individual'
      /**
       * @description The duration in seconds of the individual idle timeout if individual is selected as idle timeout option.
       * @example 3600
       */
      duration?: number
    }
    DateTimeRange: {
      /**
       * Format: date-time
       * @description The start datetime of the time period. The format conforms to the ISO 8601 profile
       * @example 2017-07-21T17:32:28+00:00
       */
      start_time: string
      /**
       * Format: iso8601
       * @description The end datetime of the time period. The format conforms to the ISO 8601 profile
       * @example 2017-07-21T17:32:28+00:00
       */
      end_time?: string
    }
    ConcreteDisabledNotifications: {
      /** @description Option if all notifications should be temporarily disabled */
      disable?: boolean
      /** @description A custom timerange during which notifications are disabled */
      timerange?: components['schemas']['DateTimeRange']
    }
    AuthOptionOutput: {
      /**
       * @example password
       * @enum {string}
       */
      auth_type?: 'password' | 'automation' | 'saml2' | 'ldap'
      /**
       * @description If set to True, the secret is stored
       * @example false
       */
      store_automation_secret?: boolean
      /**
       * @description If set to True, the user will be forced to change his password on the next login or access. Defaults to False
       * @example false
       */
      enforce_password_change?: boolean
    }
    ConcreteUserInterfaceAttributes: {
      /**
       * @description The theme of the interface
       * @example default
       * @enum {string}
       */
      interface_theme?: 'default' | 'dark' | 'light'
      /**
       * @description The position of the sidebar
       * @example right
       * @enum {string}
       */
      sidebar_position?: 'left' | 'right'
      /**
       * @description This option decides if icons in the navigation bar should show/hide the respective titles
       * @example hide
       * @enum {string}
       */
      navigation_bar_icons?: 'hide' | 'show'
      /**
       * @deprecated
       * @description Deprecated - use `main_menu_icons` instead.
       * @example topic
       * @enum {string}
       */
      mega_menu_icons?: 'topic' | 'entry'
      /**
       * @description This option decides if colored icon should be shown foe every entry in the main menus or alternatively only for the headlines (the 'topics')
       * @example topic
       * @enum {string}
       */
      main_menu_icons?: 'topic' | 'entry'
      /**
       * @description This option decides what show mode should be used for unvisited menus. Alternatively, this option can also be used to enforce show more removing the three dots for all menus.
       * @example default
       * @enum {string}
       */
      show_mode?: 'default' | 'default_show_less' | 'default_show_more' | 'enforce_show_more'
      /**
       * @description Whether or not to show the contextual icon in the UI for this user.
       * @default show_icon
       * @example show_icon
       * @enum {string}
       */
      contextual_help_icon: 'show_icon' | 'hide_icon'
    }
    BaseUserAttributes: {
      /** @description The alias or full name of the user. */
      fullname: string
      /**
       * @description [Managed edition only] By specifying a customer, you configure on which sites the user object will be available. 'global' will make the object available on all sites. This field is required for the following editions: Managed.
       * @example provider
       */
      customer?: string
      /** @description This field indicates if the user is allowed to login to the monitoring. */
      disable_login?: boolean
      /** @description Contact settings for the user */
      contact_options?: components['schemas']['ConcreteUserContactOption']
      /**
       * @description Idle timeout for the user. Per default, the global configuration is used.
       * @example {
       *       "option": "global"
       *     }
       */
      idle_timeout?: components['schemas']['UserIdleOption']
      /** @description The list of assigned roles to the user */
      roles?: string[]
      /** @description The names of the sites that this user is authorized to handle */
      authorized_sites?: string[]
      /** @description The contact groups that this user is a member of */
      contactgroups?: string[]
      pager_address?: string
      disable_notifications?: components['schemas']['ConcreteDisabledNotifications']
      /** @description The language used by the user in the user interface */
      language?: string
      /** @description The temperature unit used for graphs and perfometers. */
      temperature_unit?: string
      /**
       * @description Enforce password change attribute for the user
       * @example {
       *       "auth_type": "password",
       *       "enforce_password_change": false
       *     }
       */
      auth_option?: components['schemas']['AuthOptionOutput']
      interface_options?: components['schemas']['ConcreteUserInterfaceAttributes']
      /**
       * @description The URL that the user should be redirected to after login. There is a 'default_start_url', a 'welcome_page', and any other will be treated as a custom URL
       * @example welcome_page
       */
      start_url?: string
    }
    CustomUserAttributes: {
      [key: string]: string
    }
    UserObject: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The domain type of the object.
       * @default user_config
       */
      domainType: unknown
      /** @description The unique identifier for this domain-object type. */
      id?: string
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description The container for external resources, like linked foreign objects or actions. */
      members?: {
        [key: string]: unknown
      }
      /**
       * @description The attributes of the user
       * @example {
       *       "fullname": "John Doe"
       *     }
       */
      extensions?:
        | components['schemas']['BaseUserAttributes']
        | components['schemas']['CustomUserAttributes']
    }
    UserCollection: {
      /**
       * @description list of links to other resources.
       * @example null
       */
      links: components['schemas']['Link'][]
      /**
       * @description The name of this collection.
       * @default all
       */
      id: string
      /**
       * @description The domain type of the objects in the collection.
       * @default user_config
       */
      domainType: unknown
      /** @description A human readable title of this object. Can be used for user interfaces. */
      title?: string
      /** @description A list of user objects. */
      value?: components['schemas']['UserObject'][]
      /** @description Additional attributes alongside the collection. */
      extensions?: {
        [key: string]: unknown
      }
    }
    AuthUpdatePassword: {
      /**
       * @description The authentication type (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      auth_type: 'password'
      /**
       * @description The password for login
       * @example password
       */
      password?: string
      /**
       * @description If set to True, the user will be forced to change his password on the next login or access
       * @example false
       */
      enforce_password_change?: boolean
    }
    AuthUpdateSecret: {
      /**
       * @description The authentication type (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      auth_type: 'automation'
      /**
       * @description For accounts used by automation processes (such as fetching data from views for further procession). This is the automation secret
       * @example DEYQEQQPYCFFBYH@AVMC
       */
      secret?: string
      /**
       * @description If set to True, the secret will be stored unhashed in order to reuse it in rules.
       * @default false
       * @example false
       */
      store_automation_secret: boolean
    }
    AuthUpdateRemove: {
      /**
       * @description The authentication type (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      auth_type: 'remove'
    }
    AuthUpdateOption:
      | components['schemas']['AuthUpdatePassword']
      | components['schemas']['AuthUpdateSecret']
      | components['schemas']['AuthUpdateRemove']
    UserContactOption: {
      /**
       * @description The mail address of the user. Required if the user is a monitoringcontact and receives notifications via mail.
       * @example user@example.com
       */
      email: string
      /**
       * @description In case none of your notification rules handles a certain event a notification will be sent to the specified email
       * @default false
       * @example false
       */
      fallback_contact: boolean
    }
    IdleOption: {
      /**
       * @description Specify if the idle timeout should use the global configuration, be disabled or use an individual duration
       * @example false
       * @enum {string}
       */
      option: 'global' | 'disable' | 'individual'
      /**
       * @description The duration in seconds of the individual idle timeout if individual is selected as idle timeout option.
       * @default 3600
       * @example 60
       */
      duration: number
    }
    DisableNotificationCustomTimeRange: {
      /**
       * Format: iso8601
       * @description The start datetime of the time period. The format has to conform to the ISO 8601 profile
       * @example 2017-07-21T17:32:28Z
       */
      start_time: string
      /**
       * Format: iso8601
       * @description The end datetime of the time period. The format has to conform to the ISO 8601 profile
       * @example 2017-07-21T17:32:28Z
       */
      end_time: string
    }
    DisabledNotifications: {
      /**
       * @description Option if all notifications should be temporarily disabled
       * @example false
       */
      disable?: boolean
      /**
       * @description A custom timerange during which notifications are disabled
       * @example {
       *       "start_time": "2017-07-21T17:32:28Z",
       *       "end_time": "2017-07-21T18:32:28Z"
       *     }
       */
      timerange?: components['schemas']['DisableNotificationCustomTimeRange']
    }
    UserInterfaceUpdateAttributes: {
      /**
       * @description The theme of the interface
       * @enum {string}
       */
      interface_theme?: 'default' | 'dark' | 'light'
      /**
       * @description The position of the sidebar
       * @enum {string}
       */
      sidebar_position?: 'left' | 'right'
      /**
       * @description This option decides if icons in the navigation bar should show/hide the respective titles
       * @enum {string}
       */
      navigation_bar_icons?: 'hide' | 'show'
      /**
       * @deprecated
       * @description Deprecated - use `main_menu_icons` instead.
       * @enum {string}
       */
      mega_menu_icons?: 'topic' | 'entry'
      /**
       * @description This option decides if colored icon should be shown foe every entry in the main menus or alternatively only for the headlines (the 'topics')
       * @enum {string}
       */
      main_menu_icons?: 'topic' | 'entry'
      /**
       * @description This option decides what show mode should be used for unvisited menus. Alternatively, this option can also be used to enforce show more removing the three dots for all menus.
       * @enum {string}
       */
      show_mode?: 'default' | 'default_show_less' | 'default_show_more' | 'enforce_show_more'
      /**
       * @description Whether or not to show the contextual icon in the UI for this user.
       * @default show_icon
       * @example show_icon
       * @enum {string}
       */
      contextual_help_icon: 'show_icon' | 'hide_icon'
    }
    UpdateUser: {
      /**
       * @description The alias or full name of the user
       * @example Mathias Kettner
       */
      fullname?: string
      /**
       * @description [Managed edition only] By specifying a customer, you configure on which sites the user object will be available. 'global' will make the object available on all sites.
       * @example provider
       */
      customer?: string
      /**
       * @description Authentication option for the user
       * @example {
       *       "auth_type": "password",
       *       "password": "password"
       *     }
       */
      auth_option?: components['schemas']['AuthUpdateOption']
      /**
       * @description The user can be blocked from login but will remain part of the site. The disabling does not affect notification and alerts.
       * @example false
       */
      disable_login?: boolean
      /**
       * @description Contact settings for the user
       * @example {
       *       "email": "user@example.com"
       *     }
       */
      contact_options?: components['schemas']['UserContactOption']
      /** @example  */
      pager_address?: string
      /**
       * @description Idle timeout for the user
       * @example {}
       */
      idle_timeout?: components['schemas']['IdleOption']
      /**
       * @description The list of assigned roles to the user
       * @example [
       *       "user"
       *     ]
       */
      roles?: string[]
      /**
       * @description The names of the sites the user is authorized to handle. Specifying 'all' will grant the user access to all sites.
       * @example [
       *       "heute"
       *     ]
       */
      authorized_sites?: string[]
      /**
       * @description Assign the user to one or multiple contact groups. If no contact group is specified then no monitoring contact will be created for the user.
       * @example [
       *       "all"
       *     ]
       */
      contactgroups?: string[]
      /** @example {
       *       "disabled": false
       *     } */
      disable_notifications?: components['schemas']['DisabledNotifications']
      /**
       * @description Configure the language to be used by the user in the user interface. Omitting this will configure the default language
       * @example en
       * @enum {string}
       */
      language?: 'de' | 'en' | 'ro'
      /**
       * @description Configure the temperature unit used for graphs and perfometers.
       * @example celsius
       * @enum {string}
       */
      temperature_unit?: 'default' | 'celsius' | 'fahrenheit'
      /** @example {
       *       "interface_theme": "dark"
       *     } */
      interface_options?: components['schemas']['UserInterfaceUpdateAttributes']
      /**
       * @description The URL that the user should be redirected to after login. There is a 'default_start_url', a 'welcome_page', and any other will be treated as a custom URL
       * @example default_start_url
       */
      start_url?: string
    } & {
      [key: string]: unknown
    }
    UserDismissWarning: {
      /**
       * @description The warning to be dismissed.
       * @example notification_fallback
       * @enum {string}
       */
      warning: 'notification_fallback' | 'immediate_slideout_change' | 'changes-info'
    }
    AuthPassword: {
      /**
       * @description The authentication type (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      auth_type: 'password'
      /**
       * @description The password for login
       * @example password
       */
      password?: string
      /**
       * @description If set to True, the user will be forced to change his password on the next login or access. Defaults to False
       * @default false
       * @example false
       */
      enforce_password_change: boolean
    }
    AuthSecret: {
      /**
       * @description The authentication type (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      auth_type: 'automation'
      /**
       * @description For accounts used by automation processes (such as fetching data from views for further procession). This is the automation secret
       * @example DEYQEQQPYCFFBYH@AVMC
       */
      secret?: string
      /**
       * @description If set to True, the secret will be stored unhashed in order to reuse it in rules.
       * @default false
       * @example false
       */
      store_automation_secret: boolean
    }
    AuthOption: components['schemas']['AuthPassword'] | components['schemas']['AuthSecret']
    UserInterfaceAttributes: {
      /**
       * @description The theme of the interface
       * @default default
       * @enum {string}
       */
      interface_theme: 'default' | 'dark' | 'light'
      /**
       * @description The position of the sidebar
       * @default right
       * @enum {string}
       */
      sidebar_position: 'left' | 'right'
      /**
       * @description This option decides if icons in the navigation bar should show/hide the respective titles
       * @default hide
       * @enum {string}
       */
      navigation_bar_icons: 'hide' | 'show'
      /**
       * @deprecated
       * @description Deprecated - use `main_menu_icons` instead.
       * @default topic
       * @enum {string}
       */
      mega_menu_icons: 'topic' | 'entry'
      /**
       * @description This option decides if colored icon should be shown foe every entry in the main menus or alternatively only for the headlines (the 'topics')
       * @default topic
       * @enum {string}
       */
      main_menu_icons: 'topic' | 'entry'
      /**
       * @description This option decides what show mode should be used for unvisited menus. Alternatively, this option can also be used to enforce show more removing the three dots for all menus.
       * @default default
       * @enum {string}
       */
      show_mode: 'default' | 'default_show_less' | 'default_show_more' | 'enforce_show_more'
      /**
       * @description Whether or not to show the contextual icon in the UI for this user.
       * @default show_icon
       * @example show_icon
       * @enum {string}
       */
      contextual_help_icon: 'show_icon' | 'hide_icon'
    }
    CreateUser: {
      /**
       * @description An unique username for the user
       * @example cmkuser
       */
      username: string
      /**
       * @description The alias or full name of the user
       * @example Mathias Kettner
       */
      fullname: string
      /**
       * @description [Managed edition only] By specifying a customer, you configure on which sites the user object will be available. 'global' will make the object available on all sites.
       * @example provider
       */
      customer?: string
      /**
       * @description Authentication option for the user
       * @example {
       *       "auth_type": "password",
       *       "password": "password"
       *     }
       */
      auth_option?: components['schemas']['AuthOption']
      /**
       * @description The user can be blocked from login but will remain part of the site. The disabling does not affect notification and alerts.
       * @default false
       * @example false
       */
      disable_login: boolean
      /**
       * @description Contact settings for the user
       * @example {
       *       "email": "user@example.com"
       *     }
       */
      contact_options?: components['schemas']['UserContactOption']
      /**
       * @default
       * @example
       */
      pager_address: string
      /**
       * @description Idle timeout for the user. Per default, the global configuration is used.
       * @example {
       *       "option": "global"
       *     }
       */
      idle_timeout?: components['schemas']['IdleOption']
      /**
       * @description The list of assigned roles to the user
       * @example [
       *       "user"
       *     ]
       */
      roles?: string[]
      /**
       * @description The names of the sites the user is authorized to handle.
       * @default [
       *       "all"
       *     ]
       * @example [
       *       "heute"
       *     ]
       */
      authorized_sites: string[]
      /**
       * @description Assign the user to one or multiple contact groups. If no contact group is specified then no monitoring contact will be created for the user.
       * @example [
       *       "all"
       *     ]
       */
      contactgroups?: string[]
      /** @example {
       *       "disable": false
       *     } */
      disable_notifications?: components['schemas']['DisabledNotifications']
      /**
       * @description Configure the language to be used by the user in the user interface. Omitting this will configure the default language.
       * @example en
       * @enum {string}
       */
      language?: 'de' | 'en' | 'ro'
      /**
       * @description Configure the temperature unit used for graphs and perfometers. Omitting this field will configure the default temperature unit.
       * @example celsius
       * @enum {string}
       */
      temperature_unit?: 'default' | 'celsius' | 'fahrenheit'
      /**
       * @default {
       *       "interface_theme": "default",
       *       "sidebar_position": "right",
       *       "navigation_bar_icons": "hide",
       *       "mega_menu_icons": "topic",
       *       "main_menu_icons": "topic",
       *       "show_mode": "default",
       *       "contextual_help_icon": "show_icon"
       *     }
       * @example {
       *       "interface_theme": "dark"
       *     }
       */
      interface_options: components['schemas']['UserInterfaceAttributes']
      /**
       * @description The URL that the user should be redirected to after login. There is a 'default_start_url', a 'welcome_page', and any other will be treated as a custom URL
       * @default default_start_url
       * @example default_start_url
       */
      start_url: string
    } & {
      [key: string]: unknown
    }
    /** AutocompleterConfigModel */
    AutocompleterConfigModel: {
      /**
       * Ident
       * @description Identifier for the autocompleter.
       */
      ident: string
      /**
       * Params
       * @description Parameters for the autocompleter.
       */
      params: Record<string, never>
      /**
       * Dynamic Params Callback Name
       * @description Name of the callback for dynamic parameters.
       * @enum {string}
       */
      dynamic_params_callback_name?:
        | 'nop'
        | 'tag_group_options_autocompleter'
        | 'host_and_service_hinted_autocompleter'
        | 'host_hinted_autocompleter'
        | 'label_autocompleter'
        | 'check_types_autocompleter'
    }
    /** CheckboxComponentModel */
    CheckboxComponentModel: {
      /**
       * Component Type
       * @description A checkbox component.
       * @constant
       */
      component_type: 'checkbox'
      /**
       * Id
       * @description The identifier for the checkbox component.
       */
      id: string
      /**
       * Label
       * @description The label for the checkbox.
       */
      label: string
      /**
       * Default Value
       * @description The default value of the checkbox.
       */
      default_value: boolean
    }
    /** CheckboxGroupComponentModel */
    CheckboxGroupComponentModel: {
      /**
       * Component Type
       * @description A group of checkboxes.
       * @constant
       */
      component_type: 'checkbox_group'
      /**
       * Choices
       * @description All checkboxes, variable id -> display label.
       *     The default value for each checkbox is `true`, unless some checkboxes are explicitly set in the
       *     current filter values (in which case the default is `false`).
       */
      choices: {
        [key: string]: string
      }
      /**
       * Label
       * @description The label for the checkbox group.
       */
      label?: string
    }
    /** DropdownComponentModel */
    DropdownComponentModel: {
      /**
       * Component Type
       * @description A static dropdown component.
       * @constant
       */
      component_type: 'dropdown'
      /**
       * Id
       * @description The identifier for the dropdown component.
       */
      id: string
      /**
       * Choices
       * @description Choices for the dropdown, internal value -> display label.
       */
      choices: {
        [key: string]: string
      }
      /**
       * Default Value
       * @description The default value that should be selected.
       */
      default_value: string
      /**
       * Label
       * @description The label for the dropdown.
       */
      label?: string
    }
    /** DualListComponentModel */
    DualListComponentModel: {
      /**
       * Component Type
       * @description A dual list component for selecting multiple items.
       * @constant
       */
      component_type: 'dual_list'
      /**
       * Id
       * @description The identifier for the dual list component.
       */
      id: string
      /**
       * Choices
       * @description Choices for the dual list, internal value -> display label.
       */
      choices: {
        [key: string]: string
      }
    }
    /** DynamicDropdownComponentModel */
    DynamicDropdownComponentModel: {
      /**
       * Component Type
       * @description Filter on a dropdown, with options loaded dynamically.
       * @constant
       */
      component_type: 'dynamic_dropdown'
      /**
       * Id
       * @description The identifier for the dropdown component.
       */
      id: string
      /** @description Configuration for the autocompleter. */
      autocompleter: components['schemas']['AutocompleterConfigModel']
      /**
       * Has Validation
       * @description Whether this dropdown has validation logic.
       */
      has_validation: boolean
    }
    FilterComponentModel:
      | components['schemas']['HorizontalGroupComponentModel']
      | components['schemas']['DropdownComponentModel']
      | components['schemas']['DynamicDropdownComponentModel']
      | components['schemas']['CheckboxComponentModel']
      | components['schemas']['CheckboxGroupComponentModel']
      | components['schemas']['TextInputComponentModel']
      | components['schemas']['RadioButtonComponentModel']
      | components['schemas']['SliderComponentModel']
      | components['schemas']['StaticTextComponentModel']
      | components['schemas']['HiddenComponentModel']
      | components['schemas']['DualListComponentModel']
      | components['schemas']['LabelGroupFilterComponentModel']
      | components['schemas']['TagFilterComponentModel']
    /** FilterDomainObject */
    FilterDomainObject: {
      /**
       * Links
       * @description List of links to other resources.
       * @example [
       *       {
       *         "href": "https://.../api_resource",
       *         "method": "GET",
       *         "rel": "self",
       *         "type": "application/json"
       *       }
       *     ]
       */
      links: components['schemas']['LinkModel'][]
      /**
       * Domaintype
       * @description The domain type of the object.
       * @constant
       */
      domainType: 'visual_filter'
      /**
       * ID
       * @description The unique identifier for this domain-object type.
       * @example host1
       */
      id?: string
      /**
       * Title
       * @description A human readable title of this object. Can be used for user interfaces.
       * @example My Host
       */
      title?: string
      /** @description All the data and metadata of this host. */
      extensions: components['schemas']['FilterExtensions']
    }
    /** FilterExtensions */
    FilterExtensions: {
      /**
       * Info
       * @description For which type of object this filter is applicable.
       */
      info: string
      /**
       * Description
       * @description Description for this filter.
       */
      description?: string
      /**
       * Is Show More
       * @description Whether the filter is normally hidden.
       */
      is_show_more: boolean
      /**
       * Components
       * @description The components of the filter, e.g. dropdowns, checkboxes, etc.
       */
      components: components['schemas']['FilterComponentModel'][]
    }
    /** HiddenComponentModel */
    HiddenComponentModel: {
      /**
       * Component Type
       * @description A hidden component, not rendered in the UI but used to set static values.
       * @constant
       */
      component_type: 'hidden'
      /**
       * Id
       * @description The identifier for the hidden component.
       */
      id: string
      /**
       * Value
       * @description The static value for this component.
       */
      value: string
    }
    /** HorizontalGroupComponentModel */
    HorizontalGroupComponentModel: {
      /**
       * Component Type
       * @description A horizontal group of components.
       * @constant
       */
      component_type: 'horizontal_group'
      /**
       * Components
       * @description The components within this horizontal group.
       */
      components: components['schemas']['FilterComponentModel'][]
    }
    /** LabelGroupFilterComponentModel */
    LabelGroupFilterComponentModel: {
      /**
       * Component Type
       * @description A filter component for selecting label groups.
       * @constant
       */
      component_type: 'label_group'
      /**
       * Id
       * @description The identifier for the label group filter component.
       */
      id: string
      /**
       * Object Type
       * @description The type of object this label group filter is applied to.
       * @enum {string}
       */
      object_type: 'host' | 'service'
    }
    /** RadioButtonComponentModel */
    RadioButtonComponentModel: {
      /**
       * Component Type
       * @description A radio button component.
       * @constant
       */
      component_type: 'radio_button'
      /**
       * Id
       * @description The identifier for the radio button component.
       */
      id: string
      /**
       * Choices
       * @description Options for the radio buttons, internal value -> display label.
       */
      choices: {
        [key: string]: string
      }
      /**
       * Default Value
       * @description The default value that should be selected.
       */
      default_value: string
    }
    /** SliderComponentModel */
    SliderComponentModel: {
      /**
       * Component Type
       * @description A slider component.
       * @constant
       */
      component_type: 'slider'
      /**
       * Id
       * @description The identifier for the slider component.
       */
      id: string
      /**
       * Min Value
       * @description The minimum value of the slider.
       */
      min_value: number
      /**
       * Max Value
       * @description The maximum value of the slider.
       */
      max_value: number
      /**
       * Step
       * @description The step size for the slider.
       */
      step: number
      /**
       * Default Value
       * @description The default value of the slider.
       */
      default_value: number
    }
    /** StaticTextComponentModel */
    StaticTextComponentModel: {
      /**
       * Component Type
       * @description A static text component, not interactive.
       * @constant
       */
      component_type: 'static_text'
      /**
       * Text
       * @description The static text to be displayed.
       */
      text: string
    }
    /** TagFilterComponentModel */
    TagFilterComponentModel: {
      /**
       * Component Type
       * @description A filter component for selecting tags.
       * @constant
       */
      component_type: 'tag_filter'
      /**
       * Display Rows
       * @description Number of rows to display in the tag filter dropdown.
       */
      display_rows: number
      /**
       * Variable Prefix
       * @description Prefix for the variables used in the filter.
       */
      variable_prefix: string
    }
    /** TextInputComponentModel */
    TextInputComponentModel: {
      /**
       * Component Type
       * @description A text input component.
       * @constant
       */
      component_type: 'text_input'
      /**
       * Id
       * @description The identifier for the text input component.
       */
      id: string
      /**
       * Label
       * @description The label for the text input.
       */
      label?: string
      /**
       * Suffix
       * @description An optional suffix to be placed after the input field, mostly for units.
       */
      suffix?: string
    }
    /** FilterCollection */
    FilterCollection: {
      /**
       * Links
       * @description List of links to other resources.
       * @example [
       *       {
       *         "href": "https://.../api_resource",
       *         "method": "GET",
       *         "rel": "self",
       *         "type": "application/json"
       *       }
       *     ]
       */
      links: components['schemas']['LinkModel'][]
      /**
       * Id
       * @description The name of this collection.
       */
      id: string
      /**
       * Domaintype
       * @description The domain type of the objects in the collection
       * @example visual_filter
       * @constant
       */
      domainType: 'visual_filter'
      /**
       * Title
       * @description A human readable title of this object. Can be used for user interfaces.
       */
      title?: string
      /**
       * Value
       * @description A list of filter configurations.
       * @example [
       *       {}
       *     ]
       */
      value: components['schemas']['FilterDomainObject'][]
      /**
       * Extensions
       * @description Additional attributes alongside the collection.
       */
      extensions?: Record<string, never>
    }
    /** BasicAuthentication */
    BasicAuthentication: {
      /**
       * @description Authentication type (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'basicauth'
      /**
       * Userlist
       * @description List of users
       */
      userlist: components['schemas']['User'][]
    }
    /** CustomHostNameRule */
    CustomHostNameRule: {
      /**
       * @description Type of rule (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'custom'
      /**
       * Value
       * @description List of host name rules
       */
      value: components['schemas']['HostNameRule'][]
    }
    /** HostNameRule */
    HostNameRule: {
      /**
       * Type
       * @description Type of rule
       * @enum {string}
       */
      type: 'free' | 'key'
      /**
       * Value
       * @description Literal string or Otel attribute name
       */
      value: string
    }
    /** MemoryLimitValueType */
    MemoryLimitValueType: {
      /** Limit */
      limit: number
      /** Spike Limit */
      spike_limit: number
    }
    /** NoAuthentication */
    NoAuthentication: {
      /**
       * @description Authentication type (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'none'
    }
    /** OTelCollectorEndpointConfig */
    OTelCollectorEndpointConfig: {
      /**
       * Address
       * @description Host address
       */
      address: string
      /**
       * Port
       * @description Port number
       */
      port: number
    }
    /** OTelCollectorObject */
    OTelCollectorObject: {
      /**
       * Links
       * @description List of links to other resources.
       * @example [
       *       {
       *         "href": "https://.../api_resource",
       *         "method": "GET",
       *         "rel": "self",
       *         "type": "application/json"
       *       }
       *     ]
       */
      links: components['schemas']['LinkModel'][]
      /**
       * Domaintype
       * @description The domain type of the objects in the collection
       * @example otel_collector_config
       * @constant
       */
      domainType: 'otel_collector_config'
      /**
       * ID
       * @description The unique identifier for this domain-object type.
       * @example host1
       */
      id?: string
      /**
       * Title
       * @description A human readable title of this object. Can be used for user interfaces.
       * @example My Host
       */
      title?: string
      /** @description All the data and metadata of this collector configuration. */
      extensions: components['schemas']['OTelCollectorSpec']
    }
    /** OTelCollectorPrometheusScrapeConfig */
    OTelCollectorPrometheusScrapeConfig: {
      /**
       * Job Name
       * @description Job Name. This will get translated to a host name
       */
      job_name: string
      /**
       * Scrape Interval
       * @description Time period for periodically scraping target (in seconds)
       */
      scrape_interval: number
      /**
       * Metrics Path
       * @description URL path to metrics endpoint
       */
      metrics_path: string | null
      /**
       * Targets
       * @description Definition of targets to scrape
       */
      targets: components['schemas']['OTelCollectorEndpointConfig'][]
      /**
       * Host Name Rules
       * @description Rules for generating host names from scraped data
       */
      host_name_rules: (
        | components['schemas']['StaticHostNameRule']
        | components['schemas']['CustomHostNameRule']
      )[]
      /**
       * Encryption
       * @description Encryption configuration
       */
      encryption: boolean
    }
    /** OTelCollectorProtocolConfig */
    OTelCollectorProtocolConfig: {
      endpoint: components['schemas']['OTelEndpointExtended']
    }
    /** OTelCollectorSpec */
    OTelCollectorSpec: {
      /**
       * Ident
       * @description Unique identifier
       */
      ident: string
      /**
       * Title
       * @description Title of the collection configuration
       */
      title: string
      /**
       * Disabled
       * @description Should the configuration be disabled?
       */
      disabled: boolean
      /**
       * Site
       * @description Sites for which the collector should be configured. Note: There is only one configuration allowed per site.
       */
      site: string[]
      /** Comment */
      comment?: string
      /** Docu Url */
      docu_url?: string
      /**
       * Receiver Protocol Grpc
       * @description Configure the receiver for the GRPC protocol
       */
      receiver_protocol_grpc?: components['schemas']['OTelCollectorProtocolConfig']
      /**
       * Receiver Protocol Http
       * @description Configure the receiver for the HTTP protocol
       */
      receiver_protocol_http?: components['schemas']['OTelCollectorProtocolConfig']
      /**
       * Memory Limit
       * @description Configure the memory limit for the collector
       */
      memory_limit?: components['schemas']['OtelMemoryLimitConfig']
      /**
       * Prometheus Scrape Configs
       * @description Configure targets supporting the Prometheus protocol for active scraping
       */
      prometheus_scrape_configs?: components['schemas']['OTelCollectorPrometheusScrapeConfig'][]
    }
    /** OTelEndpointExtended */
    OTelEndpointExtended: {
      /**
       * Address
       * @description Host address
       */
      address: string
      /**
       * Port
       * @description Port number
       */
      port: number
      /**
       * Host Name Rules
       * @description The host name computation computes the name of the host that should have the corresponding Checkmk services. The computation is done by the OpenTelemetry collector and the result is stored in the '{attr}' attribute. For every rule configured here, the provided fields are concatenated in the order they are listed. The first rule that results in a non-empty value is used. For an example see the help text in the UI.
       */
      host_name_rules: components['schemas']['HostNameRule'][][]
      /**
       * Export To Syslog
       * @description Set to 'true' to enable forwarding to syslog and Event Console
       */
      export_to_syslog: boolean
      /**
       * Auth
       * @description Authentication configuration
       */
      auth: components['schemas']['NoAuthentication'] | components['schemas']['BasicAuthentication']
      /**
       * Encryption
       * @description Encryption configuration
       */
      encryption: boolean
    }
    /** OtelMemoryLimitConfig */
    OtelMemoryLimitConfig: {
      /** Check Interval */
      check_interval: number
      /** Limit */
      limit: ['absolute' | 'relative', components['schemas']['MemoryLimitValueType']]
    }
    /** Password */
    Password: {
      /**
       * Type
       * @description Password lookup type
       * @enum {string}
       */
      type: 'explicit' | 'store'
      /**
       * Value
       * @description Actual password string or name from the password store
       */
      value: string
    }
    /** StaticHostNameRule */
    StaticHostNameRule: {
      /**
       * @description Type of rule (enum property replaced by openapi-typescript)
       * @enum {string}
       */
      type: 'service_instance_id'
    }
    /** User */
    User: {
      /**
       * Username
       * @description Username
       */
      username: string
      /** @description Password */
      password: components['schemas']['Password']
    }
    /** OTelCollectorCollection */
    OTelCollectorCollection: {
      /**
       * Links
       * @description List of links to other resources.
       * @example [
       *       {
       *         "href": "https://.../api_resource",
       *         "method": "GET",
       *         "rel": "self",
       *         "type": "application/json"
       *       }
       *     ]
       */
      links: components['schemas']['LinkModel'][]
      /**
       * Id
       * @description The name of this collection.
       */
      id: string
      /**
       * Domaintype
       * @description The domain type of the objects in the collection
       * @example otel_collector_config
       * @constant
       */
      domainType: 'otel_collector_config'
      /**
       * Title
       * @description A human readable title of this object. Can be used for user interfaces.
       */
      title?: string
      /**
       * Value
       * @description A list of collector configuration objects
       */
      value: components['schemas']['OTelCollectorObject'][]
      /**
       * Extensions
       * @description Additional attributes alongside the collection.
       */
      extensions?: Record<string, never>
    }
    GetCustomGraph: {
      /**
       * @description The time range from which to source the metrics.
       * @example {
       *       "start": "2025-09-12 07:03:39.107940",
       *       "end": "2025-09-12 07:18:39.107948"
       *     }
       */
      time_range: components['schemas']['TimeRange']
      /**
       * @description Specify how to reduce a segment of data points to a single data point of the output metric. This can be useful to find spikes in your data that would be smoothed out by computing the average.
       * @default average
       * @example max
       * @enum {string}
       */
      reduce: 'min' | 'max' | 'average'
      /**
       * @description The ID of the requested custom graph.
       * @example my_cool_graph
       */
      custom_graph_id: string
    }
  }
  responses: never
  parameters: {
    /**
     * @description Media type(s) that is/are acceptable for the response.
     * @example application/json
     */
    Accept: string
  }
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  'cmk.gui.openapi.endpoints.acknowledgement.delete_acknowledgement': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RemoveProblemAcknowledgement']
      }
    }
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.acknowledgement.set_acknowledgement_on_hosts': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AcknowledgeHostRelatedProblem']
      }
    }
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
      /** @description Unprocessable Entity: The query yielded no result. */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api422CustomError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.acknowledgement.set_acknowledgement_on_services': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AcknowledgeServiceRelatedProblem']
      }
    }
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
      /** @description Unprocessable Entity: Service was not in a problem state. */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api422CustomError1']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.activate_changes.list_pending_changes': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PendingChangesCollection']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.activate_changes.list_activations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ActivationRunCollection']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.activate_changes.show_activation': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The activation-id. */
        activation_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ActivationStatusResponse']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: There is no running activation with this activation_id. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404CustomError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.activate_changes.activate_changes_wait_for_completion': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The activation-id. */
        activation_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content: The activation has been completed. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Found: The activation is still running. Redirecting to the 'Wait for completion' endpoint. */
      302: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: There is no running activation with this activation_id. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404CustomError1']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.activate_changes.activate_changes': {
    parameters: {
      query?: never
      header: {
        /**
         * @description The value of the, to be modified, object's ETag header. You can get this value by displaying the object it individually. When ETag validation is enabled in the REST API, update operations require that the ETag value you provide matches the object's current server-side ETag. The content of the ETag can potentially be anything and should be treated as semantically opaque.
         * @example "a20ceacf346041dc"
         */
        'If-Match': string
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ActivateChanges']
      }
    }
    responses: {
      /** @description OK: Activation has been started, but not completed (if you need to wait for completion, see documentation for this endpoint). */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ActivationRunResponse']
        }
      }
      /** @description See Other: The activation has been started and is still running. Redirecting to the 'Wait for completion' endpoint. */
      303: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Unauthorized: The API user may not activate another users changes, or the user may and activation was not forced explicitly. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api401CustomError']
        }
      }
      /** @description Forbidden: Activation not possible because of licensing issues. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403CustomError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Conflict: Some sites could not be activated. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api409CustomError']
        }
      }
      /** @description Precondition Failed: The value of the If-Match header doesn't match the object's ETag. */
      412: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api412DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
      /** @description Unprocessable Entity: There are no changes to be activated. */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api422CustomError2']
        }
      }
      /** @description Locked: There is already an activation running. */
      423: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api423CustomError']
        }
      }
      /** @description Precondition Required: The required If-Match header is missing. */
      428: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api428DefaultError']
        }
      }
    }
  }
  'cmk.gui.cee.agent_bakery._openapi.automatic_deployment_status': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ActionResultObject']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.cee.agent_bakery._openapi.baking_status': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ActionResultObject']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.agent.download_agent': {
    parameters: {
      query: {
        /** @description The type of the operating system. May be one of linux_rpm, linux_deb, windows_msi */
        os_type: 'linux_deb' | 'linux_rpm' | 'windows_msi'
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/octet-stream': string
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.cee.agent_bakery._openapi.download_agent_by_hash': {
    parameters: {
      query: {
        /** @description The configuration hash representing an agent. */
        agent_hash: string
        /** @description The type of the operating system. May be one of aix_tgz, linux_deb, linux_rpm, linux_tgz, solaris_pkg, solaris_tgz, windows_msi */
        os_type:
          | 'aix_tgz'
          | 'linux_deb'
          | 'linux_rpm'
          | 'linux_tgz'
          | 'solaris_pkg'
          | 'solaris_tgz'
          | 'windows_msi'
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/octet-stream': string
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.cee.agent_bakery._openapi.download_agent_by_host': {
    parameters: {
      query: {
        /** @description Type of agent. */
        agent_type?: 'host_name' | 'vanilla' | 'generic'
        /** @description A host name. */
        host_name?: string
        /** @description A folder name.
         *
         *     Path delimiters can be either `~`, `/` or `\`. Please use the one most appropriate for your quoting/escaping needs. A good default choice is `~`. */
        folder_name?: string
        /** @description The type of the operating system. May be one of aix_tgz, linux_deb, linux_rpm, linux_tgz, solaris_pkg, solaris_tgz, windows_msi */
        os_type:
          | 'aix_tgz'
          | 'linux_deb'
          | 'linux_rpm'
          | 'linux_tgz'
          | 'solaris_pkg'
          | 'solaris_tgz'
          | 'windows_msi'
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/octet-stream': string
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.cee.agent_bakery._openapi.list_agents': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AgentCollection']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.cee.agent_bakery._openapi.show_agent_information': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The configuration hash representing an agent. */
        agent_hash: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DomainObject']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.cee.agent_bakery._openapi.bake_all_agents': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ActionResultScalar']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Conflict: The request is in conflict with the stored resource. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api409DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.cee.agent_bakery._openapi.bake_and_sign_all_agents': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AgentSign']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ActionResultScalar']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.cee.agent_bakery._openapi.sign_agents': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AgentSign']
      }
    }
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.audit_log.get_all': {
    parameters: {
      query: {
        /** @description The type of object we want to filter on */
        object_type?: 'All' | 'None' | 'Folder' | 'Host' | 'User' | 'Rule' | 'Ruleset'
        /** @description Name of an object to filter by */
        object_id?: string
        /** @description An username to filter by */
        user_id?: string
        /** @description The date from wich to obtain the audit log entries. The format has to conform to the ISO 8601 profile */
        date: string
        /** @description A regular expression to be applied to the user_id, action and summary fields. */
        regexp?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AuditLogEntryCollection']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.audit_log.archive_logs': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.autocomplete.show': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        /** @description The id of the autocompleter */
        autocomplete_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Request']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Response']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.aux_tags.show_aux_tags': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AuxTagResponseCollection']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.aux_tags.create_aux_tag': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AuxTagAttrsCreate']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AuxTagResponse']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.aux_tags.show_aux_tag': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description An auxiliary tag id */
        aux_tag_id: string | null
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AuxTagResponse']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.aux_tags.put_aux_tag': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        /** @description An auxiliary tag id */
        aux_tag_id: string | null
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AuxTagAttrsUpdate']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AuxTagResponse']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.aux_tags.delete_aux_tag': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description An auxiliary tag id */
        aux_tag_id: string | null
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Conflict: The request is in conflict with the stored resource. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api409DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.background_job.show_background_job_snapshot': {
    parameters: {
      query?: {
        /** @description The site where the background job is located. Defaults to local site */
        site_id?: string
      }
      header?: never
      path: {
        /** @description The ID of the background job */
        job_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BackgroundJobSnapshotObject']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.broker_connection.show_broker_connections': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BrokerConnectionResponseCollection']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.broker_connection.create_broker_connection': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BrokerConnectionRequestCreate']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BrokerConnectionResponse']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.broker_connection.show_broker_connection': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description An unique connection id for the broker connection */
        connection_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BrokerConnectionResponse']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.broker_connection.edit_broker_connection': {
    parameters: {
      query?: never
      header: {
        /**
         * @description The value of the, to be modified, object's ETag header. You can get this value by displaying the object it individually. When ETag validation is enabled in the REST API, update operations require that the ETag value you provide matches the object's current server-side ETag. The content of the ETag can potentially be anything and should be treated as semantically opaque.
         * @example "a20ceacf346041dc"
         */
        'If-Match': string
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        /** @description An unique connection id for the broker connection */
        connection_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BrokerConnectionRequestUpdate']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BrokerConnectionResponse']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Precondition Failed: The value of the If-Match header doesn't match the object's ETag. */
      412: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api412DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
      /** @description Precondition Required: The required If-Match header is missing. */
      428: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api428DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.broker_connection.delete_broker_connection': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description An unique connection id for the broker connection */
        connection_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.bi._openapi.bi_aggregation_state_get': {
    parameters: {
      query?: {
        /** @description Filter by names */
        filter_names?: string[]
        /** @description Filter by group */
        filter_groups?: string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BIAggregationStateResponse']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.bi._openapi.bi_aggregation_state_post': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BIAggregationStateRequest']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BIAggregationStateResponse']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.bi._openapi.get_bi_packs': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DomainObjectCollection']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.bi._openapi.get_bi_aggregation': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The unique id for the aggregation */
        aggregation_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BIAggregationEndpoint']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.bi._openapi.put_bi_aggregation': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        /** @description The unique id for the aggregation */
        aggregation_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BIAggregationEndpoint']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BIAggregationEndpoint']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.bi._openapi.post_bi_aggregation': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        /** @description The unique id for the aggregation */
        aggregation_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BIAggregationEndpoint']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BIAggregationEndpoint']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.bi._openapi.delete_bi_aggregation': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The unique id for the aggregation */
        aggregation_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.bi._openapi.get_bi_pack': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The unique id for the aggregation pack */
        pack_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DomainObject']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.bi._openapi.put_bi_pack': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        /** @description The unique id for the aggregation pack */
        pack_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BIPackEndpoint']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BIPackEndpoint']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.bi._openapi.post_bi_pack': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        /** @description The unique id for the aggregation pack */
        pack_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BIPackEndpoint']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BIPackEndpoint']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.bi._openapi.delete_bi_pack': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The unique id for the aggregation pack */
        pack_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.bi._openapi.get_bi_rule': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The unique id for the rule */
        rule_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BIRuleEndpoint']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.bi._openapi.put_bi_rule': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        /** @description The unique id for the rule */
        rule_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BIRuleEndpoint']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BIRuleEndpoint']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.bi._openapi.post_bi_rule': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        /** @description The unique id for the rule */
        rule_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BIRuleEndpoint']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BIRuleEndpoint']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.bi._openapi.delete_bi_rule': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The unique id for the rule */
        rule_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Conflict: The request is in conflict with the stored resource. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api409DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.cert.agent_controller_certificates_settings': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AgentControllerCertificateSettings']
        }
      }
      /** @description Forbidden: Unauthorized to read the global settings */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403CustomError1']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.cert.root_cert': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['X509PEM']
        }
      }
      /** @description Forbidden: You do not have the permission for agent pairing. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403CustomError2']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.cert.make_certificate': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['X509ReqPEMUUID']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['X509PEM']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: You do not have the permission for agent pairing. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403CustomError3']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.comment.show_comments': {
    parameters: {
      query?: {
        /** @description An query expression of the Livestatus 'comments' table in nested dictionary form. If you want to use multiple expressions, nest them with the AND/OR operators. */
        query?: string
        /** @description The host name. No exception is raised when the specified host name does not exist */
        host_name?: string
        /** @description The service name. No exception is raised when the specified service description does not exist */
        service_description?: string
        /** @description An existing site id */
        site_id?: string
      }
      header?: never
      path: {
        /** @description Do you want to get comments from 'hosts', 'services' or 'all' */
        collection_name: 'host' | 'service' | 'all'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CommentCollection']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.comment.show_comment': {
    parameters: {
      query: {
        /** @description An existing site id */
        site_id: string
      }
      header?: never
      path: {
        /** @description An existing comment's ID */
        comment_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CommentObject']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.comment.delete_comments': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DeleteComments']
      }
    }
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.comment.create_host_comment': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateHostRelatedComment']
      }
    }
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.comment.create_service_comment': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateServiceRelatedComment']
      }
    }
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.configuration_entity._get_configuration_entity_form_spec_schema': {
    parameters: {
      query: {
        /** @description Entity type specifier of the configuration entity */
        entity_type_specifier: string
      }
      header?: never
      path: {
        /** @description Type of configuration entity */
        entity_type: 'notification_parameter' | 'folder'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DomainObject']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.configuration_entity._update_configuration_entity': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateConfigurationEntity']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['EditConfigurationEntityResponse']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
      /** @description Unprocessable Entity: The request could not be processed. */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api422DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.configuration_entity._create_configuration_entity': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateConfigurationEntity']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['EditConfigurationEntityResponse']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
      /** @description Unprocessable Entity: The request could not be processed. */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api422DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.configuration_entity.folder._list_folder': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Entity type specifier of the configuration entity */
        entity_type_specifier: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['FolderResponseCollection']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.configuration_entity.notification_parameter._list_notification_parameters': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Entity type specifier of the configuration entity */
        entity_type_specifier: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NotificationParamResponseCollection']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.configuration_entity.notification_parameter._get_notification_parameter': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Object id of the configuration entity */
        entity_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DomainObject']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.contact_group_config.list_group': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactGroupCollection']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.contact_group_config.create': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['InputContactGroup']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DomainObject']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.contact_group_config.show': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The identifier name of the group. */
        name: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactGroup']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.contact_group_config.update': {
    parameters: {
      query?: never
      header: {
        /**
         * @description The value of the, to be modified, object's ETag header. You can get this value by displaying the object it individually. When ETag validation is enabled in the REST API, update operations require that the ETag value you provide matches the object's current server-side ETag. The content of the ETag can potentially be anything and should be treated as semantically opaque.
         * @example "a20ceacf346041dc"
         */
        'If-Match': string
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        /** @description The identifier name of the group. */
        name: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateContactGroupAttributes']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactGroup']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Precondition Failed: The value of the If-Match header doesn't match the object's ETag. */
      412: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api412DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
      /** @description Precondition Required: The required If-Match header is missing. */
      428: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api428DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.contact_group_config.delete': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The identifier name of the group. */
        name: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Conflict: The request is in conflict with the stored resource. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api409DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.contact_group_config.bulk_update': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BulkUpdateContactGroup']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactGroupCollection']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.contact_group_config.bulk_create': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BulkInputContactGroup']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactGroupCollection']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.contact_group_config.bulk_delete': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BulkDeleteContactGroup']
      }
    }
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Conflict: The request is in conflict with the stored resource. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api409DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'Dashboards.list_dashboard_metadata_v1': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DashboardMetadataCollectionModel']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
    }
  }
  'Dashboards.show_dashboard_constants_v1': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DashboardConstantsObject']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
    }
  }
  'Dashboards.show_relative_grid_dashboard_v1': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        dashboard_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RelativeGridDashboardDomainObject']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultErrorAB2AA48D05FD212E']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
    }
  }
  'Dashboards.edit_relative_grid_dashboard_v1': {
    parameters: {
      query?: {
        owner?: string
      }
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        dashboard_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['EditDashboardV1']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RelativeGridDashboardDomainObject']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultErrorDDACC62852906524']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultErrorAB2AA48D05FD212E']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultErrorDC1454384BB8AA8A']
        }
      }
    }
  }
  'Dashboards.show_responsive_grid_dashboard_v1': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        dashboard_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ResponsiveGridDashboardDomainObject']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultErrorAB2AA48D05FD212E']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
    }
  }
  'Dashboards.edit_responsive_grid_dashboard_v1': {
    parameters: {
      query?: {
        owner?: string
      }
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        dashboard_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['EditResponsiveGridDashboardV1']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ResponsiveGridDashboardDomainObject']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultErrorDDACC62852906524']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultErrorAB2AA48D05FD212E']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultErrorDC1454384BB8AA8A']
        }
      }
    }
  }
  'Dashboards.compute_widget_attributes_v1': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ComputedWidgetSpecRequest']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ComputedWidgetSpecResponse']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultErrorDDACC62852906524']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultErrorDC1454384BB8AA8A']
        }
      }
    }
  }
  'Dashboards.create_relative_grid_dashboard_v1': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateDashboardV1']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RelativeGridDashboardDomainObject']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultErrorDDACC62852906524']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultErrorDC1454384BB8AA8A']
        }
      }
    }
  }
  'Dashboards.create_responsive_grid_dashboard_v1': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateResponsiveGridDashboardV1']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ResponsiveGridDashboardDomainObject']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultErrorDDACC62852906524']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultErrorDC1454384BB8AA8A']
        }
      }
    }
  }
  'Dashboards.delete_dashboard_v1': {
    parameters: {
      query?: {
        owner?: string
      }
      header?: never
      path: {
        dashboard_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultErrorDDACC62852906524']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultErrorAB2AA48D05FD212E']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.downtime.show_downtimes': {
    parameters: {
      query?: {
        /** @description An query expression of the Livestatus 'downtimes' table in nested dictionary form. If you want to use multiple expressions, nest them with the AND/OR operators. */
        query?: string
        /** @description The host name. No exception is raised when the specified host name does not exist. Using this parameter only will filter for host downtimes only. Cannot be used together with the query parameter. */
        host_name?: string
        /** @description The service name. No exception is raised when the specified service description does not exist. This parameter can be combined with the host_name parameter to only filter for service downtimes of on a specific host. Cannot be used together with the query parameter. */
        service_description?: string
        /** @description The type of the downtime to be listed. Only filters the result when using the host_name or service_description parameter. */
        downtime_type?: 'host' | 'service' | 'both'
        /** @description An existing site id */
        site_id?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DowntimeCollection']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.downtime.show_downtime': {
    parameters: {
      query: {
        /** @description An existing site id */
        site_id: string
      }
      header?: never
      path: {
        /** @description The id of the downtime */
        downtime_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DowntimeObject']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.downtime.modify_host_downtime': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ModifyDowntime']
      }
    }
    responses: {
      /** @description No Content: Update downtimes commands have been sent to Livestatus. The REST API exclusively manages the preparation and dispatch of commands to Livestatus. These commands are processed in an asynchronous manner, and the REST API does not validate the successful execution of commands on Livestatus. To investigate any failures in Livestatus, one should refer to the corresponding log. Also you can refer to [Queries through the REST API](#section/Queries-through-the-REST-API) section for further information. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.downtime.delete_downtime': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DeleteDowntime']
      }
    }
    responses: {
      /** @description No Content: Delete downtimes commands have been sent to Livestatus. The REST API exclusively manages the preparation and dispatch of commands to Livestatus. These commands are processed in an asynchronous manner, and the REST API does not validate the successful execution of commands on Livestatus. To investigate any failures in Livestatus, one should refer to the corresponding log. Also you can refer to [Queries through the REST API](#section/Queries-through-the-REST-API) section for further information. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.downtime.create_host_related_downtime': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateHostRelatedDowntime']
      }
    }
    responses: {
      /** @description No Content: Create host related downtimes commands have been sent to Livestatus. The REST API exclusively manages the preparation and dispatch of commands to Livestatus. These commands are processed in an asynchronous manner, and the REST API does not validate the successful execution of commands on Livestatus. To investigate any failures in Livestatus, one should refer to the corresponding log. Also you can refer to [Queries through the REST API](#section/Queries-through-the-REST-API) section for further information. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
      /** @description Unprocessable Entity: The request could not be processed. */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api422DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.downtime.create_service_related_downtime': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateServiceRelatedDowntime']
      }
    }
    responses: {
      /** @description No Content: Create service related downtimes commands have been sent to Livestatus. The REST API exclusively manages the preparation and dispatch of commands to Livestatus. These commands are processed in an asynchronous manner, and the REST API does not validate the successful execution of commands on Livestatus. To investigate any failures in Livestatus, one should refer to the corresponding log. Also you can refer to [Queries through the REST API](#section/Queries-through-the-REST-API) section for further information. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
      /** @description Unprocessable Entity: The request could not be processed. */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api422DefaultError']
        }
      }
    }
  }
  'cmk.gui.cee.dcd._openapi.show_rule': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The unique ID of an existing dynamic host configuration. */
        dcd_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ShowDCD']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.cee.dcd._openapi.delete_rule': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The unique ID of an existing dynamic host configuration. */
        dcd_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The dynamic host configuration was not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404CustomError2']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.cee.dcd._openapi.fetch_phase1_result': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ConnectionFetchPhaseOne']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DomainObject']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Conflict: The request is in conflict with the stored resource. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api409DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.cee.dcd._openapi.create_rule': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateDCD']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ShowDCD']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.mkeventd._openapi.show_events': {
    parameters: {
      query?: {
        /** @description An query expression of the Livestatus 'eventconsoleevents' table in nested dictionary form. If you want to use multiple expressions, nest them with the AND/OR operators. */
        query?: string
        /** @description The host name. No exception is raised when the specified host name does not exist */
        host?: string
        /** @description Show events that originated from this app. */
        application?: string
        /** @description The state */
        state?: 'ok' | 'warning' | 'critical' | 'unknown'
        /** @description The event phase, open or ack */
        phase?: 'open' | 'ack'
        /** @description An existing site id */
        site_id?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['EventConsoleResponseCollection']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.mkeventd._openapi.show_event': {
    parameters: {
      query: {
        /** @description An existing site id */
        site_id: string
      }
      header?: never
      path: {
        /** @description The event console event ID. */
        event_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ECEventResponse']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.mkeventd._openapi.change_multiple_event_states': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ChangeEventStateSelector']
      }
    }
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.mkeventd._openapi.archive_events_with_filter': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DeleteECEvents']
      }
    }
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.mkeventd._openapi.update_and_acknowledge_multiple_events': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAndAcknowledgeSelector']
      }
    }
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.mkeventd._openapi.change_event_state': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        /** @description The event console event ID. */
        event_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ChangeEventState']
      }
    }
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.mkeventd._openapi.update_and_acknowledge_event': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        /** @description The event console event ID. */
        event_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAndAcknowledeEventSiteIDRequired']
      }
    }
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.folder_config.list_folders': {
    parameters: {
      query?: {
        /** @description Show all sub-folders of this folder. The default is the root-folder.
         *
         *     Path delimiters can be either `~`, `/` or `\`. Please use the one most appropriate for your quoting/escaping needs. A good default choice is `~`. */
        parent?: string
        /** @description List the folder (default: root) and all its sub-folders recursively. */
        recursive?: boolean
        /** @description When set, all hosts that are stored in each folder will also be shown. On large setups this may come at a performance cost, so by default this is switched off. */
        show_hosts?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['FolderCollection']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.folder_config.create': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateFolder']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Folder']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.folder_config.show_folder': {
    parameters: {
      query?: {
        /** @description When set, all hosts that are stored in this folder will also be shown. On large setups this may come at a performance cost, so by default this is switched off. */
        show_hosts?: boolean
      }
      header?: never
      path: {
        /** @description The path of the folder being requested. Please be aware that slashes can't be used in the URL. Also, escaping the slashes via %2f will not work. Please replace the path delimiters with the tilde character `~`.
         *
         *     Path delimiters can be either `~`, `/` or `\`. Please use the one most appropriate for your quoting/escaping needs. A good default choice is `~`. */
        folder: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Folder']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.folder_config.update': {
    parameters: {
      query?: never
      header: {
        /**
         * @description The value of the, to be modified, object's ETag header. You can get this value by displaying the object it individually. When ETag validation is enabled in the REST API, update operations require that the ETag value you provide matches the object's current server-side ETag. The content of the ETag can potentially be anything and should be treated as semantically opaque.
         * @example "a20ceacf346041dc"
         */
        'If-Match': string
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        /** @description The path of the folder being requested. Please be aware that slashes can't be used in the URL. Also, escaping the slashes via %2f will not work. Please replace the path delimiters with the tilde character `~`.
         *
         *     Path delimiters can be either `~`, `/` or `\`. Please use the one most appropriate for your quoting/escaping needs. A good default choice is `~`. */
        folder: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateFolder']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Folder']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Precondition Failed: The value of the If-Match header doesn't match the object's ETag. */
      412: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api412DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
      /** @description Precondition Required: The required If-Match header is missing. */
      428: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api428DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.folder_config.delete': {
    parameters: {
      query?: {
        /** @description Delete policy: 'recursive': Deletes the folder and all the elements it contains. 'abort_on_nonempty': Deletes the folder only if it is not empty. */
        delete_mode?: 'recursive' | 'abort_on_nonempty'
      }
      header?: never
      path: {
        /** @description The path of the folder being requested. Please be aware that slashes can't be used in the URL. Also, escaping the slashes via %2f will not work. Please replace the path delimiters with the tilde character `~`.
         *
         *     Path delimiters can be either `~`, `/` or `\`. Please use the one most appropriate for your quoting/escaping needs. A good default choice is `~`. */
        folder: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Unauthorized: The user is not authorized to do this request. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api401DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Conflict: The request is in conflict with the stored resource. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api409DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.folder_config.hosts_of_folder': {
    parameters: {
      query?: {
        /** @description Show all effective attributes on hosts, not just the attributes which were set on this host specifically. This includes all attributes of all of this host's parent folders. */
        effective_attributes?: boolean
      }
      header?: never
      path: {
        /** @description The path of the folder being requested. Please be aware that slashes can't be used in the URL. Also, escaping the slashes via %2f will not work. Please replace the path delimiters with the tilde character `~`.
         *
         *     Path delimiters can be either `~`, `/` or `\`. Please use the one most appropriate for your quoting/escaping needs. A good default choice is `~`. */
        folder: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HostConfigCollection']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.folder_config.bulk_update': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BulkUpdateFolder']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['FolderCollection']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.folder_config.move': {
    parameters: {
      query?: never
      header: {
        /**
         * @description The value of the, to be modified, object's ETag header. You can get this value by displaying the object it individually. When ETag validation is enabled in the REST API, update operations require that the ETag value you provide matches the object's current server-side ETag. The content of the ETag can potentially be anything and should be treated as semantically opaque.
         * @example "a20ceacf346041dc"
         */
        'If-Match': string
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        /** @description The path of the folder being requested. Please be aware that slashes can't be used in the URL. Also, escaping the slashes via %2f will not work. Please replace the path delimiters with the tilde character `~`.
         *
         *     Path delimiters can be either `~`, `/` or `\`. Please use the one most appropriate for your quoting/escaping needs. A good default choice is `~`. */
        folder: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MoveFolder']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Folder']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Precondition Failed: The value of the If-Match header doesn't match the object's ETag. */
      412: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api412DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
      /** @description Precondition Required: The required If-Match header is missing. */
      428: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api428DefaultError']
        }
      }
    }
  }
  'Graph Timeranges.list_graph_timerange_v1': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GraphTimerangeCollection']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
    }
  }
  'Graph Timeranges.show_graph_timerange_v1': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        index: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GraphTimerangeObject']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultErrorAB2AA48D05FD212E']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
    }
  }
  'HW/SW Inventory.get_inventory_trees': {
    parameters: {
      query?: {
        host_names?: string
      }
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['InventoryTreesCollectionModel']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultErrorDDACC62852906524']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.host_group_config.list_groups': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HostGroupCollection']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.host_group_config.create': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['InputHostGroup']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HostGroup']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.host_group_config.get': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The identifier name of the group. */
        name: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HostGroup']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.host_group_config.update': {
    parameters: {
      query?: never
      header: {
        /**
         * @description The value of the, to be modified, object's ETag header. You can get this value by displaying the object it individually. When ETag validation is enabled in the REST API, update operations require that the ETag value you provide matches the object's current server-side ETag. The content of the ETag can potentially be anything and should be treated as semantically opaque.
         * @example "a20ceacf346041dc"
         */
        'If-Match': string
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        /** @description The identifier name of the group. */
        name: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateHostGroupAttributes']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HostGroup']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Precondition Failed: The value of the If-Match header doesn't match the object's ETag. */
      412: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api412DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
      /** @description Precondition Required: The required If-Match header is missing. */
      428: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api428DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.host_group_config.delete': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The identifier name of the group. */
        name: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Conflict: The request is in conflict with the stored resource. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api409DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.host_group_config.bulk_update': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BulkUpdateHostGroup']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HostGroupCollection']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.host_group_config.bulk_create': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BulkInputHostGroup']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HostGroupCollection']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.host_group_config.bulk_delete': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BulkDeleteHostGroup']
      }
    }
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Conflict: The request is in conflict with the stored resource. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api409DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.host.list_hosts_deprecated-17003': {
    parameters: {
      query?: {
        /** @description Restrict the query to this particular site. */
        sites?: string[]
        /** @description An query expression of the Livestatus 'hosts' table in nested dictionary form. If you want to use multiple expressions, nest them with the AND/OR operators. */
        query?: string
        /** @description The desired columns of the `hosts` table. If left empty, a default set of columns is used. */
        columns?: string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DomainObjectCollection']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.host.list_hosts': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['HostParameters']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DomainObjectCollection']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.host.show_host': {
    parameters: {
      query?: {
        /** @description The desired columns of the `hosts` table. If left empty, a default set of columns is used. */
        columns?: string[]
      }
      header?: never
      path: {
        /** @description The host name */
        host_name: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DomainObject']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.host_tag_group.list_host_tag_groups': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HostTagGroupCollection']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.host_tag_group.create_host_tag_group': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['InputHostTagGroup']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ConcreteHostTagGroup']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.host_tag_group.show_host_tag_group': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The name of the host tag group */
        name: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ConcreteHostTagGroup']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.host_tag_group.update_host_tag_group': {
    parameters: {
      query?: never
      header: {
        /**
         * @description The value of the, to be modified, object's ETag header. You can get this value by displaying the object it individually. When ETag validation is enabled in the REST API, update operations require that the ETag value you provide matches the object's current server-side ETag. The content of the ETag can potentially be anything and should be treated as semantically opaque.
         * @example "a20ceacf346041dc"
         */
        'If-Match': string
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        /** @description The name of the host tag group */
        name: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateHostTagGroup']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ConcreteHostTagGroup']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Unauthorized: The user is not authorized to do this request. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api401DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Method Not Allowed: Method not allowed: This request is only allowed with other HTTP methods. */
      405: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api405DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Precondition Failed: The value of the If-Match header doesn't match the object's ETag. */
      412: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api412DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
      /** @description Precondition Required: The required If-Match header is missing. */
      428: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api428DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.host_tag_group.delete_host_tag_group': {
    parameters: {
      query?: {
        /** @description The host tag group can still be in use. Setting repair to True gives permission to automatically remove the tag from the affected hosts. */
        repair?: boolean
        /** @description The host tag group can still be in use. Set mode to determine what should happen. Either 'abort' the deletion, 'delete' affected rules or 'remove' the tag from affected rules. */
        mode?: 'abort' | 'delete' | 'remove' | null
      }
      header?: never
      path: {
        /** @description The name of the host tag group */
        name: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Unauthorized: The user is not authorized to do this request. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api401DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Method Not Allowed: Method not allowed: This request is only allowed with other HTTP methods. */
      405: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api405DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.host_config.renaming_job_wait_for_completion': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content: The renaming job has been completed. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Found: The renaming job is still running. Redirecting to the 'Wait for completion' endpoint. */
      302: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: There is no running renaming job */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404CustomError3']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'Hosts.list_hosts_v1': {
    parameters: {
      query?: {
        fields?: string
        effective_attributes?: string
        include_links?: string
        hostnames?: string
        site?: string
      }
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HostConfigCollectionModel']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultErrorDDACC62852906524']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultErrorCED056C5417736D5']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
    }
  }
  'Hosts.create_host_v1': {
    parameters: {
      query?: {
        bake_agent?: string
      }
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateHostModel']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HostConfigModel']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultErrorDDACC62852906524']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultErrorCED056C5417736D5']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultErrorDC1454384BB8AA8A']
        }
      }
    }
  }
  'Hosts.show_host_v1': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        host_name: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HostConfigModel']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultErrorCED056C5417736D5']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultErrorAB2AA48D05FD212E']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.host_config.update_host': {
    parameters: {
      query?: never
      header: {
        /**
         * @description The value of the, to be modified, object's ETag header. You can get this value by displaying the object it individually. When ETag validation is enabled in the REST API, update operations require that the ETag value you provide matches the object's current server-side ETag. The content of the ETag can potentially be anything and should be treated as semantically opaque.
         * @example "a20ceacf346041dc"
         */
        'If-Match': string
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        /** @description A host name. */
        host_name: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateHost']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HostConfig']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Precondition Failed: The value of the If-Match header doesn't match the object's ETag. */
      412: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api412DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
      /** @description Precondition Required: The required If-Match header is missing. */
      428: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api428DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.host_config.delete': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description A host name. */
        host_name: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.host_config.bulk_update_hosts': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BulkUpdateHost']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HostConfigCollection']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['BulkHostActionWithFailedHosts']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.host_config.rename_host': {
    parameters: {
      query?: never
      header: {
        /**
         * @description The value of the, to be modified, object's ETag header. You can get this value by displaying the object it individually. When ETag validation is enabled in the REST API, update operations require that the ETag value you provide matches the object's current server-side ETag. The content of the ETag can potentially be anything and should be treated as semantically opaque.
         * @example "a20ceacf346041dc"
         */
        'If-Match': string
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        /** @description A host name. */
        host_name: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RenameHost']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HostConfig']
        }
      }
      /** @description See Other: The host rename process is still running. Redirecting to the 'Wait for completion' endpoint */
      303: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Conflict: There are pending changes not yet activated or a rename background job is already running. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api409CustomError1']
        }
      }
      /** @description Precondition Failed: The value of the If-Match header doesn't match the object's ETag. */
      412: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api412DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
      /** @description Unprocessable Entity: The host could not be renamed. */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api422CustomError3']
        }
      }
      /** @description Precondition Required: The required If-Match header is missing. */
      428: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api428DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.host_config.update_nodes': {
    parameters: {
      query?: never
      header: {
        /**
         * @description The value of the, to be modified, object's ETag header. You can get this value by displaying the object it individually. When ETag validation is enabled in the REST API, update operations require that the ETag value you provide matches the object's current server-side ETag. The content of the ETag can potentially be anything and should be treated as semantically opaque.
         * @example "a20ceacf346041dc"
         */
        'If-Match': string
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        /** @description A cluster host. */
        host_name: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateNodes']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ObjectProperty']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Precondition Failed: The value of the If-Match header doesn't match the object's ETag. */
      412: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api412DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
      /** @description Precondition Required: The required If-Match header is missing. */
      428: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api428DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.host_config.bulk_create_hosts': {
    parameters: {
      query?: {
        /** @description Tries to bake the agents for the just created hosts. This process is started in the background after configuring the host. Please note that the backing may take some time and might block subsequent API calls. This only works when using the Enterprise Editions. */
        bake_agent?: boolean
      }
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BulkCreateHost']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HostConfigCollection']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['BulkHostActionWithFailedHosts']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.host_config.bulk_delete': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BulkDeleteHost']
      }
    }
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.host_config.create_cluster_host': {
    parameters: {
      query?: {
        /** @description Tries to bake the agents for the just created hosts. This process is started in the background after configuring the host. Please note that the backing may take some time and might block subsequent API calls. This only works when using the Enterprise Editions. */
        bake_agent?: boolean
      }
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateClusterHost']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HostConfig']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.host_config.move': {
    parameters: {
      query?: never
      header: {
        /**
         * @description The value of the, to be modified, object's ETag header. You can get this value by displaying the object it individually. When ETag validation is enabled in the REST API, update operations require that the ETag value you provide matches the object's current server-side ETag. The content of the ETag can potentially be anything and should be treated as semantically opaque.
         * @example "a20ceacf346041dc"
         */
        'If-Match': string
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        /** @description A host name. */
        host_name: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MoveHost']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HostConfig']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Precondition Failed: The value of the If-Match header doesn't match the object's ETag. */
      412: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api412DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
      /** @description Precondition Required: The required If-Match header is missing. */
      428: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api428DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.host_internal.show_host': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description A host name. */
        host_name: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HostConfigSchemaInternal']
        }
      }
      /** @description Unauthorized: You do not have read access to this host. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api401CustomError1']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.host_internal.link_with_uuid': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        /** @description A host name. */
        host_name: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['LinkHostUUID']
      }
    }
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Unauthorized: You do not have the permissions to edit this host. */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api401CustomError2']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.host_internal.register_host': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        /** @description A host name. */
        host_name: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RegisterHost']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ConnectionMode']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: You do not have the permissions to register this host. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403CustomError4']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Method Not Allowed: This host cannot be registered on this site. */
      405: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api405CustomError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.ldap._openapi.show_ldap_connections': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LDAPConnectionResponseCollection']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.ldap._openapi.create_ldap_connection': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['LDAPConnectionConfigCreateRequest']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LDAPConnectionResponse']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.ldap._openapi.show_ldap_connection': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description An LDAP connection ID string. */
        ldap_connection_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LDAPConnectionResponse']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['GETLdapConnection404']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.ldap._openapi.edit_ldap_connection': {
    parameters: {
      query?: never
      header: {
        /**
         * @description The value of the, to be modified, object's ETag header. You can get this value by displaying the object it individually. When ETag validation is enabled in the REST API, update operations require that the ETag value you provide matches the object's current server-side ETag. The content of the ETag can potentially be anything and should be treated as semantically opaque.
         * @example "a20ceacf346041dc"
         */
        'If-Match': string
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        /** @description An LDAP connection ID string. */
        ldap_connection_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['LDAPConnectionConfigUpdateRequest']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LDAPConnectionResponse']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['GETLdapConnection404']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Precondition Failed: The value of the If-Match header doesn't match the object's ETag. */
      412: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api412DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
      /** @description Precondition Required: The required If-Match header is missing. */
      428: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api428DefaultError']
        }
      }
    }
  }
  'cmk.gui.ldap._openapi.delete_ldap_connection': {
    parameters: {
      query?: never
      header: {
        /**
         * @description The value of the, to be modified, object's ETag header. You can get this value by displaying the object it individually. When ETag validation is enabled in the REST API, update operations require that the ETag value you provide matches the object's current server-side ETag. The content of the ETag can potentially be anything and should be treated as semantically opaque.
         * @example "a20ceacf346041dc"
         */
        'If-Match': string
      }
      path: {
        /** @description An LDAP connection ID string. */
        ldap_connection_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Precondition Failed: The value of the If-Match header doesn't match the object's ETag. */
      412: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api412DefaultError']
        }
      }
      /** @description Precondition Required: The required If-Match header is missing. */
      428: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api428DefaultError']
        }
      }
    }
  }
  'cmk.gui.cse.licensing._openapi.download_license_request': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['VerificationRequest']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.cee.licensing._openapi.download_license_usage': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/x-tgz': string
        }
      }
      /** @description Forbidden: You have insufficient permissions for this operation. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403CustomError5']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.cee.licensing._openapi.configure_licensing_settings': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['LicenseSettings']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ActionResultObject']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.cee.licensing._openapi.verify_offline': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['VerificationResponse']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ActionResultObject']
        }
      }
      /** @description No Content: Offline verification procedure was successful */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
      /** @description Unprocessable Entity: Offline verification procedure was not successful */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api422CustomError4']
        }
      }
    }
  }
  'cmk.gui.cee.licensing._openapi.verify_online': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ActionResultObject']
        }
      }
      /** @description No Content: Online verification procedure was successful */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
      /** @description Unprocessable Entity: Online verification procedure was not successful */
      422: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api422CustomError5']
        }
      }
    }
  }
  'cmk.gui.cee.openapi.endpoints.metric.internal.get_graph_using_filters': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Filter']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GraphCollection']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.metric.get_graph': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Get']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GraphCollection']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.version.search': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['InstalledVersions']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.notification_rules.show_rules': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NotificationRuleResponseCollection']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.notification_rules.post_rule': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['NotificationRuleRequest']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NotificationRuleResponse']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.notification_rules.show_rule': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The notification rule ID. */
        rule_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NotificationRuleResponse']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.notification_rules.put_rule': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        /** @description The notification rule ID. */
        rule_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['NotificationRuleRequest']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NotificationRuleResponse']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.notification_rules.delete_rule': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The notification rule ID. */
        rule_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.cse.onboarding.get_agent_download_info': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Response1']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.parent_scan.start_parent_scan_background_job': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ParentScan']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BackgroundJobStatusObject']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Conflict: The request is in conflict with the stored resource. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api409DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'Passwords.list_passwords_v1': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PasswordCollection']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultErrorCED056C5417736D5']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
    }
  }
  'Passwords.create_password_v1': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePassword']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PasswordObject']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultErrorDDACC62852906524']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultErrorCED056C5417736D5']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultErrorDC1454384BB8AA8A']
        }
      }
    }
  }
  'Passwords.show_password_v1': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        name: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PasswordObject']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultErrorCED056C5417736D5']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultErrorAB2AA48D05FD212E']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
    }
  }
  'Passwords.update_password_v1': {
    parameters: {
      query?: never
      header: {
        /**
         * @description The value of the, to be modified, object's ETag header. You can get this value by displaying the object it individually. When ETag validation is enabled in the REST API, update operations require that the ETag value you provide matches the object's current server-side ETag. The content of the ETag can potentially be anything and should be treated as semantically opaque.
         * @example "a20ceacf346041dc"
         */
        'If-Match': string
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        name: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePassword']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PasswordObject']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultErrorDDACC62852906524']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultErrorCED056C5417736D5']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultErrorAB2AA48D05FD212E']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
      /** @description Precondition Failed: The value of the If-Match header doesn't match the object's ETag. */
      412: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api412DefaultError2905EF83026CF4EE']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultErrorDC1454384BB8AA8A']
        }
      }
      /** @description Precondition Required: The required If-Match header is missing. */
      428: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api428DefaultError9EE11ED07CC121C2']
        }
      }
    }
  }
  'Passwords.delete_password_v1': {
    parameters: {
      query?: never
      header: {
        /**
         * @description The value of the, to be modified, object's ETag header. You can get this value by displaying the object it individually. When ETag validation is enabled in the REST API, update operations require that the ETag value you provide matches the object's current server-side ETag. The content of the ETag can potentially be anything and should be treated as semantically opaque.
         * @example "a20ceacf346041dc"
         */
        'If-Match': string
      }
      path: {
        name: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultErrorCED056C5417736D5']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultErrorAB2AA48D05FD212E']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
      /** @description Precondition Failed: The value of the If-Match header doesn't match the object's ETag. */
      412: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api412DefaultError2905EF83026CF4EE']
        }
      }
      /** @description Precondition Required: The required If-Match header is missing. */
      428: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api428DefaultError9EE11ED07CC121C2']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.quick_setup.get_guided_stages_or_overview_stages': {
    parameters: {
      query?: {
        /** @description The quick setup mode */
        mode?: 'guided' | 'overview'
        /** @description Select object id to prefill data for the quick setup */
        object_id?: string
      }
      header?: never
      path: {
        /** @description The quick setup id */
        quick_setup_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['QuickSetupResponse']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.quick_setup.quick_setup_get_stage_structure': {
    parameters: {
      query?: {
        /** @description Select object id to prefill data for the quick setup */
        object_id?: string
      }
      header?: never
      path: {
        /** @description The quick setup id */
        quick_setup_id: string
        /** @description The stage index */
        stage_index: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['QuickSetupStageStructure']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.quick_setup.fetch_quick_setup_action_result': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The id of the action job result to be fetched */
        job_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['QuickSetupCompleteResponse']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.quick_setup.fetch_quick_setup_stage_action_result': {
    parameters: {
      query?: {
        /** @description The site where the quick setup stage action result is located. Defaults to local site */
        site_id?: string
      }
      header?: never
      path: {
        /** @description The id of the action job result to be fetched */
        job_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['QuickSetupStageActionResponse']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.quick_setup.edit_quick_setup_action': {
    parameters: {
      query: {
        /** @description Select object id to prefill data for the quick setup */
        object_id: string
      }
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        /** @description The quick setup id */
        quick_setup_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['QuickSetupFinalActionRequest']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['QuickSetupCompleteResponse']
        }
      }
      /** @description See Other: The validation and complete action has been started in the background. Redirecting to the 'Get background job status snapshot' endpoint. */
      303: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.quick_setup.quick_setup_run_action': {
    parameters: {
      query?: {
        /** @description The quick setup mode */
        mode?: 'guided' | 'overview'
      }
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        /** @description The quick setup id */
        quick_setup_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['QuickSetupFinalActionRequest']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['QuickSetupCompleteResponse']
        }
      }
      /** @description See Other: The validation and complete action has been started in the background. Redirecting to the 'Get background job status snapshot' endpoint. */
      303: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.quick_setup.quicksetup_run_stage_action': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        /** @description The quick setup id */
        quick_setup_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['QuickSetupStageActionRequest']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['QuickSetupStageActionResponse']
        }
      }
      /** @description See Other: The stage validation and recap action has been started in the background. Redirecting to the 'Get background job status snapshot' endpoint. */
      303: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'Relays.list_relays_v1': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RelayCollectionModel']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
    }
  }
  'Relays.create_relay_v1': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RelayConfigModel']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RelayModel']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultErrorDDACC62852906524']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultErrorDC1454384BB8AA8A']
        }
      }
    }
  }
  'Relays.show_relay_v1': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        relay_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RelayModel']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultErrorAB2AA48D05FD212E']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
    }
  }
  'Relays.edit_relay_v1': {
    parameters: {
      query?: never
      header: {
        /**
         * @description The value of the, to be modified, object's ETag header. You can get this value by displaying the object it individually. When ETag validation is enabled in the REST API, update operations require that the ETag value you provide matches the object's current server-side ETag. The content of the ETag can potentially be anything and should be treated as semantically opaque.
         * @example "a20ceacf346041dc"
         */
        'If-Match': string
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        relay_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RelayConfigModel']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RelayModel']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultErrorDDACC62852906524']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultErrorAB2AA48D05FD212E']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
      /** @description Precondition Failed: The value of the If-Match header doesn't match the object's ETag. */
      412: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api412DefaultError2905EF83026CF4EE']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultErrorDC1454384BB8AA8A']
        }
      }
      /** @description Precondition Required: The required If-Match header is missing. */
      428: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api428DefaultError9EE11ED07CC121C2']
        }
      }
    }
  }
  'Relays.delete_relay_v1': {
    parameters: {
      query?: never
      header: {
        /**
         * @description The value of the, to be modified, object's ETag header. You can get this value by displaying the object it individually. When ETag validation is enabled in the REST API, update operations require that the ETag value you provide matches the object's current server-side ETag. The content of the ETag can potentially be anything and should be treated as semantically opaque.
         * @example "a20ceacf346041dc"
         */
        'If-Match': string
      }
      path: {
        relay_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultErrorAB2AA48D05FD212E']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
      /** @description Precondition Failed: The value of the If-Match header doesn't match the object's ETag. */
      412: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api412DefaultError2905EF83026CF4EE']
        }
      }
      /** @description Precondition Required: The required If-Match header is missing. */
      428: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api428DefaultError9EE11ED07CC121C2']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.rule.list_rules': {
    parameters: {
      query: {
        /** @description The name of the ruleset. */
        ruleset_name: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RuleCollection']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.rule.create_rule': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['InputRuleObject']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RuleObject']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.rule.show_rule': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The ID of the rule. */
        rule_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RuleObject']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.rule.edit_rule': {
    parameters: {
      query?: never
      header: {
        /**
         * @description The value of the, to be modified, object's ETag header. You can get this value by displaying the object it individually. When ETag validation is enabled in the REST API, update operations require that the ETag value you provide matches the object's current server-side ETag. The content of the ETag can potentially be anything and should be treated as semantically opaque.
         * @example "a20ceacf346041dc"
         */
        'If-Match': string
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        /** @description The ID of the rule. */
        rule_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateRuleObject']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RuleObject']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Precondition Failed: The value of the If-Match header doesn't match the object's ETag. */
      412: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api412DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
      /** @description Precondition Required: The required If-Match header is missing. */
      428: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api428DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.rule.delete_rule': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The ID of the rule. */
        rule_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content: Rule was deleted successfully. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: The rule is locked and cannot be deleted. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400CustomError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The rule to be deleted was not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404CustomError4']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.rule.move_rule_to': {
    parameters: {
      query?: never
      header: {
        /**
         * @description The value of the, to be modified, object's ETag header. You can get this value by displaying the object it individually. When ETag validation is enabled in the REST API, update operations require that the ETag value you provide matches the object's current server-side ETag. The content of the ETag can potentially be anything and should be treated as semantically opaque.
         * @example "a20ceacf346041dc"
         */
        'If-Match': string
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        /** @description The ID of the rule. */
        rule_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MoveRuleTo']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RuleObject']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Precondition Failed: The value of the If-Match header doesn't match the object's ETag. */
      412: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api412DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
      /** @description Precondition Required: The required If-Match header is missing. */
      428: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api428DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.ruleset.list_rulesets': {
    parameters: {
      query?: {
        /** @description Search all keys (like `name`, `title`, `help`, etc.) for this text. Regex allowed. */
        fulltext?: string
        /** @description The folder in which to search for rules.
         *
         *     Path delimiters can be either `~`, `/` or `\`. Please use the one most appropriate for your quoting/escaping needs. A good default choice is `~`. */
        folder?: string
        /** @description Only show deprecated rulesets. Defaults to False. */
        deprecated?: boolean
        /** @description Only show used rulesets. Defaults to True. */
        used?: boolean
        /** @description A regex of the name. */
        name?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RulesetCollection']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.ruleset.show_ruleset': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The name of the ruleset. */
        ruleset_name: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RulesetObject']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.cee.saml2._openapi.show_saml_connections': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SAMLConnectionResponseCollection']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.cee.saml2._openapi.create_saml_connection': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SAMLConnectionCreateRequest']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SAMLConnectionResponse']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.cee.saml2._openapi.show_saml_connection': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The SAML connection ID. */
        saml_connection_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SAMLConnectionResponse']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.cee.saml2._openapi.delete_saml_connection': {
    parameters: {
      query?: never
      header: {
        /**
         * @description The value of the, to be modified, object's ETag header. You can get this value by displaying the object it individually. When ETag validation is enabled in the REST API, update operations require that the ETag value you provide matches the object's current server-side ETag. The content of the ETag can potentially be anything and should be treated as semantically opaque.
         * @example "a20ceacf346041dc"
         */
        'If-Match': string
      }
      path: {
        /** @description The SAML connection ID. */
        saml_connection_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Precondition Failed: The value of the If-Match header doesn't match the object's ETag. */
      412: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api412DefaultError']
        }
      }
      /** @description Precondition Required: The required If-Match header is missing. */
      428: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api428DefaultError']
        }
      }
    }
  }
  'cmk.gui.cee.sla._openapi.compute_sla_rows': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SLAComputeRequest']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SLAComputedResultCollection']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.service_discovery.show_service_discovery_result': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The host of the service discovery result */
        host_name: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ServiceDiscoveryResult']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.service_discovery.show_service_discovery_run': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description A host name. */
        host_name: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ServiceDiscoveryRun']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.service_discovery.service_discovery_run_wait_for_completion': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description A host name. */
        host_name: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content: The service discovery has been completed. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Found: The service discovery is still running. Redirecting to the 'Wait for completion' endpoint. */
      302: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: There is no running service discovery */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404CustomError5']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.service_discovery.update_service_phase': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        /** @description The host of the service which shall be updated. */
        host_name: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateDiscoveryPhase']
      }
    }
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: Host could not be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404CustomError6']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.service_discovery.execute_bulk_discovery': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BulkDiscovery']
      }
    }
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description See Other: The bulk discovery job has been started in the background.Redirecting to the 'Get background job status snapshot' endpoint. */
      303: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.service_discovery.execute_service_discovery': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DiscoverServices']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DomainObject']
        }
      }
      /** @description See Other: The service discovery background job has been initialized. Redirecting to the 'Wait for service discovery completion' endpoint. */
      303: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Conflict: A service discovery background job is currently running */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api409CustomError2']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.service_group_config.list_groups': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ServiceGroupCollection']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.service_group_config.create': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['InputServiceGroup']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DomainObject']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.service_group_config.show_group': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The identifier name of the group. */
        name: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ServiceGroup']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.service_group_config.update': {
    parameters: {
      query?: never
      header: {
        /**
         * @description The value of the, to be modified, object's ETag header. You can get this value by displaying the object it individually. When ETag validation is enabled in the REST API, update operations require that the ETag value you provide matches the object's current server-side ETag. The content of the ETag can potentially be anything and should be treated as semantically opaque.
         * @example "a20ceacf346041dc"
         */
        'If-Match': string
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        /** @description The identifier name of the group. */
        name: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateServiceGroupAttributes']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ServiceGroup']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Precondition Failed: The value of the If-Match header doesn't match the object's ETag. */
      412: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api412DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
      /** @description Precondition Required: The required If-Match header is missing. */
      428: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api428DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.service_group_config.delete': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The identifier name of the group. */
        name: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Conflict: The request is in conflict with the stored resource. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api409DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.service_group_config.bulk_update': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BulkUpdateServiceGroup']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ServiceGroupCollection']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.service_group_config.bulk_create': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BulkInputServiceGroup']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ServiceGroupCollection']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.service_group_config.bulk_delete': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BulkDeleteServiceGroup']
      }
    }
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Conflict: The request is in conflict with the stored resource. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api409DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.service._list_all_services_deprecated-17512': {
    parameters: {
      query?: {
        /** @description Restrict the query to this particular site. */
        sites?: string[]
        /** @description The desired columns of the `services` table. If left empty, a default set of columns is used. */
        columns?: string[]
        /** @description An query expression of the Livestatus 'services' table in nested dictionary form. If you want to use multiple expressions, nest them with the AND/OR operators. */
        query?: string
        /** @description A host name. */
        host_name?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DomainObjectCollection']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.service._list_all_services': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ServiceParametersWithHost']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DomainObjectCollection']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.service.show_service': {
    parameters: {
      query: {
        /** @description The service name of the selected host */
        service_description: string
        /** @description The desired columns of the `services` table. If left empty, a default set of columns is used. */
        columns?: string[]
      }
      header?: never
      path: {
        /** @description A host name. */
        host_name: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DomainObject']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.service._list_host_services_deprecated-17512': {
    parameters: {
      query?: {
        /** @description Restrict the query to this particular site. */
        sites?: string[]
        /** @description The desired columns of the `services` table. If left empty, a default set of columns is used. */
        columns?: string[]
        /** @description An query expression of the Livestatus 'services' table in nested dictionary form. If you want to use multiple expressions, nest them with the AND/OR operators. */
        query?: string
      }
      header?: never
      path: {
        /** @description A host name. */
        host_name: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DomainObjectCollection']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.service._list_host_services': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        /** @description A host name. */
        host_name: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ServiceParameters']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DomainObjectCollection']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'Site management.list_sites_connections_v1': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SiteManagementCollectionModel']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultErrorCED056C5417736D5']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
    }
  }
  'Site management.create_site_connection_v1': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SiteConnectionCreateModel']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SiteConnectionModel']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultErrorDDACC62852906524']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultErrorCED056C5417736D5']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultErrorDC1454384BB8AA8A']
        }
      }
    }
  }
  'Site management.show_site_connection_v1': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        site_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SiteConnectionModel']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultErrorCED056C5417736D5']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultErrorAB2AA48D05FD212E']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
    }
  }
  'Site management.edit_site_connection_v1': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        site_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SiteConnectionEditModel']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SiteConnectionModel']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultErrorDDACC62852906524']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultErrorCED056C5417736D5']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultErrorAB2AA48D05FD212E']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultErrorDC1454384BB8AA8A']
        }
      }
    }
  }
  'Site management.delete_site_connection_v1': {
    parameters: {
      query?: never
      header?: never
      path: {
        site_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultErrorDDACC62852906524']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultErrorCED056C5417736D5']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultErrorAB2AA48D05FD212E']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultErrorDC1454384BB8AA8A']
        }
      }
    }
  }
  'Site management.site_connection_login_v1': {
    parameters: {
      query?: never
      header?: never
      path: {
        site_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SiteLoginCredentials']
      }
    }
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultErrorDDACC62852906524']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultErrorCED056C5417736D5']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultErrorAB2AA48D05FD212E']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultErrorDC1454384BB8AA8A']
        }
      }
    }
  }
  'Site management.site_connection_logout_v1': {
    parameters: {
      query?: never
      header?: never
      path: {
        site_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultErrorDDACC62852906524']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultErrorCED056C5417736D5']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultErrorAB2AA48D05FD212E']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultErrorDC1454384BB8AA8A']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.time_periods.list_time_periods': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TimePeriodResponseCollection']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.time_periods.create_timeperiod': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateTimePeriod']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TimePeriodResponse']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.time_periods.show_time_period': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description A name used as an identifier. Can be of arbitrary (sensible) length. */
        name: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TimePeriodResponse']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.time_periods.update_timeperiod': {
    parameters: {
      query?: never
      header: {
        /**
         * @description The value of the, to be modified, object's ETag header. You can get this value by displaying the object it individually. When ETag validation is enabled in the REST API, update operations require that the ETag value you provide matches the object's current server-side ETag. The content of the ETag can potentially be anything and should be treated as semantically opaque.
         * @example "a20ceacf346041dc"
         */
        'If-Match': string
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        /** @description A name used as an identifier. Can be of arbitrary (sensible) length. */
        name: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateTimePeriod']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TimePeriodResponse']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Method Not Allowed: Method not allowed: This request is only allowed with other HTTP methods. */
      405: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api405DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Precondition Failed: The value of the If-Match header doesn't match the object's ETag. */
      412: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api412DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
      /** @description Precondition Required: The required If-Match header is missing. */
      428: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api428DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.time_periods.delete': {
    parameters: {
      query?: never
      header: {
        /**
         * @description The value of the, to be modified, object's ETag header. You can get this value by displaying the object it individually. When ETag validation is enabled in the REST API, update operations require that the ETag value you provide matches the object's current server-side ETag. The content of the ETag can potentially be anything and should be treated as semantically opaque.
         * @example "a20ceacf346041dc"
         */
        'If-Match': string
      }
      path: {
        /** @description A name used as an identifier. Can be of arbitrary (sensible) length. */
        name: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Method Not Allowed: Method not allowed: This request is only allowed with other HTTP methods. */
      405: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api405DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Conflict: The request is in conflict with the stored resource. */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api409DefaultError']
        }
      }
      /** @description Precondition Failed: The value of the If-Match header doesn't match the object's ETag. */
      412: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api412DefaultError']
        }
      }
      /** @description Precondition Required: The required If-Match header is missing. */
      428: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api428DefaultError']
        }
      }
    }
  }
  'User Roles.list_user_roles_v1': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserRoleCollectionModel']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultErrorCED056C5417736D5']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
    }
  }
  'User Roles.create_user_role_v1': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateUserRoleModel']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserRoleModel']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultErrorDDACC62852906524']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultErrorCED056C5417736D5']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultErrorDC1454384BB8AA8A']
        }
      }
    }
  }
  'User Roles.show_user_role_v1': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        role_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserRoleModel']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultErrorCED056C5417736D5']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultErrorAB2AA48D05FD212E']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
    }
  }
  'User Roles.edit_user_role_v1': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        role_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['EditUserRoleModel']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserRoleModel']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultErrorDDACC62852906524']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultErrorCED056C5417736D5']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultErrorAB2AA48D05FD212E']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultErrorDC1454384BB8AA8A']
        }
      }
    }
  }
  'User Roles.delete_user_role_v1': {
    parameters: {
      query?: never
      header?: never
      path: {
        role_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultErrorCED056C5417736D5']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultErrorAB2AA48D05FD212E']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.user_config.list_users': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserCollection']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.user_config.create_user': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateUser']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserObject']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.user_config.show_user': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description An unique username for the user */
        username: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserObject']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.user_config.edit_user': {
    parameters: {
      query?: never
      header: {
        /**
         * @description The value of the, to be modified, object's ETag header. You can get this value by displaying the object it individually. When ETag validation is enabled in the REST API, update operations require that the ETag value you provide matches the object's current server-side ETag. The content of the ETag can potentially be anything and should be treated as semantically opaque.
         * @example "a20ceacf346041dc"
         */
        'If-Match': string
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        /** @description An unique username for the user */
        username: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateUser']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          /**
           * @description The HTTP ETag header for this resource. It identifies the current state of the object and needs to be sent along in the "If-Match" request-header for subsequent modifications. Please note that the actual ETag returned by some endpoints may look different than the one shown in this example.
           * @example "a20ceacf346041dc"
           */
          ETag?: string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserObject']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Precondition Failed: The value of the If-Match header doesn't match the object's ETag. */
      412: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api412DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
      /** @description Precondition Required: The required If-Match header is missing. */
      428: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api428DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.user_config.delete_user': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description An unique username for the user */
        username: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
    }
  }
  'cmk.gui.openapi.endpoints.user_config.dismiss_user_warning': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UserDismissWarning']
      }
    }
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
  'Visual Filters.list_filters_v1': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['FilterCollection']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
    }
  }
  'open-telemetry.handler_list': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OTelCollectorCollection']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultErrorCED056C5417736D5']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
    }
  }
  'open-telemetry.handler_create': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OTelCollectorSpec']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OTelCollectorObject']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultErrorDDACC62852906524']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultErrorCED056C5417736D5']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultErrorDC1454384BB8AA8A']
        }
      }
    }
  }
  'open-telemetry.handler_update': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path: {
        config_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OTelCollectorSpec']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OTelCollectorObject']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultErrorDDACC62852906524']
        }
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultErrorCED056C5417736D5']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultErrorAB2AA48D05FD212E']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultErrorDC1454384BB8AA8A']
        }
      }
    }
  }
  'open-telemetry.handler_delete': {
    parameters: {
      query?: never
      header?: never
      path: {
        config_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content: Operation done successfully. No further output. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden: Configuration via Setup is disabled. */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api403DefaultErrorCED056C5417736D5']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultErrorAB2AA48D05FD212E']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultErrorBA451644CA746AA5']
        }
      }
    }
  }
  'cmk.gui.cee.openapi.endpoints.metric.get_custom_graph': {
    parameters: {
      query?: never
      header: {
        /**
         * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
         * @example application/json
         */
        'Content-Type': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GetCustomGraph']
      }
    }
    responses: {
      /** @description OK: The operation was done successfully. */
      200: {
        headers: {
          /**
           * @description A header specifying which type of content is in the request/response body. This is required when sending encoded data in a POST/PUT body. When the request body is empty, this header should not be sent.
           * @example application/json
           */
          'Content-Type': string
          /**
           * @description The checkmk edition.
           * @example cre
           */
          'X-Checkmk-Edition': string
          /**
           * @description The checkmk version.
           * @example 2.2.0p10
           */
          'X-Checkmk-Version': string
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GraphCollection']
        }
      }
      /** @description Bad Request: Parameter or validation failure. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api400DefaultError']
        }
      }
      /** @description Not Found: The requested object has not be found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api404DefaultError']
        }
      }
      /** @description Not Acceptable: The requests accept headers can not be satisfied. */
      406: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api406DefaultError']
        }
      }
      /** @description Unsupported Media Type: The submitted content-type is not supported. */
      415: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['Api415DefaultError']
        }
      }
    }
  }
}
