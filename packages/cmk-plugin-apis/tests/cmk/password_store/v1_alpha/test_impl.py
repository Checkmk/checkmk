#!/usr/bin/env python3
# Copyright (C) 2019 Checkmk GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.


import binascii

import pytest
from cryptography.exceptions import InvalidTag

from cmk.password_store.v1_unstable import PasswordStore, Secret


class TestPasswordStore:
    def test_roundtrip(self) -> None:
        store = PasswordStore(Secret(b"shoe is not a git command"))
        passwords = {
            "ding": Secret("blablu"),
            "dong": Secret("blibli"),
        }

        ciphertext = store.dump_bytes(passwords)

        # sanity test: did we actually encrypt something?
        assert isinstance(ciphertext, bytes)
        assert b"ding" not in ciphertext

        assert {k: v.reveal() for k, v in store.load_bytes(ciphertext).items()} == {
            "ding": "blablu",
            "dong": "blibli",
        }

    def test_wrong_secret(self) -> None:
        store = PasswordStore(Secret(b"right"))
        ciphertext = store.dump_bytes({})

        with pytest.raises(InvalidTag):
            PasswordStore(Secret(b"wrong")).load_bytes(ciphertext)

    def test_pw_store_characterization(self) -> None:
        """This is a characterization (aka "golden master") test to ensure that the password store can
        still decrypt passwords it encrypted before.

        This can only work if the local secret is fixed of course, but a change in the container format,
        the key generation, or algorithms used would be detected.
        """
        # generated by 2.4.0-2025.10.07.cee
        encrypted = binascii.unhexlify(
            b"0000a75225213a1dd3270d829dd34bf1e8a6383f7ee"
            b"029f2b593c9a9bd0d209eb57f2adee00d70d92153eb"
            b"c37023276b8a1d891af1bd39cfe19eff88a63bbbc1"
        )
        assert {
            k: v.reveal()
            for k, v in PasswordStore(Secret(b"password-secret")).load_bytes(encrypted).items()
        } == {"time": "is tight"}
