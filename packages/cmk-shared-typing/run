#!/bin/bash
# Copyright (C) 2022 Checkmk GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

set -e

JOBS=6

failure() {
    test ${#@} -eq 0 || echo "$(basename "$0"):" "$@" >&2
    exit 1
}

usage() {
    echo "usage: $(basename "$0") [OPTION]..."
    echo "Run the CI pipeline or parts of it."
    echo
    echo "  -c, --clean             remove artifacts first"
    echo "  -F, --check-format      check for correct formatting"
    echo "  -b, --build             build"
    echo "  -a, --all               shortcut for -F -u -m -p -B -C"
    echo "  -f, --format            format sources"
    echo "  -j N, --jobs=N          allow N jobs at once, default is ${JOBS}"
    echo "  -h, --help              show this help"
}

parse_options() {
    # Yes, all those option variables are global.
    RUN_CLEAN=no
    RUN_BUILD=no
    RUN_CHECK_FORMAT=no
    RUN_FORMAT=no

    if ! OPTIONS=$(getopt --options 'cbFafj:h' --long 'build,clean,check-format,all,format,jobs:,help' --name "$(basename "$0")" -- "$@"); then
        usage >&2
        failure
    fi
    eval set -- "$OPTIONS"
    unset OPTIONS

    while true; do
        case "$1" in
            '-c' | '--clean')
                RUN_CLEAN=yes
                shift
                continue
                ;;
            '-F' | '--check-format')
                RUN_CHECK_FORMAT=yes
                shift
                continue
                ;;
            '-b' | '--build')
                RUN_BUILD=yes
                shift
                continue
                ;;
            '-a' | '--all')
                RUN_CHECK_FORMAT=yes
                shift
                continue
                ;;
            '-f' | '--format')
                RUN_FORMAT=yes
                shift
                continue
                ;;
            '-j' | '--jobs')
                JOBS="$2"
                shift 2
                continue
                ;;
            '-h' | '--help')
                usage
                exit 0
                ;;
            '--')
                shift
                test ${#@} -eq 0 || failure "extra arguments:" "$@"
                break
                ;;
            *) failure "internal error" ;;
        esac
    done

    readonly RUN_CLEAN RUN_CHECK_FORMAT RUN_FORMAT JOBS
}

run_pipenv() {
    PIPENV_CACHE_DIR="$(pwd)/.cache" \
    PIPENV_VENV_IN_PROJECT=true \
    PIPENV_NOSPIN=true \
    PIPENV_HIDE_EMOJIS=true \
    PIPENV_NO_INHERIT=true \
    PIPENV_PIPFILE="$(pwd)/Pipfile" \
    PIPENV_IGNORE_VIRTUALENVS=1 \
        pipenv "$@"
}

setup_venv() {
    test "${SETUP_VENV_RAN}" = "yes" && return
    # --quiet doesn't really work, see https://github.com/pypa/pipenv/issues/5037, but redirecting
    # stdout is OK, errors go to stderr, and so do the initial venv creation messages.
    run_pipenv sync --dev >/dev/null
    run_pipenv clean
    # poor man's "activate", but without any danger of naming clashes
    PATH="$(pwd)/.venv/bin:$PATH"
    hash -r
    SETUP_VENV_RAN=yes
}

run_clean() {
    rm -rf .cache .mypy_cache .pytest_cache .venv ./*.egg-info build
    find cmk tests -type d -name __pycache__ -print0 | xargs --null --no-run-if-empty rm -rf
}

run_check_format() {
    setup_venv
    isort --check-only --diff cmk tests
    black --check --diff cmk tests
}

run_format() {
    setup_venv
    isort cmk tests
    black cmk tests
}

run_build() {
    for filename in $(
        cd source
        ls ./*
    ); do
        target_file=${filename%.json}
        echo "Processing $target_file"
        datamodel-codegen --input "source/${filename}" --input-file-type jsonschema --output "python/${target_file}.py" --target-python-version 3.12 --output-model-type=dataclasses.dataclass
        ./node_modules/.bin/json2ts "source/${filename}" --additionalProperties=false >"typescript/${target_file}.ts"
    done
}

main() {
    # Change to the directory where this script resides, it makes many things easier
    # and we can call this script from everywhere.
    cd -- "${BASH_SOURCE%/*}"
    parse_options "$@"
    test ${RUN_CLEAN} = yes && run_clean
    test ${RUN_BUILD} = yes && run_build
    test ${RUN_CHECK_FORMAT} = yes && run_check_format
    test ${RUN_FORMAT} = yes && run_format
    true
}

main "$@"
