#!/bin/bash
# Copyright (C) 2022 Checkmk GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

set -e

JOBS=6

failure() {
    test ${#@} -eq 0 || echo "$(basename "$0"):" "$@" >&2
    exit 1
}

usage() {
    echo "usage: $(basename "$0") [OPTION]..."
    echo "Run the CI pipeline or parts of it."
    echo
    echo "  -c, --clean             remove artifacts first"
    echo "  -b, --build             build"
    echo "  -F, --check-format      check for correct formatting"
    echo "  -a, --all               shortcut for -c -b -F -f"
    echo "  -f, --format            format sources"
    echo "  -j N, --jobs=N          allow N jobs at once, default is ${JOBS}"
    echo "  -h, --help              show this help"
}

parse_options() {
    # Yes, all those option variables are global.
    RUN_CLEAN=no
    RUN_BUILD=no
    RUN_CHECK_FORMAT=no
    RUN_FORMAT=no

    if ! OPTIONS=$(getopt --options 'cbFafj:h' --long 'clean,build,check-format,all,format,jobs:,help' --name "$(basename "$0")" -- "$@"); then
        usage >&2
        failure
    fi
    eval set -- "$OPTIONS"
    unset OPTIONS

    while true; do
        case "$1" in
            '-c' | '--clean')
                RUN_CLEAN=yes
                shift
                continue
                ;;
            '-b' | '--build')
                RUN_BUILD=yes
                shift
                continue
                ;;
            '-F' | '--check-format')
                RUN_CHECK_FORMAT=yes
                shift
                continue
                ;;
            '-a' | '--all')
                RUN_CLEAN=yes
                RUN_BUILD=yes
                RUN_CHECK_FORMAT=yes
                RUN_FORMAT=yes
                shift
                continue
                ;;
            '-f' | '--format')
                RUN_FORMAT=yes
                shift
                continue
                ;;
            '-j' | '--jobs')
                JOBS="$2"
                shift 2
                continue
                ;;
            '-h' | '--help')
                usage
                exit 0
                ;;
            '--')
                shift
                test ${#@} -eq 0 || failure "extra arguments:" "$@"
                break
                ;;
            *) failure "internal error" ;;
        esac
    done

    readonly RUN_CLEAN RUN_BUILD RUN_CHECK_FORMAT RUN_FORMAT JOBS
}

run_pipenv() {
    PIPENV_CACHE_DIR="$(pwd)/.cache" \
    PIPENV_VENV_IN_PROJECT=true \
    PIPENV_NOSPIN=true \
    PIPENV_HIDE_EMOJIS=true \
    PIPENV_NO_INHERIT=true \
    PIPENV_PIPFILE="$(pwd)/Pipfile" \
    PIPENV_IGNORE_VIRTUALENVS=1 \
        pipenv "$@"
}

setup() {
    test "${SETUP_RAN}" = "yes" && return
    # --quiet doesn't really work, see https://github.com/pypa/pipenv/issues/5037, but redirecting
    # stdout is OK, errors go to stderr, and so do the initial venv creation messages.
    run_pipenv sync --dev >/dev/null
    run_pipenv clean
    # poor man's "activate", but without any danger of naming clashes
    PATH="$(pwd)/.venv/bin:$PATH"
    hash -r

    if [ ! -d node_modules ]; then
        ARTIFACTS_BASE="https://artifacts.lan.tribe29.com"
        export NPM_CONFIG_REGISTRY="${ARTIFACTS_BASE}/repository/npm-proxy/"
        export NODE_OPTIONS="--dns-result-order=ipv4first",
        npm \
            ci \
            --yes \
            --unsafe-perm \
            --audit=false
    fi

    SETUP_RAN=yes
}

run_clean() {
    rm -rf .cache .mypy_cache .pytest_cache .venv ./*.egg-info build node_modules
    find python -type d -name __pycache__ -print0 | xargs --null --no-run-if-empty rm -rf
}

run_build() {
    setup
    mkdir -p python typescript
    cwd=$(pwd)
    export PYTHONPATH="$PYTHONPATH:$cwd"
    for file in source/*.json; do
        target_base=$(basename "${file}" .json)
        echo "Processing $file"

        datamodel-codegen --input "$file" \
            --input-file-type jsonschema \
            --output "python/${target_base}.py" \
            --target-python-version 3.12 \
            --output-model-type=dataclasses.dataclass \
            --use-title-as-name \
            --use-double-quotes \
            --use-default \
            --use-standard-collections \
            --use-one-literal-as-default \
            --use-subclass-enum \
            --use-title-as-name \
            --custom-file-header-path header_py.txt \
            --use-title-as-name \
            --custom-formatters "utils.format"
        npm run json2ts "${file}" -o "typescript/${target_base}.ts"
    done

    SOURCE_PYTHON=python/vue_formspec_components.py
    SOURCE_TYPESCRIPT=typescript/vue_formspec_components.ts
    # you should also modify uildscripts/scripts/stages.yml if you change the destination!
    DESTINATION_PYTHON=../../cmk/gui/form_specs/vue/shared_type_defs.py
    DESTINATION_TYPESCRIPT=../../packages/cmk-frontend-vue/src/form/components/vue_formspec_components.ts

    if [ "$CI" == "true" ]; then
        # this is a hack, we should create another "copy" or "diff" target
        diff $SOURCE_PYTHON $DESTINATION_PYTHON
        diff $SOURCE_TYPESCRIPT $DESTINATION_TYPESCRIPT
    else
        echo "Copying vue type defs..."
        cp $SOURCE_PYTHON $DESTINATION_PYTHON
        cp $SOURCE_TYPESCRIPT $DESTINATION_TYPESCRIPT
    fi

    echo "Done."
}

run_check_format() {
    npm run prettier -- -c source/
}

run_format() {
    npm run prettier -- -w source/
}

main() {
    # Change to the directory where this script resides, it makes many things easier
    # and we can call this script from everywhere.
    cd -- "${BASH_SOURCE%/*}"
    parse_options "$@"
    test ${RUN_CLEAN} = yes && run_clean
    test ${RUN_BUILD} = yes && run_build
    test ${RUN_CHECK_FORMAT} = yes && run_check_format
    test ${RUN_FORMAT} = yes && run_format
    true
}

main "$@"
