#!/bin/bash
# Copyright (C) 2022 Checkmk GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

set -e

failure() {
    test ${#@} -eq 0 || echo "$(basename "$0"):" "$@" >&2
    exit 1
}

usage() {
    echo "usage: $(basename "$0") [OPTION]..."
    echo "Run the CI pipeline or parts of it."
    echo
    echo "  -b, --build             build"
    echo "  -F, --check-format      check for correct formatting"
    echo "  -a, --all               shortcut for -c -b -F -f"
    echo "  -s, --update-spec       update OpenAPI spec"
    echo "  -f, --format            format sources"
    echo "  -h, --help              show this help"
}

parse_options() {
    # Yes, all those option variables are global.
    RUN_BUILD=no
    RUN_CHECK_FORMAT=no
    RUN_UPDATE_OPENAPI_SPEC=no
    RUN_FORMAT=no

    if ! OPTIONS=$(getopt --options 'bFafsh' --long 'build,check-format,all,format,update-spec,help' --name "$(basename "$0")" -- "$@"); then
        usage >&2
        failure
    fi
    eval set -- "$OPTIONS"
    unset OPTIONS

    while true; do
        case "$1" in
            '-b' | '--build')
                RUN_BUILD=yes
                shift
                continue
                ;;
            '-F' | '--check-format')
                RUN_CHECK_FORMAT=yes
                shift
                continue
                ;;
            '-a' | '--all')
                RUN_BUILD=yes
                RUN_CHECK_FORMAT=yes
                RUN_FORMAT=yes
                shift
                continue
                ;;
            '-f' | '--format')
                RUN_FORMAT=yes
                shift
                continue
                ;;
            '-s' | '--update-spec')
                RUN_UPDATE_OPENAPI_SPEC=yes
                shift
                continue
                ;;
            '-h' | '--help')
                usage
                exit 0
                ;;
            '--')
                shift
                test ${#@} -eq 0 || failure "extra arguments:" "$@"
                break
                ;;
            *) failure "internal error" ;;
        esac
    done

    readonly RUN_BUILD RUN_CHECK_FORMAT RUN_FORMAT
}

run_build() {
    bazel build :cmk_shared_typing_ts :cmk_shared_typing_py
}

run_update_openapi_spec() {
    # Note: This is called after cd to script directory in main()
    local spec_path="$PWD/source/openapi_spec_internal.yaml"
    bazel run //cmk:generate_api_spec_repo -- generate --version internal --format yaml --out "$spec_path"
}

run_check_format() {
    bazel run //:format.check "$PWD"
}

run_format() {
    bazel run //:format "$PWD"
}

main() {
    # Change to the directory where this script resides, it makes many things easier
    # and we can call this script from everywhere.
    cd -- "${BASH_SOURCE%/*}"
    parse_options "$@"
    test ${RUN_BUILD} = yes && run_build
    test ${RUN_CHECK_FORMAT} = yes && run_check_format
    test ${RUN_UPDATE_OPENAPI_SPEC} = yes && run_update_openapi_spec
    test ${RUN_FORMAT} = yes && run_format
    true
}

main "$@"
