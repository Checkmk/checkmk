#!/bin/bash
# Copyright (C) 2022 Checkmk GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

set -e

JOBS=6
readonly CLANG_VERSION=${CLANG_VERSION:-19}
readonly BAZEL_CMD=${BAZEL_CMD:-bazel}
readonly ALL_LINTERS=iwyu,clang-tidy

failure() {
    test ${#@} -eq 0 || echo "$(basename "$0"):" "$@" >&2
    exit 1
}

usage() {
    echo "usage: $(basename "$0") [OPTION]... [FILE]..."
    echo "Run the CI pipeline or parts of it on the changed files. If FILEs are"
    echo "given, run any formatting, IWYU, or clang-tidy steps only on these."
    echo
    echo "  -c, --clean             remove artifacts first"
    echo "  -b, --build             build package"
    echo "  -u, --unit-tests        run unit tests"
    echo "  -F, --check-format      check for correct formatting"
    echo "  -l L,..., --lint=L,...  run linters, 'all' means '${ALL_LINTERS}'"
    echo "  -a, --all               shortcut for -b -u -F -l all"
    echo "  -f, --format            format sources"
    echo "  -D, --documentation     generate documentation"
    echo "  -j N, --jobs=N          allow N jobs at once, default is ${JOBS}"
    echo "  -h, --help              show this help"
}

parse_options() {
    # Yes, all those option variables are global.
    RUN_CLEAN=no
    RUN_BUILD=no
    RUN_UNIT_TESTS=no
    RUN_CHECK_FORMAT=no
    RUN_IWYU=no
    RUN_CLANG_TIDY=no
    RUN_FORMAT=no
    RUN_DOCUMENTATION=no
    FILES=()

    if ! OPTIONS=$(getopt --options 'cbuFl:afDj:h' --long 'clean,build,unit-tests,check-format,lint:,all,format,documentation,jobs:,help' --name "$(basename "$0")" -- "$@"); then
        usage >&2
        failure
    fi
    eval set -- "$OPTIONS"
    unset OPTIONS

    while true; do
        case "$1" in
            '-c' | '--clean')
                RUN_CLEAN=yes
                shift
                ;;
            '-b' | '--build')
                RUN_BUILD=yes
                shift
                ;;
            '-u' | '--unit-tests')
                RUN_UNIT_TESTS=yes
                shift
                ;;
            '-F' | '--check-format')
                RUN_CHECK_FORMAT=yes
                shift
                ;;
            '-l' | '--lint')
                test "$2" = "all" && LINTERS="${ALL_LINTERS}" || LINTERS="$2"
                for LINTER in ${LINTERS//,/ }; do
                    case ,"${ALL_LINTERS}", in
                        *,"${LINTER}",*)
                            FLAG="RUN_${LINTER//-/_}"
                            eval "${FLAG^^}=yes"
                            ;;
                        *) failure "unknown linter: ${LINTER}" ;;
                    esac
                done
                shift 2
                ;;
            '-a' | '--all')
                RUN_BUILD=yes
                RUN_UNIT_TESTS=yes
                RUN_CHECK_FORMAT=yes
                RUN_IWYU=yes
                RUN_CLANG_TIDY=yes
                shift
                ;;
            '-f' | '--format')
                RUN_FORMAT=yes
                shift
                ;;
            '-D' | '--documentation')
                RUN_DOCUMENTATION=yes
                shift
                ;;
            '-j' | '--jobs')
                JOBS="$2"
                shift 2
                ;;
            '-h' | '--help')
                usage
                exit 0
                ;;
            '--')
                shift
                FILES=("$@")
                break
                ;;
            *) failure "internal error" ;;
        esac
    done

    readonly RUN_CLEAN RUN_BUILD RUN_UNIT_TESTS RUN_CHECK_FORMAT RUN_IWYU RUN_CLANG_TIDY RUN_FORMAT RUN_DOCUMENTATION FILES JOBS
}

run_clean() {
    rm -rf build
}

run_clang_format() {
    # NOTE: FILES_TO_USE contains no headers, so we format everything when FILES
    # is not given. This is fast enough while maintaining correctness.
    # shellcheck disable=SC2068 # Yes, we want splitting for FILES.
    find ${FILES[@]:-src test include} -type f \( -name "*.h" -o -name "*.cc" \) -print0 |
        xargs --no-run-if-empty --null "clang-format-${CLANG_VERSION}" -style=file "$@"
}

run_build() {
    "${BAZEL_CMD}" build :all
}

run_unit_tests() {
    if test -z ${VALGRIND+x} && command -v valgrind >/dev/null; then
        VALGRIND="$(which valgrind) --quiet --num-callers=30 --error-exitcode=42"
    fi
    "${BAZEL_CMD}" test ${VALGRIND:+--run_under="${VALGRIND}"} :all
}

run_check_format() {
    run_clang_format --dry-run -Werror
    "${BAZEL_CMD}" run -- //bazel/tools:buildifier -mode=check -lint=warn "$(realpath BUILD)"
}

run_iwyu() {
    "${BAZEL_CMD}" build --config iwyu :all
}

run_clang_tidy() {
    "${BAZEL_CMD}" build --config clang-tidy :all
}

run_format() {
    run_clang_format -i
    "${BAZEL_CMD}" run -- //bazel/tools:buildifier -mode=fix -lint=fix "$(realpath BUILD)"
}

run_documentation() {
    doxygen doc/Doxyfile
}

main() {
    # Change to the directory where this script resides, it makes many things easier
    # and we can call this script from everywhere.
    cd -- "${BASH_SOURCE%/*}"
    parse_options "$@"
    test ${RUN_CLEAN} = yes && run_clean
    test ${RUN_BUILD} = yes && run_build
    test ${RUN_UNIT_TESTS} = yes && run_unit_tests
    test ${RUN_CHECK_FORMAT} = yes && run_check_format
    test ${RUN_IWYU} = yes && run_iwyu
    test ${RUN_CLANG_TIDY} = yes && run_clang_tidy
    test ${RUN_FORMAT} = yes && run_format
    test ${RUN_DOCUMENTATION} = yes && run_documentation
    true
}

main "$@"
