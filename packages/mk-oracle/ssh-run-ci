#!/bin/bash
set -xe

REMOTE_OS="${1}"
shift
RUN_CMD="$*"

test_for_existance() {
    [ -n "${!1}" ] || {
        echo "Missing $1 environment variable"
        return 1
    }
}

cd -- "${BASH_SOURCE%/*}"
# shellcheck disable=SC1091
. ./ssh-run.conf

test_for_existance REMOTE_USER
test_for_existance ORACLEDB_HOST
test_for_existance ORACLEDB_PORT
test_for_existance ORACLEDB_USER
test_for_existance ORACLEDB_PASSWORD

case "${REMOTE_OS}" in
    'AIX')
        test_for_existance REMOTE_HOST_AIX
        REMOTE_HOST=${REMOTE_HOST_AIX}
        test_for_existance REMOTE_HOME_AIX
        REMOTE_HOME=${REMOTE_HOME_AIX}
        ADD_TO_PATH="${ADD_TO_PATH_AIX}"
        ;;
    'Solaris')
        test_for_existance REMOTE_HOST_SOLARIS
        REMOTE_HOST=${REMOTE_HOST_SOLARIS}
        test_for_existance REMOTE_HOME_SOLARIS
        REMOTE_HOME=${REMOTE_HOME_SOLARIS}
        ADD_TO_PATH="${ADD_TO_PATH_SOLARIS}"
        ;;
    *) failure "unknown remote OS: ${REMOTE_OS}" ;;
esac

ssh -N -o ExitOnForwardFailure=yes -o UserKnownHostsFile="${KNOWN_HOSTS_FILE}" -i "${KEYFILE}" -R "${ORACLEDB_PORT}:${ORACLEDB_HOST}:${ORACLEDB_PORT}" "${REMOTE_USER}@${REMOTE_HOST}" &
ORACLEDB_TUNNEL=$!

# Ensure tunnels are cleaned up even on error / interrupt
cleanup() {
    ([ -n "${ORACLEDB_TUNNEL}" ] && kill "${ORACLEDB_TUNNEL}" 2>/dev/null) || true
}
trap cleanup EXIT INT TERM HUP

git_path="${REMOTE_HOME}/${REMOTE_USER}/git"
# TODO: Separate branch checkouts
# CHECKOUT_ROOT="$(git rev-parse --show-toplevel)"
# checkmk_path="${git_path}/checkmk_ci_checkout_$(make -C ${CHECKOUT_ROOT} print-BRANCH_VERSION)"
checkmk_path="${git_path}/checkmk_ci_checkout"
mkdir -p checkmk_path

# shellcheck disable=SC2154 # ${checkout_dir} is set via groovy
rsync -avz --relative -e "ssh -o UserKnownHostsFile=\"${KNOWN_HOSTS_FILE}\" -i \"${KEYFILE}\"" "${checkout_dir}/./requirements/rust/host" "${checkout_dir}/./packages/"{cmk-agent-ctl,mk-oracle,mk-sql} "${REMOTE_USER}@${REMOTE_HOST}:${checkmk_path}"

# shellcheck disable=SC2087 # We want variable expansion here and not on remote host
ssh -o "UserKnownHostsFile=${KNOWN_HOSTS_FILE}" -i "${KEYFILE}" "${REMOTE_USER}@${REMOTE_HOST}" <<EOF
    set -e

    [ -n "${ADD_TO_PATH}" ] && {
        PATH="${ADD_TO_PATH}:\${PATH}"
        export PATH
    }

    export CI_ORA2_DB_TEST="127.0.0.1:${ORACLEDB_USER}:${ORACLEDB_PASSWORD}:${ORACLEDB_PORT}:FREE::_:_:_"
    "${checkmk_path}/packages/mk-oracle/run" "${RUN_CMD}"
EOF

scp "ssh -o UserKnownHostsFile=${KNOWN_HOSTS_FILE} -i ${KEYFILE}" "${REMOTE_USER}@${REMOTE_HOST}:${checkmk_path}/requirements/rust/host/target/release/mk-oracle" mk-oracle-aix
