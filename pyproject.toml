[tool.ruff]
src = ["cmk", "tests"]
extend-exclude = ["agents/plugins/mk_sap_2.py", "doc/**/*.py"]
target-version = "py312"
line-length = 100

[tool.ruff.lint]
# NOTE: No "I" yet due to various tiny formatting differences
select = ["E", "F", "W", "C90", "PL"]
ignore = [
  # Black is our formatting tool, so ignore any formatting-related findings.
  "E501", # line too long
  # Ignore findings which are incompatible with our "import" techonology.
  "F401", # 'FOO' imported but unused
  "E402", # module level import not at top of file
  "F403", # 'from FOO import *' used; unable to detect undefined names
  "F405", # 'FOO' may be undefined, or defined from star imports: BAR
  # We should probably have a look at these findings.
  "E731", # do not assign a lambda expression, use a def
  "E741", # ambiguous variable name 'FOO'
  # pylint doesn't complain about these
  "PLC0414", # Import alias does not rename original package
  "PLR0911", # Too many return statements
  "PLR0912", # Too many branches
  "PLR0913", # Too many arguments in function definition
  "PLR0915", # Too many statements
  "PLR2004", # Magic value used in comparison, consider replacing `FOO` with a constant variable
  "PLW0603", # Using the global statement to update `FOO` is discouraged
  "PLW2901", # `for` loop variable `FOO` overwritten by assignment target
]

[tool.ruff.lint.mccabe]
max-complexity = 64 # TODO: This is far too much, we need to lower this!

[tool.ruff.lint.isort]
# combine-as-imports = true # This would arguably be nicer.
known-first-party = ["cmk"]
order-by-type = false # TODO: Why do we actually want this?
section-order = [
  "future",
  "standard-library",
  "third-party",
  "werks",
  "cmc_proto",
  "testlib",
  "integrationtests",
  "compositiontests",
  "unittests",
  "livestatus",
  "omd",
  "cmk_utils",
  "cmk_automations",
  "cmk_snmplib",
  "cmk_fetchers",
  "cmk_checkengine",
  "cmk_base",
  "cmk_ec",
  "cmk_gui",
  "cmk_cee",
  "cmk_notification_plugins",
  "first-party",
  "local-folder",
]

[tool.ruff.lint.isort.sections]
werks = ["werks"]
cmc_proto = ["cmc_proto"]
testlib = ["tests.testlib"]
integrationtests = ["tests.integration"]
compositiontests = ["tests.composition"]
unittests = ["tests.unit", "tests.plugins_integration", "tests.update"]
livestatus = ["livestatus"]
omd = ["omdlib"]
cmk_utils = ["cmk.utils"]
cmk_automations = ["cmk.automations"]
cmk_snmplib = ["cmk.snmplib"]
cmk_fetchers = ["cmk.fetchers"]
cmk_checkengine = ["cmk.checkengine"]
cmk_base = ["cmk.base"]
cmk_ec = ["cmk.ec"]
cmk_gui = ["cmk.gui"]
cmk_cee = ["cmk.cee.dcd", "cmk.cee.liveproxy", "cmk.cee.mknotifyd"]
cmk_notification_plugins = ["cmk.notification_plugins"]


[tool.isort]
known_werks = "werks"
known_cmc_proto = "cmc_proto"
known_testlib = "tests.testlib"
known_integrationtests = "tests.integration"
known_compositiontests = "tests.composition"
known_unittests = "tests.unit,tests.plugins_integration,tests.update"
known_livestatus = "livestatus"
known_omd = "omdlib"
known_cmk_utils = "cmk.utils"
known_cmk_automations = "cmk.automations"
known_cmk_snmplib = "cmk.snmplib"
known_cmk_fetchers = "cmk.fetchers"
known_cmk_checkengine = "cmk.checkengine"
known_cmk_base = "cmk.base"
known_cmk_ec = "cmk.ec"
known_cmk_gui = "cmk.gui"
known_cmk_cee = "cmk.cee.dcd,cmk.cee.liveproxy,cmk.cee.mknotifyd"
known_cmk_notification_plugins = "cmk.notification_plugins"
known_first_party = "cmk"

# Order sections according to our layering.
sections = """FUTURE,STDLIB,THIRDPARTY,WERKS,CMC_PROTO,TESTLIB,INTEGRATIONTESTS,COMPOSITIONTESTS,UNITTESTS,LIVESTATUS,OMD,
CMK_UTILS,CMK_AUTOMATIONS,CMK_SNMPLIB,CMK_FETCHERS,CMK_CHECKENGINE,CMK_BASE,CMK_EC,CMK_GUI,CMK_CEE,
CMK_NOTIFICATION_PLUGINS,FIRSTPARTY,LOCALFOLDER"""

profile = "black"
order_by_type = "False"
line_length = 100
py_version = "312"


[tool.black]
line-length = 100
target-version = ['py312']


# NOTE: Keep this is sync with mypy-raw.ini!
# The number of errors/files below are just a snapshot to give a rough idea. In
# addition, a single cause can imply multiple symptoms, so these numbers have to
# be taken with a grain of salt...
[tool.mypy]
explicit_package_bases = true
mypy_path = """\
    $MYPY_CONFIG_FILE_DIR:\
    $MYPY_CONFIG_FILE_DIR/non-free/cmc-protocols:\
    $MYPY_CONFIG_FILE_DIR/non-free/cmk-update-agent:\
    $MYPY_CONFIG_FILE_DIR/livestatus/api/python:\
    $MYPY_CONFIG_FILE_DIR/omd/packages/omd:\
    $MYPY_CONFIG_FILE_DIR/tests/typeshed\
    """
plugins = ["pydantic.mypy"]
python_version = "3.12"
scripts_are_modules = true
# When all of these are true, we can enable --strict
check_untyped_defs = true
disallow_any_generics = false      # 1904 errors in 507 files
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = false     # 6427 errors in 1077 files
disallow_untyped_decorators = true
disallow_untyped_defs = false      # 6738 errors in 1571
extra_checks = true
no_implicit_reexport = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = false            # 622 errors in 267 files
warn_unused_configs = true
warn_unused_ignores = true
# Miscellaneous stuff not in --strict
disallow_any_decorated = false  # 3433 errors in 997 files
disallow_any_explicit = false   # 2854 errors in 836 files
disallow_any_expr = false       # 112427 errors in 3304 files
disallow_any_unimported = false # 291 errors in 46 files
no_implicit_optional = true
strict_optional = true
warn_unreachable = false        # 240 errors in 133 files
# hidden flags for PEP 688 compat, see https://github.com/python/mypy/issues/15313
disable_bytearray_promotion = true
disable_memoryview_promotion = true

[[tool.mypy.overrides]]
module = [
  "cmk.active_checks.check_sftp",
  "cmk.cee.bakery.*",
  "cmk.gui.background_job.*",
  "cmk.gui.mobile.views",
  "cmk.gui.views.layout.*",
  "cmk.gui.wato.pages.bulk_discovery",
  "cmk.gui.wato.pages.bulk_edit",
  "cmk.gui.wato.pages.folders",
  "cmk.gui.wato.pages.parentscan",
  "cmk.gui.watolib.auth_php",
  "cmk.gui.watolib.bulk_discovery",
  "cmk.gui.watolib.config_sync",
  "cmk.gui.watolib.main_menu",
  "cmk.gui.watolib.network_scan",
  "cmk.gui.watolib.registration",
  "cmk.notification_plugins.*",
  "cmk.update_config.*",
  "cmk.utils.crypto.*",
  "cmk.utils.livestatus_helpers.*",
  "tests.gui_e2e.*",
  "tests.unit.cmk.ec.*",
  "tests.unit.cmk.update_config.*",
]
disallow_untyped_calls = true
disallow_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = ["cmk.ec.*"]
disallow_any_generics = true
disallow_untyped_calls = true
disallow_untyped_defs = true
warn_unreachable = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = [
  # Live logs initially look like a good idea to pin down problems in the tests
  # quickly, but with the current state of our tests it's simply too much noise.
  # Even in a successful unit test run, you get more than 70 log messages
  # cluttering up the output and making it hard to use: saml2.client logs already
  # at load time, tons of our own tests emit warnings up to ERROR even when
  # successful, etc. etc. We might reconsinder lowering the live log level when we
  # have cleaned up things...
  "--log-cli-level=CRITICAL",
  "--log-cli-format=\"%(asctime)s %(levelname)s %(message)s\"",
  # Show summary of skipped tests
  "-rs",
  # Show N slowest setup/test durations
  "--durations=20",
  # Disable a few plugins which slow down the pytest startup even when not used
  "-p no:faker",
  "-p no:schemathesis",
  "-p no:hypothesispytest",
]
markers = [
  "checks: Run all existing test cases for checks.",
  "slow: Run tests which take relatively larger time to execute.",
]
# See: https://docs.python.org/3/library/warnings.html#the-warnings-filter
filterwarnings = [
  # Breaking change, only in new major version, see https://github.com/marshmallow-code/apispec/pull/759
  'ignore:^distutils Version classes are deprecated\. Use packaging.version instead\.$:DeprecationWarning:apispec.utils:0',
  # Internal copy of distutils in setuptools :-P
  'ignore:^distutils Version classes are deprecated\. Use packaging.version instead\.$:DeprecationWarning:distutils.version:0',
  # We have a doctest which intentionally checks for a failure
  'ignore:^Invalid value for tag-group tag_agent. None$:UserWarning:cmk.gui.fields.definitions:0',
  # Make marshmallow warnings errors, otherwise typos may go unnoticed.
  'error::marshmallow.warnings.RemovedInMarshmallow4Warning',
  # Fun fact: pkg_resources calls declare_namespace() itself when it processes namespace_packages.txt files.
  'ignore:Deprecated call to `pkg_resources\.declare_namespace:DeprecationWarning:pkg_resources:0',
  # ignore schemathesis testing related warnings
  'ignore:^jsonschema\.RefResolver is deprecated.*$:DeprecationWarning:schemathesis\..*:0',
  'ignore:^jsonschema\.exceptions\.RefResolutionError is deprecated.*$:DeprecationWarning:schemathesis\..*:0',
  'ignore:^Generating overly large repr.*$:Warning:hypothesis\..*:0',
  # ignore DeprecationWarning for ast.NameConstant in reportlab <= 4.2
  'ignore:^ast\.NameConstant is deprecated and will be removed in Python 3\.14\; use ast\.Constant instead$:DeprecationWarning:reportlab\..*:0',
  # ignore warnings caused by probuf 4.25.3 until updating to 5.x
  'ignore:^Type google\._upb\._message.MessageMapContainer uses PyType_Spec with a metaclass that has custom tp_new\. This is deprecated and will no longer be allowed in Python 3\.14\.$:DeprecationWarning:importlib._bootstrap:488',
  'ignore:^Type google\._upb\._message.ScalarMapContainer uses PyType_Spec with a metaclass that has custom tp_new\. This is deprecated and will no longer be allowed in Python 3\.14\.$:DeprecationWarning:importlib._bootstrap:488',
  # ignore PytestCollectionWarning caused by webtest
  'ignore:^cannot collect test class .* because it has a __init__ constructor.*$:UserWarning:.*webtest.*:0',
]
# When writing a junit.xml, also write the output of a test to the junit
# file in addition to the console.
junit_logging = "all"
