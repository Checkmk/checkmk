#!/bin/bash
# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

set -e
TARGET=$1
PATCHSET_REVISION=$2
SCRIPT_PATH="${BASH_SOURCE[0]}"
REPO_DIR="$(dirname "$(cd "$(dirname "$SCRIPT_PATH")" >/dev/null 2>&1 && pwd)")"

function execute_test() {
    # Prevpare Makefiles, otherwise "make compile_commands.json" will fail
    make -C "$REPO_DIR" config.h

    # To really compute only the files which need checking, we better make sure
    # that our project is up-to-date without any further changes first.
    make -j8

    # Having an up-to-date project file before running a linter is a good idea, too
    # (i.e. target "compile_commands.json").
    make compile_commands.json

    # ATTENTION! Extremely cunning hack ahead! Find out which files have been
    # changed in the current directory for the given commit. Transform those file
    # names into --what-if=... options for make and do a dry run with them. This
    # outputs the compilation commands needed, which we massage a bit with grep and
    # sed to finally find out which C/C++ we need to check. Brilliant!  :-D  ;-)
    FILES_TO_CHECK=$(make --dry-run \
        $(git diff-tree --no-commit-id --name-only -r --relative "${PATCHSET_REVISION}" |
            sed 's/\(.*\)/--what-if=\1/') \
        all-am |
        grep -e '-MD -MP -MF' |
        sed 's/ &&\\$//' |
        sed "s,.* || echo '\\./'\`,," |
        sed 's/.*-c -o .*\.o //' |
        sort)

    if test -z "${FILES_TO_CHECK}"; then
        echo "==================== nothing to do"
        exit 0
    fi

    echo "==================== files to check:"
    echo "${FILES_TO_CHECK}"

    echo "==================== ${TARGET}"
    make "${TARGET}" FILES_TO_CHECK="$(echo $FILES_TO_CHECK)"
}

if [ "$PWD" != "$REPO_DIR/livestatus/src" ] && [ "$PWD" != "$REPO_DIR/enterprise/core/src" ]; then
    echo "ERROR: Wrong working directory (go to $REPO_DIR/livestatus/src or $REPO_DIR/enterprise/core/src)"
    exit 1
fi

if [ -z "$TARGET" ]; then
    echo "ERROR: You need to provide a make target (iwyu, tidy, ...) as 1st argument"
    exit 1
fi

if [ -z "$PATCHSET_REVISION" ]; then
    echo "ERROR: You need to provide a git refspec as 2nd argument"
    exit 1
fi

execute_test "$TARGET" "$PATCHSET_REVISION"
