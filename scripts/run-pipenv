#!/bin/bash
# Small helper to execute pipenv with our different virtual environments.
# The first argument must be the name of the virtual environment in $REPO_PATH/virtual-envs

set -e -o pipefail

REPO_PATH="$(cd "$(dirname "$(dirname "${BASH_SOURCE[0]}")")" >/dev/null 2>&1 && pwd)"
PYTHON_VERSION=$1
shift

if [ -z "$PYTHON_VERSION" ]; then
    echo "ERROR: run-pipenv [2|3] PIPENV-ARGS..." >&2
    exit 1
fi

# TODO: Intermediate step. will be cleaned up later when we rename the venv directories
if [ "$PYTHON_VERSION" = "2" ]; then
    PYTHON_VERSION="2.7"
elif [ "$PYTHON_VERSION" = "3" ]; then
    PYTHON_VERSION="3.7"
fi

if [ ! -d "$REPO_PATH/virtual-envs/$PYTHON_VERSION" ]; then
    echo "ERROR: Invalid python version $PYTHON_VERSION given." >&2
    exit 1
fi

# This is skipped when run-pipenv is called from virtual-envs/venv.make
if [ -z "$SKIP_MAKEFILE_CALL" ]; then
    make --silent -C "$REPO_PATH/virtual-envs/$PYTHON_VERSION" .venv 1>&2
fi

# Enforce a non localized environment. The reason for this configuration is
# that the parameters and outputs of the monitoring plug-ins are localized. If
# they are called from the core, they are always language-neutral. During
# manual testing, the plugins may behave differently depending on the
# localization of the user's environment variables. This can lead to confusion
# during tests.
if [ -z "$LANG" ]; then
    INSTALLED_LOCALES=$(locale -a)
    for i in "C.UTF-8" "C.utf8" "en_US.utf8" "C"; do
        if echo $INSTALLED_LOCALES | grep -q -w -F "$i"; then
            export LANG="$i" LC_ALL="$i"
            break
        fi
    done
fi

PIPENV_VENV_IN_PROJECT=true \
    PIPENV_NOSPIN=true \
    PIPENV_HIDE_EMOJIS=true \
    PIPENV_NO_INHERIT=true \
    PIPENV_PIPFILE="$REPO_PATH/virtual-envs/$PYTHON_VERSION/Pipfile" \
    PIPENV_IGNORE_VIRTUALENVS=1 \
    pipenv "$@"
