#!/usr/bin/env python

from __future__ import print_function
stats = eval(file("var/crawl.stats").read())


def print_url(title, entry):
    print()
    print("%s:" % title)
    print("-" * 10)
    print("URL:      %s" % entry["orig_url"])
    print("Referer:  %s" % entry["referer_url"])
    print("Duration: %0.2f sec (Avg. %0.2f sec of %d tries)" % \
          (entry["last_duration"], entry["avg_duration"],
           entry["num_visited"]))
    print("Size:     %0.2f KBytes (Avg. %0.2f KBytes of %d tries)" % \
          (entry["last_content_size"]/1024.0,
           entry["avg_content_size"]/1024.0,
           entry["num_visited"]))


print("Total:", stats["_TOTAL_"])

print("")
print("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++")
print("+ SLOWEST PAGES                                                         +")
print("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++")
print("")

for num, (key, val) in enumerate(sorted(stats.items(),
                            key=lambda x: "avg_duration" in x[1] \
                                          and x[1]["avg_duration"]
                                          or 0, reverse=True)[:10]):
    if key == "_TOTAL_":
        continue

    print_url("%02d Slowest" % num, val)

print("")
print("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++")
print("+ LARGEST PAGES                                                         +")
print("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++")
print("")

for num, (key, val) in enumerate(sorted(stats.items(),
                            key=lambda x: "avg_content_size" in x[1] \
                                          and x[1]["avg_content_size"]
                                          or 0, reverse=True)[:10]):
    if key == "_TOTAL_":
        continue

    print_url("%02d Largest" % num, val)
