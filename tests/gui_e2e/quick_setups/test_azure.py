#!/usr/bin/env python3
# Copyright (C) 2025 Checkmk GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.
import logging
import re
from collections.abc import Iterator
from pathlib import Path

import pytest
from playwright.sync_api import expect

from tests.gui_e2e.testlib.playwright.pom.monitor.dashboard import MainDashboard
from tests.gui_e2e.testlib.playwright.pom.setup.cloud_quick_setups import (
    AzureAddNewConfiguration,
    AzureConfigurationList,
    QuickSetupMultiChoice,
)
from tests.gui_e2e.testlib.playwright.pom.setup.dcd import DCD
from tests.gui_e2e.testlib.playwright.pom.setup.hosts import SetupHost
from tests.gui_e2e.testlib.playwright.pom.setup.passwords import Passwords
from tests.gui_e2e.testlib.playwright.pom.setup.ruleset import Ruleset
from tests.gui_e2e.testlib.playwright.timeouts import ANIMATION_TIMEOUT
from tests.testlib.site import Site
from tests.testlib.utils import is_cleanup_enabled, run

logger = logging.getLogger(__name__)


@pytest.fixture(name="fake_azure_dump", scope="module")
def fixture_fake_azure_dump(test_site: Site) -> Iterator[None]:
    """Fake the Azure special agent used within Checkmk site.

    Quick setup performs validation of Azure connection.
    Faking the Azure agent bypasses such validations, which are 'out-of-scope' of UI tests.
    """
    fake_agent_azure = Path(__file__).parent / "fake_agent_azure.py"
    azure_agent = test_site.path("lib/python3/cmk/plugins/azure/special_agent/agent_azure.py")
    backup_agent = str(azure_agent).replace(".py", ".py.bck")
    run(["cp", str(azure_agent), backup_agent], sudo=True)
    run(["cp", str(fake_agent_azure), str(azure_agent)], sudo=True)
    yield
    if is_cleanup_enabled():
        run(["cp", str(backup_agent), str(azure_agent)], sudo=True)
        run(["rm", str(backup_agent)], sudo=True)


@pytest.fixture(name="azure_qs_config_page")
def fixture_azure_qs_config_page(
    fake_azure_dump: None,
    dashboard_page: MainDashboard,
    test_site: Site,
) -> Iterator[AzureAddNewConfiguration]:
    """Navigate to the Azure Quick setup page and add new configuration page"""
    configuration_name = "my_azure_account"
    folder_details = AzureAddNewConfiguration.FolderDetails(
        name="azure_folder",
        parent="Main",
        create_new=True,
    )
    azure_qs_config_page = AzureAddNewConfiguration(
        dashboard_page.page,
        configuration_name=configuration_name,
        folder_details=folder_details,
    )
    yield azure_qs_config_page
    azure_config_list_page = AzureConfigurationList(azure_qs_config_page.page)
    activate = False
    # quick check; validation is performed in the test
    if azure_config_list_page.configuration_row(configuration_name).count() > 0:
        azure_config_list_page.delete_configuration(configuration_name)
        activate = True

    list_hosts_page = SetupHost(azure_config_list_page.page)
    # the quick setup could have failed before the folder gets created
    if list_hosts_page.folder_icon(folder_details.name).count() > 0:
        list_hosts_page.delete_folder(folder_details.name)
        activate = True

    if activate:  # only activate if we deleted the quick setup or folder
        list_hosts_page.activate_changes(test_site)


def test_minimal_configuration(
    azure_qs_config_page: AzureAddNewConfiguration, test_site: Site
) -> None:
    """Validate setup of a Azure configuration using 'Quick setup: Azure'"""
    config_name = azure_qs_config_page.configuration_name
    config_name_pattern = re.compile(config_name)
    host_name = "azure_host"
    password_name = f"{config_name}_password"  # this is auto-generated by Checkmk

    # Stage 1
    azure_qs_config_page.specify_stage_one_details(
        subscription_id="my_subscription_id",
        tenant_id="my_tenant_id",
        client_id="my_client_id",
        secret="my_secret",
    )

    azure_qs_config_page.validate_button_text_and_goto_next_qs_stage(current_stage=1)

    # Stage 2
    azure_qs_config_page.specify_stage_two_details(
        host_name,
        site_name=test_site.id,
    )

    azure_qs_config_page.validate_button_text_and_goto_next_qs_stage(current_stage=2)

    # Stage 3
    azure_qs_config_page.specify_stage_three_details(
        services_to_monitor=QuickSetupMultiChoice([], ["Load Balancer"]),
    )

    azure_qs_config_page.validate_button_text_and_goto_next_qs_stage(current_stage=3)

    # Stage 4
    azure_qs_config_page.click_test_configuration_button()

    # Save stage
    expect(
        azure_qs_config_page.main_area.locator().get_by_text("Azure services found!"),
        message="Expected Azure services to be found after the connection test!",
    ).to_be_visible()
    # wait for stage transition animation
    azure_qs_config_page.page.wait_for_timeout(ANIMATION_TIMEOUT)
    azure_qs_config_page.save_quick_setup()

    # Validations
    logger.info("Validate Azure configuration is listed.")
    config_list_page = azure_qs_config_page.list_configuration_page()
    expect(
        config_list_page.configuration_row(config_name),
        message="Expected the new Azure Quick setup to be listed!",
    ).to_be_visible()

    logger.info("Validate Azure folder and host is setup.")
    list_hosts_page = SetupHost(config_list_page.page)
    list_hosts_page.click_and_wait(
        list_hosts_page.get_link(azure_qs_config_page.folder_details.name),
        expected_locator=list_hosts_page.get_link(host_name),
    )
    logger.info("Validate Azure rule is setup.")
    list_azure_rules_page = Ruleset(
        list_hosts_page.page, "Microsoft Azure", "VM, cloud, container", exact_rule=True
    )
    expect(
        list_azure_rules_page.rule_source(rule_id=0),
        message="Expected the Azure rule to be created!",
    ).to_have_text(config_name_pattern)
    expect(
        list_azure_rules_page.get_link(config_name, exact=False),
        message="Expected the Quick setup to be linked on the rule page!",
    ).to_be_visible()

    logger.info("Validate Azure password is setup.")
    list_passwords_page = Passwords(list_azure_rules_page.page)
    expect(
        list_passwords_page.password_source(password_name),
        message="Expected the Azure password to be created!",
    ).to_have_text(config_name_pattern)
    expect(
        list_passwords_page.get_link(config_name, exact=False),
        message="Expected the Quick setup to be linked on the password page!",
    ).to_be_visible()

    if test_site.edition.is_raw_edition():
        logger.info("Skipping DCD validation for raw edition.")
    else:
        logger.info("Validate Azure DCD connection is setup.")
        dcd_page = DCD(list_passwords_page.page)
        expect(
            dcd_page.connection_row(azure_qs_config_page.configuration_name),
            message="Expected a DCD connection for the Azure Quick setup to exist!",
        ).to_be_visible()
