#!/usr/bin/env python3
# Copyright (C) 2019 Checkmk GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

import pytest

from tests.unit.conftest import FixPluginLegacy, FixRegister

from cmk.utils.check_utils import section_name_of
from cmk.utils.legacy_check_api import LegacyCheckDefinition
from cmk.utils.sectionname import SectionName

from cmk.base.api.agent_based.plugin_classes import AgentSectionPlugin, SNMPSectionPlugin

pytestmark = pytest.mark.checks


def test_create_section_plugin_from_legacy(
    fix_plugin_legacy: FixPluginLegacy, fix_register: FixRegister
) -> None:
    for name, check_info_dict in fix_plugin_legacy.check_info.items():
        # only test main checks
        if name != section_name_of(name):
            continue

        section_name = SectionName(name)

        section = fix_register.agent_sections.get(section_name)
        if section is not None:
            assert isinstance(section, AgentSectionPlugin)
        else:
            section = fix_register.snmp_sections.get(section_name)
            if section is None:
                raise NotImplementedError(name)
            assert isinstance(section, SNMPSectionPlugin)

        if section is None:
            continue

        original_parse_function = check_info_dict.parse_function
        if original_parse_function is not None:
            assert original_parse_function.__name__ == section.parse_function.__name__


def test_snmp_info_snmp_detect_equal(fix_plugin_legacy: FixPluginLegacy) -> None:
    for check_info_element in fix_plugin_legacy.check_info.values():
        assert (check_info_element.detect is None) is (check_info_element.fetch is None)


def _defines_section(check_info_element: LegacyCheckDefinition) -> bool:
    if check_info_element.parse_function is not None:
        return True

    assert check_info_element.detect is None
    assert check_info_element.fetch is None
    return False


def _is_section_migrated(name: str, fix_register: FixRegister) -> bool:
    sname = SectionName(name)
    return (
        section := fix_register.snmp_sections.get(sname, fix_register.agent_sections.get(sname))
    ) is not None and section.location is not None


def test_sections_definitions_exactly_in_mainchecks(
    fix_plugin_legacy: FixPluginLegacy, fix_register: FixRegister
) -> None:
    """Test where section definitions occur.

    Make sure that sections are defined if and only if it is a main check
    for which no migrated section exists.
    """
    for name, check_info_element in fix_plugin_legacy.check_info.items():
        if section_name_of(name) != name:  # subcheck
            assert not _defines_section(check_info_element)
        else:
            assert _is_section_migrated(name, fix_register) is not _defines_section(
                check_info_element
            )


def test_subcheck_snmp_info_consistent(fix_plugin_legacy: FixPluginLegacy) -> None:
    ref_info: dict = {section_name_of(name): {} for name in fix_plugin_legacy.check_info}
    for name, check_info_element in fix_plugin_legacy.check_info.items():
        if info := check_info_element.fetch:
            assert info == ref_info[section_name_of(name)].setdefault("fetch", info)
        if detect := check_info_element.detect:
            assert detect == ref_info[section_name_of(name)].setdefault("detect", detect)


def test_all_checks_migrated(fix_plugin_legacy: FixPluginLegacy, fix_register: FixRegister) -> None:
    migrated = {str(name) for name in fix_register.check_plugins}
    # we don't expect pure section declarations anymore
    true_checks = {
        n.replace(".", "_").replace("-", "_")
        for n, i in fix_plugin_legacy.check_info.items()
        if i.check_function
    }
    failures = true_checks - migrated
    assert not failures, f"failed to migrate: {failures!r}"


def test_no_new_or_vanished_legacy_checks(fix_plugin_legacy: FixPluginLegacy) -> None:
    expected_legacy_checks = {
        "3ware_disks",
        "3ware_info",
        "3ware_units",
        "acme_agent_sessions",
        "acme_certificates",
        "acme_fan",
        "acme_powersupply",
        "acme_realm",
        "acme_sbc",
        "acme_sbc.settings",
        "acme_sbc_snmp",
        "acme_temp",
        "acme_voltage",
        "ad_replication",
        "adva_fsp_current",
        "adva_fsp_temp",
        "aironet_clients",
        "aironet_errors",
        "aix_hacmp_nodes",
        "aix_hacmp_resources",
        "aix_hacmp_services",
        "aix_lvm",
        "aix_multipath",
        "aix_paging",
        "aix_sap_processlist",
        "akcp_daisy_temp",
        "alcatel_cpu",
        "alcatel_cpu_aos7",
        "alcatel_fans",
        "alcatel_fans_aos7",
        "alcatel_power",
        "alcatel_power_aos7",
        "alcatel_temp",
        "alcatel_temp_aos7",
        "alcatel_timetra_chassis",
        "alcatel_timetra_cpu",
        "allnet_ip_sensoric.tension",
        "allnet_ip_sensoric.temp",
        "allnet_ip_sensoric.humidity",
        "allnet_ip_sensoric.pressure",
        "apc_ats_output",
        "apc_ats_status",
        "apc_humidity",
        "apc_inputs",
        "apc_inrow_airflow",
        "apc_inrow_fanspeed",
        "apc_inrow_temp",
        "apc_mod_pdu_modules",
        "apc_netbotz_drycontact",
        "apc_rackpdu_power",
        "apc_sts_inputs",
        "apc_sts_source",
        "apc_symmetra",
        "apc_symmetra.temp",
        "apc_symmetra.elphase",
        "apc_symmetra_ext_temp",
        "apc_symmetra_input",
        "apc_symmetra_output",
        "apc_symmetra_test",
        "appdynamics_memory",
        "appdynamics_sessions",
        "appdynamics_web_container",
        "arc_raid_status",
        "arcserve_backup",
        "arista_temp",
        "arris_cmts_cpu",
        "arris_cmts_mem",
        "arris_cmts_temp",
        "artec_documents",
        "artec_temp",
        "aruba_aps",
        "aruba_clients",
        "aruba_cpu_util",
        "atto_fibrebridge_chassis.temp",
        "atto_fibrebridge_chassis",
        "atto_fibrebridge_fcport",
        "atto_fibrebridge_sas",
        "avaya_45xx_cpu",
        "avaya_45xx_fan",
        "avaya_45xx_temp",
        "avaya_88xx",
        "avaya_88xx.fan",
        "avaya_88xx_cpu",
        "avaya_chassis_card",
        "avaya_chassis_ps",
        "avaya_chassis_temp",
        "aws_cloudwatch_alarms_limits",
        "aws_costs_and_usage",
        "aws_costs_and_usage.per_service",
        "aws_dynamodb_limits",
        "aws_dynamodb_summary",
        "aws_dynamodb_table",
        "aws_dynamodb_table.read_capacity",
        "aws_dynamodb_table.write_capacity",
        "aws_dynamodb_table.latency",
        "aws_ebs_summary",
        "aws_ebs_summary.health",
        "aws_ec2_limits",
        "aws_ec2_security_groups",
        "aws_ec2_summary",
        "aws_elb",
        "aws_elb.latency",
        "aws_elb.http_elb",
        "aws_elb.http_backend",
        "aws_elb.healthy_hosts",
        "aws_elb.backend_connection_errors",
        "aws_elb_health",
        "aws_elb_limits",
        "aws_elb_summary",
        "aws_elbv2_application",
        "aws_elbv2_application.connections",
        "aws_elbv2_application.http_elb",
        "aws_elbv2_application.http_redirects",
        "aws_elbv2_application.statistics",
        "aws_elbv2_application_target_groups_http",
        "aws_elbv2_application_target_groups_lambda",
        "aws_elbv2_limits",
        "aws_elbv2_network",
        "aws_elbv2_network.connections",
        "aws_elbv2_network.tls_handshakes",
        "aws_elbv2_network.rst_packets",
        "aws_elbv2_network.statistics",
        "aws_elbv2_summary",
        "aws_elbv2_summary.network",
        "aws_elbv2_target_groups",
        "aws_elbv2_target_groups.network",
        "aws_exceptions",
        "aws_glacier",
        "aws_glacier.summary",
        "aws_glacier_limits",
        "aws_rds_limits",
        "aws_rds_summary",
        "aws_rds_summary.db_status",
        "aws_s3",
        "aws_s3.summary",
        "aws_s3_limits",
        "aws_s3_requests",
        "aws_s3_requests.http_errors",
        "aws_s3_requests.latency",
        "aws_s3_requests.traffic_stats",
        "aws_s3_requests.select_object",
        "aws_wafv2_limits",
        "aws_wafv2_summary",
        "aws_wafv2_web_acl",
        "azure_ad",
        "azure_ad.sync",
        "azure_agent_info",
        "azure_databases.storage",
        "azure_databases.deadlock",
        "azure_databases.cpu",
        "azure_databases.dtu",
        "azure_databases.connections",
        "azure_databases",
        "azure_sites",
        "azure_storageaccounts",
        "azure_storageaccounts.flow",
        "azure_storageaccounts.performance",
        "azure_usagedetails",
        "barracuda_mail_latency",
        "barracuda_mailqueues",
        "barracuda_system_cpu_util",
        "bdt_tape_info",
        "bdt_tape_status",
        "bdtms_tape_info",
        "bdtms_tape_module",
        "bdtms_tape_status",
        "bi_aggregation_connection",
        "bintec_brrp_status",
        "bintec_cpu",
        "bintec_info",
        "bintec_sensors",
        "bintec_sensors.fan",
        "bintec_sensors.temp",
        "bintec_sensors.voltage",
        "blade_bays",
        "blade_blades",
        "blade_blowers",
        "blade_bx_blades",
        "blade_bx_powerfan",
        "blade_bx_powermod",
        "blade_bx_temp",
        "blade_health",
        "blade_mediatray",
        "blade_powerfan",
        "blade_powermod",
        "bluecat_command_server",
        "bluecat_dns_queries",
        "bluecat_ha",
        "bluecat_ntp",
        "bluecat_threads",
        "bluecoat_diskcpu",
        "bluenet_meter",
        "bluenet_sensor",
        "bluenet_sensor.hum",
        "brocade",
        "brocade.fan",
        "brocade.power",
        "brocade.temp",
        "brocade_info",
        "brocade_mlx",
        "brocade_mlx.module_status",
        "brocade_mlx.module_mem",
        "brocade_mlx.module_cpu",
        "brocade_mlx_fan",
        "brocade_mlx_power",
        "brocade_mlx_temp",
        "brocade_sys.mem",
        "brocade_sys",
        "brocade_tm",
        "brocade_vdx_status",
        "bvip_fans",
        "bvip_info",
        "bvip_link",
        "bvip_poe",
        "bvip_temp",
        "bvip_util",
        "bvip_video_alerts",
        "cadvisor_cpu",
        "cadvisor_df",
        "cadvisor_memory",
        "carel_sensors",
        "carel_uniflair_cooling",
        "casa_cpu_mem",
        "casa_cpu_temp",
        "casa_cpu_util",
        "casa_fan",
        "casa_power",
        "cbl_airlaser",
        "cbl_airlaser.status",
        "cbl_airlaser.hardware",
        "checkpoint_fan",
        "checkpoint_firewall",
        "checkpoint_ha_problems",
        "checkpoint_ha_status",
        "checkpoint_memory",
        "checkpoint_packets",
        "checkpoint_powersupply",
        "checkpoint_svn_status",
        "checkpoint_temp",
        "checkpoint_tunnels",
        "checkpoint_voltage",
        "checkpoint_vsx",
        "checkpoint_vsx.connections",
        "checkpoint_vsx.packets",
        "checkpoint_vsx.traffic",
        "checkpoint_vsx.status",
        "cisco_ace_rserver",
        "cisco_asa_conn",
        "cisco_asa_connections",
        "cisco_cpu",
        "cisco_fan",
        "cisco_fantray",
        "cisco_fru_module_status",
        "cisco_fru_powerusage",
        "cisco_hsrp",
        "cisco_ip_sla",
        "cisco_nexus_cpu",
        "cisco_oldcpu",
        "cisco_power",
        "cisco_prime_wifi_access_points",
        "cisco_prime_wifi_connections",
        "cisco_redundancy",
        "cisco_secure",
        "cisco_srst_call_legs",
        "cisco_srst_phones",
        "cisco_srst_state",
        "cisco_stackpower",
        "cisco_sys_mem",
        "cisco_temp",
        "cisco_ucs_cpu",
        "cisco_ucs_hdd",
        "cisco_ucs_lun",
        "cisco_ucs_mem_total",
        "cisco_ucs_psu",
        "cisco_ucs_raid",
        "cisco_ucs_system",
        "cisco_ucs_temp_env",
        "cisco_ucs_temp_mem",
        "cisco_vpn_sessions",
        "cisco_vss",
        "citrix_hostsystem.vms",
        "citrix_hostsystem",
        "citrix_licenses",
        "citrix_serverload",
        "citrix_sessions",
        "climaveneta_alarm",
        "climaveneta_fan",
        "climaveneta_temp",
        "cmc_temp",
        "cmciii_lcp_fans",
        "cmciii_lcp_water",
        "cmciii_lcp_waterflow",
        "cmctc_temp",
        "cmctc_config",
        "cmctc_output",
        "cmctc_ports",
        "cmctc_psm_m",
        "cmctc_state",
        "couchbase_buckets_cache",
        "couchbase_buckets_fragmentation",
        "couchbase_buckets_items",
        "couchbase_buckets_mem",
        "couchbase_buckets_operations",
        "couchbase_buckets_operations.total",
        "couchbase_buckets_vbuckets",
        "couchbase_buckets_vbuckets.replica",
        "couchbase_nodes_cache",
        "couchbase_nodes_info",
        "couchbase_nodes_items",
        "couchbase_nodes_operations",
        "couchbase_nodes_operations.total",
        "couchbase_nodes_services",
        "couchbase_nodes_size",
        "couchbase_nodes_size.docs",
        "couchbase_nodes_size.spacial_views",
        "couchbase_nodes_size.couch_views",
        "couchbase_nodes_stats",
        "couchbase_nodes_stats.cpu_util",
        "couchbase_nodes_stats.mem",
        "cpsecure_sessions",
        "cups_queues",
        "datapower_cpu",
        "datapower_fan",
        "datapower_fs",
        "datapower_ldrive",
        "datapower_mem",
        "datapower_pdrive",
        "datapower_raid_bat",
        "datapower_temp",
        "db2_backup",
        "db2_bp_hitratios",
        "db2_connections",
        "db2_counters",
        "db2_logsizes",
        "db2_mem",
        "db2_sort_overflow",
        "db2_tablespaces",
        "db2_version",
        "ddn_s2a_errors",
        "ddn_s2a_faultsbasic.disks",
        "ddn_s2a_faultsbasic.temp",
        "ddn_s2a_faultsbasic.ps",
        "ddn_s2a_faultsbasic.fans",
        "ddn_s2a_faultsbasic.pingfault",
        "ddn_s2a_faultsbasic.bootstatus",
        "ddn_s2a_faultsbasic.cachecoh",
        "ddn_s2a_faultsbasic.dualcomm",
        "ddn_s2a_faultsbasic.ethernet",
        "ddn_s2a_faultsbasic",
        "ddn_s2a_stats.readhits",
        "ddn_s2a_stats.io",
        "ddn_s2a_stats",
        "ddn_s2a_statsdelay",
        "ddn_s2a_uptime",
        "ddn_s2a_version",
        "decru_cpu",
        "decru_fans",
        "decru_perf",
        "decru_power",
        "decru_temps",
        "dell_chassis_fans",
        "dell_chassis_io",
        "dell_chassis_kvm",
        "dell_chassis_power",
        "dell_chassis_powersupplies",
        "dell_chassis_slots",
        "dell_chassis_status",
        "dell_chassis_temp",
        "dell_compellent_controller",
        "dell_compellent_disks",
        "dell_compellent_enclosure",
        "dell_compellent_folder",
        "dell_eql_storage",
        "dell_idrac_disks",
        "dell_idrac_fans",
        "dell_idrac_power",
        "dell_idrac_power.unit",
        "dell_idrac_raid",
        "dell_idrac_raid.bbu",
        "dell_idrac_virtdisks",
        "dell_om_disks",
        "dell_om_esmlog",
        "dell_om_fans",
        "dell_om_mem",
        "dell_om_power",
        "dell_om_power.unit",
        "dell_om_processors",
        "dell_om_sensors",
        "dell_om_vdisks",
        "dell_powerconnect_cpu",
        "dell_powerconnect_fans",
        "dell_powerconnect_psu",
        "dell_powerconnect_temp",
        "dell_poweredge_amperage",
        "dell_poweredge_amperage.power",
        "dell_poweredge_amperage.current",
        "dell_poweredge_cpu",
        "dell_poweredge_mem",
        "dell_poweredge_netdev",
        "dell_poweredge_pci",
        "dell_poweredge_status",
        "dell_poweredge_temp",
        "didactum_can_sensors_analog",
        "didactum_can_sensors_analog.humidity",
        "didactum_can_sensors_analog.voltage",
        "didactum_sensors_analog",
        "didactum_sensors_analog.humidity",
        "didactum_sensors_analog.voltage",
        "didactum_sensors_discrete",
        "didactum_sensors_outlet",
        "dmi_sysinfo",
        "dmraid",
        "dmraid.ldisks",
        "dmraid.pdisks",
        "docker_node_disk_usage",
        "docker_node_info",
        "docker_node_info.containers",
        "docsis_channels_downstream",
        "docsis_channels_upstream",
        "docsis_cm_status",
        "domino_info",
        "domino_mailqueues",
        "domino_transactions",
        "domino_users",
        "dotnet_clrmemory",
        "drbd",
        "drbd.net",
        "drbd.disk",
        "drbd.stats",
        "elasticsearch_cluster_health",
        "elasticsearch_cluster_health.shards",
        "elasticsearch_cluster_health.tasks",
        "elasticsearch_nodes",
        "eltek_battery",
        "eltek_battery.temp",
        "eltek_battery.supply",
        "eltek_fans",
        "eltek_outdoor_temp",
        "eltek_systemstatus",
        "emc_datadomain_disks",
        "emc_datadomain_fans",
        "emc_datadomain_fs",
        "emc_datadomain_mtree",
        "emc_datadomain_nvbat",
        "emc_datadomain_power",
        "emc_datadomain_temps",
        "emc_isilon",
        "emc_isilon.clusterhealth",
        "emc_isilon.nodehealth",
        "emc_isilon.nodes",
        "emc_isilon.names",
        "emc_isilon_cpu",
        "emc_isilon_diskstatus",
        "emc_isilon_fans",
        "emc_isilon_ifs",
        "emc_isilon_power",
        "emc_isilon_temp",
        "emc_isilon_temp.cpu",
        "emc_vplex_cpu",
        "emcvnx_agent",
        "emcvnx_disks",
        "emcvnx_hba",
        "emcvnx_hwstatus",
        "emcvnx_info",
        "emcvnx_info.storage",
        "emcvnx_info.link",
        "emcvnx_info.config",
        "emcvnx_info.io",
        "emcvnx_mirrorview",
        "emcvnx_raidgroups",
        "emcvnx_raidgroups.list_luns",
        "emcvnx_raidgroups.list_disks",
        "emcvnx_raidgroups.capacity",
        "emcvnx_raidgroups.capacity_contiguous",
        "emcvnx_sp_util",
        "emcvnx_storage_pools",
        "emcvnx_storage_pools.tiering",
        "emcvnx_storage_pools.tieringtypes",
        "emcvnx_storage_pools.deduplication",
        "emcvnx_writecache",
        "emerson_stat",
        "emerson_temp",
        "emka_modules",
        "emka_modules.alarm",
        "emka_modules.handle",
        "emka_modules.sensor_volt",
        "emka_modules.sensor_temp",
        "emka_modules.sensor_humid",
        "emka_modules.relay",
        "enterasys_cpu_util",
        "enterasys_fans",
        "enterasys_lsnat",
        "enterasys_powersupply",
        "enterasys_temp",
        "entersekt",
        "entersekt.emrerrors",
        "entersekt.ecerterrors",
        "entersekt.soaperrors",
        "entersekt.certexpiry",
        "epson_beamer_lamp",
        "esx_vsphere_counters.uptime",
        "esx_vsphere_counters.swap",
        "esx_vsphere_datastores",
        "esx_vsphere_hostsystem.state",
        "esx_vsphere_hostsystem.maintenance",
        "esx_vsphere_hostsystem.multipath",
        "esx_vsphere_licenses",
        "esx_vsphere_objects",
        "esx_vsphere_objects.count",
        "esx_vsphere_sensors",
        "esx_vsphere_vm.mounted_devices",
        "etherbox2_temp",
        "f5_bigip_apm",
        "f5_bigip_chassis_temp",
        "f5_bigip_conns",
        "f5_bigip_cpu_temp",
        "f5_bigip_fans",
        "f5_bigip_interfaces",
        "f5_bigip_mem",
        "f5_bigip_pool",
        "f5_bigip_psu",
        "f5_bigip_snat",
        "f5_bigip_vserver",
        "fast_lta_headunit",
        "fast_lta_headunit.status",
        "fast_lta_headunit.replication",
        "fast_lta_silent_cubes",
        "fast_lta_silent_cubes.capacity",
        "fast_lta_volumes",
        "fc_port",
        "filehandler",
        "filestats.single",
        "filestats",
        "fireeye_active_vms",
        "fireeye_bypass",
        "fireeye_content",
        "fireeye_fans",
        "fireeye_lic_active",
        "fireeye_lic_expiration",
        "fireeye_mail",
        "fireeye_mail.attachment",
        "fireeye_mail.url",
        "fireeye_mail.statistics",
        "fireeye_mail.received",
        "fireeye_mailq",
        "fireeye_powersupplies",
        "fireeye_quarantine",
        "fireeye_raid",
        "fireeye_raid.disks",
        "fireeye_smtp_conn",
        "fireeye_sys_image",
        "fireeye_temp",
        "fortigate_cpu",
        "fortigate_cpu_base",
        "fortigate_ipsecvpn",
        "fortigate_memory",
        "fortigate_memory_base",
        "fortigate_node",
        "fortigate_node.cpu",
        "fortigate_node.sessions",
        "fortigate_sessions",
        "fortigate_sessions_base",
        "fortigate_sslvpn",
        "fortinet_controller_aps",
        "fortisandbox_cpu_util",
        "fortisandbox_queues",
        "fsc_fans",
        "fsc_ipmi_mem_status",
        "fsc_sc2_cpu_status",
        "fsc_sc2_fans",
        "fsc_sc2_info",
        "fsc_sc2_mem_status",
        "fsc_sc2_power_consumption",
        "fsc_sc2_psu",
        "fsc_sc2_temp",
        "fsc_sc2_voltage",
        "fsc_subsystems",
        "fsc_temp",
        "genua_carp",
        "genua_fan",
        "genua_pfstate",
        "genua_state_correlation",
        "genua_vpn",
        "graylog_cluster_stats",
        "graylog_cluster_stats.elastic",
        "graylog_cluster_stats.mongodb",
        "graylog_cluster_traffic",
        "graylog_jvm",
        "graylog_license",
        "graylog_messages",
        "graylog_nodes",
        "graylog_sidecars",
        "graylog_sources",
        "gude_humidity",
        "gude_powerbanks",
        "gude_relayport",
        "gude_temp",
        "h3c_lanswitch_cpu",
        "h3c_lanswitch_sensors",
        "heartbeat_nodes",
        "heartbeat_rscstatus",
        "hepta",
        "hepta.syncmoduletimesyncstate",
        "hepta.ntpsysstratum",
        "hepta.syncmoduletimelocal",
        "hitachi_hnas_bossock",
        "hitachi_hnas_cifs",
        "hitachi_hnas_cpu",
        "hitachi_hnas_drives",
        "hitachi_hnas_fan",
        "hitachi_hnas_fpga",
        "hitachi_hnas_pnode",
        "hitachi_hnas_psu",
        "hitachi_hnas_quorumdevice",
        "hitachi_hnas_temp",
        "hitachi_hnas_vnode",
        "hitachi_hus_status",
        "hivemanager_devices",
        "hivemanager_ng_devices",
        "hp_blade",
        "hp_blade_blades",
        "hp_blade_fan",
        "hp_blade_manager",
        "hp_blade_psu",
        "hp_eml_sum",
        "hp_fan",
        "hp_hh3c_ext",
        "hp_hh3c_ext.states",
        "hp_hh3c_ext.cpu",
        "hp_hh3c_ext.mem",
        "hp_mcs_sensors",
        "hp_mcs_sensors.fan",
        "hp_mcs_system",
        "hp_procurve_cpu",
        "hp_procurve_mem",
        "hp_procurve_sensors",
        "hp_procurve_temp",
        "hp_proliant",
        "hp_proliant_cpu",
        "hp_proliant_da_cntlr",
        "hp_proliant_fans",
        "hp_proliant_raid",
        "hp_proliant_temp",
        "hp_psu.temp",
        "hp_psu",
        "hp_sts_drvbox",
        "hp_webmgmt_status",
        "hpux_fchba",
        "hpux_multipath",
        "hpux_serviceguard",
        "hpux_snmp_cs",
        "hpux_snmp_cs.cpu",
        "hpux_tunables",
        "hpux_tunables.nkthread",
        "hpux_tunables.nproc",
        "hpux_tunables.maxfiles_lim",
        "hpux_tunables.semmni",
        "hpux_tunables.shmseg",
        "hpux_tunables.semmns",
        "hr_cpu",
        "huawei_osn_fan",
        "huawei_osn_laser",
        "huawei_osn_power",
        "huawei_osn_temp",
        "huawei_switch_cpu",
        "huawei_switch_fan",
        "huawei_switch_mem",
        "huawei_switch_psu",
        "huawei_switch_stack",
        "huawei_switch_temp",
        "huawei_wlc_aps",
        "huawei_wlc_aps.status",
        "huawei_wlc_aps.cpu",
        "huawei_wlc_aps.mem",
        "huawei_wlc_aps.temp",
        "huawei_wlc_devs",
        "huawei_wlc_devs.mem",
        "huawei_wlc_devs.cpu",
        "hwg_humidity",
        "hwg_ste2",
        "hwg_ste2.humidity",
        "hwg_temp",
        "hyperv_checkpoints",
        "hyperv_vms",
        "hyperv_vmstatus",
        "ibm_imm_fan",
        "ibm_imm_health",
        "ibm_imm_voltage",
        "ibm_mq_channels",
        "ibm_mq_managers",
        "ibm_mq_plugin",
        "ibm_mq_queues",
        "ibm_rsa_health",
        "ibm_storage_ts",
        "ibm_storage_ts.status",
        "ibm_storage_ts.library",
        "ibm_storage_ts.drive",
        "ibm_svc_array",
        "ibm_svc_disks",
        "ibm_svc_enclosure",
        "ibm_svc_enclosurestats",
        "ibm_svc_enclosurestats.temp",
        "ibm_svc_enclosurestats.power",
        "ibm_svc_eventlog",
        "ibm_svc_host",
        "ibm_svc_license",
        "ibm_svc_mdisk",
        "ibm_svc_mdiskgrp",
        "ibm_svc_node",
        "ibm_svc_nodestats",
        "ibm_svc_nodestats.diskio",
        "ibm_svc_nodestats.iops",
        "ibm_svc_nodestats.disk_latency",
        "ibm_svc_nodestats.cpu_util",
        "ibm_svc_nodestats.cache",
        "ibm_svc_portfc",
        "ibm_svc_portsas",
        "ibm_svc_system",
        "ibm_tl_changer_devices",
        "ibm_tl_media_access_devices",
        "ibm_xraid_pdisks",
        "icom_repeater.ps_volt",
        "icom_repeater.pll_volt",
        "icom_repeater.temp",
        "icom_repeater",
        "infoblox_dhcp_stats",
        "infoblox_dns_stats",
        "infoblox_grid_status",
        "infoblox_replication_status",
        "informix_dbspaces",
        "informix_locks",
        "informix_logusage",
        "informix_sessions",
        "informix_status",
        "informix_tabextents",
        "innovaphone_channels",
        "innovaphone_cpu",
        "innovaphone_licenses",
        "innovaphone_mem",
        "innovaphone_priports_l1",
        "innovaphone_priports_l2",
        "innovaphone_temp",
        "intel_true_scale_chassis_temp",
        "intel_true_scale_fans",
        "intel_true_scale_psus",
        "intel_true_scale_sensors_temp",
        "ipr400_in_voltage",
        "ipr400_temp",
        "iptables",
        "ispro_sensors_digital",
        "ispro_sensors_humid",
        "ispro_sensors_temp",
        "janitza_umg",
        "janitza_umg.freq",
        "janitza_umg.temp",
        "jar_signature",
        "jira_custom_svc",
        "jira_workflow",
        "jolokia_generic.string",
        "jolokia_generic.rate",
        "jolokia_generic",
        "jolokia_info",
        "jolokia_jvm_garbagecollectors",
        "jolokia_jvm_memory",
        "jolokia_jvm_memory.pools",
        "jolokia_jvm_runtime",
        "jolokia_jvm_threading",
        "jolokia_jvm_threading.pool",
        "jolokia_metrics",
        "jolokia_metrics.serv_req",
        "jolokia_metrics.app_state",
        "jolokia_metrics.app_sess",
        "jolokia_metrics.requests",
        "jolokia_metrics.bea_queue",
        "jolokia_metrics.bea_requests",
        "jolokia_metrics.bea_threads",
        "jolokia_metrics.bea_sess",
        "jolokia_metrics.cache_hits",
        "jolokia_metrics.in_memory",
        "jolokia_metrics.on_disk",
        "jolokia_metrics.off_heap",
        "jolokia_metrics.writer",
        "juniper_alarm",
        "juniper_bgp_state",
        "juniper_fru",
        "juniper_fru.fan",
        "juniper_mem",
        "juniper_screenos_cpu",
        "juniper_screenos_fan",
        "juniper_screenos_mem",
        "juniper_screenos_temp",
        "juniper_screenos_vpn",
        "juniper_temp",
        "juniper_trpz_flash",
        "juniper_trpz_info",
        "juniper_trpz_mem",
        "juniper_trpz_power",
        "keepalived",
        "kemp_loadmaster_ha",
        "kentix_amp_sensors",
        "kentix_amp_sensors.humidity",
        "kentix_amp_sensors.smoke",
        "kentix_amp_sensors.leakage",
        "kentix_co",
        "kentix_dewpoint",
        "kentix_humidity",
        "kentix_motion",
        "kentix_temp",
        "kernel",
        "kernel.performance",
        "knuerr_rms_humidity",
        "knuerr_rms_temp",
        "knuerr_sensors",
        "lgp_info",
        "lgp_pdu_aux",
        "lgp_pdu_info",
        "libelle_business_shadow",
        "libelle_business_shadow.info",
        "libelle_business_shadow.status",
        "libelle_business_shadow.process",
        "libelle_business_shadow.archive_dir",
        "logins",
        "lparstat_aix",
        "lparstat_aix.cpu_util",
        "lvm_lvs",
        "lvm_vgs",
        "mailman_lists",
        "mbg_lantime_ng_fan",
        "mbg_lantime_ng_power",
        "mbg_lantime_ng_refclock.gps",
        "mbg_lantime_ng_refclock",
        "mbg_lantime_ng_state",
        "mbg_lantime_ng_temp",
        "mbg_lantime_refclock",
        "mbg_lantime_state",
        "mcafee_emailgateway_agent",
        "mcafee_emailgateway_av_authentium",
        "mcafee_emailgateway_av_mcafee",
        "mcafee_emailgateway_bridge",
        "mcafee_emailgateway_entities",
        "mcafee_emailgateway_smtp",
        "mcafee_emailgateway_spam_mcafee",
        "md",
        "megaraid_bbu",
        "mem.linux",
        "mem.vmalloc",
        "mikrotik_signal",
        "mkbackup",
        "mkbackup.site",
        "mkeventd_status",
        "mknotifyd",
        "mknotifyd.connection",
        "mongodb_cluster",
        "mongodb_cluster.collections",
        "mongodb_cluster.balancer",
        "mongodb_collections",
        "mongodb_connections",
        "mongodb_counters",
        "mongodb_flushing",
        "mongodb_instance",
        "mongodb_locks",
        "mongodb_mem",
        "mongodb_replica_set",
        "mongodb_replica_set.election",
        "mongodb_replication_info",
        "moxa_iologik_register",
        "mq_queues",
        "msexch_activesync",
        "msexch_autodiscovery",
        "msexch_availability",
        "msexch_dag",
        "msexch_dag.dbcopy",
        "msexch_dag.contentindex",
        "msexch_dag.copyqueue",
        "msexch_database",
        "msexch_isclienttype",
        "msexch_isstore",
        "msexch_owa",
        "msexch_replhealth",
        "msexch_rpcclientaccess",
        "msoffice_licenses",
        "msoffice_serviceplans",
        "mssql_connections",
        "mssql_instance",
        "mysql",
        "mysql.sessions",
        "mysql.innodb_io",
        "mysql.connections",
        "mysql.galerasync",
        "mysql.galeradonor",
        "mysql.galerastartup",
        "mysql.galerasize",
        "mysql.galerastatus",
        "mysql_ping",
        "mysql_slave",
        "netapp_api_aggr",
        "netapp_api_cluster",
        "netapp_api_connection",
        "netapp_api_cpu",
        "netapp_api_cpu.utilization",
        "netapp_api_cpu.nvram_bat",
        "netapp_api_disk.summary",
        "netapp_api_environment",
        "netapp_api_environment.fan_faults",
        "netapp_api_environment.temperature",
        "netapp_api_environment.fans",
        "netapp_api_environment.voltage",
        "netapp_api_environment.current",
        "netapp_api_fcp",
        "netapp_api_info",
        "netapp_api_protocol",
        "netapp_api_snapshots",
        "netapp_api_status",
        "netapp_api_systemtime",
        "netapp_api_temp",
        "netapp_api_vf_status",
        "netapp_api_vs_status",
        "netapp_api_vs_traffic",
        "netapp_cluster",
        "netapp_cpu",
        "netapp_fcpio",
        "netapp_vfiler",
        "netctr",
        "netctr.combined",
        "netextreme_cpu_util",
        "netextreme_fan",
        "netextreme_psu",
        "netextreme_psu_in",
        "netextreme_psu_out",
        "netextreme_temp",
        "netgear_fans",
        "netgear_powersupplies",
        "netgear_temp",
        "netscaler_cpu",
        "netscaler_dnsrates",
        "netscaler_ha",
        "netscaler_health",
        "netscaler_health.fan",
        "netscaler_health.temp",
        "netscaler_health.psu",
        "netscaler_mem",
        "netstat",
        "nfsexports",
        "nginx_status",
        "nimble_latency",
        "nimble_latency.write",
        "nimble_volumes",
        "nullmailer_mailq",
        "nvidia",
        "nvidia.temp",
        "nvidia.temp_core",
        "nvidia.errors",
        "omd_apache",
        "openbsd_sensors",
        "openbsd_sensors.fan",
        "openbsd_sensors.voltage",
        "openbsd_sensors.powersupply",
        "openbsd_sensors.indicator",
        "openbsd_sensors.drive",
        "openhardwaremonitor",
        "openhardwaremonitor.temperature",
        "openhardwaremonitor.power",
        "openhardwaremonitor.fan",
        "openhardwaremonitor.smart",
        "openvpn_clients",
        "oracle_crs_version",
        "oracle_crs_voting",
        "oracle_dataguard_stats",
        "oracle_diva_csm",
        "oracle_diva_csm.drive",
        "oracle_diva_csm.actor",
        "oracle_diva_csm.archive",
        "oracle_diva_csm.objects",
        "oracle_diva_csm.tapes",
        "oracle_jobs",
        "oracle_locks",
        "oracle_logswitches",
        "oracle_longactivesessions",
        "oracle_recovery_area",
        "oracle_recovery_status",
        "oracle_sessions",
        "oracle_undostat",
        "oracle_version",
        "orion_backup",
        "orion_batterytest",
        "orion_system",
        "orion_system.charging",
        "orion_system.dc",
        "packeteer_fan_status",
        "packeteer_ps_status",
        "palo_alto_sessions",
        "pandacom_10gm_temp",
        "pandacom_fan",
        "pandacom_fc_temp",
        "pandacom_psu",
        "pandacom_sys_temp",
        "papouch_th2e_sensors",
        "papouch_th2e_sensors.dewpoint",
        "papouch_th2e_sensors.humidity",
        "perle_chassis",
        "perle_chassis.temp",
        "perle_chassis_slots",
        "perle_modules_cm1000",
        "perle_modules_cm1110",
        "perle_modules_mgt",
        "perle_psmu",
        "perle_psmu.fan",
        "pfsense_status",
        "plesk_backups",
        "plesk_domains",
        "poseidon_inputs",
        "poseidon_temp",
        "postfix_mailq",
        "postgres_bloat",
        "postgres_conn_time",
        "postgres_connections",
        "postgres_locks",
        "postgres_sessions",
        "postgres_stat_database",
        "postgres_stat_database.size",
        "printer_supply_ricoh",
        "prometheus_custom",
        "pse_poe",
        "pulse_secure_cpu_util",
        "pulse_secure_disk_util",
        "pulse_secure_log_util",
        "pulse_secure_mem_util",
        "pulse_secure_temp",
        "pvecm_nodes",
        "pvecm_status",
        "qlogic_fcport",
        "qlogic_sanbox",
        "qlogic_sanbox.temp",
        "qlogic_sanbox.psu",
        "qlogic_sanbox_fabric_element",
        "qmail_stats",
        "qnap_disks",
        "qnap_fans",
        "qnap_hdd_temp",
        "quanta_fan",
        "quanta_temperature",
        "quanta_voltage",
        "ra32e_power",
        "ra32e_sensors",
        "ra32e_sensors.humidity",
        "ra32e_sensors.voltage",
        "ra32e_sensors.power",
        "ra32e_switch",
        "rabbitmq_cluster",
        "rabbitmq_cluster.messages",
        "rabbitmq_cluster.stats",
        "rabbitmq_nodes",
        "rabbitmq_nodes.filedesc",
        "rabbitmq_nodes.sockets",
        "rabbitmq_nodes.mem",
        "rabbitmq_nodes.uptime",
        "rabbitmq_nodes.gc",
        "rabbitmq_queues",
        "rabbitmq_vhosts",
        "raritan_emx",
        "raritan_emx.fan",
        "raritan_emx.binary",
        "raritan_emx_sensors",
        "raritan_emx_sensors.temp",
        "raritan_emx_sensors.airflow",
        "raritan_emx_sensors.humidity",
        "raritan_emx_sensors.pressure",
        "raritan_pdu_inlet",
        "raritan_pdu_inlet_summary",
        "raritan_pdu_ocprot",
        "raritan_pdu_outletcount",
        "raritan_pdu_plugs",
        "raritan_px2_sensors",
        "raritan_px2_sensors.airflow",
        "raritan_px2_sensors.humidity",
        "raritan_px2_sensors.pressure",
        "raritan_px_outlets",
        "raritan_px_sensors",
        "raritan_px_sensors.humidity",
        "raritan_px_sensors.binary",
        "rds_licenses",
        "redis_info",
        "redis_info.persistence",
        "redis_info.clients",
        "rms200_temp",
        "rstcli",
        "rstcli.pdisks",
        "safenet_hsm.events",
        "safenet_hsm",
        "safenet_ntls.connrate",
        "safenet_ntls.expiration",
        "safenet_ntls.links",
        "safenet_ntls.clients",
        "safenet_ntls",
        "salesforce_instances",
        "sansymphony_alerts",
        "sansymphony_ports",
        "sansymphony_serverstatus",
        "sansymphony_virtualdiskstatus",
        "sap_hana_connect",
        "sap_hana_ess_migration",
        "sap_state",
        "saprouter_cert",
        "scaleio_devices",
        "scaleio_mdm",
        "scaleio_pd",
        "scaleio_pd.status",
        "scaleio_sds",
        "scaleio_sds.status",
        "scaleio_system",
        "security_master",
        "security_master.humidity",
        "security_master.temp",
        "seh_ports",
        "sensatronics_temp",
        "sentry_pdu_systempower",
        "siemens_plc",
        "siemens_plc.temp",
        "siemens_plc.flag",
        "siemens_plc.duration",
        "siemens_plc.counter",
        "siemens_plc.info",
        "siemens_plc_cpu_state",
        "silverpeak_VX6000",
        "skype",
        "skype.mcu",
        "skype.conferencing",
        "skype.sip_stack",
        "skype.mediation_server",
        "skype.edge_auth",
        "skype.edge",
        "skype.data_proxy",
        "skype.xmpp_proxy",
        "skype.mobile",
        "smart.temp",
        "sni_octopuse_cpu",
        "sni_octopuse_status",
        "sni_octopuse_trunks",
        "solaris_fmadm",
        "solaris_multipath",
        "solaris_prtdiag_status",
        "sophos",
        "sophos_cpu",
        "sophos_disk",
        "sophos_memory",
        "sophos_messages",
        "splunk_alerts",
        "splunk_health",
        "splunk_jobs",
        "splunk_license_state",
        "splunk_license_usage",
        "statgrab_cpu",
        "steelhead_connections",
        "steelhead_peers",
        "steelhead_status",
        "storcli_pdisks",
        "storeonce4x_alerts",
        "storeonce4x_d2d_services",
        "stormshield_cluster",
        "stormshield_cluster_node",
        "stormshield_cpu_temp",
        "stormshield_disk",
        "stormshield_info",
        "stormshield_packets",
        "stormshield_policy",
        "stormshield_route",
        "stormshield_updates",
        "strem1_sensors",
        "stulz_alerts",
        "stulz_humidity",
        "stulz_powerstate",
        "stulz_pump",
        "stulz_temp",
        "supermicro",
        "supermicro_sensors",
        "supermicro_smart",
        "superstack3_sensors",
        "suseconnect",
        "sylo",
        "sym_brightmail_queues",
        "symantec_av_progstate",
        "symantec_av_quarantine",
        "symantec_av_updates",
        "systemtime",
        "teracom_tcw241_analog",
        "teracom_tcw241_digital",
        "tinkerforge",
        "tinkerforge.temperature",
        "tinkerforge.ambient",
        "tinkerforge.humidity",
        "tinkerforge.motion",
        "tplink_cpu",
        "tplink_mem",
        "tplink_poe",
        "tplink_poe_summary",
        "tsm_drives",
        "tsm_paths",
        "tsm_scratch",
        "tsm_sessions",
        "tsm_storagepools",
        "ucd_cpu_util",
        "ucd_disk",
        "ucd_mem",
        "ucd_processes",
        "ucs_bladecenter_fans",
        "ucs_bladecenter_fans.temp",
        "ucs_bladecenter_faultinst",
        "ucs_bladecenter_psu",
        "ucs_bladecenter_psu.switch_power",
        "ucs_bladecenter_psu.chassis_temp",
        "ucs_bladecenter_topsystem",
        "ucs_c_rack_server_fans",
        "ucs_c_rack_server_faultinst",
        "ucs_c_rack_server_health",
        "ucs_c_rack_server_led",
        "ucs_c_rack_server_power",
        "ucs_c_rack_server_psu",
        "ucs_c_rack_server_psu.voltage",
        "ucs_c_rack_server_temp",
        "ucs_c_rack_server_topsystem",
        "unitrends_backup",
        "unitrends_replication",
        "ups_bat_temp",
        "ups_cps_battery.temp",
        "ups_cps_battery",
        "ups_cps_inphase",
        "ups_cps_outphase",
        "ups_eaton_enviroment",
        "ups_in_freq",
        "ups_in_voltage",
        "ups_modulys_alarms",
        "ups_modulys_inphase",
        "ups_modulys_outphase",
        "ups_out_voltage",
        "ups_socomec_capacity",
        "ups_socomec_in_voltage",
        "ups_socomec_out_source",
        "ups_socomec_out_voltage",
        "ups_socomec_outphase",
        "ups_test",
        "varnish",
        "varnish.cache",
        "varnish.client",
        "varnish.backend",
        "varnish.fetch",
        "varnish.esi",
        "varnish.objects",
        "varnish.worker",
        "varnish.cache_hit_ratio",
        "varnish.backend_success_ratio",
        "varnish.worker_thread_ratio",
        "vbox_guest",
        "veeam_client",
        "veeam_jobs",
        "veeam_tapejobs",
        "viprinet_firmware",
        "viprinet_mem",
        "viprinet_power",
        "viprinet_router",
        "viprinet_serial",
        "viprinet_temp",
        "vms_cpu",
        "vms_queuejobs",
        "vms_system",
        "vms_system.ios",
        "vms_system.procs",
        "vms_users",
        "vnx_version",
        "vutlan_ems_humidity",
        "vutlan_ems_leakage",
        "vutlan_ems_temp",
        "vxvm_objstatus",
        "wagner_titanus_topsense",
        "wagner_titanus_topsense.info",
        "wagner_titanus_topsense.overall_status",
        "wagner_titanus_topsense.alarm",
        "wagner_titanus_topsense.smoke",
        "wagner_titanus_topsense.chamber_deviation",
        "wagner_titanus_topsense.airflow_deviation",
        "wagner_titanus_topsense.temp",
        "watchdog_sensors",
        "watchdog_sensors.temp",
        "watchdog_sensors.humidity",
        "watchdog_sensors.dew",
        "win_license",
        "win_netstat",
        "win_printers",
        "windows_broadcom_bonding",
        "windows_multipath",
        "winperf",
        "winperf.cpuusage",
        "winperf.diskstat",
        "winperf_mem",
        "winperf_ts_sessions",
        "wmi_webservices",
        "wmic_process",
        "wut_webtherm",
        "wut_webtherm.pressure",
        "wut_webtherm.humidity",
    }
    current_legacy_checks = set(fix_plugin_legacy.check_info)

    new_legacy_checks = current_legacy_checks - expected_legacy_checks
    assert not new_legacy_checks, (
        "Found these new legacy checks: %s. Implementing new legacy "
        "checks is forbidden, please use the new API." % ", ".join(sorted(new_legacy_checks))
    )

    vanished_legacy_checks = expected_legacy_checks - current_legacy_checks
    assert not vanished_legacy_checks, (
        "The following legacy checks have vanished: %s. Please "
        "remove them from 'allowed_legacy_checks' in this unit "
        "test." % ", ".join(sorted(vanished_legacy_checks))
    )
