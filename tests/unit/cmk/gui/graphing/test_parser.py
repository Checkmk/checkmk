#!/usr/bin/env python3
# Copyright (C) 2023 Checkmk GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

import pytest

from cmk.gui.graphing._parser import parse_unit

from cmk.graphing.v1 import Localizable, PhysicalUnit, ScientificUnit, Unit


@pytest.mark.parametrize(
    "unit, expected_symbol",
    [
        pytest.param(
            Unit.BAR,
            "bar",
            id="BAR",
        ),
        pytest.param(
            Unit.BIT_IEC,
            "bits",
            id="BIT_IEC",
        ),
        pytest.param(
            Unit.BITS_IEC_PER_SECOND,
            "bits/s",
            id="BITS_IEC_PER_SECOND,",
        ),
        pytest.param(
            Unit.BIT_SI,
            "bits",
            id="BIT_SI",
        ),
        pytest.param(
            Unit.BITS_SI_PER_SECOND,
            "bits/s",
            id="BITS_SI_PER_SECOND",
        ),
        pytest.param(
            Unit.BYTE_IEC,
            "bytes",
            id="BYTE_IEC",
        ),
        pytest.param(
            Unit.BYTES_IEC_PER_DAY,
            "bytes/d",
            id="BYTES_IEC_PER_DAY",
        ),
        pytest.param(
            Unit.BYTES_IEC_PER_OPERATION,
            "bytes/op",
            id="BYTES_IEC_PER_OPERATION",
        ),
        pytest.param(
            Unit.BYTES_IEC_PER_SECOND,
            "bytes/s",
            id="BYTES_IEC_PER_SECOND",
        ),
        pytest.param(
            Unit.BYTE_SI,
            "bytes",
            id="BYTE_SI",
        ),
        pytest.param(
            Unit.BYTES_SI_PER_DAY,
            "bytes/d",
            id="BYTES_SI_PER_DAY",
        ),
        pytest.param(
            Unit.BYTES_SI_PER_OPERATION,
            "bytes/op",
            id="BYTES_SI_PER_OPERATION",
        ),
        pytest.param(
            Unit.BYTES_SI_PER_SECOND,
            "bytes/s",
            id="BYTES_SI_PER_SECOND",
        ),
        pytest.param(
            Unit.COUNT,
            "",
            id="COUNT",
        ),
        pytest.param(
            Unit.DECIBEL,
            "dB",
            id="DECIBEL",
        ),
        pytest.param(
            Unit.DECIBEL_MILLIVOLT,
            "dBmV",
            id="DECIBEL_MILLIVOLT",
        ),
        pytest.param(
            Unit.DECIBEL_MILLIWATT,
            "dBm",
            id="DECIBEL_MILLIWATT",
        ),
        pytest.param(
            Unit.DOLLAR,
            "$",
            id="DOLLAR",
        ),
        pytest.param(
            Unit.ELETRICAL_ENERGY,
            "Wh",
            id="ELETRICAL_ENERGY",
        ),
        pytest.param(
            Unit.EURO,
            "€",
            id="EURO",
        ),
        pytest.param(
            Unit.LITER_PER_SECOND,
            "l/s",
            id="LITER_PER_SECOND",
        ),
        pytest.param(
            Unit.NUMBER,
            "",
            id="NUMBER",
        ),
        pytest.param(
            Unit.PARTS_PER_MILLION,
            "ppm",
            id="PARTS_PER_MILLION",
        ),
        pytest.param(
            Unit.PERCENTAGE,
            "%",
            id="PERCENTAGE",
        ),
        pytest.param(
            Unit.PERCENTAGE_PER_METER,
            "%/m",
            id="PERCENTAGE_PER_METER",
        ),
        pytest.param(
            Unit.PER_SECOND,
            "1/s",
            id="PER_SECOND",
        ),
        pytest.param(
            Unit.READ_CAPACITY_UNIT,
            "RCU",
            id="READ_CAPACITY_UNIT",
        ),
        pytest.param(
            Unit.REVOLUTIONS_PER_MINUTE,
            "rpm",
            id="REVOLUTIONS_PER_MINUTE",
        ),
        pytest.param(
            Unit.SECONDS_PER_SECOND,
            "s/s",
            id="SECONDS_PER_SECOND",
        ),
        pytest.param(
            Unit.VOLT_AMPERE,
            "VA",
            id="VOLT_AMPERE",
        ),
        pytest.param(
            Unit.WRITE_CAPACITY_UNIT,
            "WCU",
            id="WRITE_CAPACITY_UNIT",
        ),
        pytest.param(
            Unit.AMPERE,
            "A",
            id="AMPERE",
        ),
        pytest.param(
            Unit.CANDELA,
            "cd",
            id="CANDELA",
        ),
        pytest.param(
            Unit.KELVIN,
            "K",
            id="KELVIN",
        ),
        pytest.param(
            Unit.KILOGRAM,
            "kg",
            id="KILOGRAM",
        ),
        pytest.param(
            Unit.METRE,
            "m",
            id="METRE",
        ),
        pytest.param(
            Unit.MOLE,
            "mol",
            id="MOLE",
        ),
        pytest.param(
            Unit.SECOND,
            "s",
            id="SECOND",
        ),
        pytest.param(
            Unit.BECQUEREL,
            "Bq",
            id="BECQUEREL",
        ),
        pytest.param(
            Unit.COULOMB,
            "C",
            id="COULOMB",
        ),
        pytest.param(
            Unit.DEGREE_CELSIUS,
            "°C",
            id="DEGREE_CELSIUS",
        ),
        pytest.param(
            Unit.FARAD,
            "F",
            id="FARAD",
        ),
        pytest.param(
            Unit.GRAY,
            "Gy",
            id="GRAY",
        ),
        pytest.param(
            Unit.HENRY,
            "H",
            id="HENRY",
        ),
        pytest.param(
            Unit.HERTZ,
            "Hz",
            id="HERTZ",
        ),
        pytest.param(
            Unit.JOULE,
            "J",
            id="JOULE",
        ),
        pytest.param(
            Unit.KATAL,
            "kat",
            id="KATAL",
        ),
        pytest.param(
            Unit.LUMEN,
            "lm",
            id="LUMEN",
        ),
        pytest.param(
            Unit.LUX,
            "lx",
            id="LUX",
        ),
        pytest.param(
            Unit.NEWTON,
            "N",
            id="NEWTON",
        ),
        pytest.param(
            Unit.OHM,
            "Ω",
            id="OHM",
        ),
        pytest.param(
            Unit.PASCAL,
            "Pa",
            id="PASCAL",
        ),
        pytest.param(
            Unit.RADIAN,
            "rad",
            id="RADIAN",
        ),
        pytest.param(
            Unit.SIEMENS,
            "S",
            id="SIEMENS",
        ),
        pytest.param(
            Unit.SIEVERT,
            "Sv",
            id="SIEVERT",
        ),
        pytest.param(
            Unit.STERADIAN,
            "sr",
            id="STERADIAN",
        ),
        pytest.param(
            Unit.TESLA,
            "T",
            id="TESLA",
        ),
        pytest.param(
            Unit.VOLT,
            "V",
            id="VOLT",
        ),
        pytest.param(
            Unit.WATT,
            "W",
            id="WATT",
        ),
        pytest.param(
            Unit.WEBER,
            "Wb",
            id="WEBER",
        ),
    ],
)
def test_parse_unit(unit: Unit, expected_symbol: str) -> None:
    assert parse_unit(unit)["symbol"] == expected_symbol


def test_parse_physical_unit() -> None:
    unit_info = parse_unit(PhysicalUnit(Localizable("Title"), "symbol"))
    assert unit_info["title"] == "Title"
    assert unit_info["symbol"] == "symbol"
    assert unit_info["render"](0.00024) == "240 µsymbol"
    assert unit_info["js_render"] == "v => cmk.number_format.physical_precision(v, 3, 'symbol')"


def test_parse_scientific_unit() -> None:
    unit_info = parse_unit(ScientificUnit(Localizable("Title"), "symbol"))
    assert unit_info["title"] == "Title"
    assert unit_info["symbol"] == "symbol"
    assert unit_info["render"](0.00024) == "2.40e-4 symbol"
    assert unit_info["js_render"] == "v => cmk.number_format.scientific(v, 2) + 'symbol'"
