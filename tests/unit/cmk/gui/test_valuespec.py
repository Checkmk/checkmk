import pytest
import cmk.gui.valuespec as vs
from testlib import on_time


@pytest.mark.parametrize("entry, result", [
    ("m0", ((1567296000.0, 1567702200.0), "September 2019")),
    ("m1", ((1564617600.0, 1567296000.0), "August 2019")),
    ("m3", ((1559347200.0, 1567296000.0), "June 2019 - August 2019")),
    ("y1", ((1514764800.0, 1546300800.0), "2018")),
    ("y0", ((1546300800.0, 1567702200.0), "2019")),
    ("4h", ((1567687800.0, 1567702200.0), u"Last 4 hours")),
    ("25h", ((1567612200.0, 1567702200.0), u"Last 25 hours")),
    ("8d", ((1567011000.0, 1567702200.0), u"Last 8 days")),
    ("35d", ((1564678200.0, 1567702200.0), u"Last 35 days")),
    ("400d", ((1533142200.0, 1567702200.0), u"Last 400 days")),
    ("d0", ((1567641600.0, 1567702200.0), u"Today")),
    ("d1", ((1567555200.0, 1567641600.0), u"Yesterday")),
    ("w0", ((1567382400.0, 1567702200.0), u"This week")),
    ("w1", ((1566777600.0, 1567382400.0), u"Last week")),
    (("date", (1536098400.0, 1567288800.0)),
     ((1536098400.0, 1567296000.0), "2018-09-04 ... 2019-09-01")),
    (("until", 1577232000), ((1567702200.0, 1577232000.0), u"2019-12-25")),
    (("time", (1549374782.0, 1567687982.0)),
     ((1549374782.0, 1567687982.0), "2019-02-05 ... 2019-09-05")),
    (("age", 2 * 3600), ((1567695000.0, 1567702200.0), u"The last 2 hours")),
    (("next", 3 * 3600), ((1567702200.0, 1567713000.0), u"The next 3 hours")),
])
def test_timerange(entry, result):
    with on_time("2019-09-05 16:50", "UTC"):
        assert vs.Timerange().compute_range(entry) == result


@pytest.mark.parametrize("entry, refutcdate, result", [
    ("m0", "2019-09-15 15:09", ((1567296000.0, 1568560140.0), "September 2019")),
    ("m1", "2019-01-12", ((1543622400.0, 1546300800.0), "December 2018")),
    ("m-1", "2019-09-15 15:09", ((1567296000.0, 1569888000.0), "September 2019")),
    ("m2", "2019-02-12", ((1543622400.0, 1548979200.0), "December 2018 - January 2019")),
    ("m3", "2019-02-12", ((1541030400.0, 1548979200.0), "November 2018 - January 2019")),
    ("m-3", "2019-02-12", ((1548979200.0, 1556668800.0), "February 2019 - April 2019")),
    ("m-3", "2018-12-12", ((1543622400.0, 1551398400.0), "December 2018 - February 2019")),
    ("m6", "2019-02-12", ((1533081600.0, 1548979200.0), "August 2018 - January 2019")),
    ("m-6", "2019-02-12", ((1548979200.0, 1564617600.0), "February 2019 - July 2019")),
    ("y0", "2019-09-15", ((1546300800.0, 1568505600.0), "2019")),
    ("y1", "2019-09-15", ((1514764800.0, 1546300800.0), "2018")),
    ("y-1", "2019-09-15", ((1546300800.0, 1577836800.0), "2019")),
])
def test_timerange2(entry, refutcdate, result):
    with on_time(refutcdate, "UTC"):
        assert vs.Timerange().compute_range(entry) == result


@pytest.mark.parametrize("args, result", [
    ((1546300800, 1, "m"), 1548979200),
    ((1546300800, 3, "m"), 1554076800),
    ((1546300800, -1, "m"), 1543622400),
    ((1546300800, -2, "m"), 1541030400),
    ((1546300800, -3, "m"), 1538352000),
    ((1538352000, 3, "m"), 1546300800),
    ((1546300800, -6, "m"), 1530403200),
])
def test_timehelper_add(args, result):
    with on_time("2019-09-05", "UTC"):
        assert vs.TimeHelper.add(*args) == result
